
XDRIVE_TIKVIC_V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006fa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  00006fa8  0000703c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001281  00802008  00802008  00007044  2**0
                  ALLOC
  3 .stab         000035f4  00000000  00000000  00007044  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f10  00000000  00000000  0000a638  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000b548  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003b0  00000000  00000000  0000b577  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a170  00000000  00000000  0000b927  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001269  00000000  00000000  00015a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003b99  00000000  00000000  00016d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c78  00000000  00000000  0001a89c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002fe5  00000000  00000000  0001b514  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a70  00000000  00000000  0001e4f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000308  00000000  00000000  00020f69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
       2:	00 00       	nop
       4:	43 c1       	rjmp	.+646    	; 0x28c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c1       	rjmp	.+642    	; 0x28c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c1       	rjmp	.+638    	; 0x28c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c1       	rjmp	.+634    	; 0x28c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c1       	rjmp	.+630    	; 0x28c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c1       	rjmp	.+626    	; 0x28c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c1       	rjmp	.+622    	; 0x28c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c1       	rjmp	.+618    	; 0x28c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c1       	rjmp	.+614    	; 0x28c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c1       	rjmp	.+610    	; 0x28c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c1       	rjmp	.+606    	; 0x28c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c1       	rjmp	.+602    	; 0x28c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c1       	rjmp	.+598    	; 0x28c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c1       	rjmp	.+594    	; 0x28c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c1       	rjmp	.+590    	; 0x28c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c1       	rjmp	.+586    	; 0x28c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c1       	rjmp	.+582    	; 0x28c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c1       	rjmp	.+578    	; 0x28c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c1       	rjmp	.+574    	; 0x28c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c1       	rjmp	.+570    	; 0x28c <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c1       	rjmp	.+566    	; 0x28c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c1       	rjmp	.+562    	; 0x28c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	17 c1       	rjmp	.+558    	; 0x28c <__bad_interrupt>
      5e:	00 00       	nop
      60:	15 c1       	rjmp	.+554    	; 0x28c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__vector_25>
      68:	0c 94 c4 23 	jmp	0x4788	; 0x4788 <__vector_26>
      6c:	0f c1       	rjmp	.+542    	; 0x28c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c1       	rjmp	.+538    	; 0x28c <__bad_interrupt>
      72:	00 00       	nop
      74:	0b c1       	rjmp	.+534    	; 0x28c <__bad_interrupt>
      76:	00 00       	nop
      78:	09 c1       	rjmp	.+530    	; 0x28c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	07 c1       	rjmp	.+526    	; 0x28c <__bad_interrupt>
      7e:	00 00       	nop
      80:	05 c1       	rjmp	.+522    	; 0x28c <__bad_interrupt>
      82:	00 00       	nop
      84:	03 c1       	rjmp	.+518    	; 0x28c <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 f9 23 	jmp	0x47f2	; 0x47f2 <__vector_34>
      8c:	ff c0       	rjmp	.+510    	; 0x28c <__bad_interrupt>
      8e:	00 00       	nop
      90:	fd c0       	rjmp	.+506    	; 0x28c <__bad_interrupt>
      92:	00 00       	nop
      94:	fb c0       	rjmp	.+502    	; 0x28c <__bad_interrupt>
      96:	00 00       	nop
      98:	f9 c0       	rjmp	.+498    	; 0x28c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f7 c0       	rjmp	.+494    	; 0x28c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f5 c0       	rjmp	.+490    	; 0x28c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f3 c0       	rjmp	.+486    	; 0x28c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f1 c0       	rjmp	.+482    	; 0x28c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ef c0       	rjmp	.+478    	; 0x28c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ed c0       	rjmp	.+474    	; 0x28c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	eb c0       	rjmp	.+470    	; 0x28c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e9 c0       	rjmp	.+466    	; 0x28c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e7 c0       	rjmp	.+462    	; 0x28c <__bad_interrupt>
      be:	00 00       	nop
      c0:	e5 c0       	rjmp	.+458    	; 0x28c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e3 c0       	rjmp	.+454    	; 0x28c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e1 c0       	rjmp	.+450    	; 0x28c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	df c0       	rjmp	.+446    	; 0x28c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	dd c0       	rjmp	.+442    	; 0x28c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b9 c3       	rjmp	.+1906   	; 0x848 <__vector_53>
      d6:	00 00       	nop
      d8:	d9 c0       	rjmp	.+434    	; 0x28c <__bad_interrupt>
      da:	00 00       	nop
      dc:	d7 c0       	rjmp	.+430    	; 0x28c <__bad_interrupt>
      de:	00 00       	nop
      e0:	d5 c0       	rjmp	.+426    	; 0x28c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d3 c0       	rjmp	.+422    	; 0x28c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	96 c4       	rjmp	.+2348   	; 0xa16 <__vector_58>
      ea:	00 00       	nop
      ec:	0c 94 5a 23 	jmp	0x46b4	; 0x46b4 <__vector_59>
      f0:	cd c0       	rjmp	.+410    	; 0x28c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__vector_61>
      f8:	0c 94 8f 23 	jmp	0x471e	; 0x471e <__vector_62>
      fc:	c7 c0       	rjmp	.+398    	; 0x28c <__bad_interrupt>
      fe:	00 00       	nop
     100:	c5 c0       	rjmp	.+394    	; 0x28c <__bad_interrupt>
     102:	00 00       	nop
     104:	c3 c0       	rjmp	.+390    	; 0x28c <__bad_interrupt>
     106:	00 00       	nop
     108:	c1 c0       	rjmp	.+386    	; 0x28c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	bf c0       	rjmp	.+382    	; 0x28c <__bad_interrupt>
     10e:	00 00       	nop
     110:	bd c0       	rjmp	.+378    	; 0x28c <__bad_interrupt>
     112:	00 00       	nop
     114:	bb c0       	rjmp	.+374    	; 0x28c <__bad_interrupt>
     116:	00 00       	nop
     118:	b9 c0       	rjmp	.+370    	; 0x28c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b7 c0       	rjmp	.+366    	; 0x28c <__bad_interrupt>
     11e:	00 00       	nop
     120:	b5 c0       	rjmp	.+362    	; 0x28c <__bad_interrupt>
     122:	00 00       	nop
     124:	b3 c0       	rjmp	.+358    	; 0x28c <__bad_interrupt>
     126:	00 00       	nop
     128:	b1 c0       	rjmp	.+354    	; 0x28c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	af c0       	rjmp	.+350    	; 0x28c <__bad_interrupt>
     12e:	00 00       	nop
     130:	ad c0       	rjmp	.+346    	; 0x28c <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 06 23 	jmp	0x460c	; 0x460c <__vector_77>
     138:	a9 c0       	rjmp	.+338    	; 0x28c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a7 c0       	rjmp	.+334    	; 0x28c <__bad_interrupt>
     13e:	00 00       	nop
     140:	a5 c0       	rjmp	.+330    	; 0x28c <__bad_interrupt>
     142:	00 00       	nop
     144:	a3 c0       	rjmp	.+326    	; 0x28c <__bad_interrupt>
     146:	00 00       	nop
     148:	a1 c0       	rjmp	.+322    	; 0x28c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 30 23 	jmp	0x4660	; 0x4660 <__vector_83>
     150:	9d c0       	rjmp	.+314    	; 0x28c <__bad_interrupt>
     152:	00 00       	nop
     154:	9b c0       	rjmp	.+310    	; 0x28c <__bad_interrupt>
     156:	00 00       	nop
     158:	99 c0       	rjmp	.+306    	; 0x28c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	97 c0       	rjmp	.+302    	; 0x28c <__bad_interrupt>
     15e:	00 00       	nop
     160:	95 c0       	rjmp	.+298    	; 0x28c <__bad_interrupt>
     162:	00 00       	nop
     164:	93 c0       	rjmp	.+294    	; 0x28c <__bad_interrupt>
     166:	00 00       	nop
     168:	91 c0       	rjmp	.+290    	; 0x28c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8f c0       	rjmp	.+286    	; 0x28c <__bad_interrupt>
     16e:	00 00       	nop
     170:	8d c0       	rjmp	.+282    	; 0x28c <__bad_interrupt>
     172:	00 00       	nop
     174:	8b c0       	rjmp	.+278    	; 0x28c <__bad_interrupt>
     176:	00 00       	nop
     178:	89 c0       	rjmp	.+274    	; 0x28c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	87 c0       	rjmp	.+270    	; 0x28c <__bad_interrupt>
     17e:	00 00       	nop
     180:	85 c0       	rjmp	.+266    	; 0x28c <__bad_interrupt>
     182:	00 00       	nop
     184:	83 c0       	rjmp	.+262    	; 0x28c <__bad_interrupt>
     186:	00 00       	nop
     188:	81 c0       	rjmp	.+258    	; 0x28c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7f c0       	rjmp	.+254    	; 0x28c <__bad_interrupt>
     18e:	00 00       	nop
     190:	7d c0       	rjmp	.+250    	; 0x28c <__bad_interrupt>
     192:	00 00       	nop
     194:	7b c0       	rjmp	.+246    	; 0x28c <__bad_interrupt>
     196:	00 00       	nop
     198:	79 c0       	rjmp	.+242    	; 0x28c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	77 c0       	rjmp	.+238    	; 0x28c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	75 c0       	rjmp	.+234    	; 0x28c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	73 c0       	rjmp	.+230    	; 0x28c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	71 c0       	rjmp	.+226    	; 0x28c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6f c0       	rjmp	.+222    	; 0x28c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 02 33 	jmp	0x6604	; 0x6604 <__vector_108>
     1b4:	6b c0       	rjmp	.+214    	; 0x28c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	0c 94 e3 32 	jmp	0x65c6	; 0x65c6 <__vector_110>
     1bc:	67 c0       	rjmp	.+206    	; 0x28c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	65 c0       	rjmp	.+202    	; 0x28c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	63 c0       	rjmp	.+198    	; 0x28c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	61 c0       	rjmp	.+194    	; 0x28c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5f c0       	rjmp	.+190    	; 0x28c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	5d c0       	rjmp	.+186    	; 0x28c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	5b c0       	rjmp	.+182    	; 0x28c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	59 c0       	rjmp	.+178    	; 0x28c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	57 c0       	rjmp	.+174    	; 0x28c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	55 c0       	rjmp	.+170    	; 0x28c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	53 c0       	rjmp	.+166    	; 0x28c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	51 c0       	rjmp	.+162    	; 0x28c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4f c0       	rjmp	.+158    	; 0x28c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	4d c0       	rjmp	.+154    	; 0x28c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	08 4a       	sbci	r16, 0xA8	; 168
     1f6:	d7 3b       	cpi	r29, 0xB7	; 183
     1f8:	3b ce       	rjmp	.-906    	; 0xfffffe70 <__eeprom_end+0xff7efe70>
     1fa:	01 6e       	ori	r16, 0xE1	; 225
     1fc:	84 bc       	out	0x24, r8	; 36
     1fe:	bf fd       	.word	0xfdbf	; ????
     200:	c1 2f       	mov	r28, r17
     202:	3d 6c       	ori	r19, 0xCD	; 205
     204:	74 31       	cpi	r23, 0x14	; 20
     206:	9a bd       	out	0x2a, r25	; 42
     208:	56 83       	std	Z+6, r21	; 0x06
     20a:	3d da       	rcall	.-2950   	; 0xfffff686 <__eeprom_end+0xff7ef686>
     20c:	3d 00       	.word	0x003d	; ????
     20e:	c7 7f       	andi	r28, 0xF7	; 247
     210:	11 be       	out	0x31, r1	; 49
     212:	d9 e4       	ldi	r29, 0x49	; 73
     214:	bb 4c       	sbci	r27, 0xCB	; 203
     216:	3e 91       	ld	r19, -X
     218:	6b aa       	std	Y+51, r6	; 0x33
     21a:	aa be       	out	0x3a, r10	; 58
     21c:	00 00       	nop
     21e:	00 80       	ld	r0, Z
     220:	3f 05       	cpc	r19, r15
     222:	a8 4c       	sbci	r26, 0xC8	; 200
     224:	cd b2       	in	r12, 0x1d	; 29
     226:	d4 4e       	sbci	r29, 0xE4	; 228
     228:	b9 38       	cpi	r27, 0x89	; 137
     22a:	36 a9       	ldd	r19, Z+54	; 0x36
     22c:	02 0c       	add	r0, r2
     22e:	50 b9       	out	0x00, r21	; 0
     230:	91 86       	std	Z+9, r9	; 0x09
     232:	88 08       	sbc	r8, r8
     234:	3c a6       	std	Y+44, r3	; 0x2c
     236:	aa aa       	std	Y+50, r10	; 0x32
     238:	2a be       	out	0x3a, r2	; 58
     23a:	00 00       	nop
     23c:	00 80       	ld	r0, Z
     23e:	3f 00       	.word	0x003f	; ????

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	df e3       	ldi	r29, 0x3F	; 63
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	0c bf       	out	0x3c, r16	; 60
     250:	18 be       	out	0x38, r1	; 56
     252:	19 be       	out	0x39, r1	; 57
     254:	1a be       	out	0x3a, r1	; 58
     256:	1b be       	out	0x3b, r1	; 59

00000258 <__do_copy_data>:
     258:	10 e2       	ldi	r17, 0x20	; 32
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b0 e2       	ldi	r27, 0x20	; 32
     25e:	e8 ea       	ldi	r30, 0xA8	; 168
     260:	ff e6       	ldi	r31, 0x6F	; 111
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	0b bf       	out	0x3b, r16	; 59
     266:	02 c0       	rjmp	.+4      	; 0x26c <__do_copy_data+0x14>
     268:	07 90       	elpm	r0, Z+
     26a:	0d 92       	st	X+, r0
     26c:	a8 30       	cpi	r26, 0x08	; 8
     26e:	b1 07       	cpc	r27, r17
     270:	d9 f7       	brne	.-10     	; 0x268 <__do_copy_data+0x10>
     272:	1b be       	out	0x3b, r1	; 59

00000274 <__do_clear_bss>:
     274:	22 e3       	ldi	r18, 0x32	; 50
     276:	a8 e0       	ldi	r26, 0x08	; 8
     278:	b0 e2       	ldi	r27, 0x20	; 32
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	a9 38       	cpi	r26, 0x89	; 137
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 b5 33 	call	0x676a	; 0x676a <main>
     288:	0c 94 d2 37 	jmp	0x6fa4	; 0x6fa4 <_exit>

0000028c <__bad_interrupt>:
     28c:	b9 ce       	rjmp	.-654    	; 0x0 <__vectors>

0000028e <ADC_ResultCh_GetWord>:

	// Wait 4*COMMEN_MODE_CYCLES for common mode to settle.  
	delay_us(4*COMMEN_MODE_CYCLES);

	// Set prescaler to old value 
	adc->PRESCALER = prescaler_val;
     28e:	46 2f       	mov	r20, r22
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	66 23       	and	r22, r22
     294:	0c f4       	brge	.+2      	; 0x298 <ADC_ResultCh_GetWord+0xa>
     296:	5f 6f       	ori	r21, 0xFF	; 255
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	fc 01       	movw	r30, r24
     29c:	23 83       	std	Z+3, r18	; 0x03
     29e:	24 81       	ldd	r18, Z+4	; 0x04
     2a0:	35 81       	ldd	r19, Z+5	; 0x05
     2a2:	24 1b       	sub	r18, r20
     2a4:	35 0b       	sbc	r19, r21
     2a6:	82 2f       	mov	r24, r18
     2a8:	93 2f       	mov	r25, r19
     2aa:	08 95       	ret

000002ac <ADC_ResultCh_GetLowByte>:
     2ac:	21 e0       	ldi	r18, 0x01	; 1
     2ae:	fc 01       	movw	r30, r24
     2b0:	23 83       	std	Z+3, r18	; 0x03
     2b2:	84 81       	ldd	r24, Z+4	; 0x04
     2b4:	86 1b       	sub	r24, r22
     2b6:	08 95       	ret

000002b8 <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
     2b8:	fc 01       	movw	r30, r24
  	// Store old prescaler value.  
  	uint8_t prescaler_val = adc->PRESCALER;
     2ba:	84 81       	ldd	r24, Z+4	; 0x04

	// Set prescaler value to minimum value.  
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	94 83       	std	Z+4, r25	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c0:	af ef       	ldi	r26, 0xFF	; 255
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	11 97       	sbiw	r26, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <ADC_Wait_32MHz+0xc>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <ADC_Wait_32MHz+0x12>
     2ca:	00 00       	nop

	// wait 8*COMMEN_MODE_CYCLES for common mode to settle 
	delay_us(8*COMMEN_MODE_CYCLES);

	// Set prescaler to old value 
	adc->PRESCALER = prescaler_val;
     2cc:	84 83       	std	Z+4, r24	; 0x04
     2ce:	08 95       	ret

000002d0 <ADC_Offset_Get>:
 *  \param adc Pointer to the ADC to calculate offset from.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get(ADC_t * adc)
{
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	ec 01       	movw	r28, r24
	uint8_t offset;

  	// Set up ADC to get offset.  
  	ADC_ConvMode_and_Resolution_Config(adc, true, ADC_RESOLUTION_12BIT_gc);
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	89 7e       	andi	r24, 0xE9	; 233
     2da:	80 61       	ori	r24, 0x10	; 16
     2dc:	89 83       	std	Y+1, r24	; 0x01

	ADC_Prescaler_Config(adc , ADC_PRESCALER_DIV8_gc);
     2de:	8c 81       	ldd	r24, Y+4	; 0x04
     2e0:	88 7f       	andi	r24, 0xF8	; 248
     2e2:	81 60       	ori	r24, 0x01	; 1
     2e4:	8c 83       	std	Y+4, r24	; 0x04

	ADC_Referance_Config(adc , ADC_REFSEL_INT1V_gc);
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	8f 7c       	andi	r24, 0xCF	; 207
     2ea:	8a 83       	std	Y+2, r24	; 0x02

	ADC_Ch_InputMode_and_Gain_Config(&(adc->CH0),
     2ec:	88 a1       	ldd	r24, Y+32	; 0x20
     2ee:	80 7e       	andi	r24, 0xE0	; 224
     2f0:	82 60       	ori	r24, 0x02	; 2
     2f2:	88 a3       	std	Y+32, r24	; 0x20
	                                 ADC_CH_INPUTMODE_DIFF_gc,
	                                 ADC_CH_GAIN_1X_gc);

	ADC_Ch_InputMux_Config(&(adc->CH0), ADC_CH_MUXPOS_PIN0_gc, ADC_CH_MUXNEG_PIN0_gc);
     2f4:	19 a2       	std	Y+33, r1	; 0x21

	// Enable ADC.  
	ADC_Enable(adc);
     2f6:	88 81       	ld	r24, Y
     2f8:	81 60       	ori	r24, 0x01	; 1
     2fa:	88 83       	st	Y, r24

	// Wait until ADC is ready.  
	ADC_Wait_32MHz(adc);
     2fc:	ce 01       	movw	r24, r28
     2fe:	dc df       	rcall	.-72     	; 0x2b8 <ADC_Wait_32MHz>

	// Do one conversion to find offset.  
	ADC_Ch_Conversion_Start(&(adc->CH0));
     300:	88 a1       	ldd	r24, Y+32	; 0x20
     302:	80 68       	ori	r24, 0x80	; 128
     304:	88 a3       	std	Y+32, r24	; 0x20

	do{
	}while(!ADC_Ch_Conversion_Complete(&(adc->CH0)));
     306:	8b a1       	ldd	r24, Y+35	; 0x23
     308:	80 ff       	sbrs	r24, 0
     30a:	fd cf       	rjmp	.-6      	; 0x306 <ADC_Offset_Get+0x36>
	offset = ADC_ResultCh_GetLowByte(&(adc->CH0), 0x00);
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	ce 01       	movw	r24, r28
     310:	80 96       	adiw	r24, 0x20	; 32
     312:	cc df       	rcall	.-104    	; 0x2ac <ADC_ResultCh_GetLowByte>

	// Disable ADC.  
	ADC_Disable(adc);
     314:	98 81       	ld	r25, Y
     316:	9e 7f       	andi	r25, 0xFE	; 254
     318:	98 83       	st	Y, r25

	return offset;
}
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <SP_ReadCalibrationByte>:
		  "M" (NVM_CMD_READ_CALIB_ROW_gc),
		  "M" (NVM_CMD_NO_OPERATION_gc)
		: "r20", "r30", "r31"
		); */

		GPIO30 = index;  // r30 - LSB of Z pointer to EEPROM
     320:	8e bb       	out	0x1e, r24	; 30
		GPIO31 = 0;
     322:	1f ba       	out	0x1f, r1	; 31
		NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     324:	ea ec       	ldi	r30, 0xCA	; 202
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	80 83       	st	Z, r24
		result = GPIO30;
     32c:	8e b3       	in	r24, 0x1e	; 30
		NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     32e:	10 82       	st	Z, r1


		return result;

}
     330:	08 95       	ret

00000332 <ADC_CalibrationValues_Set>:
 *  register. The calibration data reduces the gain error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
 void ADC_CalibrationValues_Set(ADC_t * adc)
{
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     338:	c1 15       	cp	r28, r1
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	d8 07       	cpc	r29, r24
     33e:	41 f4       	brne	.+16     	; 0x350 <ADC_CalibrationValues_Set+0x1e>
		 // Get ADCCAL0 from byte address 0x20 (Word address 0x10.  
		adc->CAL = SP_ReadCalibrationByte(0x20);
     340:	80 e2       	ldi	r24, 0x20	; 32
     342:	ee df       	rcall	.-36     	; 0x320 <SP_ReadCalibrationByte>
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	e0 e0       	ldi	r30, 0x00	; 0
     348:	f2 e0       	ldi	r31, 0x02	; 2
     34a:	84 87       	std	Z+12, r24	; 0x0c
     34c:	95 87       	std	Z+13, r25	; 0x0d
     34e:	05 c0       	rjmp	.+10     	; 0x35a <ADC_CalibrationValues_Set+0x28>
	}else {
		// Get ADCCAL0 from byte address 0x24 (Word address 0x12.  
		adc->CAL = SP_ReadCalibrationByte(0x24);
     350:	84 e2       	ldi	r24, 0x24	; 36
     352:	e6 df       	rcall	.-52     	; 0x320 <SP_ReadCalibrationByte>
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	8c 87       	std	Y+12, r24	; 0x0c
     358:	9d 87       	std	Y+13, r25	; 0x0d
	}
} 
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <Podesi_Parametre_Robota>:


void Podesi_Parametre_Robota(void)
{
	//mehanicke karakteristike
	metar = 38250*2; //75000; //broj inkremenata za 1m - eksperiment!      /39035*2 izracunata vrednost
     360:	84 ed       	ldi	r24, 0xD4	; 212
     362:	9a e2       	ldi	r25, 0x2A	; 42
     364:	a1 e0       	ldi	r26, 0x01	; 1
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	80 93 cf 24 	sts	0x24CF, r24
     36c:	90 93 d0 24 	sts	0x24D0, r25
     370:	a0 93 d1 24 	sts	0x24D1, r26
     374:	b0 93 d2 24 	sts	0x24D2, r27
	krug360 = 13925; //49650 - eksperiment 1;  //66250 - matematika;	//broj inkremenata za jedan krug - eksperiment!		//13653
     378:	85 e6       	ldi	r24, 0x65	; 101
     37a:	96 e3       	ldi	r25, 0x36	; 54
     37c:	a0 e0       	ldi	r26, 0x00	; 0
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	80 93 71 32 	sts	0x3271, r24
     384:	90 93 72 32 	sts	0x3272, r25
     388:	a0 93 73 32 	sts	0x3273, r26
     38c:	b0 93 74 32 	sts	0x3274, r27
	
	scale_factor_for_mm = metar / 1000;
     390:	60 91 cf 24 	lds	r22, 0x24CF
     394:	70 91 d0 24 	lds	r23, 0x24D0
     398:	80 91 d1 24 	lds	r24, 0x24D1
     39c:	90 91 d2 24 	lds	r25, 0x24D2
     3a0:	28 ee       	ldi	r18, 0xE8	; 232
     3a2:	33 e0       	ldi	r19, 0x03	; 3
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
     3ac:	20 93 fc 2d 	sts	0x2DFC, r18
     3b0:	30 93 fd 2d 	sts	0x2DFD, r19
	krug180 = krug360 >> 1;	
     3b4:	80 91 71 32 	lds	r24, 0x3271
     3b8:	90 91 72 32 	lds	r25, 0x3272
     3bc:	a0 91 73 32 	lds	r26, 0x3273
     3c0:	b0 91 74 32 	lds	r27, 0x3274
     3c4:	b5 95       	asr	r27
     3c6:	a7 95       	ror	r26
     3c8:	97 95       	ror	r25
     3ca:	87 95       	ror	r24
     3cc:	80 93 cb 28 	sts	0x28CB, r24
     3d0:	90 93 cc 28 	sts	0x28CC, r25
     3d4:	a0 93 cd 28 	sts	0x28CD, r26
     3d8:	b0 93 ce 28 	sts	0x28CE, r27
	krug90 =  krug360 >> 2;
     3dc:	80 91 71 32 	lds	r24, 0x3271
     3e0:	90 91 72 32 	lds	r25, 0x3272
     3e4:	a0 91 73 32 	lds	r26, 0x3273
     3e8:	b0 91 74 32 	lds	r27, 0x3274
     3ec:	b5 95       	asr	r27
     3ee:	a7 95       	ror	r26
     3f0:	97 95       	ror	r25
     3f2:	87 95       	ror	r24
     3f4:	b5 95       	asr	r27
     3f6:	a7 95       	ror	r26
     3f8:	97 95       	ror	r25
     3fa:	87 95       	ror	r24
     3fc:	80 93 7a 2e 	sts	0x2E7A, r24
     400:	90 93 7b 2e 	sts	0x2E7B, r25
     404:	a0 93 7c 2e 	sts	0x2E7C, r26
     408:	b0 93 7d 2e 	sts	0x2E7D, r27
	krug45 =  krug360 >> 3;			
     40c:	80 91 71 32 	lds	r24, 0x3271
     410:	90 91 72 32 	lds	r25, 0x3272
     414:	a0 91 73 32 	lds	r26, 0x3273
     418:	b0 91 74 32 	lds	r27, 0x3274
     41c:	68 94       	set
     41e:	12 f8       	bld	r1, 2
     420:	b5 95       	asr	r27
     422:	a7 95       	ror	r26
     424:	97 95       	ror	r25
     426:	87 95       	ror	r24
     428:	16 94       	lsr	r1
     42a:	d1 f7       	brne	.-12     	; 0x420 <Podesi_Parametre_Robota+0xc0>
     42c:	80 93 c4 24 	sts	0x24C4, r24
     430:	90 93 c5 24 	sts	0x24C5, r25
     434:	a0 93 c6 24 	sts	0x24C6, r26
     438:	b0 93 c7 24 	sts	0x24C7, r27

	smer_zadati = 1;						//1-napred, 2-nazad, 0-sam bira smer
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	80 93 5a 29 	sts	0x295A, r24
	zeljena_pravolinijska_brzina = 300;		//brzina kojom se pravo krece robot
     442:	8c e2       	ldi	r24, 0x2C	; 44
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	80 93 7b 32 	sts	0x327B, r24
     44a:	90 93 7c 32 	sts	0x327C, r25
	zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2; //brzina kojom se okrece robot
     44e:	80 91 7b 32 	lds	r24, 0x327B
     452:	90 91 7c 32 	lds	r25, 0x327C
     456:	99 23       	and	r25, r25
     458:	0c f4       	brge	.+2      	; 0x45c <Podesi_Parametre_Robota+0xfc>
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	95 95       	asr	r25
     45e:	87 95       	ror	r24
     460:	80 93 5d 2e 	sts	0x2E5D, r24
     464:	90 93 5e 2e 	sts	0x2E5E, r25
	max_brzina_motora = 800;				//eksperimentalno utvrdjena max brzina motora [impuls/vreme_odabiranja(3ms)] (max je oko 1000)
     468:	20 e2       	ldi	r18, 0x20	; 32
     46a:	33 e0       	ldi	r19, 0x03	; 3
     46c:	20 93 0b 2e 	sts	0x2E0B, r18
     470:	30 93 0c 2e 	sts	0x2E0C, r19
	
	modifikovana_zeljena_pravolinijska_brzina = zeljena_pravolinijska_brzina;
     474:	80 91 7b 32 	lds	r24, 0x327B
     478:	90 91 7c 32 	lds	r25, 0x327C
     47c:	80 93 b0 24 	sts	0x24B0, r24
     480:	90 93 b1 24 	sts	0x24B1, r25
	rezervni_ugao = krug45;		//vrednost ugaone greske preko koje se radi reorijentacija robota
     484:	80 91 c4 24 	lds	r24, 0x24C4
     488:	90 91 c5 24 	lds	r25, 0x24C5
     48c:	a0 91 c6 24 	lds	r26, 0x24C6
     490:	b0 91 c7 24 	lds	r27, 0x24C7
     494:	80 93 2b 2e 	sts	0x2E2B, r24
     498:	90 93 2c 2e 	sts	0x2E2C, r25
	PWM_perioda = 800;			//PWM tajmer broji do 800 - frekvenicja 20KHz
     49c:	20 93 5a 2e 	sts	0x2E5A, r18
     4a0:	30 93 5b 2e 	sts	0x2E5B, r19
     4a4:	08 95       	ret

000004a6 <Podesi_PID_Pojacanja>:

void Podesi_PID_Pojacanja(void)
{
	//PID parametri
	//Regulacija pravolinijskog kretanja
	Kp_pravolinijski = 3.5;	//7
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	a0 e6       	ldi	r26, 0x60	; 96
     4ac:	b0 e4       	ldi	r27, 0x40	; 64
     4ae:	80 93 66 29 	sts	0x2966, r24
     4b2:	90 93 67 29 	sts	0x2967, r25
     4b6:	a0 93 68 29 	sts	0x2968, r26
     4ba:	b0 93 69 29 	sts	0x2969, r27
	Ki_pravolinijski = 1;
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	a0 e8       	ldi	r26, 0x80	; 128
     4c4:	bf e3       	ldi	r27, 0x3F	; 63
     4c6:	80 93 75 32 	sts	0x3275, r24
     4ca:	90 93 76 32 	sts	0x3276, r25
     4ce:	a0 93 77 32 	sts	0x3277, r26
     4d2:	b0 93 78 32 	sts	0x3278, r27
	Kd_pravolinijski = 6;
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	60 ec       	ldi	r22, 0xC0	; 192
     4dc:	70 e4       	ldi	r23, 0x40	; 64
     4de:	40 93 bb 28 	sts	0x28BB, r20
     4e2:	50 93 bc 28 	sts	0x28BC, r21
     4e6:	60 93 bd 28 	sts	0x28BD, r22
     4ea:	70 93 be 28 	sts	0x28BE, r23
	Kp_teta_pravolinijski = 1.5;	//6
     4ee:	40 e0       	ldi	r20, 0x00	; 0
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	60 ec       	ldi	r22, 0xC0	; 192
     4f4:	7f e3       	ldi	r23, 0x3F	; 63
     4f6:	40 93 f8 2d 	sts	0x2DF8, r20
     4fa:	50 93 f9 2d 	sts	0x2DF9, r21
     4fe:	60 93 fa 2d 	sts	0x2DFA, r22
     502:	70 93 fb 2d 	sts	0x2DFB, r23
		
	//Regulacija ugaonog zakretanja
	Kp_teta = 7;
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	60 ee       	ldi	r22, 0xE0	; 224
     50c:	70 e4       	ldi	r23, 0x40	; 64
     50e:	40 93 85 32 	sts	0x3285, r20
     512:	50 93 86 32 	sts	0x3286, r21
     516:	60 93 87 32 	sts	0x3287, r22
     51a:	70 93 88 32 	sts	0x3288, r23
	Ki_teta = 1;
     51e:	80 93 a6 24 	sts	0x24A6, r24
     522:	90 93 a7 24 	sts	0x24A7, r25
     526:	a0 93 a8 24 	sts	0x24A8, r26
     52a:	b0 93 a9 24 	sts	0x24A9, r27
	Kd_teta = 11;
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e3       	ldi	r26, 0x30	; 48
     534:	b1 e4       	ldi	r27, 0x41	; 65
     536:	80 93 a0 24 	sts	0x24A0, r24
     53a:	90 93 a1 24 	sts	0x24A1, r25
     53e:	a0 93 a2 24 	sts	0x24A2, r26
     542:	b0 93 a3 24 	sts	0x24A3, r27
	//Kp_teta_okretanje = 6;
		
	//Regulacija brzine
	Kp_brzina = 0.3;	//0.4
     546:	8a e9       	ldi	r24, 0x9A	; 154
     548:	99 e9       	ldi	r25, 0x99	; 153
     54a:	a9 e9       	ldi	r26, 0x99	; 153
     54c:	be e3       	ldi	r27, 0x3E	; 62
     54e:	80 93 cf 28 	sts	0x28CF, r24
     552:	90 93 d0 28 	sts	0x28D0, r25
     556:	a0 93 d1 28 	sts	0x28D1, r26
     55a:	b0 93 d2 28 	sts	0x28D2, r27
	Ki_brzina = 0;
     55e:	10 92 b6 24 	sts	0x24B6, r1
     562:	10 92 b7 24 	sts	0x24B7, r1
     566:	10 92 b8 24 	sts	0x24B8, r1
     56a:	10 92 b9 24 	sts	0x24B9, r1
	Kd_brzina = 0;
     56e:	10 92 4c 2e 	sts	0x2E4C, r1
     572:	10 92 4d 2e 	sts	0x2E4D, r1
     576:	10 92 4e 2e 	sts	0x2E4E, r1
     57a:	10 92 4f 2e 	sts	0x2E4F, r1
		
	//Ubrzavanje po rampi
	Accel_PID_pos = 2;
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	80 93 cc 24 	sts	0x24CC, r24
     586:	90 93 cd 24 	sts	0x24CD, r25
     58a:	08 95       	ret

0000058c <Podesi_QDEC>:
}

void Podesi_QDEC(void)
{
     58c:	ef 92       	push	r14
     58e:	0f 93       	push	r16
	//enkoderski ulazi
	PORT_ConfigurePins( &PORTD, 0xFF, false, false, PORT_OPC_PULLUP_gc, PORT_ISC_FALLING_gc);
     590:	68 94       	set
     592:	ee 24       	eor	r14, r14
     594:	e1 f8       	bld	r14, 1
     596:	08 e1       	ldi	r16, 0x18	; 24
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	6f ef       	ldi	r22, 0xFF	; 255
     59e:	80 e6       	ldi	r24, 0x60	; 96
     5a0:	96 e0       	ldi	r25, 0x06	; 6
     5a2:	0e 94 60 32 	call	0x64c0	; 0x64c0 <PORT_ConfigurePins>
	PORT_SetPinsAsInput( &PORTD, 0xFF );
     5a6:	e0 e6       	ldi	r30, 0x60	; 96
     5a8:	f6 e0       	ldi	r31, 0x06	; 6
     5aa:	8f ef       	ldi	r24, 0xFF	; 255
     5ac:	82 83       	std	Z+2, r24	; 0x02
	
	//Levi pasivni PORTD6,7
	PORTD.PIN6CTRL |= 0b01000000;	//invertuje se pin, da enkoder broji u drugom smeru
     5ae:	86 89       	ldd	r24, Z+22	; 0x16
     5b0:	80 64       	ori	r24, 0x40	; 64
     5b2:	86 8b       	std	Z+22, r24	; 0x16
	EVSYS.CH0MUX = 0b01101110;		// PORTD6 mux input -> MOTOR_QDEC.LEFT
     5b4:	e0 e8       	ldi	r30, 0x80	; 128
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	8e e6       	ldi	r24, 0x6E	; 110
     5ba:	80 83       	st	Z, r24
	EVSYS.CH0CTRL = 0b00001001;		//enable QDEC, filtering 2x
     5bc:	99 e0       	ldi	r25, 0x09	; 9
     5be:	90 87       	std	Z+8, r25	; 0x08
	TCD1.CTRLA = 0b00000001;		//clock source
     5c0:	a0 e4       	ldi	r26, 0x40	; 64
     5c2:	b9 e0       	ldi	r27, 0x09	; 9
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	8c 93       	st	X, r24
	TCD1.CTRLD = 0b01101000;  		//event action=QDEC, event source=ch0 [01101000]
     5c8:	28 e6       	ldi	r18, 0x68	; 104
     5ca:	13 96       	adiw	r26, 0x03	; 3
     5cc:	2c 93       	st	X, r18
     5ce:	13 97       	sbiw	r26, 0x03	; 3
	TCD1.INTCTRLA = ( TCD1.INTCTRLA & ~TC1_OVFINTLVL_gm ) | 1;	//interapt na owerflov
     5d0:	16 96       	adiw	r26, 0x06	; 6
     5d2:	2c 91       	ld	r18, X
     5d4:	16 97       	sbiw	r26, 0x06	; 6
     5d6:	2c 7f       	andi	r18, 0xFC	; 252
     5d8:	21 60       	ori	r18, 0x01	; 1
     5da:	16 96       	adiw	r26, 0x06	; 6
     5dc:	2c 93       	st	X, r18

	//Desni pasivni	PORTD4,5
	//PORTD.PIN4CTRL |= 0b01000000;	//invertuje se pin, da enkoder broji u drugom smeru
	EVSYS.CH2MUX = 0b01101100;			//PORTD4 mux input -> PASIVNI_DESNI
     5de:	2c e6       	ldi	r18, 0x6C	; 108
     5e0:	22 83       	std	Z+2, r18	; 0x02
	EVSYS.CH2CTRL = 0b00001001;			//enable QDEC, filtering 2x
     5e2:	92 87       	std	Z+10, r25	; 0x0a
	TCD0.CTRLA = 0b00000001;			//clock source
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f9 e0       	ldi	r31, 0x09	; 9
     5e8:	80 83       	st	Z, r24
	TCD0.CTRLD = 0b01101010;  			//event action=QDEC, event source=ch2
     5ea:	8a e6       	ldi	r24, 0x6A	; 106
     5ec:	83 83       	std	Z+3, r24	; 0x03
	TCD0.INTCTRLA = ( TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | 1;
     5ee:	86 81       	ldd	r24, Z+6	; 0x06
     5f0:	8c 7f       	andi	r24, 0xFC	; 252
     5f2:	81 60       	ori	r24, 0x01	; 1
     5f4:	86 83       	std	Z+6, r24	; 0x06
}
     5f6:	0f 91       	pop	r16
     5f8:	ef 90       	pop	r14
     5fa:	08 95       	ret

000005fc <PodesiADC>:

void PodesiADC(void)
{
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
	//ADCB.REFCTRL = 0b00000010; //bandgap
	//ADCB.EVCTRL = 0b00000000;	//
	

	/* Move stored calibration values to ADC B. */
	ADC_CalibrationValues_Set(&ADCA);
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	96 de       	rcall	.-724    	; 0x332 <ADC_CalibrationValues_Set>

	/* Get offset value for ADC A. */
 	offset = ADC_Offset_Get(&ADCA);
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	62 de       	rcall	.-828    	; 0x2d0 <ADC_Offset_Get>
     60c:	80 93 56 2e 	sts	0x2E56, r24

	/* Set up ADC B to have signed conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, false, ADC_RESOLUTION_8BIT_gc);
     610:	c0 e0       	ldi	r28, 0x00	; 0
     612:	d2 e0       	ldi	r29, 0x02	; 2
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	89 7e       	andi	r24, 0xE9	; 233
     618:	84 60       	ori	r24, 0x04	; 4
     61a:	89 83       	std	Y+1, r24	; 0x01

	/* Sample rate is CPUFREQ/8. Allow time for storing data. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV4_gc);
     61c:	8c 81       	ldd	r24, Y+4	; 0x04
     61e:	88 7f       	andi	r24, 0xF8	; 248
     620:	8c 83       	std	Y+4, r24	; 0x04

	/* Set referance voltage on ADC B to be VCC-0.6 V.*/
	ADC_Referance_Config(&ADCA, ADC_REFSEL_INT1V_gc);
     622:	8a 81       	ldd	r24, Y+2	; 0x02
     624:	8f 7c       	andi	r24, 0xCF	; 207
     626:	8a 83       	std	Y+2, r24	; 0x02

	/* Setup channel 0 to have single ended input. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     628:	a0 e2       	ldi	r26, 0x20	; 32
     62a:	b2 e0       	ldi	r27, 0x02	; 2
     62c:	8c 91       	ld	r24, X
     62e:	80 7e       	andi	r24, 0xE0	; 224
     630:	81 60       	ori	r24, 0x01	; 1
     632:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_CH_GAIN_1X_gc);
	/* Setup channel 1 to have single ended input. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH1,
     634:	e8 e2       	ldi	r30, 0x28	; 40
     636:	f2 e0       	ldi	r31, 0x02	; 2
     638:	80 81       	ld	r24, Z
     63a:	80 7e       	andi	r24, 0xE0	; 224
     63c:	81 60       	ori	r24, 0x01	; 1
     63e:	80 83       	st	Z, r24
										ADC_CH_INPUTMODE_SINGLEENDED_gc,
										ADC_CH_GAIN_1X_gc);

	/* Set input to the channel in ADC B to be PIN 1. */	//Levi motor pin0
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, ADC_CH_MUXNEG_PIN0_gc);
     640:	11 96       	adiw	r26, 0x01	; 1
     642:	1c 92       	st	X, r1
	/* Set input to the channel in ADC B to be PIN 1. */	//Desni motor pin1
	ADC_Ch_InputMux_Config(&ADCA.CH1, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN0_gc);
     644:	88 e0       	ldi	r24, 0x08	; 8
     646:	81 83       	std	Z+1, r24	; 0x01
	
	/* Setup sweep of all four virtual channels. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_01_gc);
     648:	8b 81       	ldd	r24, Y+3	; 0x03
     64a:	8f 73       	andi	r24, 0x3F	; 63
     64c:	80 64       	ori	r24, 0x40	; 64
     64e:	8b 83       	std	Y+3, r24	; 0x03

	/* Enable ADC B with free running mode, Vcc reference and unsigned conversion.*/
	ADC_Enable(&ADCA);
     650:	88 81       	ld	r24, Y
     652:	81 60       	ori	r24, 0x01	; 1
     654:	88 83       	st	Y, r24

	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	2e de       	rcall	.-932    	; 0x2b8 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	88 60       	ori	r24, 0x08	; 8
     660:	89 83       	std	Y+1, r24	; 0x01

}
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <Podesi_Interapt>:

void Podesi_Interapt(void)
{
	// Enable high level interrupts in the PMIC. 
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     668:	e0 ea       	ldi	r30, 0xA0	; 160
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	82 81       	ldd	r24, Z+2	; 0x02
     66e:	84 60       	ori	r24, 0x04	; 4
     670:	82 83       	std	Z+2, r24	; 0x02
	// Enable medium level interrupts in the PMIC. 
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     672:	82 81       	ldd	r24, Z+2	; 0x02
     674:	82 60       	ori	r24, 0x02	; 2
     676:	82 83       	std	Z+2, r24	; 0x02
	// Enable low level interrupts in the PMIC. 
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	81 60       	ori	r24, 0x01	; 1
     67c:	82 83       	std	Z+2, r24	; 0x02
	//round-robin algoritam EN
	PMIC.CTRL |= PMIC_RREN_bm;
     67e:	82 81       	ldd	r24, Z+2	; 0x02
     680:	80 68       	ori	r24, 0x80	; 128
     682:	82 83       	std	Z+2, r24	; 0x02
	
	sei(); // enable all inerrupts
     684:	78 94       	sei
     686:	08 95       	ret

00000688 <Podesi_Oscilator>:
}

void Podesi_Oscilator(void)
{
	//Startovanje internog oscilatora od 32MHz
	OSC.CTRL = OSC_RC32MEN_bm;
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	80 93 50 00 	sts	0x0050, r24

	do {
		//Sacekaj dok se stabilizuje oscilator
	} while ( ( OSC.STATUS & OSC_RC32MRDY_bm ) == 0 );
     68e:	e0 e5       	ldi	r30, 0x50	; 80
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	81 81       	ldd	r24, Z+1	; 0x01
     694:	81 ff       	sbrs	r24, 1
     696:	fd cf       	rjmp	.-6      	; 0x692 <Podesi_Oscilator+0xa>
	
	//Ukljuci preskalere B i C
	CCP = CCP_IOREG_gc;
     698:	88 ed       	ldi	r24, 0xD8	; 216
     69a:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = CLK_PSBCDIV_2_2_gc;
     69c:	e0 e4       	ldi	r30, 0x40	; 64
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	91 83       	std	Z+1, r25	; 0x01

	//Postavi 32MHz kao glavni oscilator
	CCP = CCP_IOREG_gc;
     6a4:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;	
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	80 83       	st	Z, r24
     6aa:	08 95       	ret

000006ac <Podesi_USART_Komunikaciju>:
}

void Podesi_USART_Komunikaciju(void)
{
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
	//USART_E1 - BT - 115200
  	//PE7 (TXE1) - izlaz  
	PORTE.DIR |= PIN7_bm;
     6b6:	c0 e8       	ldi	r28, 0x80	; 128
     6b8:	d6 e0       	ldi	r29, 0x06	; 6
     6ba:	88 81       	ld	r24, Y
     6bc:	80 68       	ori	r24, 0x80	; 128
     6be:	88 83       	st	Y, r24
	//PE6 (RXE1) - ulaz
	PORTE.DIR  &= ~PIN6_bm;
     6c0:	88 81       	ld	r24, Y
     6c2:	8f 7b       	andi	r24, 0xBF	; 191
     6c4:	88 83       	st	Y, r24
	//Koriscenje USARTE1 (definisano u globals.h) i inicijalizacija buffer-a
	USART_InterruptDriver_Initialize(&USART_E1_data, &USARTE1, USART_DREINTLVL_LO_gc);
     6c6:	41 e0       	ldi	r20, 0x01	; 1
     6c8:	60 eb       	ldi	r22, 0xB0	; 176
     6ca:	7a e0       	ldi	r23, 0x0A	; 10
     6cc:	89 e0       	ldi	r24, 0x09	; 9
     6ce:	90 e2       	ldi	r25, 0x20	; 32
     6d0:	0e 94 21 33 	call	0x6642	; 0x6642 <USART_InterruptDriver_Initialize>
	//USARTE1, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(USART_E1_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     6d4:	e0 91 09 20 	lds	r30, 0x2009
     6d8:	f0 91 0a 20 	lds	r31, 0x200A
     6dc:	13 e0       	ldi	r17, 0x03	; 3
     6de:	15 83       	std	Z+5, r17	; 0x05
	//Aktiviranje RXC interrupt-a
	USART_RxdInterruptLevel_Set(USART_E1_data.usart, USART_RXCINTLVL_LO_gc);
     6e0:	83 81       	ldd	r24, Z+3	; 0x03
     6e2:	8f 7c       	andi	r24, 0xCF	; 207
     6e4:	80 61       	ori	r24, 0x10	; 16
     6e6:	83 83       	std	Z+3, r24	; 0x03
	//Podesavanje Baud rate
	//USART_Baudrate_Set(&USARTE1, 14, -2 );	//115200
	USART_Baudrate_Set(&USARTE1,3269, -6 );	//9600
     6e8:	a0 eb       	ldi	r26, 0xB0	; 176
     6ea:	ba e0       	ldi	r27, 0x0A	; 10
     6ec:	0f 2e       	mov	r0, r31
     6ee:	f5 ec       	ldi	r31, 0xC5	; 197
     6f0:	ff 2e       	mov	r15, r31
     6f2:	f0 2d       	mov	r31, r0
     6f4:	16 96       	adiw	r26, 0x06	; 6
     6f6:	fc 92       	st	X, r15
     6f8:	16 97       	sbiw	r26, 0x06	; 6
     6fa:	0c ea       	ldi	r16, 0xAC	; 172
     6fc:	17 96       	adiw	r26, 0x07	; 7
     6fe:	0c 93       	st	X, r16
	//Ukljucivanje RX i TX
	USART_Rx_Enable(USART_E1_data.usart);
     700:	84 81       	ldd	r24, Z+4	; 0x04
     702:	80 61       	ori	r24, 0x10	; 16
     704:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_E1_data.usart);
     706:	84 81       	ldd	r24, Z+4	; 0x04
     708:	88 60       	ori	r24, 0x08	; 8
     70a:	84 83       	std	Z+4, r24	; 0x04
	
	//USART_E0 BT_RS232 - MCU - 19200
	//PE3 (TXE0) - izlaz
	PORTE.DIR |= PIN3_bm;
     70c:	88 81       	ld	r24, Y
     70e:	88 60       	ori	r24, 0x08	; 8
     710:	88 83       	st	Y, r24
	//PE2 (RXE0) - ulaz
	PORTE.DIR  &= ~PIN2_bm;
     712:	88 81       	ld	r24, Y
     714:	8b 7f       	andi	r24, 0xFB	; 251
     716:	88 83       	st	Y, r24
	//Koriscenje USARTE0 i inicijalizacija buffer-a
	USART_InterruptDriver_Initialize(&USART_E0_data, &USARTE0, USART_DREINTLVL_LO_gc);
     718:	41 e0       	ldi	r20, 0x01	; 1
     71a:	60 ea       	ldi	r22, 0xA0	; 160
     71c:	7a e0       	ldi	r23, 0x0A	; 10
     71e:	87 e1       	ldi	r24, 0x17	; 23
     720:	93 e2       	ldi	r25, 0x23	; 35
     722:	0e 94 21 33 	call	0x6642	; 0x6642 <USART_InterruptDriver_Initialize>
	//USARTE0, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(USART_E0_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     726:	e0 91 17 23 	lds	r30, 0x2317
     72a:	f0 91 18 23 	lds	r31, 0x2318
     72e:	15 83       	std	Z+5, r17	; 0x05
	//Aktiviranje RXC interrupt-a
	USART_RxdInterruptLevel_Set(USART_E0_data.usart, USART_RXCINTLVL_LO_gc);
     730:	83 81       	ldd	r24, Z+3	; 0x03
     732:	8f 7c       	andi	r24, 0xCF	; 207
     734:	80 61       	ori	r24, 0x10	; 16
     736:	83 83       	std	Z+3, r24	; 0x03
	//19200 @ 32Mhz as calculated from ProtoTalk Calc
	USART_Baudrate_Set(&USARTE0, 3269, -6 ); //9600
     738:	a0 ea       	ldi	r26, 0xA0	; 160
     73a:	ba e0       	ldi	r27, 0x0A	; 10
     73c:	16 96       	adiw	r26, 0x06	; 6
     73e:	fc 92       	st	X, r15
     740:	16 97       	sbiw	r26, 0x06	; 6
     742:	17 96       	adiw	r26, 0x07	; 7
     744:	0c 93       	st	X, r16
	//Ukljucivanje RX i TX
	USART_Rx_Enable(USART_E0_data.usart);
     746:	84 81       	ldd	r24, Z+4	; 0x04
     748:	80 61       	ori	r24, 0x10	; 16
     74a:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_E0_data.usart);
     74c:	84 81       	ldd	r24, Z+4	; 0x04
     74e:	88 60       	ori	r24, 0x08	; 8
     750:	84 83       	std	Z+4, r24	; 0x04
	

	//USART_C0 - Xmega_USB - 115200
	//PE3 (TXE0) - izlaz
	PORTC.DIR &= PIN3_bm;
     752:	e0 e4       	ldi	r30, 0x40	; 64
     754:	f6 e0       	ldi	r31, 0x06	; 6
     756:	80 81       	ld	r24, Z
     758:	88 70       	andi	r24, 0x08	; 8
     75a:	80 83       	st	Z, r24
	//PE2 (RXE0) - ulaz
	PORTC.DIR  |= ~PIN2_bm;
     75c:	80 81       	ld	r24, Z
     75e:	8b 6f       	ori	r24, 0xFB	; 251
     760:	80 83       	st	Z, r24
	//Koriscenje USARTE0 i inicijalizacija buffer-a
	USART_InterruptDriver_Initialize(&USART_C0_data, &USARTC0, USART_DREINTLVL_LO_gc);
     762:	41 e0       	ldi	r20, 0x01	; 1
     764:	60 ea       	ldi	r22, 0xA0	; 160
     766:	78 e0       	ldi	r23, 0x08	; 8
     768:	80 e9       	ldi	r24, 0x90	; 144
     76a:	91 e2       	ldi	r25, 0x21	; 33
     76c:	0e 94 21 33 	call	0x6642	; 0x6642 <USART_InterruptDriver_Initialize>
	//USARTE0, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(USART_C0_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     770:	e0 91 90 21 	lds	r30, 0x2190
     774:	f0 91 91 21 	lds	r31, 0x2191
     778:	15 83       	std	Z+5, r17	; 0x05
	//Aktiviranje RXC interrupt-a
	USART_RxdInterruptLevel_Set(USART_C0_data.usart, USART_RXCINTLVL_LO_gc);
     77a:	83 81       	ldd	r24, Z+3	; 0x03
     77c:	8f 7c       	andi	r24, 0xCF	; 207
     77e:	80 61       	ori	r24, 0x10	; 16
     780:	83 83       	std	Z+3, r24	; 0x03
	//Podesavanje Baud rate
	USART_Baudrate_Set(&USARTC0, 107, -5 );	//115200
     782:	a0 ea       	ldi	r26, 0xA0	; 160
     784:	b8 e0       	ldi	r27, 0x08	; 8
     786:	8b e6       	ldi	r24, 0x6B	; 107
     788:	16 96       	adiw	r26, 0x06	; 6
     78a:	8c 93       	st	X, r24
     78c:	16 97       	sbiw	r26, 0x06	; 6
     78e:	80 eb       	ldi	r24, 0xB0	; 176
     790:	17 96       	adiw	r26, 0x07	; 7
     792:	8c 93       	st	X, r24
	//USART_Baudrate_Set(&USARTC0, 14, -2 );	//115200
	//Ukljucivanje RX i TX
	USART_Rx_Enable(USART_C0_data.usart);
     794:	84 81       	ldd	r24, Z+4	; 0x04
     796:	80 61       	ori	r24, 0x10	; 16
     798:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_C0_data.usart);
     79a:	84 81       	ldd	r24, Z+4	; 0x04
     79c:	88 60       	ori	r24, 0x08	; 8
     79e:	84 83       	std	Z+4, r24	; 0x04

}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	08 95       	ret

000007ac <Podesi_Tajmere>:
	//TCF0 - servo signal generator
	//TCF1 - motor PWM (levi, desni)
	
	//System tajmer za uzorkovanje enkodera i PID regulaciju
	/* Set period ( TOP value ). */
	TC_SetPeriod( &TCE1, 0x005F ); //0x00BF = 12ms //0x5F = 6ms //0x2F = 3ms <- Mirko //Nasa -> //0x5DC0
     7ac:	8f e5       	ldi	r24, 0x5F	; 95
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	e0 e4       	ldi	r30, 0x40	; 64
     7b2:	fa e0       	ldi	r31, 0x0A	; 10
     7b4:	86 a3       	std	Z+38, r24	; 0x26
     7b6:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable overflow interrupt at low level */
	TC1_SetOverflowIntLevel( &TCE1, TC_OVFINTLVL_MED_gc );
     7b8:	62 e0       	ldi	r22, 0x02	; 2
     7ba:	80 e4       	ldi	r24, 0x40	; 64
     7bc:	9a e0       	ldi	r25, 0x0A	; 10
     7be:	0e 94 7f 32 	call	0x64fe	; 0x64fe <TC1_SetOverflowIntLevel>
	/* Start Timer/Counter. */
	TC1_ConfigClockSource( &TCE1, TC_CLKSEL_DIV256_gc );
     7c2:	66 e0       	ldi	r22, 0x06	; 6
     7c4:	80 e4       	ldi	r24, 0x40	; 64
     7c6:	9a e0       	ldi	r25, 0x0A	; 10
     7c8:	0c 94 79 32 	jmp	0x64f2	; 0x64f2 <TC1_ConfigClockSource>

000007cc <Podesi_PWM>:
	//TC0_ConfigClockSource( &TCF0, TC_CLKSEL_DIV64_gc );
}

void Podesi_PWM(void)
{	
	HIRESF_CTRLA = 0b00000010; //enable hi-res za TCF1
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	80 93 90 0b 	sts	0x0B90, r24
	// Configure timer 
	TCF1.PER = PWM_perioda;
     7d2:	80 91 5a 2e 	lds	r24, 0x2E5A
     7d6:	90 91 5b 2e 	lds	r25, 0x2E5B
     7da:	e0 e4       	ldi	r30, 0x40	; 64
     7dc:	fb e0       	ldi	r31, 0x0B	; 11
     7de:	86 a3       	std	Z+38, r24	; 0x26
     7e0:	97 a3       	std	Z+39, r25	; 0x27
	TCF1.CTRLB = TC1_CCBEN_bm | TC1_CCAEN_bm | TC_WGMODE_DS_T_gc;
     7e2:	85 e3       	ldi	r24, 0x35	; 53
     7e4:	81 83       	std	Z+1, r24	; 0x01
	TCF1.CTRLA = TC_CLKSEL_DIV1_gc;
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 83       	st	Z, r24
	
	PORT_SetPinsAsOutput( &PORTF, 0b00110000 ); //PF5 - PWM_L, PF4 - PWM_D
     7ea:	80 e3       	ldi	r24, 0x30	; 48
     7ec:	e0 ea       	ldi	r30, 0xA0	; 160
     7ee:	f6 e0       	ldi	r31, 0x06	; 6
     7f0:	81 83       	std	Z+1, r24	; 0x01
     7f2:	08 95       	ret

000007f4 <Podesi_Pinove>:
}

void Podesi_Pinove(void)
{
     7f4:	ef 92       	push	r14
     7f6:	0f 93       	push	r16
     7f8:	cf 93       	push	r28
	//PORTB - digitalni ulazi 
	
	PORT_SetPinsAsInput( &PORTB, 0xFF );
     7fa:	cf ef       	ldi	r28, 0xFF	; 255
     7fc:	e0 e2       	ldi	r30, 0x20	; 32
     7fe:	f6 e0       	ldi	r31, 0x06	; 6
     800:	c2 83       	std	Z+2, r28	; 0x02
	PORT_ConfigurePins( &PORTB,
     802:	68 94       	set
     804:	ee 24       	eor	r14, r14
     806:	e1 f8       	bld	r14, 1
     808:	08 e1       	ldi	r16, 0x18	; 24
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	6f ef       	ldi	r22, 0xFF	; 255
     810:	80 e2       	ldi	r24, 0x20	; 32
     812:	96 e0       	ldi	r25, 0x06	; 6
     814:	0e 94 60 32 	call	0x64c0	; 0x64c0 <PORT_ConfigurePins>
						false,
						PORT_OPC_PULLUP_gc,
						PORT_ISC_FALLING_gc);
	
	//podesavanje interrupt0 za PORTB.0 - ISR(PORTB_INT0_vect)
	PORT_ConfigureInterrupt0( &PORTB, PORT_INT0LVL_LO_gc, 0x01 );
     818:	41 e0       	ldi	r20, 0x01	; 1
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	80 e2       	ldi	r24, 0x20	; 32
     81e:	96 e0       	ldi	r25, 0x06	; 6
     820:	0e 94 59 32 	call	0x64b2	; 0x64b2 <PORT_ConfigureInterrupt0>
	
	//PORTC - FET izlazi 
	PORT_SetPinsAsOutput(&PORTC, 0xFF);
     824:	e0 e4       	ldi	r30, 0x40	; 64
     826:	f6 e0       	ldi	r31, 0x06	; 6
     828:	c1 83       	std	Z+1, r28	; 0x01
//  	PORT_MapVirtualPort0( PORTCFG_VP0MAP_PORTC_gc );	//mapiranje virtualnog porta 0 na PORTC
//  	PORT_SetDirection( &VPORT0, 0xFF );
//		VPORT0.OUT = 0x00;	//clear
	
	//pinovi za upravljanje moorima
	PORT_SetPinsAsOutput(&PORTH, 0xFF); //PH0-IN_A1, PH1-EN_A1, PH2-EN_B1, PH3-IN_B1, PH4-IN_A2, PH5-EN_A2, PH6-EN_B2, PH7-IN_B2
     82a:	e0 ee       	ldi	r30, 0xE0	; 224
     82c:	f6 e0       	ldi	r31, 0x06	; 6
     82e:	c1 83       	std	Z+1, r28	; 0x01
	PORT_ClearPins(&PORTH, 0xFF);
     830:	c6 83       	std	Z+6, r28	; 0x06
	PORT_SetPins(&PORTH, 0b01100110); // EN ALL	
     832:	86 e6       	ldi	r24, 0x66	; 102
     834:	85 83       	std	Z+5, r24	; 0x05

	//servo izlazi
	PORT_SetPinsAsOutput(&PORTF, 0x0F);
     836:	e0 ea       	ldi	r30, 0xA0	; 160
     838:	f6 e0       	ldi	r31, 0x06	; 6
     83a:	8f e0       	ldi	r24, 0x0F	; 15
     83c:	81 83       	std	Z+1, r24	; 0x01
	PORT_ClearPins(&PORTF, 0x0F);
     83e:	86 83       	std	Z+6, r24	; 0x06
	
}
     840:	cf 91       	pop	r28
     842:	0f 91       	pop	r16
     844:	ef 90       	pop	r14
     846:	08 95       	ret

00000848 <__vector_53>:
#include "Headers/port_driver.h"
#include "math.h"

//Tajmer za rad drajvera
ISR(TCE1_OVF_vect)	//3ms
{	
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	08 b6       	in	r0, 0x38	; 56
     854:	0f 92       	push	r0
     856:	18 be       	out	0x38, r1	; 56
     858:	09 b6       	in	r0, 0x39	; 57
     85a:	0f 92       	push	r0
     85c:	19 be       	out	0x39, r1	; 57
     85e:	0b b6       	in	r0, 0x3b	; 59
     860:	0f 92       	push	r0
     862:	1b be       	out	0x3b, r1	; 59
     864:	2f 93       	push	r18
     866:	3f 93       	push	r19
     868:	4f 93       	push	r20
     86a:	5f 93       	push	r21
     86c:	6f 93       	push	r22
     86e:	7f 93       	push	r23
     870:	8f 93       	push	r24
     872:	9f 93       	push	r25
     874:	af 93       	push	r26
     876:	bf 93       	push	r27
     878:	ef 93       	push	r30
     87a:	ff 93       	push	r31
	vreme_cekanja_tete++;
     87c:	80 91 60 29 	lds	r24, 0x2960
     880:	90 91 61 29 	lds	r25, 0x2961
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	80 93 60 29 	sts	0x2960, r24
     88a:	90 93 61 29 	sts	0x2961, r25
	vreme_pozicioniranja++;
     88e:	80 91 58 2e 	lds	r24, 0x2E58
     892:	90 91 59 2e 	lds	r25, 0x2E59
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	80 93 58 2e 	sts	0x2E58, r24
     89c:	90 93 59 2e 	sts	0x2E59, r25
	
	sample_counter_niz_1++;
     8a0:	80 91 54 2e 	lds	r24, 0x2E54
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	80 93 54 2e 	sts	0x2E54, r24
	sample_counter_niz_2++;
     8aa:	80 91 f5 2d 	lds	r24, 0x2DF5
     8ae:	8f 5f       	subi	r24, 0xFF	; 255
     8b0:	80 93 f5 2d 	sts	0x2DF5, r24
	sample_counter_niz_3++;
     8b4:	80 91 5b 29 	lds	r24, 0x295B
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	80 93 5b 29 	sts	0x295B, r24
	
	//Sample time za PID brzinski
	PID_brzinski();
     8be:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <PID_brzinski>
	//Sample time za uzimanje trenutnog stanja enkodera i racunaje pozicije
	Rac_tren_poz_sample_counter++;
     8c2:	80 91 08 20 	lds	r24, 0x2008
     8c6:	8f 5f       	subi	r24, 0xFF	; 255
     8c8:	80 93 08 20 	sts	0x2008, r24
	//Sample time za pracenje pravca
	Pracenje_Pravca_sample_counter++;
     8cc:	80 91 04 20 	lds	r24, 0x2004
     8d0:	8f 5f       	subi	r24, 0xFF	; 255
     8d2:	80 93 04 20 	sts	0x2004, r24
	//Sample time za pozicioni PID
	PID_pozicioni_sample_counter++;
     8d6:	80 91 05 20 	lds	r24, 0x2005
     8da:	8f 5f       	subi	r24, 0xFF	; 255
     8dc:	80 93 05 20 	sts	0x2005, r24
	
	if(timeout)
     8e0:	80 91 31 2e 	lds	r24, 0x2E31
     8e4:	90 91 32 2e 	lds	r25, 0x2E32
     8e8:	89 2b       	or	r24, r25
     8ea:	49 f0       	breq	.+18     	; 0x8fe <__vector_53+0xb6>
	{
		timeout--;
     8ec:	80 91 31 2e 	lds	r24, 0x2E31
     8f0:	90 91 32 2e 	lds	r25, 0x2E32
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	80 93 31 2e 	sts	0x2E31, r24
     8fa:	90 93 32 2e 	sts	0x2E32, r25
	}
	
	//provera vreme primanja
	if (proveri_vreme_primanja > 0)
     8fe:	80 91 f7 2d 	lds	r24, 0x2DF7
     902:	88 23       	and	r24, r24
     904:	89 f0       	breq	.+34     	; 0x928 <__vector_53+0xe0>
	{
		proveri_vreme_primanja++;
     906:	80 91 f7 2d 	lds	r24, 0x2DF7
     90a:	8f 5f       	subi	r24, 0xFF	; 255
     90c:	80 93 f7 2d 	sts	0x2DF7, r24
		if (proveri_vreme_primanja > 100)
     910:	80 91 f7 2d 	lds	r24, 0x2DF7
     914:	85 36       	cpi	r24, 0x65	; 101
     916:	40 f0       	brcs	.+16     	; 0x928 <__vector_53+0xe0>
		{
			RX_i_E0 = 0;
     918:	10 92 57 2e 	sts	0x2E57, r1
			RX_i_E1 = 0;
     91c:	10 92 59 29 	sts	0x2959, r1
			RX_i_C0 = 0;
     920:	10 92 3b 2e 	sts	0x2E3B, r1
			proveri_vreme_primanja = 0;
     924:	10 92 f7 2d 	sts	0x2DF7, r1
		}
	}
	
	//snimanje niz_1
	if ((sample_counter_niz_1 > sample_time_niz_1) && (niz_counter_niz_1 < 127))
     928:	90 91 54 2e 	lds	r25, 0x2E54
     92c:	80 91 6e 32 	lds	r24, 0x326E
     930:	89 17       	cp	r24, r25
     932:	08 f0       	brcs	.+2      	; 0x936 <__vector_53+0xee>
     934:	59 c0       	rjmp	.+178    	; 0x9e8 <__vector_53+0x1a0>
     936:	80 91 55 2e 	lds	r24, 0x2E55
     93a:	8f 37       	cpi	r24, 0x7F	; 127
     93c:	08 f0       	brcs	.+2      	; 0x940 <__vector_53+0xf8>
     93e:	54 c0       	rjmp	.+168    	; 0x9e8 <__vector_53+0x1a0>
	{
		if (velicina_niz_1 == 2)
     940:	80 91 7e 32 	lds	r24, 0x327E
     944:	82 30       	cpi	r24, 0x02	; 2
     946:	91 f5       	brne	.+100    	; 0x9ac <__vector_53+0x164>
		{
			niz_1[niz_counter_niz_1] = mmio32(adresa_niz_1 + 1);
     948:	e0 91 55 2e 	lds	r30, 0x2E55
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 91 f6 29 	lds	r24, 0x29F6
     952:	90 91 f7 29 	lds	r25, 0x29F7
     956:	a0 91 f8 29 	lds	r26, 0x29F8
     95a:	b0 91 f9 29 	lds	r27, 0x29F9
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	a1 1d       	adc	r26, r1
     962:	b1 1d       	adc	r27, r1
     964:	dc 01       	movw	r26, r24
     966:	8d 91       	ld	r24, X+
     968:	9d 91       	ld	r25, X+
     96a:	0d 90       	ld	r0, X+
     96c:	bc 91       	ld	r27, X
     96e:	a0 2d       	mov	r26, r0
     970:	ee 0f       	add	r30, r30
     972:	ff 1f       	adc	r31, r31
     974:	ee 5f       	subi	r30, 0xFE	; 254
     976:	f5 4d       	sbci	r31, 0xD5	; 213
     978:	80 83       	st	Z, r24
     97a:	91 83       	std	Z+1, r25	; 0x01
			niz_1[niz_counter_niz_1] = mmio32(adresa_niz_1);
     97c:	e0 91 55 2e 	lds	r30, 0x2E55
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 91 f6 29 	lds	r24, 0x29F6
     986:	90 91 f7 29 	lds	r25, 0x29F7
     98a:	a0 91 f8 29 	lds	r26, 0x29F8
     98e:	b0 91 f9 29 	lds	r27, 0x29F9
     992:	dc 01       	movw	r26, r24
     994:	8d 91       	ld	r24, X+
     996:	9d 91       	ld	r25, X+
     998:	0d 90       	ld	r0, X+
     99a:	bc 91       	ld	r27, X
     99c:	a0 2d       	mov	r26, r0
     99e:	ee 0f       	add	r30, r30
     9a0:	ff 1f       	adc	r31, r31
     9a2:	ee 5f       	subi	r30, 0xFE	; 254
     9a4:	f5 4d       	sbci	r31, 0xD5	; 213
     9a6:	80 83       	st	Z, r24
     9a8:	91 83       	std	Z+1, r25	; 0x01
     9aa:	17 c0       	rjmp	.+46     	; 0x9da <__vector_53+0x192>
		}
		else
		niz_1[niz_counter_niz_1] = mmio32(adresa_niz_1);
     9ac:	e0 91 55 2e 	lds	r30, 0x2E55
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 91 f6 29 	lds	r24, 0x29F6
     9b6:	90 91 f7 29 	lds	r25, 0x29F7
     9ba:	a0 91 f8 29 	lds	r26, 0x29F8
     9be:	b0 91 f9 29 	lds	r27, 0x29F9
     9c2:	dc 01       	movw	r26, r24
     9c4:	8d 91       	ld	r24, X+
     9c6:	9d 91       	ld	r25, X+
     9c8:	0d 90       	ld	r0, X+
     9ca:	bc 91       	ld	r27, X
     9cc:	a0 2d       	mov	r26, r0
     9ce:	ee 0f       	add	r30, r30
     9d0:	ff 1f       	adc	r31, r31
     9d2:	ee 5f       	subi	r30, 0xFE	; 254
     9d4:	f5 4d       	sbci	r31, 0xD5	; 213
     9d6:	80 83       	st	Z, r24
     9d8:	91 83       	std	Z+1, r25	; 0x01
		
		niz_counter_niz_1++;
     9da:	80 91 55 2e 	lds	r24, 0x2E55
     9de:	8f 5f       	subi	r24, 0xFF	; 255
     9e0:	80 93 55 2e 	sts	0x2E55, r24
		sample_counter_niz_1 = 0;
     9e4:	10 92 54 2e 	sts	0x2E54, r1
	}
}
     9e8:	ff 91       	pop	r31
     9ea:	ef 91       	pop	r30
     9ec:	bf 91       	pop	r27
     9ee:	af 91       	pop	r26
     9f0:	9f 91       	pop	r25
     9f2:	8f 91       	pop	r24
     9f4:	7f 91       	pop	r23
     9f6:	6f 91       	pop	r22
     9f8:	5f 91       	pop	r21
     9fa:	4f 91       	pop	r20
     9fc:	3f 91       	pop	r19
     9fe:	2f 91       	pop	r18
     a00:	0f 90       	pop	r0
     a02:	0b be       	out	0x3b, r0	; 59
     a04:	0f 90       	pop	r0
     a06:	09 be       	out	0x39, r0	; 57
     a08:	0f 90       	pop	r0
     a0a:	08 be       	out	0x38, r0	; 56
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0
     a12:	1f 90       	pop	r1
     a14:	18 95       	reti

00000a16 <__vector_58>:
//Serijska komunikacija - USART_E0 - BT_RS232 - MCU
ISR(USARTE0_RXC_vect)
{
     a16:	1f 92       	push	r1
     a18:	0f 92       	push	r0
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	0f 92       	push	r0
     a1e:	11 24       	eor	r1, r1
     a20:	08 b6       	in	r0, 0x38	; 56
     a22:	0f 92       	push	r0
     a24:	18 be       	out	0x38, r1	; 56
     a26:	09 b6       	in	r0, 0x39	; 57
     a28:	0f 92       	push	r0
     a2a:	19 be       	out	0x39, r1	; 57
     a2c:	0a b6       	in	r0, 0x3a	; 58
     a2e:	0f 92       	push	r0
     a30:	1a be       	out	0x3a, r1	; 58
     a32:	0b b6       	in	r0, 0x3b	; 59
     a34:	0f 92       	push	r0
     a36:	1b be       	out	0x3b, r1	; 59
     a38:	4f 92       	push	r4
     a3a:	5f 92       	push	r5
     a3c:	6f 92       	push	r6
     a3e:	7f 92       	push	r7
     a40:	8f 92       	push	r8
     a42:	9f 92       	push	r9
     a44:	af 92       	push	r10
     a46:	bf 92       	push	r11
     a48:	cf 92       	push	r12
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	2f 93       	push	r18
     a56:	3f 93       	push	r19
     a58:	4f 93       	push	r20
     a5a:	5f 93       	push	r21
     a5c:	6f 93       	push	r22
     a5e:	7f 93       	push	r23
     a60:	8f 93       	push	r24
     a62:	9f 93       	push	r25
     a64:	af 93       	push	r26
     a66:	bf 93       	push	r27
     a68:	ef 93       	push	r30
     a6a:	ff 93       	push	r31
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	28 97       	sbiw	r28, 0x08	; 8
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	de bf       	out	0x3e, r29	; 62
	int i;
	USART_RXComplete(&USART_E0_data);
     a7a:	87 e1       	ldi	r24, 0x17	; 23
     a7c:	93 e2       	ldi	r25, 0x23	; 35
     a7e:	0e 94 70 33 	call	0x66e0	; 0x66e0 <USART_RXComplete>
	receiveArray[RX_i_E0] = USART_RXBuffer_GetByte(&USART_E0_data);
     a82:	80 91 57 2e 	lds	r24, 0x2E57
     a86:	08 2f       	mov	r16, r24
     a88:	10 e0       	ldi	r17, 0x00	; 0
     a8a:	87 e1       	ldi	r24, 0x17	; 23
     a8c:	93 e2       	ldi	r25, 0x23	; 35
     a8e:	0e 94 62 33 	call	0x66c4	; 0x66c4 <USART_RXBuffer_GetByte>
     a92:	f8 01       	movw	r30, r16
     a94:	e6 59       	subi	r30, 0x96	; 150
     a96:	f6 4d       	sbci	r31, 0xD6	; 214
     a98:	80 83       	st	Z, r24
	//USART_TXBuffer_PutByte(&USART_E0_data, receiveArray[RX_i_E0]);	//echo
	RX_i_E0++;
     a9a:	80 91 57 2e 	lds	r24, 0x2E57
     a9e:	8f 5f       	subi	r24, 0xFF	; 255
     aa0:	80 93 57 2e 	sts	0x2E57, r24
	
	//vremenska zastita
	if (RX_i_E0 >= 1)
     aa4:	80 91 57 2e 	lds	r24, 0x2E57
     aa8:	88 23       	and	r24, r24
     aaa:	19 f0       	breq	.+6      	; 0xab2 <__vector_58+0x9c>
 		proveri_vreme_primanja = 1;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	80 93 f7 2d 	sts	0x2DF7, r24
	 
	//CITANJE PARAMETARA - 1
	if(receiveArray[0] == 1)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
     ab2:	80 91 6a 29 	lds	r24, 0x296A
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	09 f0       	breq	.+2      	; 0xabc <__vector_58+0xa6>
     aba:	b0 c0       	rjmp	.+352    	; 0xc1c <__vector_58+0x206>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
     abc:	80 91 57 2e 	lds	r24, 0x2E57
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	11 f0       	breq	.+4      	; 0xac8 <__vector_58+0xb2>
     ac4:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
     ac8:	10 92 f7 2d 	sts	0x2DF7, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
     acc:	80 91 6a 29 	lds	r24, 0x296A
     ad0:	80 93 d9 28 	sts	0x28D9, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
     ad4:	60 91 1f 2e 	lds	r22, 0x2E1F
     ad8:	70 91 20 2e 	lds	r23, 0x2E20
     adc:	80 91 21 2e 	lds	r24, 0x2E21
     ae0:	90 91 22 2e 	lds	r25, 0x2E22
     ae4:	20 91 fc 2d 	lds	r18, 0x2DFC
     ae8:	30 91 fd 2d 	lds	r19, 0x2DFD
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
     af4:	bb 27       	eor	r27, r27
     af6:	57 fd       	sbrc	r21, 7
     af8:	ba 95       	dec	r27
     afa:	a5 2f       	mov	r26, r21
     afc:	94 2f       	mov	r25, r20
     afe:	83 2f       	mov	r24, r19
     b00:	80 93 da 28 	sts	0x28DA, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
     b04:	60 91 1f 2e 	lds	r22, 0x2E1F
     b08:	70 91 20 2e 	lds	r23, 0x2E20
     b0c:	80 91 21 2e 	lds	r24, 0x2E21
     b10:	90 91 22 2e 	lds	r25, 0x2E22
     b14:	20 91 fc 2d 	lds	r18, 0x2DFC
     b18:	30 91 fd 2d 	lds	r19, 0x2DFD
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
     b24:	20 93 db 28 	sts	0x28DB, r18
				sendArray[3] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna Y pozicija HI
     b28:	60 91 fe 29 	lds	r22, 0x29FE
     b2c:	70 91 ff 29 	lds	r23, 0x29FF
     b30:	80 91 00 2a 	lds	r24, 0x2A00
     b34:	90 91 01 2a 	lds	r25, 0x2A01
     b38:	20 91 fc 2d 	lds	r18, 0x2DFC
     b3c:	30 91 fd 2d 	lds	r19, 0x2DFD
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
     b48:	bb 27       	eor	r27, r27
     b4a:	57 fd       	sbrc	r21, 7
     b4c:	ba 95       	dec	r27
     b4e:	a5 2f       	mov	r26, r21
     b50:	94 2f       	mov	r25, r20
     b52:	83 2f       	mov	r24, r19
     b54:	80 93 dc 28 	sts	0x28DC, r24
				sendArray[4] = Y_pos / scale_factor_for_mm;							//Absolutna Y pozicija LO
     b58:	60 91 fe 29 	lds	r22, 0x29FE
     b5c:	70 91 ff 29 	lds	r23, 0x29FF
     b60:	80 91 00 2a 	lds	r24, 0x2A00
     b64:	90 91 01 2a 	lds	r25, 0x2A01
     b68:	20 91 fc 2d 	lds	r18, 0x2DFC
     b6c:	30 91 fd 2d 	lds	r19, 0x2DFD
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
     b78:	20 93 dd 28 	sts	0x28DD, r18
				sendArray[5] = ((teta * 360) / krug360) >> 8;						//Teta HI
     b7c:	20 91 7f 32 	lds	r18, 0x327F
     b80:	30 91 80 32 	lds	r19, 0x3280
     b84:	40 91 81 32 	lds	r20, 0x3281
     b88:	50 91 82 32 	lds	r21, 0x3282
     b8c:	c0 90 71 32 	lds	r12, 0x3271
     b90:	d0 90 72 32 	lds	r13, 0x3272
     b94:	e0 90 73 32 	lds	r14, 0x3273
     b98:	f0 90 74 32 	lds	r15, 0x3274
     b9c:	a8 e6       	ldi	r26, 0x68	; 104
     b9e:	b1 e0       	ldi	r27, 0x01	; 1
     ba0:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
     ba4:	a7 01       	movw	r20, r14
     ba6:	96 01       	movw	r18, r12
     ba8:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
     bac:	bb 27       	eor	r27, r27
     bae:	57 fd       	sbrc	r21, 7
     bb0:	ba 95       	dec	r27
     bb2:	a5 2f       	mov	r26, r21
     bb4:	94 2f       	mov	r25, r20
     bb6:	83 2f       	mov	r24, r19
     bb8:	80 93 de 28 	sts	0x28DE, r24
				sendArray[6] = ((teta * 360) / krug360);							//Teta LO	
     bbc:	20 91 7f 32 	lds	r18, 0x327F
     bc0:	30 91 80 32 	lds	r19, 0x3280
     bc4:	40 91 81 32 	lds	r20, 0x3281
     bc8:	50 91 82 32 	lds	r21, 0x3282
     bcc:	c0 90 71 32 	lds	r12, 0x3271
     bd0:	d0 90 72 32 	lds	r13, 0x3272
     bd4:	e0 90 73 32 	lds	r14, 0x3273
     bd8:	f0 90 74 32 	lds	r15, 0x3274
     bdc:	a8 e6       	ldi	r26, 0x68	; 104
     bde:	b1 e0       	ldi	r27, 0x01	; 1
     be0:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
     be4:	a7 01       	movw	r20, r14
     be6:	96 01       	movw	r18, r12
     be8:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
     bec:	20 93 df 28 	sts	0x28DF, r18
// 				sendArray[12] =	ADC_ResultCh_GetWord(&ADCA.CH0, offset);			//struja motora 1
// 				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
// 				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
     bf0:	00 e0       	ldi	r16, 0x00	; 0
     bf2:	10 e0       	ldi	r17, 0x00	; 0
				while (i <= 14) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
     bf4:	f8 01       	movw	r30, r16
     bf6:	e7 52       	subi	r30, 0x27	; 39
     bf8:	f7 4d       	sbci	r31, 0xD7	; 215
     bfa:	60 81       	ld	r22, Z
     bfc:	87 e1       	ldi	r24, 0x17	; 23
     bfe:	93 e2       	ldi	r25, 0x23	; 35
     c00:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
     c04:	88 23       	and	r24, r24
     c06:	11 f0       	breq	.+4      	; 0xc0c <__vector_58+0x1f6>
						i++;
     c08:	0f 5f       	subi	r16, 0xFF	; 255
     c0a:	1f 4f       	sbci	r17, 0xFF	; 255
// 				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
// 				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
				while (i <= 14) 
     c0c:	0f 30       	cpi	r16, 0x0F	; 15
     c0e:	11 05       	cpc	r17, r1
     c10:	8c f3       	brlt	.-30     	; 0xbf4 <__vector_58+0x1de>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
     c12:	10 92 57 2e 	sts	0x2E57, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
     c16:	10 92 57 2e 	sts	0x2E57, r1
     c1a:	d4 c7       	rjmp	.+4008   	; 0x1bc4 <__vector_58+0x11ae>
		}		
	}
	//ZADAVANJE X,Y KOORDINATA - 2
	else if(receiveArray[0] == 2)					//provera funkcijskog bajta >> 2-upis x,y koordinate
     c1c:	80 91 6a 29 	lds	r24, 0x296A
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	09 f0       	breq	.+2      	; 0xc26 <__vector_58+0x210>
     c24:	bf c0       	rjmp	.+382    	; 0xda4 <__vector_58+0x38e>
	{
		if(RX_i_E0 >= 5)							//stigla je cela poruka	(5 bajtova)
     c26:	80 91 57 2e 	lds	r24, 0x2E57
     c2a:	85 30       	cpi	r24, 0x05	; 5
     c2c:	08 f4       	brcc	.+2      	; 0xc30 <__vector_58+0x21a>
     c2e:	ca c7       	rjmp	.+3988   	; 0x1bc4 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
     c30:	10 92 f7 2d 	sts	0x2DF7, r1
			//ENABLE
			stop_PID_desni = 0;
     c34:	10 92 f0 29 	sts	0x29F0, r1
			stop_PID_levi = 0;
     c38:	10 92 ee 2d 	sts	0x2DEE, r1
			set_direct_out = 0;
     c3c:	10 92 7d 32 	sts	0x327D, r1
			
			X_cilj = 0;
     c40:	10 92 ac 24 	sts	0x24AC, r1
     c44:	10 92 ad 24 	sts	0x24AD, r1
     c48:	10 92 ae 24 	sts	0x24AE, r1
     c4c:	10 92 af 24 	sts	0x24AF, r1
			X_cilj |= ((int)receiveArray[1]) << 8;
     c50:	20 91 6b 29 	lds	r18, 0x296B
     c54:	40 91 ac 24 	lds	r20, 0x24AC
     c58:	50 91 ad 24 	lds	r21, 0x24AD
     c5c:	60 91 ae 24 	lds	r22, 0x24AE
     c60:	70 91 af 24 	lds	r23, 0x24AF
     c64:	92 2f       	mov	r25, r18
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	aa 27       	eor	r26, r26
     c6a:	97 fd       	sbrc	r25, 7
     c6c:	a0 95       	com	r26
     c6e:	ba 2f       	mov	r27, r26
     c70:	84 2b       	or	r24, r20
     c72:	95 2b       	or	r25, r21
     c74:	a6 2b       	or	r26, r22
     c76:	b7 2b       	or	r27, r23
     c78:	80 93 ac 24 	sts	0x24AC, r24
     c7c:	90 93 ad 24 	sts	0x24AD, r25
     c80:	a0 93 ae 24 	sts	0x24AE, r26
     c84:	b0 93 af 24 	sts	0x24AF, r27
			X_cilj |= (int)receiveArray[2];
     c88:	20 91 6c 29 	lds	r18, 0x296C
     c8c:	80 91 ac 24 	lds	r24, 0x24AC
     c90:	90 91 ad 24 	lds	r25, 0x24AD
     c94:	a0 91 ae 24 	lds	r26, 0x24AE
     c98:	b0 91 af 24 	lds	r27, 0x24AF
     c9c:	82 2b       	or	r24, r18
     c9e:	80 93 ac 24 	sts	0x24AC, r24
     ca2:	90 93 ad 24 	sts	0x24AD, r25
     ca6:	a0 93 ae 24 	sts	0x24AE, r26
     caa:	b0 93 af 24 	sts	0x24AF, r27
			X_cilj = (X_cilj * scale_factor_for_mm);
     cae:	a0 91 fc 2d 	lds	r26, 0x2DFC
     cb2:	b0 91 fd 2d 	lds	r27, 0x2DFD
     cb6:	20 91 ac 24 	lds	r18, 0x24AC
     cba:	30 91 ad 24 	lds	r19, 0x24AD
     cbe:	40 91 ae 24 	lds	r20, 0x24AE
     cc2:	50 91 af 24 	lds	r21, 0x24AF
     cc6:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
     cca:	60 93 ac 24 	sts	0x24AC, r22
     cce:	70 93 ad 24 	sts	0x24AD, r23
     cd2:	80 93 ae 24 	sts	0x24AE, r24
     cd6:	90 93 af 24 	sts	0x24AF, r25
			//Y_cilj
			Y_cilj = 0;
     cda:	10 92 07 2e 	sts	0x2E07, r1
     cde:	10 92 08 2e 	sts	0x2E08, r1
     ce2:	10 92 09 2e 	sts	0x2E09, r1
     ce6:	10 92 0a 2e 	sts	0x2E0A, r1
			Y_cilj |= ((int)receiveArray[3]) << 8;
     cea:	20 91 6d 29 	lds	r18, 0x296D
     cee:	40 91 07 2e 	lds	r20, 0x2E07
     cf2:	50 91 08 2e 	lds	r21, 0x2E08
     cf6:	60 91 09 2e 	lds	r22, 0x2E09
     cfa:	70 91 0a 2e 	lds	r23, 0x2E0A
     cfe:	92 2f       	mov	r25, r18
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	aa 27       	eor	r26, r26
     d04:	97 fd       	sbrc	r25, 7
     d06:	a0 95       	com	r26
     d08:	ba 2f       	mov	r27, r26
     d0a:	84 2b       	or	r24, r20
     d0c:	95 2b       	or	r25, r21
     d0e:	a6 2b       	or	r26, r22
     d10:	b7 2b       	or	r27, r23
     d12:	80 93 07 2e 	sts	0x2E07, r24
     d16:	90 93 08 2e 	sts	0x2E08, r25
     d1a:	a0 93 09 2e 	sts	0x2E09, r26
     d1e:	b0 93 0a 2e 	sts	0x2E0A, r27
			Y_cilj |= (int)receiveArray[4];
     d22:	20 91 6e 29 	lds	r18, 0x296E
     d26:	80 91 07 2e 	lds	r24, 0x2E07
     d2a:	90 91 08 2e 	lds	r25, 0x2E08
     d2e:	a0 91 09 2e 	lds	r26, 0x2E09
     d32:	b0 91 0a 2e 	lds	r27, 0x2E0A
     d36:	82 2b       	or	r24, r18
     d38:	80 93 07 2e 	sts	0x2E07, r24
     d3c:	90 93 08 2e 	sts	0x2E08, r25
     d40:	a0 93 09 2e 	sts	0x2E09, r26
     d44:	b0 93 0a 2e 	sts	0x2E0A, r27
			Y_cilj = Y_cilj * scale_factor_for_mm;
     d48:	a0 91 fc 2d 	lds	r26, 0x2DFC
     d4c:	b0 91 fd 2d 	lds	r27, 0x2DFD
     d50:	20 91 07 2e 	lds	r18, 0x2E07
     d54:	30 91 08 2e 	lds	r19, 0x2E08
     d58:	40 91 09 2e 	lds	r20, 0x2E09
     d5c:	50 91 0a 2e 	lds	r21, 0x2E0A
     d60:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
     d64:	60 93 07 2e 	sts	0x2E07, r22
     d68:	70 93 08 2e 	sts	0x2E08, r23
     d6c:	80 93 09 2e 	sts	0x2E09, r24
     d70:	90 93 0a 2e 	sts	0x2E0A, r25
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
     d74:	80 91 6a 29 	lds	r24, 0x296A
     d78:	80 93 d9 28 	sts	0x28D9, r24
			i = 0;
     d7c:	00 e0       	ldi	r16, 0x00	; 0
     d7e:	10 e0       	ldi	r17, 0x00	; 0
			while (i < 1)
			{
				bool byteToBuffer;
				byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
     d80:	f8 01       	movw	r30, r16
     d82:	e7 52       	subi	r30, 0x27	; 39
     d84:	f7 4d       	sbci	r31, 0xD7	; 215
     d86:	60 81       	ld	r22, Z
     d88:	87 e1       	ldi	r24, 0x17	; 23
     d8a:	93 e2       	ldi	r25, 0x23	; 35
     d8c:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
				if(byteToBuffer)
     d90:	88 23       	and	r24, r24
     d92:	11 f0       	breq	.+4      	; 0xd98 <__vector_58+0x382>
				{
					i++;
     d94:	0f 5f       	subi	r16, 0xFF	; 255
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
			Y_cilj = Y_cilj * scale_factor_for_mm;
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
			i = 0;
			while (i < 1)
     d98:	10 16       	cp	r1, r16
     d9a:	11 06       	cpc	r1, r17
     d9c:	8c f7       	brge	.-30     	; 0xd80 <__vector_58+0x36a>
				if(byteToBuffer)
				{
					i++;
				}
			}
			RX_i_E0 = 0;
     d9e:	10 92 57 2e 	sts	0x2E57, r1
     da2:	10 c7       	rjmp	.+3616   	; 0x1bc4 <__vector_58+0x11ae>
		}
	}	
	//ZADAVANJE X,Y KOORDINATA I PARAMETRE KRETANJA - 3
	else if(receiveArray[0] == 3)					//provera funkcijskog bajta >> 3 - X,Y koordinate sa svim parametrima kretanja
     da4:	80 91 6a 29 	lds	r24, 0x296A
     da8:	83 30       	cpi	r24, 0x03	; 3
     daa:	09 f0       	breq	.+2      	; 0xdae <__vector_58+0x398>
     dac:	e3 c1       	rjmp	.+966    	; 0x1174 <__vector_58+0x75e>
	{
		if(RX_i_E0 >= 11)							//stigla je cela poruka	(11)
     dae:	80 91 57 2e 	lds	r24, 0x2E57
     db2:	8b 30       	cpi	r24, 0x0B	; 11
     db4:	08 f4       	brcc	.+2      	; 0xdb8 <__vector_58+0x3a2>
     db6:	06 c7       	rjmp	.+3596   	; 0x1bc4 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
     db8:	10 92 f7 2d 	sts	0x2DF7, r1
// 				CHC ^= receiveArray[i];

			//if(receiveArray[x] == CHC)				//CHC ok
			{
				//x_cilj
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     dbc:	80 91 6b 29 	lds	r24, 0x296B
     dc0:	8f 3f       	cpi	r24, 0xFF	; 255
     dc2:	29 f4       	brne	.+10     	; 0xdce <__vector_58+0x3b8>
     dc4:	80 91 6c 29 	lds	r24, 0x296C
     dc8:	8f 3f       	cpi	r24, 0xFF	; 255
     dca:	09 f4       	brne	.+2      	; 0xdce <__vector_58+0x3b8>
     dcc:	53 c0       	rjmp	.+166    	; 0xe74 <__vector_58+0x45e>
				{
					//ENABLE
					stop_PID_desni = 0;
     dce:	10 92 f0 29 	sts	0x29F0, r1
					stop_PID_levi = 0;
     dd2:	10 92 ee 2d 	sts	0x2DEE, r1
					set_direct_out = 0;
     dd6:	10 92 7d 32 	sts	0x327D, r1
					
					X_cilj = 0;
     dda:	10 92 ac 24 	sts	0x24AC, r1
     dde:	10 92 ad 24 	sts	0x24AD, r1
     de2:	10 92 ae 24 	sts	0x24AE, r1
     de6:	10 92 af 24 	sts	0x24AF, r1
					X_cilj |= ((int)receiveArray[1]) << 8;
     dea:	20 91 6b 29 	lds	r18, 0x296B
     dee:	40 91 ac 24 	lds	r20, 0x24AC
     df2:	50 91 ad 24 	lds	r21, 0x24AD
     df6:	60 91 ae 24 	lds	r22, 0x24AE
     dfa:	70 91 af 24 	lds	r23, 0x24AF
     dfe:	92 2f       	mov	r25, r18
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	aa 27       	eor	r26, r26
     e04:	97 fd       	sbrc	r25, 7
     e06:	a0 95       	com	r26
     e08:	ba 2f       	mov	r27, r26
     e0a:	84 2b       	or	r24, r20
     e0c:	95 2b       	or	r25, r21
     e0e:	a6 2b       	or	r26, r22
     e10:	b7 2b       	or	r27, r23
     e12:	80 93 ac 24 	sts	0x24AC, r24
     e16:	90 93 ad 24 	sts	0x24AD, r25
     e1a:	a0 93 ae 24 	sts	0x24AE, r26
     e1e:	b0 93 af 24 	sts	0x24AF, r27
					X_cilj |= (int)receiveArray[2];
     e22:	20 91 6c 29 	lds	r18, 0x296C
     e26:	80 91 ac 24 	lds	r24, 0x24AC
     e2a:	90 91 ad 24 	lds	r25, 0x24AD
     e2e:	a0 91 ae 24 	lds	r26, 0x24AE
     e32:	b0 91 af 24 	lds	r27, 0x24AF
     e36:	82 2b       	or	r24, r18
     e38:	80 93 ac 24 	sts	0x24AC, r24
     e3c:	90 93 ad 24 	sts	0x24AD, r25
     e40:	a0 93 ae 24 	sts	0x24AE, r26
     e44:	b0 93 af 24 	sts	0x24AF, r27
					X_cilj = (X_cilj * scale_factor_for_mm);	
     e48:	a0 91 fc 2d 	lds	r26, 0x2DFC
     e4c:	b0 91 fd 2d 	lds	r27, 0x2DFD
     e50:	20 91 ac 24 	lds	r18, 0x24AC
     e54:	30 91 ad 24 	lds	r19, 0x24AD
     e58:	40 91 ae 24 	lds	r20, 0x24AE
     e5c:	50 91 af 24 	lds	r21, 0x24AF
     e60:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
     e64:	60 93 ac 24 	sts	0x24AC, r22
     e68:	70 93 ad 24 	sts	0x24AD, r23
     e6c:	80 93 ae 24 	sts	0x24AE, r24
     e70:	90 93 af 24 	sts	0x24AF, r25
				}	
				//Y_cilj
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     e74:	80 91 6d 29 	lds	r24, 0x296D
     e78:	8f 3f       	cpi	r24, 0xFF	; 255
     e7a:	29 f4       	brne	.+10     	; 0xe86 <__vector_58+0x470>
     e7c:	80 91 6e 29 	lds	r24, 0x296E
     e80:	8f 3f       	cpi	r24, 0xFF	; 255
     e82:	09 f4       	brne	.+2      	; 0xe86 <__vector_58+0x470>
     e84:	53 c0       	rjmp	.+166    	; 0xf2c <__vector_58+0x516>
				{		
					stop_PID_desni = 0;
     e86:	10 92 f0 29 	sts	0x29F0, r1
					stop_PID_levi = 0;	
     e8a:	10 92 ee 2d 	sts	0x2DEE, r1
					set_direct_out = 0;
     e8e:	10 92 7d 32 	sts	0x327D, r1
					Y_cilj = 0;
     e92:	10 92 07 2e 	sts	0x2E07, r1
     e96:	10 92 08 2e 	sts	0x2E08, r1
     e9a:	10 92 09 2e 	sts	0x2E09, r1
     e9e:	10 92 0a 2e 	sts	0x2E0A, r1
					Y_cilj |= ((int)receiveArray[3]) << 8;
     ea2:	20 91 6d 29 	lds	r18, 0x296D
     ea6:	40 91 07 2e 	lds	r20, 0x2E07
     eaa:	50 91 08 2e 	lds	r21, 0x2E08
     eae:	60 91 09 2e 	lds	r22, 0x2E09
     eb2:	70 91 0a 2e 	lds	r23, 0x2E0A
     eb6:	92 2f       	mov	r25, r18
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	aa 27       	eor	r26, r26
     ebc:	97 fd       	sbrc	r25, 7
     ebe:	a0 95       	com	r26
     ec0:	ba 2f       	mov	r27, r26
     ec2:	84 2b       	or	r24, r20
     ec4:	95 2b       	or	r25, r21
     ec6:	a6 2b       	or	r26, r22
     ec8:	b7 2b       	or	r27, r23
     eca:	80 93 07 2e 	sts	0x2E07, r24
     ece:	90 93 08 2e 	sts	0x2E08, r25
     ed2:	a0 93 09 2e 	sts	0x2E09, r26
     ed6:	b0 93 0a 2e 	sts	0x2E0A, r27
					Y_cilj |= (int)receiveArray[4];
     eda:	20 91 6e 29 	lds	r18, 0x296E
     ede:	80 91 07 2e 	lds	r24, 0x2E07
     ee2:	90 91 08 2e 	lds	r25, 0x2E08
     ee6:	a0 91 09 2e 	lds	r26, 0x2E09
     eea:	b0 91 0a 2e 	lds	r27, 0x2E0A
     eee:	82 2b       	or	r24, r18
     ef0:	80 93 07 2e 	sts	0x2E07, r24
     ef4:	90 93 08 2e 	sts	0x2E08, r25
     ef8:	a0 93 09 2e 	sts	0x2E09, r26
     efc:	b0 93 0a 2e 	sts	0x2E0A, r27
					Y_cilj = Y_cilj * scale_factor_for_mm;
     f00:	a0 91 fc 2d 	lds	r26, 0x2DFC
     f04:	b0 91 fd 2d 	lds	r27, 0x2DFD
     f08:	20 91 07 2e 	lds	r18, 0x2E07
     f0c:	30 91 08 2e 	lds	r19, 0x2E08
     f10:	40 91 09 2e 	lds	r20, 0x2E09
     f14:	50 91 0a 2e 	lds	r21, 0x2E0A
     f18:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
     f1c:	60 93 07 2e 	sts	0x2E07, r22
     f20:	70 93 08 2e 	sts	0x2E08, r23
     f24:	80 93 09 2e 	sts	0x2E09, r24
     f28:	90 93 0a 2e 	sts	0x2E0A, r25
				}	
				
				//teta_cilj_final_absolute
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     f2c:	80 91 6f 29 	lds	r24, 0x296F
     f30:	8f 3f       	cpi	r24, 0xFF	; 255
     f32:	29 f4       	brne	.+10     	; 0xf3e <__vector_58+0x528>
     f34:	80 91 70 29 	lds	r24, 0x2970
     f38:	8f 3f       	cpi	r24, 0xFF	; 255
     f3a:	09 f4       	brne	.+2      	; 0xf3e <__vector_58+0x528>
     f3c:	58 c0       	rjmp	.+176    	; 0xfee <__vector_58+0x5d8>
				{
					teta_cilj_final = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
     f3e:	10 92 00 20 	sts	0x2000, r1
     f42:	10 92 01 20 	sts	0x2001, r1
     f46:	10 92 02 20 	sts	0x2002, r1
     f4a:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[5]) << 8;
     f4e:	20 91 6f 29 	lds	r18, 0x296F
     f52:	40 91 00 20 	lds	r20, 0x2000
     f56:	50 91 01 20 	lds	r21, 0x2001
     f5a:	60 91 02 20 	lds	r22, 0x2002
     f5e:	70 91 03 20 	lds	r23, 0x2003
     f62:	92 2f       	mov	r25, r18
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	aa 27       	eor	r26, r26
     f68:	97 fd       	sbrc	r25, 7
     f6a:	a0 95       	com	r26
     f6c:	ba 2f       	mov	r27, r26
     f6e:	84 2b       	or	r24, r20
     f70:	95 2b       	or	r25, r21
     f72:	a6 2b       	or	r26, r22
     f74:	b7 2b       	or	r27, r23
     f76:	80 93 00 20 	sts	0x2000, r24
     f7a:	90 93 01 20 	sts	0x2001, r25
     f7e:	a0 93 02 20 	sts	0x2002, r26
     f82:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[6];
     f86:	20 91 70 29 	lds	r18, 0x2970
     f8a:	80 91 00 20 	lds	r24, 0x2000
     f8e:	90 91 01 20 	lds	r25, 0x2001
     f92:	a0 91 02 20 	lds	r26, 0x2002
     f96:	b0 91 03 20 	lds	r27, 0x2003
     f9a:	82 2b       	or	r24, r18
     f9c:	80 93 00 20 	sts	0x2000, r24
     fa0:	90 93 01 20 	sts	0x2001, r25
     fa4:	a0 93 02 20 	sts	0x2002, r26
     fa8:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = (teta_cilj_final * krug360) / 360;
     fac:	20 91 00 20 	lds	r18, 0x2000
     fb0:	30 91 01 20 	lds	r19, 0x2001
     fb4:	40 91 02 20 	lds	r20, 0x2002
     fb8:	50 91 03 20 	lds	r21, 0x2003
     fbc:	60 91 71 32 	lds	r22, 0x3271
     fc0:	70 91 72 32 	lds	r23, 0x3272
     fc4:	80 91 73 32 	lds	r24, 0x3273
     fc8:	90 91 74 32 	lds	r25, 0x3274
     fcc:	0e 94 43 37 	call	0x6e86	; 0x6e86 <__mulsi3>
     fd0:	28 e6       	ldi	r18, 0x68	; 104
     fd2:	31 e0       	ldi	r19, 0x01	; 1
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
     fdc:	20 93 00 20 	sts	0x2000, r18
     fe0:	30 93 01 20 	sts	0x2001, r19
     fe4:	40 93 02 20 	sts	0x2002, r20
     fe8:	50 93 03 20 	sts	0x2003, r21
     fec:	78 c0       	rjmp	.+240    	; 0x10de <__vector_58+0x6c8>
				}	
				//teta_cilj_final_relative
				else if(!(receiveArray[7] == 0xFF && receiveArray[8] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     fee:	80 91 71 29 	lds	r24, 0x2971
     ff2:	8f 3f       	cpi	r24, 0xFF	; 255
     ff4:	29 f4       	brne	.+10     	; 0x1000 <__vector_58+0x5ea>
     ff6:	80 91 72 29 	lds	r24, 0x2972
     ffa:	8f 3f       	cpi	r24, 0xFF	; 255
     ffc:	09 f4       	brne	.+2      	; 0x1000 <__vector_58+0x5ea>
     ffe:	64 c0       	rjmp	.+200    	; 0x10c8 <__vector_58+0x6b2>
				{
					teta_cilj_final = 0;
    1000:	10 92 00 20 	sts	0x2000, r1
    1004:	10 92 01 20 	sts	0x2001, r1
    1008:	10 92 02 20 	sts	0x2002, r1
    100c:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[7]) << 8;
    1010:	20 91 71 29 	lds	r18, 0x2971
    1014:	40 91 00 20 	lds	r20, 0x2000
    1018:	50 91 01 20 	lds	r21, 0x2001
    101c:	60 91 02 20 	lds	r22, 0x2002
    1020:	70 91 03 20 	lds	r23, 0x2003
    1024:	92 2f       	mov	r25, r18
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	aa 27       	eor	r26, r26
    102a:	97 fd       	sbrc	r25, 7
    102c:	a0 95       	com	r26
    102e:	ba 2f       	mov	r27, r26
    1030:	84 2b       	or	r24, r20
    1032:	95 2b       	or	r25, r21
    1034:	a6 2b       	or	r26, r22
    1036:	b7 2b       	or	r27, r23
    1038:	80 93 00 20 	sts	0x2000, r24
    103c:	90 93 01 20 	sts	0x2001, r25
    1040:	a0 93 02 20 	sts	0x2002, r26
    1044:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[8];
    1048:	20 91 72 29 	lds	r18, 0x2972
    104c:	80 91 00 20 	lds	r24, 0x2000
    1050:	90 91 01 20 	lds	r25, 0x2001
    1054:	a0 91 02 20 	lds	r26, 0x2002
    1058:	b0 91 03 20 	lds	r27, 0x2003
    105c:	82 2b       	or	r24, r18
    105e:	80 93 00 20 	sts	0x2000, r24
    1062:	90 93 01 20 	sts	0x2001, r25
    1066:	a0 93 02 20 	sts	0x2002, r26
    106a:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = teta + (teta_cilj_final * krug360) / 360;
    106e:	20 91 00 20 	lds	r18, 0x2000
    1072:	30 91 01 20 	lds	r19, 0x2001
    1076:	40 91 02 20 	lds	r20, 0x2002
    107a:	50 91 03 20 	lds	r21, 0x2003
    107e:	60 91 71 32 	lds	r22, 0x3271
    1082:	70 91 72 32 	lds	r23, 0x3272
    1086:	80 91 73 32 	lds	r24, 0x3273
    108a:	90 91 74 32 	lds	r25, 0x3274
    108e:	c0 90 7f 32 	lds	r12, 0x327F
    1092:	d0 90 80 32 	lds	r13, 0x3280
    1096:	e0 90 81 32 	lds	r14, 0x3281
    109a:	f0 90 82 32 	lds	r15, 0x3282
    109e:	0e 94 43 37 	call	0x6e86	; 0x6e86 <__mulsi3>
    10a2:	28 e6       	ldi	r18, 0x68	; 104
    10a4:	31 e0       	ldi	r19, 0x01	; 1
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    10ae:	c2 0e       	add	r12, r18
    10b0:	d3 1e       	adc	r13, r19
    10b2:	e4 1e       	adc	r14, r20
    10b4:	f5 1e       	adc	r15, r21
    10b6:	c0 92 00 20 	sts	0x2000, r12
    10ba:	d0 92 01 20 	sts	0x2001, r13
    10be:	e0 92 02 20 	sts	0x2002, r14
    10c2:	f0 92 03 20 	sts	0x2003, r15
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <__vector_58+0x6c8>
				}
				else
					teta_cilj_final = 0xFFFFFFFF;				
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	9f ef       	ldi	r25, 0xFF	; 255
    10cc:	dc 01       	movw	r26, r24
    10ce:	80 93 00 20 	sts	0x2000, r24
    10d2:	90 93 01 20 	sts	0x2001, r25
    10d6:	a0 93 02 20 	sts	0x2002, r26
    10da:	b0 93 03 20 	sts	0x2003, r27
				//bzina
				if(receiveArray[9] != 0xFF)	// ako zadajemo 0xFF ne menja se brzina
    10de:	80 91 73 29 	lds	r24, 0x2973
    10e2:	8f 3f       	cpi	r24, 0xFF	; 255
    10e4:	c9 f0       	breq	.+50     	; 0x1118 <__vector_58+0x702>
				{
					zeljena_pravolinijska_brzina = receiveArray[9] * 3;	//podesiti faktor!
    10e6:	80 91 73 29 	lds	r24, 0x2973
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9c 01       	movw	r18, r24
    10ee:	22 0f       	add	r18, r18
    10f0:	33 1f       	adc	r19, r19
    10f2:	82 0f       	add	r24, r18
    10f4:	93 1f       	adc	r25, r19
    10f6:	80 93 7b 32 	sts	0x327B, r24
    10fa:	90 93 7c 32 	sts	0x327C, r25
					zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2;
    10fe:	80 91 7b 32 	lds	r24, 0x327B
    1102:	90 91 7c 32 	lds	r25, 0x327C
    1106:	99 23       	and	r25, r25
    1108:	0c f4       	brge	.+2      	; 0x110c <__vector_58+0x6f6>
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	95 95       	asr	r25
    110e:	87 95       	ror	r24
    1110:	80 93 5d 2e 	sts	0x2E5D, r24
    1114:	90 93 5e 2e 	sts	0x2E5E, r25
				}				
				//smer
				if(receiveArray[10] != 0xFF)	// ako zadajemo 0xFF ne menja se smer
    1118:	80 91 74 29 	lds	r24, 0x2974
    111c:	8f 3f       	cpi	r24, 0xFF	; 255
    111e:	21 f0       	breq	.+8      	; 0x1128 <__vector_58+0x712>
					smer_zadati = receiveArray[10];	
    1120:	80 91 74 29 	lds	r24, 0x2974
    1124:	80 93 5a 29 	sts	0x295A, r24
				
				//pokretanje snimanja u nizove
				sample_counter_niz_1 = 0;
    1128:	10 92 54 2e 	sts	0x2E54, r1
				niz_counter_niz_1 = 0;	
    112c:	10 92 55 2e 	sts	0x2E55, r1
				sample_counter_niz_2 = 0;
    1130:	10 92 f5 2d 	sts	0x2DF5, r1
				niz_counter_niz_2 = 0;
    1134:	10 92 f6 2d 	sts	0x2DF6, r1
				sample_counter_niz_3 = 0;
    1138:	10 92 5b 29 	sts	0x295B, r1
				niz_counter_niz_3 = 0;		
    113c:	10 92 c2 24 	sts	0x24C2, r1
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
    1140:	80 91 6a 29 	lds	r24, 0x296A
    1144:	80 93 d9 28 	sts	0x28D9, r24
				niz_counter_niz_2 = 0;
				sample_counter_niz_3 = 0;
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
    1148:	00 e0       	ldi	r16, 0x00	; 0
    114a:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];	
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    114c:	f8 01       	movw	r30, r16
    114e:	e7 52       	subi	r30, 0x27	; 39
    1150:	f7 4d       	sbci	r31, 0xD7	; 215
    1152:	60 81       	ld	r22, Z
    1154:	87 e1       	ldi	r24, 0x17	; 23
    1156:	93 e2       	ldi	r25, 0x23	; 35
    1158:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    115c:	88 23       	and	r24, r24
    115e:	11 f0       	breq	.+4      	; 0x1164 <__vector_58+0x74e>
					{
						i++;
    1160:	0f 5f       	subi	r16, 0xFF	; 255
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
				while (i < 1)
    1164:	10 16       	cp	r1, r16
    1166:	11 06       	cpc	r1, r17
    1168:	8c f7       	brge	.-30     	; 0x114c <__vector_58+0x736>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    116a:	10 92 57 2e 	sts	0x2E57, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda	
    116e:	10 92 57 2e 	sts	0x2E57, r1
    1172:	28 c5       	rjmp	.+2640   	; 0x1bc4 <__vector_58+0x11ae>
		}					
	}
	//RELATIVNA DISTANCA I UGAO - 4
	else if(receiveArray[0] == 4)					//provera funkcijskog bajta
    1174:	80 91 6a 29 	lds	r24, 0x296A
    1178:	84 30       	cpi	r24, 0x04	; 4
    117a:	09 f0       	breq	.+2      	; 0x117e <__vector_58+0x768>
    117c:	95 c1       	rjmp	.+810    	; 0x14a8 <__vector_58+0xa92>
	{
		if(RX_i_E0 >= 5)								//stigla je cela poruka
    117e:	80 91 57 2e 	lds	r24, 0x2E57
    1182:	85 30       	cpi	r24, 0x05	; 5
    1184:	08 f4       	brcc	.+2      	; 0x1188 <__vector_58+0x772>
    1186:	1e c5       	rjmp	.+2620   	; 0x1bc4 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1188:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				//ENABLE
				stop_PID_desni = 0;
    118c:	10 92 f0 29 	sts	0x29F0, r1
				stop_PID_levi = 0;
    1190:	10 92 ee 2d 	sts	0x2DEE, r1
				set_direct_out = 0;
    1194:	10 92 7d 32 	sts	0x327D, r1
				
				rel_distanca = 0;
    1198:	10 92 c1 28 	sts	0x28C1, r1
    119c:	10 92 c2 28 	sts	0x28C2, r1
    11a0:	10 92 c3 28 	sts	0x28C3, r1
    11a4:	10 92 c4 28 	sts	0x28C4, r1
				rel_distanca |= ((int)receiveArray[1]) << 8;
    11a8:	20 91 6b 29 	lds	r18, 0x296B
    11ac:	40 91 c1 28 	lds	r20, 0x28C1
    11b0:	50 91 c2 28 	lds	r21, 0x28C2
    11b4:	60 91 c3 28 	lds	r22, 0x28C3
    11b8:	70 91 c4 28 	lds	r23, 0x28C4
    11bc:	92 2f       	mov	r25, r18
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	aa 27       	eor	r26, r26
    11c2:	97 fd       	sbrc	r25, 7
    11c4:	a0 95       	com	r26
    11c6:	ba 2f       	mov	r27, r26
    11c8:	84 2b       	or	r24, r20
    11ca:	95 2b       	or	r25, r21
    11cc:	a6 2b       	or	r26, r22
    11ce:	b7 2b       	or	r27, r23
    11d0:	80 93 c1 28 	sts	0x28C1, r24
    11d4:	90 93 c2 28 	sts	0x28C2, r25
    11d8:	a0 93 c3 28 	sts	0x28C3, r26
    11dc:	b0 93 c4 28 	sts	0x28C4, r27
				rel_distanca |= (int)receiveArray[2];
    11e0:	20 91 6c 29 	lds	r18, 0x296C
    11e4:	80 91 c1 28 	lds	r24, 0x28C1
    11e8:	90 91 c2 28 	lds	r25, 0x28C2
    11ec:	a0 91 c3 28 	lds	r26, 0x28C3
    11f0:	b0 91 c4 28 	lds	r27, 0x28C4
    11f4:	82 2b       	or	r24, r18
    11f6:	80 93 c1 28 	sts	0x28C1, r24
    11fa:	90 93 c2 28 	sts	0x28C2, r25
    11fe:	a0 93 c3 28 	sts	0x28C3, r26
    1202:	b0 93 c4 28 	sts	0x28C4, r27
				rel_distanca = (rel_distanca * scale_factor_for_mm);
    1206:	a0 91 fc 2d 	lds	r26, 0x2DFC
    120a:	b0 91 fd 2d 	lds	r27, 0x2DFD
    120e:	20 91 c1 28 	lds	r18, 0x28C1
    1212:	30 91 c2 28 	lds	r19, 0x28C2
    1216:	40 91 c3 28 	lds	r20, 0x28C3
    121a:	50 91 c4 28 	lds	r21, 0x28C4
    121e:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    1222:	60 93 c1 28 	sts	0x28C1, r22
    1226:	70 93 c2 28 	sts	0x28C2, r23
    122a:	80 93 c3 28 	sts	0x28C3, r24
    122e:	90 93 c4 28 	sts	0x28C4, r25

				rel_ugao = 0;
    1232:	10 92 12 2e 	sts	0x2E12, r1
    1236:	10 92 13 2e 	sts	0x2E13, r1
    123a:	10 92 14 2e 	sts	0x2E14, r1
    123e:	10 92 15 2e 	sts	0x2E15, r1
				rel_ugao |= ((int)receiveArray[3]) << 8;
    1242:	20 91 6d 29 	lds	r18, 0x296D
    1246:	40 91 12 2e 	lds	r20, 0x2E12
    124a:	50 91 13 2e 	lds	r21, 0x2E13
    124e:	60 91 14 2e 	lds	r22, 0x2E14
    1252:	70 91 15 2e 	lds	r23, 0x2E15
    1256:	92 2f       	mov	r25, r18
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	aa 27       	eor	r26, r26
    125c:	97 fd       	sbrc	r25, 7
    125e:	a0 95       	com	r26
    1260:	ba 2f       	mov	r27, r26
    1262:	84 2b       	or	r24, r20
    1264:	95 2b       	or	r25, r21
    1266:	a6 2b       	or	r26, r22
    1268:	b7 2b       	or	r27, r23
    126a:	80 93 12 2e 	sts	0x2E12, r24
    126e:	90 93 13 2e 	sts	0x2E13, r25
    1272:	a0 93 14 2e 	sts	0x2E14, r26
    1276:	b0 93 15 2e 	sts	0x2E15, r27
				rel_ugao |= (int)receiveArray[4];
    127a:	20 91 6e 29 	lds	r18, 0x296E
    127e:	80 91 12 2e 	lds	r24, 0x2E12
    1282:	90 91 13 2e 	lds	r25, 0x2E13
    1286:	a0 91 14 2e 	lds	r26, 0x2E14
    128a:	b0 91 15 2e 	lds	r27, 0x2E15
    128e:	82 2b       	or	r24, r18
    1290:	80 93 12 2e 	sts	0x2E12, r24
    1294:	90 93 13 2e 	sts	0x2E13, r25
    1298:	a0 93 14 2e 	sts	0x2E14, r26
    129c:	b0 93 15 2e 	sts	0x2E15, r27
				rel_ugao = (rel_ugao * krug360) / 360;
    12a0:	20 91 12 2e 	lds	r18, 0x2E12
    12a4:	30 91 13 2e 	lds	r19, 0x2E13
    12a8:	40 91 14 2e 	lds	r20, 0x2E14
    12ac:	50 91 15 2e 	lds	r21, 0x2E15
    12b0:	60 91 71 32 	lds	r22, 0x3271
    12b4:	70 91 72 32 	lds	r23, 0x3272
    12b8:	80 91 73 32 	lds	r24, 0x3273
    12bc:	90 91 74 32 	lds	r25, 0x3274
    12c0:	0e 94 43 37 	call	0x6e86	; 0x6e86 <__mulsi3>
    12c4:	28 e6       	ldi	r18, 0x68	; 104
    12c6:	31 e0       	ldi	r19, 0x01	; 1
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    12d0:	20 93 12 2e 	sts	0x2E12, r18
    12d4:	30 93 13 2e 	sts	0x2E13, r19
    12d8:	40 93 14 2e 	sts	0x2E14, r20
    12dc:	50 93 15 2e 	sts	0x2E15, r21
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    12e0:	40 91 7f 32 	lds	r20, 0x327F
    12e4:	50 91 80 32 	lds	r21, 0x3280
    12e8:	60 91 81 32 	lds	r22, 0x3281
    12ec:	70 91 82 32 	lds	r23, 0x3282
    12f0:	80 91 12 2e 	lds	r24, 0x2E12
    12f4:	90 91 13 2e 	lds	r25, 0x2E13
    12f8:	a0 91 14 2e 	lds	r26, 0x2E14
    12fc:	b0 91 15 2e 	lds	r27, 0x2E15
    1300:	c0 90 cb 28 	lds	r12, 0x28CB
    1304:	d0 90 cc 28 	lds	r13, 0x28CC
    1308:	e0 90 cd 28 	lds	r14, 0x28CD
    130c:	f0 90 ce 28 	lds	r15, 0x28CE
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    1310:	40 90 7f 32 	lds	r4, 0x327F
    1314:	50 90 80 32 	lds	r5, 0x3280
    1318:	60 90 81 32 	lds	r6, 0x3281
    131c:	70 90 82 32 	lds	r7, 0x3282
    1320:	00 91 12 2e 	lds	r16, 0x2E12
    1324:	10 91 13 2e 	lds	r17, 0x2E13
    1328:	20 91 14 2e 	lds	r18, 0x2E14
    132c:	30 91 15 2e 	lds	r19, 0x2E15
    1330:	09 83       	std	Y+1, r16	; 0x01
    1332:	1a 83       	std	Y+2, r17	; 0x02
    1334:	2b 83       	std	Y+3, r18	; 0x03
    1336:	3c 83       	std	Y+4, r19	; 0x04
    1338:	80 90 cb 28 	lds	r8, 0x28CB
    133c:	90 90 cc 28 	lds	r9, 0x28CC
    1340:	a0 90 cd 28 	lds	r10, 0x28CD
    1344:	b0 90 ce 28 	lds	r11, 0x28CE
				rel_ugao |= (int)receiveArray[4];
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    1348:	8a 01       	movw	r16, r20
    134a:	9b 01       	movw	r18, r22
    134c:	08 0f       	add	r16, r24
    134e:	19 1f       	adc	r17, r25
    1350:	2a 1f       	adc	r18, r26
    1352:	3b 1f       	adc	r19, r27
    1354:	c9 01       	movw	r24, r18
    1356:	b8 01       	movw	r22, r16
    1358:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    135c:	6d 83       	std	Y+5, r22	; 0x05
    135e:	7e 83       	std	Y+6, r23	; 0x06
    1360:	8f 83       	std	Y+7, r24	; 0x07
    1362:	98 87       	std	Y+8, r25	; 0x08
    1364:	c7 01       	movw	r24, r14
    1366:	b6 01       	movw	r22, r12
    1368:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    136c:	9b 01       	movw	r18, r22
    136e:	ac 01       	movw	r20, r24
    1370:	6d 81       	ldd	r22, Y+5	; 0x05
    1372:	7e 81       	ldd	r23, Y+6	; 0x06
    1374:	8f 81       	ldd	r24, Y+7	; 0x07
    1376:	98 85       	ldd	r25, Y+8	; 0x08
    1378:	0e 94 bb 34 	call	0x6976	; 0x6976 <__divsf3>
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
    137c:	2b ed       	ldi	r18, 0xDB	; 219
    137e:	3f e0       	ldi	r19, 0x0F	; 15
    1380:	49 e4       	ldi	r20, 0x49	; 73
    1382:	50 e4       	ldi	r21, 0x40	; 64
    1384:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    1388:	0e 94 b8 34 	call	0x6970	; 0x6970 <cos>
    138c:	6b 01       	movw	r12, r22
    138e:	7c 01       	movw	r14, r24
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    1390:	69 81       	ldd	r22, Y+1	; 0x01
    1392:	7a 81       	ldd	r23, Y+2	; 0x02
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	64 0d       	add	r22, r4
    139a:	75 1d       	adc	r23, r5
    139c:	86 1d       	adc	r24, r6
    139e:	97 1d       	adc	r25, r7
    13a0:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    13a4:	2b 01       	movw	r4, r22
    13a6:	3c 01       	movw	r6, r24
    13a8:	c5 01       	movw	r24, r10
    13aa:	b4 01       	movw	r22, r8
    13ac:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    13b0:	9b 01       	movw	r18, r22
    13b2:	ac 01       	movw	r20, r24
    13b4:	c3 01       	movw	r24, r6
    13b6:	b2 01       	movw	r22, r4
    13b8:	0e 94 bb 34 	call	0x6976	; 0x6976 <__divsf3>
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
    13bc:	2b ed       	ldi	r18, 0xDB	; 219
    13be:	3f e0       	ldi	r19, 0x0F	; 15
    13c0:	49 e4       	ldi	r20, 0x49	; 73
    13c2:	50 e4       	ldi	r21, 0x40	; 64
    13c4:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    13c8:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <sin>
    13cc:	4b 01       	movw	r8, r22
    13ce:	5c 01       	movw	r10, r24
				X_pos_cos = rel_distanca * X_pos_cos;
    13d0:	60 91 c1 28 	lds	r22, 0x28C1
    13d4:	70 91 c2 28 	lds	r23, 0x28C2
    13d8:	80 91 c3 28 	lds	r24, 0x28C3
    13dc:	90 91 c4 28 	lds	r25, 0x28C4
				Y_pos_sin = rel_distanca * Y_pos_sin;
    13e0:	40 90 c1 28 	lds	r4, 0x28C1
    13e4:	50 90 c2 28 	lds	r5, 0x28C2
    13e8:	60 90 c3 28 	lds	r6, 0x28C3
    13ec:	70 90 c4 28 	lds	r7, 0x28C4
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    13f0:	20 91 1f 2e 	lds	r18, 0x2E1F
    13f4:	30 91 20 2e 	lds	r19, 0x2E20
    13f8:	40 91 21 2e 	lds	r20, 0x2E21
    13fc:	50 91 22 2e 	lds	r21, 0x2E22
    1400:	29 83       	std	Y+1, r18	; 0x01
    1402:	3a 83       	std	Y+2, r19	; 0x02
    1404:	4b 83       	std	Y+3, r20	; 0x03
    1406:	5c 83       	std	Y+4, r21	; 0x04
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
    1408:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    140c:	a7 01       	movw	r20, r14
    140e:	96 01       	movw	r18, r12
    1410:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
				Y_pos_sin = rel_distanca * Y_pos_sin;
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    1414:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__fixsfsi>
    1418:	09 81       	ldd	r16, Y+1	; 0x01
    141a:	1a 81       	ldd	r17, Y+2	; 0x02
    141c:	2b 81       	ldd	r18, Y+3	; 0x03
    141e:	3c 81       	ldd	r19, Y+4	; 0x04
    1420:	06 0f       	add	r16, r22
    1422:	17 1f       	adc	r17, r23
    1424:	28 1f       	adc	r18, r24
    1426:	39 1f       	adc	r19, r25
    1428:	00 93 ac 24 	sts	0x24AC, r16
    142c:	10 93 ad 24 	sts	0x24AD, r17
    1430:	20 93 ae 24 	sts	0x24AE, r18
    1434:	30 93 af 24 	sts	0x24AF, r19
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    1438:	c0 90 fe 29 	lds	r12, 0x29FE
    143c:	d0 90 ff 29 	lds	r13, 0x29FF
    1440:	e0 90 00 2a 	lds	r14, 0x2A00
    1444:	f0 90 01 2a 	lds	r15, 0x2A01
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
				Y_pos_sin = rel_distanca * Y_pos_sin;
    1448:	c3 01       	movw	r24, r6
    144a:	b2 01       	movw	r22, r4
    144c:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    1450:	a5 01       	movw	r20, r10
    1452:	94 01       	movw	r18, r8
    1454:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    1458:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__fixsfsi>
    145c:	c6 0e       	add	r12, r22
    145e:	d7 1e       	adc	r13, r23
    1460:	e8 1e       	adc	r14, r24
    1462:	f9 1e       	adc	r15, r25
    1464:	c0 92 07 2e 	sts	0x2E07, r12
    1468:	d0 92 08 2e 	sts	0x2E08, r13
    146c:	e0 92 09 2e 	sts	0x2E09, r14
    1470:	f0 92 0a 2e 	sts	0x2E0A, r15
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1474:	80 91 6a 29 	lds	r24, 0x296A
    1478:	80 93 d9 28 	sts	0x28D9, r24
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
    147c:	00 e0       	ldi	r16, 0x00	; 0
    147e:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1480:	f8 01       	movw	r30, r16
    1482:	e7 52       	subi	r30, 0x27	; 39
    1484:	f7 4d       	sbci	r31, 0xD7	; 215
    1486:	60 81       	ld	r22, Z
    1488:	87 e1       	ldi	r24, 0x17	; 23
    148a:	93 e2       	ldi	r25, 0x23	; 35
    148c:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1490:	88 23       	and	r24, r24
    1492:	11 f0       	breq	.+4      	; 0x1498 <__vector_58+0xa82>
					{
						i++;
    1494:	0f 5f       	subi	r16, 0xFF	; 255
    1496:	1f 4f       	sbci	r17, 0xFF	; 255
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    1498:	10 16       	cp	r1, r16
    149a:	11 06       	cpc	r1, r17
    149c:	8c f7       	brge	.-30     	; 0x1480 <__vector_58+0xa6a>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    149e:	10 92 57 2e 	sts	0x2E57, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda
    14a2:	10 92 57 2e 	sts	0x2E57, r1
    14a6:	8e c3       	rjmp	.+1820   	; 0x1bc4 <__vector_58+0x11ae>
		}
	}
	//SET DIRECT OUT - 5
	else if(receiveArray[0] == 5)					//provera funkcijskog bajta
    14a8:	80 91 6a 29 	lds	r24, 0x296A
    14ac:	85 30       	cpi	r24, 0x05	; 5
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <__vector_58+0xa9c>
    14b0:	6e c0       	rjmp	.+220    	; 0x158e <__vector_58+0xb78>
	{
		if(RX_i_E0 >= 3)							//stigla je cela poruka
    14b2:	80 91 57 2e 	lds	r24, 0x2E57
    14b6:	83 30       	cpi	r24, 0x03	; 3
    14b8:	08 f4       	brcc	.+2      	; 0x14bc <__vector_58+0xaa6>
    14ba:	84 c3       	rjmp	.+1800   	; 0x1bc4 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    14bc:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				//ENABLE
				set_direct_out = 1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	80 93 7d 32 	sts	0x327D, r24
				
				if(receiveArray[1] >= 128)
    14c6:	80 91 6b 29 	lds	r24, 0x296B
    14ca:	88 23       	and	r24, r24
    14cc:	8c f4       	brge	.+34     	; 0x14f0 <__vector_58+0xada>
					PID_brzina_L = (receiveArray[1] - 128) * 5;	//podesiti faktor!
    14ce:	80 91 6b 29 	lds	r24, 0x296B
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	9c 01       	movw	r18, r24
    14d6:	22 0f       	add	r18, r18
    14d8:	33 1f       	adc	r19, r19
    14da:	22 0f       	add	r18, r18
    14dc:	33 1f       	adc	r19, r19
    14de:	82 0f       	add	r24, r18
    14e0:	93 1f       	adc	r25, r19
    14e2:	80 58       	subi	r24, 0x80	; 128
    14e4:	92 40       	sbci	r25, 0x02	; 2
    14e6:	80 93 77 2e 	sts	0x2E77, r24
    14ea:	90 93 78 2e 	sts	0x2E78, r25
    14ee:	10 c0       	rjmp	.+32     	; 0x1510 <__vector_58+0xafa>
				else
					PID_brzina_L = (128 - receiveArray[1]) * (-5);
    14f0:	80 91 6b 29 	lds	r24, 0x296B
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9c 01       	movw	r18, r24
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	22 0f       	add	r18, r18
    14fe:	33 1f       	adc	r19, r19
    1500:	82 0f       	add	r24, r18
    1502:	93 1f       	adc	r25, r19
    1504:	80 58       	subi	r24, 0x80	; 128
    1506:	92 40       	sbci	r25, 0x02	; 2
    1508:	80 93 77 2e 	sts	0x2E77, r24
    150c:	90 93 78 2e 	sts	0x2E78, r25
					
				if(receiveArray[2] >= 128)
    1510:	80 91 6c 29 	lds	r24, 0x296C
    1514:	88 23       	and	r24, r24
    1516:	8c f4       	brge	.+34     	; 0x153a <__vector_58+0xb24>
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
    1518:	80 91 6c 29 	lds	r24, 0x296C
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9c 01       	movw	r18, r24
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	22 0f       	add	r18, r18
    1526:	33 1f       	adc	r19, r19
    1528:	82 0f       	add	r24, r18
    152a:	93 1f       	adc	r25, r19
    152c:	80 58       	subi	r24, 0x80	; 128
    152e:	92 40       	sbci	r25, 0x02	; 2
    1530:	80 93 75 2e 	sts	0x2E75, r24
    1534:	90 93 76 2e 	sts	0x2E76, r25
    1538:	10 c0       	rjmp	.+32     	; 0x155a <__vector_58+0xb44>
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
    153a:	80 91 6c 29 	lds	r24, 0x296C
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9c 01       	movw	r18, r24
    1542:	22 0f       	add	r18, r18
    1544:	33 1f       	adc	r19, r19
    1546:	22 0f       	add	r18, r18
    1548:	33 1f       	adc	r19, r19
    154a:	82 0f       	add	r24, r18
    154c:	93 1f       	adc	r25, r19
    154e:	80 58       	subi	r24, 0x80	; 128
    1550:	92 40       	sbci	r25, 0x02	; 2
    1552:	80 93 75 2e 	sts	0x2E75, r24
    1556:	90 93 76 2e 	sts	0x2E76, r25
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    155a:	80 91 6a 29 	lds	r24, 0x296A
    155e:	80 93 d9 28 	sts	0x28D9, r24
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
    1562:	00 e0       	ldi	r16, 0x00	; 0
    1564:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1566:	f8 01       	movw	r30, r16
    1568:	e7 52       	subi	r30, 0x27	; 39
    156a:	f7 4d       	sbci	r31, 0xD7	; 215
    156c:	60 81       	ld	r22, Z
    156e:	87 e1       	ldi	r24, 0x17	; 23
    1570:	93 e2       	ldi	r25, 0x23	; 35
    1572:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1576:	88 23       	and	r24, r24
    1578:	11 f0       	breq	.+4      	; 0x157e <__vector_58+0xb68>
					{
						i++;
    157a:	0f 5f       	subi	r16, 0xFF	; 255
    157c:	1f 4f       	sbci	r17, 0xFF	; 255
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    157e:	10 16       	cp	r1, r16
    1580:	11 06       	cpc	r1, r17
    1582:	8c f7       	brge	.-30     	; 0x1566 <__vector_58+0xb50>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    1584:	10 92 57 2e 	sts	0x2E57, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda
    1588:	10 92 57 2e 	sts	0x2E57, r1
    158c:	1b c3       	rjmp	.+1590   	; 0x1bc4 <__vector_58+0x11ae>
		}
	}			
	//PODESAVANJE FET izlaza i servoa - 6
	else if(receiveArray[0] == 6)					//provera funkcijskog bajta 
    158e:	80 91 6a 29 	lds	r24, 0x296A
    1592:	86 30       	cpi	r24, 0x06	; 6
    1594:	09 f0       	breq	.+2      	; 0x1598 <__vector_58+0xb82>
    1596:	56 c0       	rjmp	.+172    	; 0x1644 <__vector_58+0xc2e>
	{
		if(RX_i_E0 >= 7)							//stigla je cela poruka	(11)
    1598:	80 91 57 2e 	lds	r24, 0x2E57
    159c:	87 30       	cpi	r24, 0x07	; 7
    159e:	08 f4       	brcc	.+2      	; 0x15a2 <__vector_58+0xb8c>
    15a0:	11 c3       	rjmp	.+1570   	; 0x1bc4 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    15a2:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				PORTC.OUT |= receiveArray[1] & receiveArray[2];	//izlazi + maska
    15a6:	e0 e4       	ldi	r30, 0x40	; 64
    15a8:	f6 e0       	ldi	r31, 0x06	; 6
    15aa:	94 81       	ldd	r25, Z+4	; 0x04
    15ac:	4b e6       	ldi	r20, 0x6B	; 107
    15ae:	59 e2       	ldi	r21, 0x29	; 41
    15b0:	da 01       	movw	r26, r20
    15b2:	8c 91       	ld	r24, X
    15b4:	6c e6       	ldi	r22, 0x6C	; 108
    15b6:	79 e2       	ldi	r23, 0x29	; 41
    15b8:	db 01       	movw	r26, r22
    15ba:	2c 91       	ld	r18, X
    15bc:	82 23       	and	r24, r18
    15be:	89 2b       	or	r24, r25
    15c0:	84 83       	std	Z+4, r24	; 0x04
				PORTC.OUT &= ~(receiveArray[1] ^ receiveArray[2]);	//izlazi + maska
    15c2:	94 81       	ldd	r25, Z+4	; 0x04
    15c4:	da 01       	movw	r26, r20
    15c6:	8c 91       	ld	r24, X
    15c8:	db 01       	movw	r26, r22
    15ca:	2c 91       	ld	r18, X
    15cc:	82 27       	eor	r24, r18
    15ce:	80 95       	com	r24
    15d0:	89 23       	and	r24, r25
    15d2:	84 83       	std	Z+4, r24	; 0x04
				
				//120 - nulti polozaj, 280 - krajnji polozaj
				TCF0.CCA = receiveArray[3] + 120;
    15d4:	80 91 6d 29 	lds	r24, 0x296D
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	88 58       	subi	r24, 0x88	; 136
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	e0 e0       	ldi	r30, 0x00	; 0
    15e0:	fb e0       	ldi	r31, 0x0B	; 11
    15e2:	80 a7       	std	Z+40, r24	; 0x28
    15e4:	91 a7       	std	Z+41, r25	; 0x29
				TCF0.CCB = receiveArray[4] + 120;
    15e6:	80 91 6e 29 	lds	r24, 0x296E
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	88 58       	subi	r24, 0x88	; 136
    15ee:	9f 4f       	sbci	r25, 0xFF	; 255
    15f0:	82 a7       	std	Z+42, r24	; 0x2a
    15f2:	93 a7       	std	Z+43, r25	; 0x2b
				TCF0.CCC = receiveArray[5] + 120;
    15f4:	80 91 6f 29 	lds	r24, 0x296F
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	88 58       	subi	r24, 0x88	; 136
    15fc:	9f 4f       	sbci	r25, 0xFF	; 255
    15fe:	84 a7       	std	Z+44, r24	; 0x2c
    1600:	95 a7       	std	Z+45, r25	; 0x2d
				TCF0.CCD = receiveArray[6] + 120;
    1602:	80 91 70 29 	lds	r24, 0x2970
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	88 58       	subi	r24, 0x88	; 136
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	86 a7       	std	Z+46, r24	; 0x2e
    160e:	97 a7       	std	Z+47, r25	; 0x2f
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1610:	80 91 6a 29 	lds	r24, 0x296A
    1614:	80 93 d9 28 	sts	0x28D9, r24
				TCF0.CCB = receiveArray[4] + 120;
				TCF0.CCC = receiveArray[5] + 120;
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
    1618:	00 e0       	ldi	r16, 0x00	; 0
    161a:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    161c:	f8 01       	movw	r30, r16
    161e:	e7 52       	subi	r30, 0x27	; 39
    1620:	f7 4d       	sbci	r31, 0xD7	; 215
    1622:	60 81       	ld	r22, Z
    1624:	87 e1       	ldi	r24, 0x17	; 23
    1626:	93 e2       	ldi	r25, 0x23	; 35
    1628:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    162c:	88 23       	and	r24, r24
    162e:	11 f0       	breq	.+4      	; 0x1634 <__vector_58+0xc1e>
					{
						i++;
    1630:	0f 5f       	subi	r16, 0xFF	; 255
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    1634:	10 16       	cp	r1, r16
    1636:	11 06       	cpc	r1, r17
    1638:	8c f7       	brge	.-30     	; 0x161c <__vector_58+0xc06>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    163a:	10 92 57 2e 	sts	0x2E57, r1
			}
			RX_i_E0 = 0;	//ako ne valja CHC ponistava se komanda
    163e:	10 92 57 2e 	sts	0x2E57, r1
    1642:	c0 c2       	rjmp	.+1408   	; 0x1bc4 <__vector_58+0x11ae>
		}		
	}		
	//Upis trenutne pozicije - 7
	else if(receiveArray[0] == 7)					//provera funkcijskog bajta
    1644:	80 91 6a 29 	lds	r24, 0x296A
    1648:	87 30       	cpi	r24, 0x07	; 7
    164a:	09 f0       	breq	.+2      	; 0x164e <__vector_58+0xc38>
    164c:	7d c1       	rjmp	.+762    	; 0x1948 <__vector_58+0xf32>
	{
		if(RX_i_E0 >= 7)							//stigla je cela poruka	(11)
    164e:	80 91 57 2e 	lds	r24, 0x2E57
    1652:	87 30       	cpi	r24, 0x07	; 7
    1654:	08 f4       	brcc	.+2      	; 0x1658 <__vector_58+0xc42>
    1656:	b6 c2       	rjmp	.+1388   	; 0x1bc4 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1658:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				//x_pos
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    165c:	80 91 6b 29 	lds	r24, 0x296B
    1660:	8f 3f       	cpi	r24, 0xFF	; 255
    1662:	29 f4       	brne	.+10     	; 0x166e <__vector_58+0xc58>
    1664:	80 91 6c 29 	lds	r24, 0x296C
    1668:	8f 3f       	cpi	r24, 0xFF	; 255
    166a:	09 f4       	brne	.+2      	; 0x166e <__vector_58+0xc58>
    166c:	6d c0       	rjmp	.+218    	; 0x1748 <__vector_58+0xd32>
				{
					X_pos = 0;
    166e:	10 92 1f 2e 	sts	0x2E1F, r1
    1672:	10 92 20 2e 	sts	0x2E20, r1
    1676:	10 92 21 2e 	sts	0x2E21, r1
    167a:	10 92 22 2e 	sts	0x2E22, r1
					X_pos |= ((int)receiveArray[1]) << 8;
    167e:	20 91 6b 29 	lds	r18, 0x296B
    1682:	40 91 1f 2e 	lds	r20, 0x2E1F
    1686:	50 91 20 2e 	lds	r21, 0x2E20
    168a:	60 91 21 2e 	lds	r22, 0x2E21
    168e:	70 91 22 2e 	lds	r23, 0x2E22
    1692:	92 2f       	mov	r25, r18
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	aa 27       	eor	r26, r26
    1698:	97 fd       	sbrc	r25, 7
    169a:	a0 95       	com	r26
    169c:	ba 2f       	mov	r27, r26
    169e:	84 2b       	or	r24, r20
    16a0:	95 2b       	or	r25, r21
    16a2:	a6 2b       	or	r26, r22
    16a4:	b7 2b       	or	r27, r23
    16a6:	80 93 1f 2e 	sts	0x2E1F, r24
    16aa:	90 93 20 2e 	sts	0x2E20, r25
    16ae:	a0 93 21 2e 	sts	0x2E21, r26
    16b2:	b0 93 22 2e 	sts	0x2E22, r27
					X_pos |= (int)receiveArray[2];
    16b6:	20 91 6c 29 	lds	r18, 0x296C
    16ba:	80 91 1f 2e 	lds	r24, 0x2E1F
    16be:	90 91 20 2e 	lds	r25, 0x2E20
    16c2:	a0 91 21 2e 	lds	r26, 0x2E21
    16c6:	b0 91 22 2e 	lds	r27, 0x2E22
    16ca:	82 2b       	or	r24, r18
    16cc:	80 93 1f 2e 	sts	0x2E1F, r24
    16d0:	90 93 20 2e 	sts	0x2E20, r25
    16d4:	a0 93 21 2e 	sts	0x2E21, r26
    16d8:	b0 93 22 2e 	sts	0x2E22, r27
					X_pos = (X_pos * scale_factor_for_mm);
    16dc:	a0 91 fc 2d 	lds	r26, 0x2DFC
    16e0:	b0 91 fd 2d 	lds	r27, 0x2DFD
    16e4:	20 91 1f 2e 	lds	r18, 0x2E1F
    16e8:	30 91 20 2e 	lds	r19, 0x2E20
    16ec:	40 91 21 2e 	lds	r20, 0x2E21
    16f0:	50 91 22 2e 	lds	r21, 0x2E22
    16f4:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    16f8:	60 93 1f 2e 	sts	0x2E1F, r22
    16fc:	70 93 20 2e 	sts	0x2E20, r23
    1700:	80 93 21 2e 	sts	0x2E21, r24
    1704:	90 93 22 2e 	sts	0x2E22, r25
					X_cilj = X_pos;
    1708:	80 91 1f 2e 	lds	r24, 0x2E1F
    170c:	90 91 20 2e 	lds	r25, 0x2E20
    1710:	a0 91 21 2e 	lds	r26, 0x2E21
    1714:	b0 91 22 2e 	lds	r27, 0x2E22
    1718:	80 93 ac 24 	sts	0x24AC, r24
    171c:	90 93 ad 24 	sts	0x24AD, r25
    1720:	a0 93 ae 24 	sts	0x24AE, r26
    1724:	b0 93 af 24 	sts	0x24AF, r27
					X_cilj_stari = X_pos;
    1728:	80 91 1f 2e 	lds	r24, 0x2E1F
    172c:	90 91 20 2e 	lds	r25, 0x2E20
    1730:	a0 91 21 2e 	lds	r26, 0x2E21
    1734:	b0 91 22 2e 	lds	r27, 0x2E22
    1738:	80 93 2d 2e 	sts	0x2E2D, r24
    173c:	90 93 2e 2e 	sts	0x2E2E, r25
    1740:	a0 93 2f 2e 	sts	0x2E2F, r26
    1744:	b0 93 30 2e 	sts	0x2E30, r27
				}
				//Y_pos
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    1748:	80 91 6d 29 	lds	r24, 0x296D
    174c:	8f 3f       	cpi	r24, 0xFF	; 255
    174e:	29 f4       	brne	.+10     	; 0x175a <__vector_58+0xd44>
    1750:	80 91 6e 29 	lds	r24, 0x296E
    1754:	8f 3f       	cpi	r24, 0xFF	; 255
    1756:	09 f4       	brne	.+2      	; 0x175a <__vector_58+0xd44>
    1758:	6d c0       	rjmp	.+218    	; 0x1834 <__vector_58+0xe1e>
				{
					Y_pos = 0;
    175a:	10 92 fe 29 	sts	0x29FE, r1
    175e:	10 92 ff 29 	sts	0x29FF, r1
    1762:	10 92 00 2a 	sts	0x2A00, r1
    1766:	10 92 01 2a 	sts	0x2A01, r1
					Y_pos |= ((int)receiveArray[3]) << 8;
    176a:	20 91 6d 29 	lds	r18, 0x296D
    176e:	40 91 fe 29 	lds	r20, 0x29FE
    1772:	50 91 ff 29 	lds	r21, 0x29FF
    1776:	60 91 00 2a 	lds	r22, 0x2A00
    177a:	70 91 01 2a 	lds	r23, 0x2A01
    177e:	92 2f       	mov	r25, r18
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	aa 27       	eor	r26, r26
    1784:	97 fd       	sbrc	r25, 7
    1786:	a0 95       	com	r26
    1788:	ba 2f       	mov	r27, r26
    178a:	84 2b       	or	r24, r20
    178c:	95 2b       	or	r25, r21
    178e:	a6 2b       	or	r26, r22
    1790:	b7 2b       	or	r27, r23
    1792:	80 93 fe 29 	sts	0x29FE, r24
    1796:	90 93 ff 29 	sts	0x29FF, r25
    179a:	a0 93 00 2a 	sts	0x2A00, r26
    179e:	b0 93 01 2a 	sts	0x2A01, r27
					Y_pos |= (int)receiveArray[4];
    17a2:	20 91 6e 29 	lds	r18, 0x296E
    17a6:	80 91 fe 29 	lds	r24, 0x29FE
    17aa:	90 91 ff 29 	lds	r25, 0x29FF
    17ae:	a0 91 00 2a 	lds	r26, 0x2A00
    17b2:	b0 91 01 2a 	lds	r27, 0x2A01
    17b6:	82 2b       	or	r24, r18
    17b8:	80 93 fe 29 	sts	0x29FE, r24
    17bc:	90 93 ff 29 	sts	0x29FF, r25
    17c0:	a0 93 00 2a 	sts	0x2A00, r26
    17c4:	b0 93 01 2a 	sts	0x2A01, r27
					Y_pos = Y_pos * scale_factor_for_mm;
    17c8:	a0 91 fc 2d 	lds	r26, 0x2DFC
    17cc:	b0 91 fd 2d 	lds	r27, 0x2DFD
    17d0:	20 91 fe 29 	lds	r18, 0x29FE
    17d4:	30 91 ff 29 	lds	r19, 0x29FF
    17d8:	40 91 00 2a 	lds	r20, 0x2A00
    17dc:	50 91 01 2a 	lds	r21, 0x2A01
    17e0:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    17e4:	60 93 fe 29 	sts	0x29FE, r22
    17e8:	70 93 ff 29 	sts	0x29FF, r23
    17ec:	80 93 00 2a 	sts	0x2A00, r24
    17f0:	90 93 01 2a 	sts	0x2A01, r25
					Y_cilj = Y_pos;
    17f4:	80 91 fe 29 	lds	r24, 0x29FE
    17f8:	90 91 ff 29 	lds	r25, 0x29FF
    17fc:	a0 91 00 2a 	lds	r26, 0x2A00
    1800:	b0 91 01 2a 	lds	r27, 0x2A01
    1804:	80 93 07 2e 	sts	0x2E07, r24
    1808:	90 93 08 2e 	sts	0x2E08, r25
    180c:	a0 93 09 2e 	sts	0x2E09, r26
    1810:	b0 93 0a 2e 	sts	0x2E0A, r27
					Y_cilj_stari = Y_pos;
    1814:	80 91 fe 29 	lds	r24, 0x29FE
    1818:	90 91 ff 29 	lds	r25, 0x29FF
    181c:	a0 91 00 2a 	lds	r26, 0x2A00
    1820:	b0 91 01 2a 	lds	r27, 0x2A01
    1824:	80 93 6c 2e 	sts	0x2E6C, r24
    1828:	90 93 6d 2e 	sts	0x2E6D, r25
    182c:	a0 93 6e 2e 	sts	0x2E6E, r26
    1830:	b0 93 6f 2e 	sts	0x2E6F, r27
				}
				
				//teta
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    1834:	80 91 6f 29 	lds	r24, 0x296F
    1838:	8f 3f       	cpi	r24, 0xFF	; 255
    183a:	29 f4       	brne	.+10     	; 0x1846 <__vector_58+0xe30>
    183c:	80 91 70 29 	lds	r24, 0x2970
    1840:	8f 3f       	cpi	r24, 0xFF	; 255
    1842:	09 f4       	brne	.+2      	; 0x1846 <__vector_58+0xe30>
    1844:	67 c0       	rjmp	.+206    	; 0x1914 <__vector_58+0xefe>
				{
					teta = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    1846:	10 92 7f 32 	sts	0x327F, r1
    184a:	10 92 80 32 	sts	0x3280, r1
    184e:	10 92 81 32 	sts	0x3281, r1
    1852:	10 92 82 32 	sts	0x3282, r1
					teta |= ((int)receiveArray[5]) << 8;
    1856:	20 91 6f 29 	lds	r18, 0x296F
    185a:	40 91 7f 32 	lds	r20, 0x327F
    185e:	50 91 80 32 	lds	r21, 0x3280
    1862:	60 91 81 32 	lds	r22, 0x3281
    1866:	70 91 82 32 	lds	r23, 0x3282
    186a:	92 2f       	mov	r25, r18
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	aa 27       	eor	r26, r26
    1870:	97 fd       	sbrc	r25, 7
    1872:	a0 95       	com	r26
    1874:	ba 2f       	mov	r27, r26
    1876:	84 2b       	or	r24, r20
    1878:	95 2b       	or	r25, r21
    187a:	a6 2b       	or	r26, r22
    187c:	b7 2b       	or	r27, r23
    187e:	80 93 7f 32 	sts	0x327F, r24
    1882:	90 93 80 32 	sts	0x3280, r25
    1886:	a0 93 81 32 	sts	0x3281, r26
    188a:	b0 93 82 32 	sts	0x3282, r27
					teta |= (int)receiveArray[6];
    188e:	20 91 70 29 	lds	r18, 0x2970
    1892:	80 91 7f 32 	lds	r24, 0x327F
    1896:	90 91 80 32 	lds	r25, 0x3280
    189a:	a0 91 81 32 	lds	r26, 0x3281
    189e:	b0 91 82 32 	lds	r27, 0x3282
    18a2:	82 2b       	or	r24, r18
    18a4:	80 93 7f 32 	sts	0x327F, r24
    18a8:	90 93 80 32 	sts	0x3280, r25
    18ac:	a0 93 81 32 	sts	0x3281, r26
    18b0:	b0 93 82 32 	sts	0x3282, r27
					teta = (teta * krug360) / 360;
    18b4:	20 91 7f 32 	lds	r18, 0x327F
    18b8:	30 91 80 32 	lds	r19, 0x3280
    18bc:	40 91 81 32 	lds	r20, 0x3281
    18c0:	50 91 82 32 	lds	r21, 0x3282
    18c4:	60 91 71 32 	lds	r22, 0x3271
    18c8:	70 91 72 32 	lds	r23, 0x3272
    18cc:	80 91 73 32 	lds	r24, 0x3273
    18d0:	90 91 74 32 	lds	r25, 0x3274
    18d4:	0e 94 43 37 	call	0x6e86	; 0x6e86 <__mulsi3>
    18d8:	28 e6       	ldi	r18, 0x68	; 104
    18da:	31 e0       	ldi	r19, 0x01	; 1
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    18e4:	20 93 7f 32 	sts	0x327F, r18
    18e8:	30 93 80 32 	sts	0x3280, r19
    18ec:	40 93 81 32 	sts	0x3281, r20
    18f0:	50 93 82 32 	sts	0x3282, r21
					teta_cilj = teta;
    18f4:	80 91 7f 32 	lds	r24, 0x327F
    18f8:	90 91 80 32 	lds	r25, 0x3280
    18fc:	a0 91 81 32 	lds	r26, 0x3281
    1900:	b0 91 82 32 	lds	r27, 0x3282
    1904:	80 93 c8 24 	sts	0x24C8, r24
    1908:	90 93 c9 24 	sts	0x24C9, r25
    190c:	a0 93 ca 24 	sts	0x24CA, r26
    1910:	b0 93 cb 24 	sts	0x24CB, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1914:	80 91 6a 29 	lds	r24, 0x296A
    1918:	80 93 d9 28 	sts	0x28D9, r24
					teta = (teta * krug360) / 360;
					teta_cilj = teta;
				}
				
				//slanje odgovora
				i = 0;
    191c:	00 e0       	ldi	r16, 0x00	; 0
    191e:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1920:	f8 01       	movw	r30, r16
    1922:	e7 52       	subi	r30, 0x27	; 39
    1924:	f7 4d       	sbci	r31, 0xD7	; 215
    1926:	60 81       	ld	r22, Z
    1928:	87 e1       	ldi	r24, 0x17	; 23
    192a:	93 e2       	ldi	r25, 0x23	; 35
    192c:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1930:	88 23       	and	r24, r24
    1932:	11 f0       	breq	.+4      	; 0x1938 <__vector_58+0xf22>
					{
						i++;
    1934:	0f 5f       	subi	r16, 0xFF	; 255
    1936:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    1938:	10 16       	cp	r1, r16
    193a:	11 06       	cpc	r1, r17
    193c:	8c f7       	brge	.-30     	; 0x1920 <__vector_58+0xf0a>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    193e:	10 92 57 2e 	sts	0x2E57, r1
			}
			RX_i_E0 = 0;	//ako ne valja CHC ponistava se komanda
    1942:	10 92 57 2e 	sts	0x2E57, r1
    1946:	3e c1       	rjmp	.+636    	; 0x1bc4 <__vector_58+0x11ae>
		}
	}
	//Total Stop - 8
	else if(receiveArray[0] == 8)					//provera funkcijskog bajta
    1948:	80 91 6a 29 	lds	r24, 0x296A
    194c:	88 30       	cpi	r24, 0x08	; 8
    194e:	d9 f5       	brne	.+118    	; 0x19c6 <__vector_58+0xfb0>
	{
		if(RX_i_E0 >= 3)							//stigla je cela poruka
    1950:	80 91 57 2e 	lds	r24, 0x2E57
    1954:	83 30       	cpi	r24, 0x03	; 3
    1956:	08 f4       	brcc	.+2      	; 0x195a <__vector_58+0xf44>
    1958:	35 c1       	rjmp	.+618    	; 0x1bc4 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    195a:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				
				if(receiveArray[1] == 0x01)
    195e:	80 91 6b 29 	lds	r24, 0x296B
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	39 f4       	brne	.+14     	; 0x1974 <__vector_58+0xf5e>
				{
					stop_PID_levi = 1;
    1966:	80 93 ee 2d 	sts	0x2DEE, r24
					PID_brzina_L = 0;
    196a:	10 92 77 2e 	sts	0x2E77, r1
    196e:	10 92 78 2e 	sts	0x2E78, r1
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <__vector_58+0xf62>
				}				
				else
					stop_PID_levi = 0;
    1974:	10 92 ee 2d 	sts	0x2DEE, r1
					
				if(receiveArray[2] == 0x01)
    1978:	80 91 6c 29 	lds	r24, 0x296C
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	39 f4       	brne	.+14     	; 0x198e <__vector_58+0xf78>
				{
					stop_PID_desni = 1;
    1980:	80 93 f0 29 	sts	0x29F0, r24
					PID_brzina_R = 0;
    1984:	10 92 75 2e 	sts	0x2E75, r1
    1988:	10 92 76 2e 	sts	0x2E76, r1
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <__vector_58+0xf7c>
				}					
				else
					stop_PID_desni = 0;
    198e:	10 92 f0 29 	sts	0x29F0, r1
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1992:	80 91 6a 29 	lds	r24, 0x296A
    1996:	80 93 d9 28 	sts	0x28D9, r24
				}					
				else
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
    199a:	00 e0       	ldi	r16, 0x00	; 0
    199c:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    199e:	f8 01       	movw	r30, r16
    19a0:	e7 52       	subi	r30, 0x27	; 39
    19a2:	f7 4d       	sbci	r31, 0xD7	; 215
    19a4:	60 81       	ld	r22, Z
    19a6:	87 e1       	ldi	r24, 0x17	; 23
    19a8:	93 e2       	ldi	r25, 0x23	; 35
    19aa:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    19ae:	88 23       	and	r24, r24
    19b0:	11 f0       	breq	.+4      	; 0x19b6 <__vector_58+0xfa0>
					{
						i++;
    19b2:	0f 5f       	subi	r16, 0xFF	; 255
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    19b6:	10 16       	cp	r1, r16
    19b8:	11 06       	cpc	r1, r17
    19ba:	8c f7       	brge	.-30     	; 0x199e <__vector_58+0xf88>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    19bc:	10 92 57 2e 	sts	0x2E57, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda
    19c0:	10 92 57 2e 	sts	0x2E57, r1
    19c4:	ff c0       	rjmp	.+510    	; 0x1bc4 <__vector_58+0x11ae>
		}
	}
	//citanje X koordinate
	else if(receiveArray[0] == 101)						//provera funkcijskog bajta >> 101-citanje X pozicije
    19c6:	80 91 6a 29 	lds	r24, 0x296A
    19ca:	85 36       	cpi	r24, 0x65	; 101
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <__vector_58+0xfba>
    19ce:	4b c0       	rjmp	.+150    	; 0x1a66 <__vector_58+0x1050>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
    19d0:	80 91 57 2e 	lds	r24, 0x2E57
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	09 f0       	breq	.+2      	; 0x19da <__vector_58+0xfc4>
    19d8:	f5 c0       	rjmp	.+490    	; 0x1bc4 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    19da:	10 92 f7 2d 	sts	0x2DF7, r1
			
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    19de:	80 91 6a 29 	lds	r24, 0x296A
    19e2:	80 93 d9 28 	sts	0x28D9, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    19e6:	60 91 1f 2e 	lds	r22, 0x2E1F
    19ea:	70 91 20 2e 	lds	r23, 0x2E20
    19ee:	80 91 21 2e 	lds	r24, 0x2E21
    19f2:	90 91 22 2e 	lds	r25, 0x2E22
    19f6:	20 91 fc 2d 	lds	r18, 0x2DFC
    19fa:	30 91 fd 2d 	lds	r19, 0x2DFD
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1a06:	bb 27       	eor	r27, r27
    1a08:	57 fd       	sbrc	r21, 7
    1a0a:	ba 95       	dec	r27
    1a0c:	a5 2f       	mov	r26, r21
    1a0e:	94 2f       	mov	r25, r20
    1a10:	83 2f       	mov	r24, r19
    1a12:	80 93 da 28 	sts	0x28DA, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    1a16:	60 91 1f 2e 	lds	r22, 0x2E1F
    1a1a:	70 91 20 2e 	lds	r23, 0x2E20
    1a1e:	80 91 21 2e 	lds	r24, 0x2E21
    1a22:	90 91 22 2e 	lds	r25, 0x2E22
    1a26:	20 91 fc 2d 	lds	r18, 0x2DFC
    1a2a:	30 91 fd 2d 	lds	r19, 0x2DFD
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1a36:	20 93 db 28 	sts	0x28DB, r18
				
				i = 0;
    1a3a:	00 e0       	ldi	r16, 0x00	; 0
    1a3c:	10 e0       	ldi	r17, 0x00	; 0
				while (i < 3) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1a3e:	f8 01       	movw	r30, r16
    1a40:	e7 52       	subi	r30, 0x27	; 39
    1a42:	f7 4d       	sbci	r31, 0xD7	; 215
    1a44:	60 81       	ld	r22, Z
    1a46:	87 e1       	ldi	r24, 0x17	; 23
    1a48:	93 e2       	ldi	r25, 0x23	; 35
    1a4a:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1a4e:	88 23       	and	r24, r24
    1a50:	11 f0       	breq	.+4      	; 0x1a56 <__vector_58+0x1040>
						i++;
    1a52:	0f 5f       	subi	r16, 0xFF	; 255
    1a54:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
				
				i = 0;
				while (i < 3) 
    1a56:	03 30       	cpi	r16, 0x03	; 3
    1a58:	11 05       	cpc	r17, r1
    1a5a:	8c f3       	brlt	.-30     	; 0x1a3e <__vector_58+0x1028>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
    1a5c:	10 92 57 2e 	sts	0x2E57, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
    1a60:	10 92 57 2e 	sts	0x2E57, r1
    1a64:	af c0       	rjmp	.+350    	; 0x1bc4 <__vector_58+0x11ae>
		}		
	}
	//citanje Y koordinate
	else if(receiveArray[0] == 102)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    1a66:	80 91 6a 29 	lds	r24, 0x296A
    1a6a:	86 36       	cpi	r24, 0x66	; 102
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <__vector_58+0x105a>
    1a6e:	4b c0       	rjmp	.+150    	; 0x1b06 <__vector_58+0x10f0>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
    1a70:	80 91 57 2e 	lds	r24, 0x2E57
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <__vector_58+0x1064>
    1a78:	a5 c0       	rjmp	.+330    	; 0x1bc4 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1a7a:	10 92 f7 2d 	sts	0x2DF7, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    1a7e:	80 91 6a 29 	lds	r24, 0x296A
    1a82:	80 93 d9 28 	sts	0x28D9, r24
				sendArray[1] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    1a86:	60 91 fe 29 	lds	r22, 0x29FE
    1a8a:	70 91 ff 29 	lds	r23, 0x29FF
    1a8e:	80 91 00 2a 	lds	r24, 0x2A00
    1a92:	90 91 01 2a 	lds	r25, 0x2A01
    1a96:	20 91 fc 2d 	lds	r18, 0x2DFC
    1a9a:	30 91 fd 2d 	lds	r19, 0x2DFD
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1aa6:	bb 27       	eor	r27, r27
    1aa8:	57 fd       	sbrc	r21, 7
    1aaa:	ba 95       	dec	r27
    1aac:	a5 2f       	mov	r26, r21
    1aae:	94 2f       	mov	r25, r20
    1ab0:	83 2f       	mov	r24, r19
    1ab2:	80 93 da 28 	sts	0x28DA, r24
				sendArray[2] = Y_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    1ab6:	60 91 fe 29 	lds	r22, 0x29FE
    1aba:	70 91 ff 29 	lds	r23, 0x29FF
    1abe:	80 91 00 2a 	lds	r24, 0x2A00
    1ac2:	90 91 01 2a 	lds	r25, 0x2A01
    1ac6:	20 91 fc 2d 	lds	r18, 0x2DFC
    1aca:	30 91 fd 2d 	lds	r19, 0x2DFD
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1ad6:	20 93 db 28 	sts	0x28DB, r18
				
				i = 0;
    1ada:	00 e0       	ldi	r16, 0x00	; 0
    1adc:	10 e0       	ldi	r17, 0x00	; 0
				while (i < 3) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1ade:	f8 01       	movw	r30, r16
    1ae0:	e7 52       	subi	r30, 0x27	; 39
    1ae2:	f7 4d       	sbci	r31, 0xD7	; 215
    1ae4:	60 81       	ld	r22, Z
    1ae6:	87 e1       	ldi	r24, 0x17	; 23
    1ae8:	93 e2       	ldi	r25, 0x23	; 35
    1aea:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1aee:	88 23       	and	r24, r24
    1af0:	11 f0       	breq	.+4      	; 0x1af6 <__vector_58+0x10e0>
						i++;
    1af2:	0f 5f       	subi	r16, 0xFF	; 255
    1af4:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
				sendArray[1] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
				sendArray[2] = Y_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
				
				i = 0;
				while (i < 3) 
    1af6:	03 30       	cpi	r16, 0x03	; 3
    1af8:	11 05       	cpc	r17, r1
    1afa:	8c f3       	brlt	.-30     	; 0x1ade <__vector_58+0x10c8>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
    1afc:	10 92 57 2e 	sts	0x2E57, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
    1b00:	10 92 57 2e 	sts	0x2E57, r1
    1b04:	5f c0       	rjmp	.+190    	; 0x1bc4 <__vector_58+0x11ae>
		}		
	}
	//citanje teta abs
	else if(receiveArray[0] == 103)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    1b06:	80 91 6a 29 	lds	r24, 0x296A
    1b0a:	87 36       	cpi	r24, 0x67	; 103
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <__vector_58+0x10fa>
    1b0e:	5a c0       	rjmp	.+180    	; 0x1bc4 <__vector_58+0x11ae>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
    1b10:	80 91 57 2e 	lds	r24, 0x2E57
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <__vector_58+0x1104>
    1b18:	55 c0       	rjmp	.+170    	; 0x1bc4 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1b1a:	10 92 f7 2d 	sts	0x2DF7, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    1b1e:	80 91 6a 29 	lds	r24, 0x296A
    1b22:	80 93 d9 28 	sts	0x28D9, r24
				sendArray[1] = ((teta * 360) / krug360) >> 8;						//Teta HI
    1b26:	20 91 7f 32 	lds	r18, 0x327F
    1b2a:	30 91 80 32 	lds	r19, 0x3280
    1b2e:	40 91 81 32 	lds	r20, 0x3281
    1b32:	50 91 82 32 	lds	r21, 0x3282
    1b36:	c0 90 71 32 	lds	r12, 0x3271
    1b3a:	d0 90 72 32 	lds	r13, 0x3272
    1b3e:	e0 90 73 32 	lds	r14, 0x3273
    1b42:	f0 90 74 32 	lds	r15, 0x3274
    1b46:	a8 e6       	ldi	r26, 0x68	; 104
    1b48:	b1 e0       	ldi	r27, 0x01	; 1
    1b4a:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    1b4e:	a7 01       	movw	r20, r14
    1b50:	96 01       	movw	r18, r12
    1b52:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1b56:	bb 27       	eor	r27, r27
    1b58:	57 fd       	sbrc	r21, 7
    1b5a:	ba 95       	dec	r27
    1b5c:	a5 2f       	mov	r26, r21
    1b5e:	94 2f       	mov	r25, r20
    1b60:	83 2f       	mov	r24, r19
    1b62:	80 93 da 28 	sts	0x28DA, r24
				sendArray[2] = ((teta * 360) / krug360);							//Teta LOW
    1b66:	20 91 7f 32 	lds	r18, 0x327F
    1b6a:	30 91 80 32 	lds	r19, 0x3280
    1b6e:	40 91 81 32 	lds	r20, 0x3281
    1b72:	50 91 82 32 	lds	r21, 0x3282
    1b76:	c0 90 71 32 	lds	r12, 0x3271
    1b7a:	d0 90 72 32 	lds	r13, 0x3272
    1b7e:	e0 90 73 32 	lds	r14, 0x3273
    1b82:	f0 90 74 32 	lds	r15, 0x3274
    1b86:	a8 e6       	ldi	r26, 0x68	; 104
    1b88:	b1 e0       	ldi	r27, 0x01	; 1
    1b8a:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    1b8e:	a7 01       	movw	r20, r14
    1b90:	96 01       	movw	r18, r12
    1b92:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1b96:	20 93 db 28 	sts	0x28DB, r18
				
				i = 0;
    1b9a:	00 e0       	ldi	r16, 0x00	; 0
    1b9c:	10 e0       	ldi	r17, 0x00	; 0
				while (i < 3) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	e7 52       	subi	r30, 0x27	; 39
    1ba2:	f7 4d       	sbci	r31, 0xD7	; 215
    1ba4:	60 81       	ld	r22, Z
    1ba6:	87 e1       	ldi	r24, 0x17	; 23
    1ba8:	93 e2       	ldi	r25, 0x23	; 35
    1baa:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1bae:	88 23       	and	r24, r24
    1bb0:	11 f0       	breq	.+4      	; 0x1bb6 <__vector_58+0x11a0>
						i++;
    1bb2:	0f 5f       	subi	r16, 0xFF	; 255
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
				sendArray[1] = ((teta * 360) / krug360) >> 8;						//Teta HI
				sendArray[2] = ((teta * 360) / krug360);							//Teta LOW
				
				i = 0;
				while (i < 3) 
    1bb6:	03 30       	cpi	r16, 0x03	; 3
    1bb8:	11 05       	cpc	r17, r1
    1bba:	8c f3       	brlt	.-30     	; 0x1b9e <__vector_58+0x1188>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
    1bbc:	10 92 57 2e 	sts	0x2E57, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
    1bc0:	10 92 57 2e 	sts	0x2E57, r1
		}		
	}
}
    1bc4:	28 96       	adiw	r28, 0x08	; 8
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	ff 91       	pop	r31
    1bd0:	ef 91       	pop	r30
    1bd2:	bf 91       	pop	r27
    1bd4:	af 91       	pop	r26
    1bd6:	9f 91       	pop	r25
    1bd8:	8f 91       	pop	r24
    1bda:	7f 91       	pop	r23
    1bdc:	6f 91       	pop	r22
    1bde:	5f 91       	pop	r21
    1be0:	4f 91       	pop	r20
    1be2:	3f 91       	pop	r19
    1be4:	2f 91       	pop	r18
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	ff 90       	pop	r15
    1bec:	ef 90       	pop	r14
    1bee:	df 90       	pop	r13
    1bf0:	cf 90       	pop	r12
    1bf2:	bf 90       	pop	r11
    1bf4:	af 90       	pop	r10
    1bf6:	9f 90       	pop	r9
    1bf8:	8f 90       	pop	r8
    1bfa:	7f 90       	pop	r7
    1bfc:	6f 90       	pop	r6
    1bfe:	5f 90       	pop	r5
    1c00:	4f 90       	pop	r4
    1c02:	0f 90       	pop	r0
    1c04:	0b be       	out	0x3b, r0	; 59
    1c06:	0f 90       	pop	r0
    1c08:	0a be       	out	0x3a, r0	; 58
    1c0a:	0f 90       	pop	r0
    1c0c:	09 be       	out	0x39, r0	; 57
    1c0e:	0f 90       	pop	r0
    1c10:	08 be       	out	0x38, r0	; 56
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	0f 90       	pop	r0
    1c18:	1f 90       	pop	r1
    1c1a:	18 95       	reti

00001c1c <__vector_61>:
//Serijska komunikacija USART_E1 - BT - bluetooth
ISR(USARTE1_RXC_vect)
{	
    1c1c:	1f 92       	push	r1
    1c1e:	0f 92       	push	r0
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	0f 92       	push	r0
    1c24:	11 24       	eor	r1, r1
    1c26:	08 b6       	in	r0, 0x38	; 56
    1c28:	0f 92       	push	r0
    1c2a:	18 be       	out	0x38, r1	; 56
    1c2c:	09 b6       	in	r0, 0x39	; 57
    1c2e:	0f 92       	push	r0
    1c30:	19 be       	out	0x39, r1	; 57
    1c32:	0a b6       	in	r0, 0x3a	; 58
    1c34:	0f 92       	push	r0
    1c36:	1a be       	out	0x3a, r1	; 58
    1c38:	0b b6       	in	r0, 0x3b	; 59
    1c3a:	0f 92       	push	r0
    1c3c:	1b be       	out	0x3b, r1	; 59
    1c3e:	4f 92       	push	r4
    1c40:	5f 92       	push	r5
    1c42:	6f 92       	push	r6
    1c44:	7f 92       	push	r7
    1c46:	8f 92       	push	r8
    1c48:	9f 92       	push	r9
    1c4a:	af 92       	push	r10
    1c4c:	bf 92       	push	r11
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	2f 93       	push	r18
    1c5c:	3f 93       	push	r19
    1c5e:	4f 93       	push	r20
    1c60:	5f 93       	push	r21
    1c62:	6f 93       	push	r22
    1c64:	7f 93       	push	r23
    1c66:	8f 93       	push	r24
    1c68:	9f 93       	push	r25
    1c6a:	af 93       	push	r26
    1c6c:	bf 93       	push	r27
    1c6e:	ef 93       	push	r30
    1c70:	ff 93       	push	r31
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	28 97       	sbiw	r28, 0x08	; 8
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	de bf       	out	0x3e, r29	; 62
	int i;
	USART_RXComplete(&USART_E1_data);
    1c80:	89 e0       	ldi	r24, 0x09	; 9
    1c82:	90 e2       	ldi	r25, 0x20	; 32
    1c84:	0e 94 70 33 	call	0x66e0	; 0x66e0 <USART_RXComplete>
	receiveArray[RX_i_E1] = USART_RXBuffer_GetByte(&USART_E1_data);
    1c88:	80 91 59 29 	lds	r24, 0x2959
    1c8c:	08 2f       	mov	r16, r24
    1c8e:	10 e0       	ldi	r17, 0x00	; 0
    1c90:	89 e0       	ldi	r24, 0x09	; 9
    1c92:	90 e2       	ldi	r25, 0x20	; 32
    1c94:	0e 94 62 33 	call	0x66c4	; 0x66c4 <USART_RXBuffer_GetByte>
    1c98:	f8 01       	movw	r30, r16
    1c9a:	e6 59       	subi	r30, 0x96	; 150
    1c9c:	f6 4d       	sbci	r31, 0xD6	; 214
    1c9e:	80 83       	st	Z, r24
	//USART_TXBuffer_PutByte(&USART_E1_data, receiveArray[RX_i_E1]);	//echo
	RX_i_E1++;
    1ca0:	80 91 59 29 	lds	r24, 0x2959
    1ca4:	8f 5f       	subi	r24, 0xFF	; 255
    1ca6:	80 93 59 29 	sts	0x2959, r24
	
	//vremenska zastita
	if (RX_i_E1 >= 1)
    1caa:	80 91 59 29 	lds	r24, 0x2959
    1cae:	88 23       	and	r24, r24
    1cb0:	19 f0       	breq	.+6      	; 0x1cb8 <__vector_61+0x9c>
 		proveri_vreme_primanja = 1;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	80 93 f7 2d 	sts	0x2DF7, r24
	 
	//CITANJE PARAMETARA - 1
	if(receiveArray[0] == 1)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    1cb8:	80 91 6a 29 	lds	r24, 0x296A
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <__vector_61+0xa6>
    1cc0:	00 c1       	rjmp	.+512    	; 0x1ec2 <__vector_61+0x2a6>
	{
		if(RX_i_E1 == 1)								//stigla je cela poruka (2)
    1cc2:	80 91 59 29 	lds	r24, 0x2959
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	11 f0       	breq	.+4      	; 0x1cce <__vector_61+0xb2>
    1cca:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1cce:	10 92 f7 2d 	sts	0x2DF7, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    1cd2:	80 91 6a 29 	lds	r24, 0x296A
    1cd6:	80 93 d9 28 	sts	0x28D9, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    1cda:	60 91 1f 2e 	lds	r22, 0x2E1F
    1cde:	70 91 20 2e 	lds	r23, 0x2E20
    1ce2:	80 91 21 2e 	lds	r24, 0x2E21
    1ce6:	90 91 22 2e 	lds	r25, 0x2E22
    1cea:	20 91 fc 2d 	lds	r18, 0x2DFC
    1cee:	30 91 fd 2d 	lds	r19, 0x2DFD
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1cfa:	bb 27       	eor	r27, r27
    1cfc:	57 fd       	sbrc	r21, 7
    1cfe:	ba 95       	dec	r27
    1d00:	a5 2f       	mov	r26, r21
    1d02:	94 2f       	mov	r25, r20
    1d04:	83 2f       	mov	r24, r19
    1d06:	80 93 da 28 	sts	0x28DA, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    1d0a:	60 91 1f 2e 	lds	r22, 0x2E1F
    1d0e:	70 91 20 2e 	lds	r23, 0x2E20
    1d12:	80 91 21 2e 	lds	r24, 0x2E21
    1d16:	90 91 22 2e 	lds	r25, 0x2E22
    1d1a:	20 91 fc 2d 	lds	r18, 0x2DFC
    1d1e:	30 91 fd 2d 	lds	r19, 0x2DFD
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1d2a:	20 93 db 28 	sts	0x28DB, r18
				sendArray[3] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna Y pozicija HI
    1d2e:	60 91 fe 29 	lds	r22, 0x29FE
    1d32:	70 91 ff 29 	lds	r23, 0x29FF
    1d36:	80 91 00 2a 	lds	r24, 0x2A00
    1d3a:	90 91 01 2a 	lds	r25, 0x2A01
    1d3e:	20 91 fc 2d 	lds	r18, 0x2DFC
    1d42:	30 91 fd 2d 	lds	r19, 0x2DFD
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1d4e:	bb 27       	eor	r27, r27
    1d50:	57 fd       	sbrc	r21, 7
    1d52:	ba 95       	dec	r27
    1d54:	a5 2f       	mov	r26, r21
    1d56:	94 2f       	mov	r25, r20
    1d58:	83 2f       	mov	r24, r19
    1d5a:	80 93 dc 28 	sts	0x28DC, r24
				sendArray[4] = Y_pos / scale_factor_for_mm;							//Absolutna Y pozicija LO
    1d5e:	60 91 fe 29 	lds	r22, 0x29FE
    1d62:	70 91 ff 29 	lds	r23, 0x29FF
    1d66:	80 91 00 2a 	lds	r24, 0x2A00
    1d6a:	90 91 01 2a 	lds	r25, 0x2A01
    1d6e:	20 91 fc 2d 	lds	r18, 0x2DFC
    1d72:	30 91 fd 2d 	lds	r19, 0x2DFD
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1d7e:	20 93 dd 28 	sts	0x28DD, r18
				sendArray[5] = ((teta * 360) / krug360) >> 8;						//Teta HI
    1d82:	20 91 7f 32 	lds	r18, 0x327F
    1d86:	30 91 80 32 	lds	r19, 0x3280
    1d8a:	40 91 81 32 	lds	r20, 0x3281
    1d8e:	50 91 82 32 	lds	r21, 0x3282
    1d92:	c0 90 71 32 	lds	r12, 0x3271
    1d96:	d0 90 72 32 	lds	r13, 0x3272
    1d9a:	e0 90 73 32 	lds	r14, 0x3273
    1d9e:	f0 90 74 32 	lds	r15, 0x3274
    1da2:	a8 e6       	ldi	r26, 0x68	; 104
    1da4:	b1 e0       	ldi	r27, 0x01	; 1
    1da6:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    1daa:	a7 01       	movw	r20, r14
    1dac:	96 01       	movw	r18, r12
    1dae:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1db2:	bb 27       	eor	r27, r27
    1db4:	57 fd       	sbrc	r21, 7
    1db6:	ba 95       	dec	r27
    1db8:	a5 2f       	mov	r26, r21
    1dba:	94 2f       	mov	r25, r20
    1dbc:	83 2f       	mov	r24, r19
    1dbe:	80 93 de 28 	sts	0x28DE, r24
				sendArray[6] = ((teta * 360) / krug360);							//Teta LO	
    1dc2:	20 91 7f 32 	lds	r18, 0x327F
    1dc6:	30 91 80 32 	lds	r19, 0x3280
    1dca:	40 91 81 32 	lds	r20, 0x3281
    1dce:	50 91 82 32 	lds	r21, 0x3282
    1dd2:	c0 90 71 32 	lds	r12, 0x3271
    1dd6:	d0 90 72 32 	lds	r13, 0x3272
    1dda:	e0 90 73 32 	lds	r14, 0x3273
    1dde:	f0 90 74 32 	lds	r15, 0x3274
    1de2:	a8 e6       	ldi	r26, 0x68	; 104
    1de4:	b1 e0       	ldi	r27, 0x01	; 1
    1de6:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    1dea:	a7 01       	movw	r20, r14
    1dec:	96 01       	movw	r18, r12
    1dee:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1df2:	20 93 df 28 	sts	0x28DF, r18
				sendArray[7] = (rastojanje_cilj_temp / scale_factor_for_mm) >> 8;	//Rastojanje od zadate tacke HI
    1df6:	60 91 0e 2e 	lds	r22, 0x2E0E
    1dfa:	70 91 0f 2e 	lds	r23, 0x2E0F
    1dfe:	80 91 10 2e 	lds	r24, 0x2E10
    1e02:	90 91 11 2e 	lds	r25, 0x2E11
    1e06:	20 91 fc 2d 	lds	r18, 0x2DFC
    1e0a:	30 91 fd 2d 	lds	r19, 0x2DFD
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	50 e0       	ldi	r21, 0x00	; 0
    1e12:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1e16:	bb 27       	eor	r27, r27
    1e18:	57 fd       	sbrc	r21, 7
    1e1a:	ba 95       	dec	r27
    1e1c:	a5 2f       	mov	r26, r21
    1e1e:	94 2f       	mov	r25, r20
    1e20:	83 2f       	mov	r24, r19
    1e22:	80 93 e0 28 	sts	0x28E0, r24
				sendArray[8] = (rastojanje_cilj_temp / scale_factor_for_mm);		//Rastojanje od zadate tacke LO
    1e26:	60 91 0e 2e 	lds	r22, 0x2E0E
    1e2a:	70 91 0f 2e 	lds	r23, 0x2E0F
    1e2e:	80 91 10 2e 	lds	r24, 0x2E10
    1e32:	90 91 11 2e 	lds	r25, 0x2E11
    1e36:	20 91 fc 2d 	lds	r18, 0x2DFC
    1e3a:	30 91 fd 2d 	lds	r19, 0x2DFD
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    1e46:	20 93 e1 28 	sts	0x28E1, r18
				sendArray[9] = stigao_flag;											//stigao flag
    1e4a:	80 91 06 20 	lds	r24, 0x2006
    1e4e:	80 93 e2 28 	sts	0x28E2, r24
				sendArray[10] = sample_L16;											//trenutna brzina leva
    1e52:	80 91 9e 24 	lds	r24, 0x249E
    1e56:	90 91 9f 24 	lds	r25, 0x249F
    1e5a:	80 93 e3 28 	sts	0x28E3, r24
				sendArray[11] = sample_R16;											//trenutna brzina desna
    1e5e:	80 91 be 24 	lds	r24, 0x24BE
    1e62:	90 91 bf 24 	lds	r25, 0x24BF
    1e66:	80 93 e4 28 	sts	0x28E4, r24
				sendArray[12] =	ADC_ResultCh_GetWord(&ADCA.CH0, offset);			//struja motora 1
    1e6a:	60 91 56 2e 	lds	r22, 0x2E56
    1e6e:	80 e2       	ldi	r24, 0x20	; 32
    1e70:	92 e0       	ldi	r25, 0x02	; 2
    1e72:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    1e76:	80 93 e5 28 	sts	0x28E5, r24
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
    1e7a:	60 91 56 2e 	lds	r22, 0x2E56
    1e7e:	88 e2       	ldi	r24, 0x28	; 40
    1e80:	92 e0       	ldi	r25, 0x02	; 2
    1e82:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    1e86:	80 93 e6 28 	sts	0x28E6, r24
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
    1e8a:	e0 e2       	ldi	r30, 0x20	; 32
    1e8c:	f6 e0       	ldi	r31, 0x06	; 6
    1e8e:	80 85       	ldd	r24, Z+8	; 0x08
    1e90:	80 93 e7 28 	sts	0x28E7, r24
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
    1e94:	00 e0       	ldi	r16, 0x00	; 0
    1e96:	10 e0       	ldi	r17, 0x00	; 0
				while (i <= 14) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    1e98:	f8 01       	movw	r30, r16
    1e9a:	e7 52       	subi	r30, 0x27	; 39
    1e9c:	f7 4d       	sbci	r31, 0xD7	; 215
    1e9e:	60 81       	ld	r22, Z
    1ea0:	89 e0       	ldi	r24, 0x09	; 9
    1ea2:	90 e2       	ldi	r25, 0x20	; 32
    1ea4:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1ea8:	88 23       	and	r24, r24
    1eaa:	11 f0       	breq	.+4      	; 0x1eb0 <__vector_61+0x294>
						i++;
    1eac:	0f 5f       	subi	r16, 0xFF	; 255
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
				while (i <= 14) 
    1eb0:	0f 30       	cpi	r16, 0x0F	; 15
    1eb2:	11 05       	cpc	r17, r1
    1eb4:	8c f3       	brlt	.-30     	; 0x1e98 <__vector_61+0x27c>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E1 = 0;
    1eb6:	10 92 59 29 	sts	0x2959, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda				
    1eba:	10 92 59 29 	sts	0x2959, r1
    1ebe:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__vector_61+0x193a>
		}		
	}
	//ZADAVANJE X,Y KOORDINATA - 2
	else if(receiveArray[0] == 2)					//provera funkcijskog bajta >> 2-upis x,y koordinate
    1ec2:	80 91 6a 29 	lds	r24, 0x296A
    1ec6:	82 30       	cpi	r24, 0x02	; 2
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <__vector_61+0x2b0>
    1eca:	c1 c0       	rjmp	.+386    	; 0x204e <__vector_61+0x432>
	{
		if(RX_i_E1 >= 5)							//stigla je cela poruka	(5 bajtova)
    1ecc:	80 91 59 29 	lds	r24, 0x2959
    1ed0:	85 30       	cpi	r24, 0x05	; 5
    1ed2:	10 f4       	brcc	.+4      	; 0x1ed8 <__vector_61+0x2bc>
    1ed4:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1ed8:	10 92 f7 2d 	sts	0x2DF7, r1
			//ENABLE
			stop_PID_desni = 0;
    1edc:	10 92 f0 29 	sts	0x29F0, r1
			stop_PID_levi = 0;
    1ee0:	10 92 ee 2d 	sts	0x2DEE, r1
			set_direct_out = 0;
    1ee4:	10 92 7d 32 	sts	0x327D, r1
			
			X_cilj = 0;
    1ee8:	10 92 ac 24 	sts	0x24AC, r1
    1eec:	10 92 ad 24 	sts	0x24AD, r1
    1ef0:	10 92 ae 24 	sts	0x24AE, r1
    1ef4:	10 92 af 24 	sts	0x24AF, r1
			X_cilj |= (int)receiveArray[1] << 8;
    1ef8:	20 91 6b 29 	lds	r18, 0x296B
    1efc:	40 91 ac 24 	lds	r20, 0x24AC
    1f00:	50 91 ad 24 	lds	r21, 0x24AD
    1f04:	60 91 ae 24 	lds	r22, 0x24AE
    1f08:	70 91 af 24 	lds	r23, 0x24AF
    1f0c:	92 2f       	mov	r25, r18
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	aa 27       	eor	r26, r26
    1f12:	97 fd       	sbrc	r25, 7
    1f14:	a0 95       	com	r26
    1f16:	ba 2f       	mov	r27, r26
    1f18:	84 2b       	or	r24, r20
    1f1a:	95 2b       	or	r25, r21
    1f1c:	a6 2b       	or	r26, r22
    1f1e:	b7 2b       	or	r27, r23
    1f20:	80 93 ac 24 	sts	0x24AC, r24
    1f24:	90 93 ad 24 	sts	0x24AD, r25
    1f28:	a0 93 ae 24 	sts	0x24AE, r26
    1f2c:	b0 93 af 24 	sts	0x24AF, r27
			X_cilj |= (int)receiveArray[2];
    1f30:	20 91 6c 29 	lds	r18, 0x296C
    1f34:	80 91 ac 24 	lds	r24, 0x24AC
    1f38:	90 91 ad 24 	lds	r25, 0x24AD
    1f3c:	a0 91 ae 24 	lds	r26, 0x24AE
    1f40:	b0 91 af 24 	lds	r27, 0x24AF
    1f44:	82 2b       	or	r24, r18
    1f46:	80 93 ac 24 	sts	0x24AC, r24
    1f4a:	90 93 ad 24 	sts	0x24AD, r25
    1f4e:	a0 93 ae 24 	sts	0x24AE, r26
    1f52:	b0 93 af 24 	sts	0x24AF, r27
			X_cilj = (X_cilj * scale_factor_for_mm);
    1f56:	a0 91 fc 2d 	lds	r26, 0x2DFC
    1f5a:	b0 91 fd 2d 	lds	r27, 0x2DFD
    1f5e:	20 91 ac 24 	lds	r18, 0x24AC
    1f62:	30 91 ad 24 	lds	r19, 0x24AD
    1f66:	40 91 ae 24 	lds	r20, 0x24AE
    1f6a:	50 91 af 24 	lds	r21, 0x24AF
    1f6e:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    1f72:	60 93 ac 24 	sts	0x24AC, r22
    1f76:	70 93 ad 24 	sts	0x24AD, r23
    1f7a:	80 93 ae 24 	sts	0x24AE, r24
    1f7e:	90 93 af 24 	sts	0x24AF, r25
			//Y_cilj
			Y_cilj = 0;
    1f82:	10 92 07 2e 	sts	0x2E07, r1
    1f86:	10 92 08 2e 	sts	0x2E08, r1
    1f8a:	10 92 09 2e 	sts	0x2E09, r1
    1f8e:	10 92 0a 2e 	sts	0x2E0A, r1
			Y_cilj |= (int)receiveArray[3] << 8;
    1f92:	20 91 6d 29 	lds	r18, 0x296D
    1f96:	40 91 07 2e 	lds	r20, 0x2E07
    1f9a:	50 91 08 2e 	lds	r21, 0x2E08
    1f9e:	60 91 09 2e 	lds	r22, 0x2E09
    1fa2:	70 91 0a 2e 	lds	r23, 0x2E0A
    1fa6:	92 2f       	mov	r25, r18
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	aa 27       	eor	r26, r26
    1fac:	97 fd       	sbrc	r25, 7
    1fae:	a0 95       	com	r26
    1fb0:	ba 2f       	mov	r27, r26
    1fb2:	84 2b       	or	r24, r20
    1fb4:	95 2b       	or	r25, r21
    1fb6:	a6 2b       	or	r26, r22
    1fb8:	b7 2b       	or	r27, r23
    1fba:	80 93 07 2e 	sts	0x2E07, r24
    1fbe:	90 93 08 2e 	sts	0x2E08, r25
    1fc2:	a0 93 09 2e 	sts	0x2E09, r26
    1fc6:	b0 93 0a 2e 	sts	0x2E0A, r27
			Y_cilj |= (int)receiveArray[4];
    1fca:	20 91 6e 29 	lds	r18, 0x296E
    1fce:	80 91 07 2e 	lds	r24, 0x2E07
    1fd2:	90 91 08 2e 	lds	r25, 0x2E08
    1fd6:	a0 91 09 2e 	lds	r26, 0x2E09
    1fda:	b0 91 0a 2e 	lds	r27, 0x2E0A
    1fde:	82 2b       	or	r24, r18
    1fe0:	80 93 07 2e 	sts	0x2E07, r24
    1fe4:	90 93 08 2e 	sts	0x2E08, r25
    1fe8:	a0 93 09 2e 	sts	0x2E09, r26
    1fec:	b0 93 0a 2e 	sts	0x2E0A, r27
			Y_cilj = Y_cilj * scale_factor_for_mm;
    1ff0:	a0 91 fc 2d 	lds	r26, 0x2DFC
    1ff4:	b0 91 fd 2d 	lds	r27, 0x2DFD
    1ff8:	20 91 07 2e 	lds	r18, 0x2E07
    1ffc:	30 91 08 2e 	lds	r19, 0x2E08
    2000:	40 91 09 2e 	lds	r20, 0x2E09
    2004:	50 91 0a 2e 	lds	r21, 0x2E0A
    2008:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    200c:	60 93 07 2e 	sts	0x2E07, r22
    2010:	70 93 08 2e 	sts	0x2E08, r23
    2014:	80 93 09 2e 	sts	0x2E09, r24
    2018:	90 93 0a 2e 	sts	0x2E0A, r25
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
    201c:	80 91 6a 29 	lds	r24, 0x296A
    2020:	80 93 d9 28 	sts	0x28D9, r24
			i = 0;
    2024:	00 e0       	ldi	r16, 0x00	; 0
    2026:	10 e0       	ldi	r17, 0x00	; 0
			while (i < 1)
			{
				bool byteToBuffer;
				byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2028:	f8 01       	movw	r30, r16
    202a:	e7 52       	subi	r30, 0x27	; 39
    202c:	f7 4d       	sbci	r31, 0xD7	; 215
    202e:	60 81       	ld	r22, Z
    2030:	89 e0       	ldi	r24, 0x09	; 9
    2032:	90 e2       	ldi	r25, 0x20	; 32
    2034:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
				if(byteToBuffer)
    2038:	88 23       	and	r24, r24
    203a:	11 f0       	breq	.+4      	; 0x2040 <__vector_61+0x424>
				{
					i++;
    203c:	0f 5f       	subi	r16, 0xFF	; 255
    203e:	1f 4f       	sbci	r17, 0xFF	; 255
			Y_cilj = Y_cilj * scale_factor_for_mm;
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
			i = 0;
			while (i < 1)
    2040:	10 16       	cp	r1, r16
    2042:	11 06       	cpc	r1, r17
    2044:	8c f7       	brge	.-30     	; 0x2028 <__vector_61+0x40c>
				if(byteToBuffer)
				{
					i++;
				}
			}
			RX_i_E1 = 0;
    2046:	10 92 59 29 	sts	0x2959, r1
    204a:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__vector_61+0x193a>
		}
	}	
	//ZADAVANJE X,Y KOORDINATA I PARAMETRE KRETANJA - 3
	else if(receiveArray[0] == 3)					//provera funkcijskog bajta >> 3 - X,Y koordinate sa svim parametrima kretanja
    204e:	80 91 6a 29 	lds	r24, 0x296A
    2052:	83 30       	cpi	r24, 0x03	; 3
    2054:	09 f0       	breq	.+2      	; 0x2058 <__vector_61+0x43c>
    2056:	e5 c1       	rjmp	.+970    	; 0x2422 <__vector_61+0x806>
	{
		if(RX_i_E1 >= 11)							//stigla je cela poruka	(11)
    2058:	80 91 59 29 	lds	r24, 0x2959
    205c:	8b 30       	cpi	r24, 0x0B	; 11
    205e:	10 f4       	brcc	.+4      	; 0x2064 <__vector_61+0x448>
    2060:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2064:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				//x_cilj
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2068:	80 91 6b 29 	lds	r24, 0x296B
    206c:	8f 3f       	cpi	r24, 0xFF	; 255
    206e:	29 f4       	brne	.+10     	; 0x207a <__vector_61+0x45e>
    2070:	80 91 6c 29 	lds	r24, 0x296C
    2074:	8f 3f       	cpi	r24, 0xFF	; 255
    2076:	09 f4       	brne	.+2      	; 0x207a <__vector_61+0x45e>
    2078:	53 c0       	rjmp	.+166    	; 0x2120 <__vector_61+0x504>
				{
					//ENABLE
					stop_PID_desni = 0;
    207a:	10 92 f0 29 	sts	0x29F0, r1
					stop_PID_levi = 0;
    207e:	10 92 ee 2d 	sts	0x2DEE, r1
					set_direct_out = 0;
    2082:	10 92 7d 32 	sts	0x327D, r1
					
					X_cilj = 0;
    2086:	10 92 ac 24 	sts	0x24AC, r1
    208a:	10 92 ad 24 	sts	0x24AD, r1
    208e:	10 92 ae 24 	sts	0x24AE, r1
    2092:	10 92 af 24 	sts	0x24AF, r1
					X_cilj |= (int)receiveArray[1] << 8;
    2096:	20 91 6b 29 	lds	r18, 0x296B
    209a:	40 91 ac 24 	lds	r20, 0x24AC
    209e:	50 91 ad 24 	lds	r21, 0x24AD
    20a2:	60 91 ae 24 	lds	r22, 0x24AE
    20a6:	70 91 af 24 	lds	r23, 0x24AF
    20aa:	92 2f       	mov	r25, r18
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	aa 27       	eor	r26, r26
    20b0:	97 fd       	sbrc	r25, 7
    20b2:	a0 95       	com	r26
    20b4:	ba 2f       	mov	r27, r26
    20b6:	84 2b       	or	r24, r20
    20b8:	95 2b       	or	r25, r21
    20ba:	a6 2b       	or	r26, r22
    20bc:	b7 2b       	or	r27, r23
    20be:	80 93 ac 24 	sts	0x24AC, r24
    20c2:	90 93 ad 24 	sts	0x24AD, r25
    20c6:	a0 93 ae 24 	sts	0x24AE, r26
    20ca:	b0 93 af 24 	sts	0x24AF, r27
					X_cilj |= (int)receiveArray[2];
    20ce:	20 91 6c 29 	lds	r18, 0x296C
    20d2:	80 91 ac 24 	lds	r24, 0x24AC
    20d6:	90 91 ad 24 	lds	r25, 0x24AD
    20da:	a0 91 ae 24 	lds	r26, 0x24AE
    20de:	b0 91 af 24 	lds	r27, 0x24AF
    20e2:	82 2b       	or	r24, r18
    20e4:	80 93 ac 24 	sts	0x24AC, r24
    20e8:	90 93 ad 24 	sts	0x24AD, r25
    20ec:	a0 93 ae 24 	sts	0x24AE, r26
    20f0:	b0 93 af 24 	sts	0x24AF, r27
					X_cilj = (X_cilj * scale_factor_for_mm);	
    20f4:	a0 91 fc 2d 	lds	r26, 0x2DFC
    20f8:	b0 91 fd 2d 	lds	r27, 0x2DFD
    20fc:	20 91 ac 24 	lds	r18, 0x24AC
    2100:	30 91 ad 24 	lds	r19, 0x24AD
    2104:	40 91 ae 24 	lds	r20, 0x24AE
    2108:	50 91 af 24 	lds	r21, 0x24AF
    210c:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    2110:	60 93 ac 24 	sts	0x24AC, r22
    2114:	70 93 ad 24 	sts	0x24AD, r23
    2118:	80 93 ae 24 	sts	0x24AE, r24
    211c:	90 93 af 24 	sts	0x24AF, r25
				}	
				//Y_cilj
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2120:	80 91 6d 29 	lds	r24, 0x296D
    2124:	8f 3f       	cpi	r24, 0xFF	; 255
    2126:	29 f4       	brne	.+10     	; 0x2132 <__vector_61+0x516>
    2128:	80 91 6e 29 	lds	r24, 0x296E
    212c:	8f 3f       	cpi	r24, 0xFF	; 255
    212e:	09 f4       	brne	.+2      	; 0x2132 <__vector_61+0x516>
    2130:	53 c0       	rjmp	.+166    	; 0x21d8 <__vector_61+0x5bc>
				{		
					stop_PID_desni = 0;
    2132:	10 92 f0 29 	sts	0x29F0, r1
					stop_PID_levi = 0;	
    2136:	10 92 ee 2d 	sts	0x2DEE, r1
					set_direct_out = 0;
    213a:	10 92 7d 32 	sts	0x327D, r1
					Y_cilj = 0;
    213e:	10 92 07 2e 	sts	0x2E07, r1
    2142:	10 92 08 2e 	sts	0x2E08, r1
    2146:	10 92 09 2e 	sts	0x2E09, r1
    214a:	10 92 0a 2e 	sts	0x2E0A, r1
					Y_cilj |= (int)receiveArray[3] << 8;
    214e:	20 91 6d 29 	lds	r18, 0x296D
    2152:	40 91 07 2e 	lds	r20, 0x2E07
    2156:	50 91 08 2e 	lds	r21, 0x2E08
    215a:	60 91 09 2e 	lds	r22, 0x2E09
    215e:	70 91 0a 2e 	lds	r23, 0x2E0A
    2162:	92 2f       	mov	r25, r18
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	aa 27       	eor	r26, r26
    2168:	97 fd       	sbrc	r25, 7
    216a:	a0 95       	com	r26
    216c:	ba 2f       	mov	r27, r26
    216e:	84 2b       	or	r24, r20
    2170:	95 2b       	or	r25, r21
    2172:	a6 2b       	or	r26, r22
    2174:	b7 2b       	or	r27, r23
    2176:	80 93 07 2e 	sts	0x2E07, r24
    217a:	90 93 08 2e 	sts	0x2E08, r25
    217e:	a0 93 09 2e 	sts	0x2E09, r26
    2182:	b0 93 0a 2e 	sts	0x2E0A, r27
					Y_cilj |= (int)receiveArray[4];
    2186:	20 91 6e 29 	lds	r18, 0x296E
    218a:	80 91 07 2e 	lds	r24, 0x2E07
    218e:	90 91 08 2e 	lds	r25, 0x2E08
    2192:	a0 91 09 2e 	lds	r26, 0x2E09
    2196:	b0 91 0a 2e 	lds	r27, 0x2E0A
    219a:	82 2b       	or	r24, r18
    219c:	80 93 07 2e 	sts	0x2E07, r24
    21a0:	90 93 08 2e 	sts	0x2E08, r25
    21a4:	a0 93 09 2e 	sts	0x2E09, r26
    21a8:	b0 93 0a 2e 	sts	0x2E0A, r27
					Y_cilj = Y_cilj * scale_factor_for_mm;
    21ac:	a0 91 fc 2d 	lds	r26, 0x2DFC
    21b0:	b0 91 fd 2d 	lds	r27, 0x2DFD
    21b4:	20 91 07 2e 	lds	r18, 0x2E07
    21b8:	30 91 08 2e 	lds	r19, 0x2E08
    21bc:	40 91 09 2e 	lds	r20, 0x2E09
    21c0:	50 91 0a 2e 	lds	r21, 0x2E0A
    21c4:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    21c8:	60 93 07 2e 	sts	0x2E07, r22
    21cc:	70 93 08 2e 	sts	0x2E08, r23
    21d0:	80 93 09 2e 	sts	0x2E09, r24
    21d4:	90 93 0a 2e 	sts	0x2E0A, r25
				}	
				
				//teta_cilj_final_absolute
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    21d8:	80 91 6f 29 	lds	r24, 0x296F
    21dc:	8f 3f       	cpi	r24, 0xFF	; 255
    21de:	29 f4       	brne	.+10     	; 0x21ea <__vector_61+0x5ce>
    21e0:	80 91 70 29 	lds	r24, 0x2970
    21e4:	8f 3f       	cpi	r24, 0xFF	; 255
    21e6:	09 f4       	brne	.+2      	; 0x21ea <__vector_61+0x5ce>
    21e8:	58 c0       	rjmp	.+176    	; 0x229a <__vector_61+0x67e>
				{
					teta_cilj_final = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    21ea:	10 92 00 20 	sts	0x2000, r1
    21ee:	10 92 01 20 	sts	0x2001, r1
    21f2:	10 92 02 20 	sts	0x2002, r1
    21f6:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= (int)receiveArray[5] << 8;
    21fa:	20 91 6f 29 	lds	r18, 0x296F
    21fe:	40 91 00 20 	lds	r20, 0x2000
    2202:	50 91 01 20 	lds	r21, 0x2001
    2206:	60 91 02 20 	lds	r22, 0x2002
    220a:	70 91 03 20 	lds	r23, 0x2003
    220e:	92 2f       	mov	r25, r18
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	aa 27       	eor	r26, r26
    2214:	97 fd       	sbrc	r25, 7
    2216:	a0 95       	com	r26
    2218:	ba 2f       	mov	r27, r26
    221a:	84 2b       	or	r24, r20
    221c:	95 2b       	or	r25, r21
    221e:	a6 2b       	or	r26, r22
    2220:	b7 2b       	or	r27, r23
    2222:	80 93 00 20 	sts	0x2000, r24
    2226:	90 93 01 20 	sts	0x2001, r25
    222a:	a0 93 02 20 	sts	0x2002, r26
    222e:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[6];
    2232:	20 91 70 29 	lds	r18, 0x2970
    2236:	80 91 00 20 	lds	r24, 0x2000
    223a:	90 91 01 20 	lds	r25, 0x2001
    223e:	a0 91 02 20 	lds	r26, 0x2002
    2242:	b0 91 03 20 	lds	r27, 0x2003
    2246:	82 2b       	or	r24, r18
    2248:	80 93 00 20 	sts	0x2000, r24
    224c:	90 93 01 20 	sts	0x2001, r25
    2250:	a0 93 02 20 	sts	0x2002, r26
    2254:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = (teta_cilj_final * krug360) / 360;
    2258:	20 91 00 20 	lds	r18, 0x2000
    225c:	30 91 01 20 	lds	r19, 0x2001
    2260:	40 91 02 20 	lds	r20, 0x2002
    2264:	50 91 03 20 	lds	r21, 0x2003
    2268:	60 91 71 32 	lds	r22, 0x3271
    226c:	70 91 72 32 	lds	r23, 0x3272
    2270:	80 91 73 32 	lds	r24, 0x3273
    2274:	90 91 74 32 	lds	r25, 0x3274
    2278:	0e 94 43 37 	call	0x6e86	; 0x6e86 <__mulsi3>
    227c:	28 e6       	ldi	r18, 0x68	; 104
    227e:	31 e0       	ldi	r19, 0x01	; 1
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    2288:	20 93 00 20 	sts	0x2000, r18
    228c:	30 93 01 20 	sts	0x2001, r19
    2290:	40 93 02 20 	sts	0x2002, r20
    2294:	50 93 03 20 	sts	0x2003, r21
    2298:	78 c0       	rjmp	.+240    	; 0x238a <__vector_61+0x76e>
				}	
				//teta_cilj_final_relative
				else if(!(receiveArray[7] == 0xFF && receiveArray[8] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    229a:	80 91 71 29 	lds	r24, 0x2971
    229e:	8f 3f       	cpi	r24, 0xFF	; 255
    22a0:	29 f4       	brne	.+10     	; 0x22ac <__vector_61+0x690>
    22a2:	80 91 72 29 	lds	r24, 0x2972
    22a6:	8f 3f       	cpi	r24, 0xFF	; 255
    22a8:	09 f4       	brne	.+2      	; 0x22ac <__vector_61+0x690>
    22aa:	64 c0       	rjmp	.+200    	; 0x2374 <__vector_61+0x758>
				{
					teta_cilj_final = 0;
    22ac:	10 92 00 20 	sts	0x2000, r1
    22b0:	10 92 01 20 	sts	0x2001, r1
    22b4:	10 92 02 20 	sts	0x2002, r1
    22b8:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= (int)receiveArray[7] << 8;
    22bc:	20 91 71 29 	lds	r18, 0x2971
    22c0:	40 91 00 20 	lds	r20, 0x2000
    22c4:	50 91 01 20 	lds	r21, 0x2001
    22c8:	60 91 02 20 	lds	r22, 0x2002
    22cc:	70 91 03 20 	lds	r23, 0x2003
    22d0:	92 2f       	mov	r25, r18
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	aa 27       	eor	r26, r26
    22d6:	97 fd       	sbrc	r25, 7
    22d8:	a0 95       	com	r26
    22da:	ba 2f       	mov	r27, r26
    22dc:	84 2b       	or	r24, r20
    22de:	95 2b       	or	r25, r21
    22e0:	a6 2b       	or	r26, r22
    22e2:	b7 2b       	or	r27, r23
    22e4:	80 93 00 20 	sts	0x2000, r24
    22e8:	90 93 01 20 	sts	0x2001, r25
    22ec:	a0 93 02 20 	sts	0x2002, r26
    22f0:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[8];
    22f4:	20 91 72 29 	lds	r18, 0x2972
    22f8:	80 91 00 20 	lds	r24, 0x2000
    22fc:	90 91 01 20 	lds	r25, 0x2001
    2300:	a0 91 02 20 	lds	r26, 0x2002
    2304:	b0 91 03 20 	lds	r27, 0x2003
    2308:	82 2b       	or	r24, r18
    230a:	80 93 00 20 	sts	0x2000, r24
    230e:	90 93 01 20 	sts	0x2001, r25
    2312:	a0 93 02 20 	sts	0x2002, r26
    2316:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = teta + (teta_cilj_final * krug360) / 360;
    231a:	20 91 00 20 	lds	r18, 0x2000
    231e:	30 91 01 20 	lds	r19, 0x2001
    2322:	40 91 02 20 	lds	r20, 0x2002
    2326:	50 91 03 20 	lds	r21, 0x2003
    232a:	60 91 71 32 	lds	r22, 0x3271
    232e:	70 91 72 32 	lds	r23, 0x3272
    2332:	80 91 73 32 	lds	r24, 0x3273
    2336:	90 91 74 32 	lds	r25, 0x3274
    233a:	c0 90 7f 32 	lds	r12, 0x327F
    233e:	d0 90 80 32 	lds	r13, 0x3280
    2342:	e0 90 81 32 	lds	r14, 0x3281
    2346:	f0 90 82 32 	lds	r15, 0x3282
    234a:	0e 94 43 37 	call	0x6e86	; 0x6e86 <__mulsi3>
    234e:	28 e6       	ldi	r18, 0x68	; 104
    2350:	31 e0       	ldi	r19, 0x01	; 1
    2352:	40 e0       	ldi	r20, 0x00	; 0
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    235a:	c2 0e       	add	r12, r18
    235c:	d3 1e       	adc	r13, r19
    235e:	e4 1e       	adc	r14, r20
    2360:	f5 1e       	adc	r15, r21
    2362:	c0 92 00 20 	sts	0x2000, r12
    2366:	d0 92 01 20 	sts	0x2001, r13
    236a:	e0 92 02 20 	sts	0x2002, r14
    236e:	f0 92 03 20 	sts	0x2003, r15
    2372:	0b c0       	rjmp	.+22     	; 0x238a <__vector_61+0x76e>
				}
				else
					teta_cilj_final = 0xFFFFFFFF;				
    2374:	8f ef       	ldi	r24, 0xFF	; 255
    2376:	9f ef       	ldi	r25, 0xFF	; 255
    2378:	dc 01       	movw	r26, r24
    237a:	80 93 00 20 	sts	0x2000, r24
    237e:	90 93 01 20 	sts	0x2001, r25
    2382:	a0 93 02 20 	sts	0x2002, r26
    2386:	b0 93 03 20 	sts	0x2003, r27
				//bzina
				if(receiveArray[9] != 0xFF)	// ako zadajemo 0xFF ne menja se brzina
    238a:	80 91 73 29 	lds	r24, 0x2973
    238e:	8f 3f       	cpi	r24, 0xFF	; 255
    2390:	c9 f0       	breq	.+50     	; 0x23c4 <__vector_61+0x7a8>
				{
					zeljena_pravolinijska_brzina = receiveArray[9] * 3;	//podesiti faktor!
    2392:	80 91 73 29 	lds	r24, 0x2973
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9c 01       	movw	r18, r24
    239a:	22 0f       	add	r18, r18
    239c:	33 1f       	adc	r19, r19
    239e:	82 0f       	add	r24, r18
    23a0:	93 1f       	adc	r25, r19
    23a2:	80 93 7b 32 	sts	0x327B, r24
    23a6:	90 93 7c 32 	sts	0x327C, r25
					zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2;
    23aa:	80 91 7b 32 	lds	r24, 0x327B
    23ae:	90 91 7c 32 	lds	r25, 0x327C
    23b2:	99 23       	and	r25, r25
    23b4:	0c f4       	brge	.+2      	; 0x23b8 <__vector_61+0x79c>
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	95 95       	asr	r25
    23ba:	87 95       	ror	r24
    23bc:	80 93 5d 2e 	sts	0x2E5D, r24
    23c0:	90 93 5e 2e 	sts	0x2E5E, r25
				}				
				//smer
				if(receiveArray[10] != 0xFF)	// ako zadajemo 0xFF ne menja se smer
    23c4:	80 91 74 29 	lds	r24, 0x2974
    23c8:	8f 3f       	cpi	r24, 0xFF	; 255
    23ca:	21 f0       	breq	.+8      	; 0x23d4 <__vector_61+0x7b8>
					smer_zadati = receiveArray[10];	
    23cc:	80 91 74 29 	lds	r24, 0x2974
    23d0:	80 93 5a 29 	sts	0x295A, r24
				
				//pokretanje snimanja u nizove
				sample_counter_niz_1 = 0;
    23d4:	10 92 54 2e 	sts	0x2E54, r1
				niz_counter_niz_1 = 0;	
    23d8:	10 92 55 2e 	sts	0x2E55, r1
				sample_counter_niz_2 = 0;
    23dc:	10 92 f5 2d 	sts	0x2DF5, r1
				niz_counter_niz_2 = 0;
    23e0:	10 92 f6 2d 	sts	0x2DF6, r1
				sample_counter_niz_3 = 0;
    23e4:	10 92 5b 29 	sts	0x295B, r1
				niz_counter_niz_3 = 0;		
    23e8:	10 92 c2 24 	sts	0x24C2, r1
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
    23ec:	80 91 6a 29 	lds	r24, 0x296A
    23f0:	80 93 d9 28 	sts	0x28D9, r24
				niz_counter_niz_2 = 0;
				sample_counter_niz_3 = 0;
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
    23f4:	00 e0       	ldi	r16, 0x00	; 0
    23f6:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];	
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    23f8:	f8 01       	movw	r30, r16
    23fa:	e7 52       	subi	r30, 0x27	; 39
    23fc:	f7 4d       	sbci	r31, 0xD7	; 215
    23fe:	60 81       	ld	r22, Z
    2400:	89 e0       	ldi	r24, 0x09	; 9
    2402:	90 e2       	ldi	r25, 0x20	; 32
    2404:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2408:	88 23       	and	r24, r24
    240a:	11 f0       	breq	.+4      	; 0x2410 <__vector_61+0x7f4>
					{
						i++;
    240c:	0f 5f       	subi	r16, 0xFF	; 255
    240e:	1f 4f       	sbci	r17, 0xFF	; 255
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
				while (i < 1)
    2410:	10 16       	cp	r1, r16
    2412:	11 06       	cpc	r1, r17
    2414:	8c f7       	brge	.-30     	; 0x23f8 <__vector_61+0x7dc>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2416:	10 92 59 29 	sts	0x2959, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    241a:	10 92 59 29 	sts	0x2959, r1
    241e:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__vector_61+0x193a>
		}					
	}
	//RELATIVNA DISTANCA I UGAO - 4
	else if(receiveArray[0] == 4)					//provera funkcijskog bajta
    2422:	80 91 6a 29 	lds	r24, 0x296A
    2426:	84 30       	cpi	r24, 0x04	; 4
    2428:	09 f0       	breq	.+2      	; 0x242c <__vector_61+0x810>
    242a:	96 c1       	rjmp	.+812    	; 0x2758 <__vector_61+0xb3c>
	{
		if(RX_i_E1 >= 5)								//stigla je cela poruka
    242c:	80 91 59 29 	lds	r24, 0x2959
    2430:	85 30       	cpi	r24, 0x05	; 5
    2432:	10 f4       	brcc	.+4      	; 0x2438 <__vector_61+0x81c>
    2434:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2438:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				//ENABLE
				stop_PID_desni = 0;
    243c:	10 92 f0 29 	sts	0x29F0, r1
				stop_PID_levi = 0;
    2440:	10 92 ee 2d 	sts	0x2DEE, r1
				set_direct_out = 0;
    2444:	10 92 7d 32 	sts	0x327D, r1
				
				rel_distanca = 0;
    2448:	10 92 c1 28 	sts	0x28C1, r1
    244c:	10 92 c2 28 	sts	0x28C2, r1
    2450:	10 92 c3 28 	sts	0x28C3, r1
    2454:	10 92 c4 28 	sts	0x28C4, r1
				rel_distanca |= (int)receiveArray[1] << 8;
    2458:	20 91 6b 29 	lds	r18, 0x296B
    245c:	40 91 c1 28 	lds	r20, 0x28C1
    2460:	50 91 c2 28 	lds	r21, 0x28C2
    2464:	60 91 c3 28 	lds	r22, 0x28C3
    2468:	70 91 c4 28 	lds	r23, 0x28C4
    246c:	92 2f       	mov	r25, r18
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	aa 27       	eor	r26, r26
    2472:	97 fd       	sbrc	r25, 7
    2474:	a0 95       	com	r26
    2476:	ba 2f       	mov	r27, r26
    2478:	84 2b       	or	r24, r20
    247a:	95 2b       	or	r25, r21
    247c:	a6 2b       	or	r26, r22
    247e:	b7 2b       	or	r27, r23
    2480:	80 93 c1 28 	sts	0x28C1, r24
    2484:	90 93 c2 28 	sts	0x28C2, r25
    2488:	a0 93 c3 28 	sts	0x28C3, r26
    248c:	b0 93 c4 28 	sts	0x28C4, r27
				rel_distanca |= (int)receiveArray[2];
    2490:	20 91 6c 29 	lds	r18, 0x296C
    2494:	80 91 c1 28 	lds	r24, 0x28C1
    2498:	90 91 c2 28 	lds	r25, 0x28C2
    249c:	a0 91 c3 28 	lds	r26, 0x28C3
    24a0:	b0 91 c4 28 	lds	r27, 0x28C4
    24a4:	82 2b       	or	r24, r18
    24a6:	80 93 c1 28 	sts	0x28C1, r24
    24aa:	90 93 c2 28 	sts	0x28C2, r25
    24ae:	a0 93 c3 28 	sts	0x28C3, r26
    24b2:	b0 93 c4 28 	sts	0x28C4, r27
				rel_distanca = (rel_distanca * scale_factor_for_mm);
    24b6:	a0 91 fc 2d 	lds	r26, 0x2DFC
    24ba:	b0 91 fd 2d 	lds	r27, 0x2DFD
    24be:	20 91 c1 28 	lds	r18, 0x28C1
    24c2:	30 91 c2 28 	lds	r19, 0x28C2
    24c6:	40 91 c3 28 	lds	r20, 0x28C3
    24ca:	50 91 c4 28 	lds	r21, 0x28C4
    24ce:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    24d2:	60 93 c1 28 	sts	0x28C1, r22
    24d6:	70 93 c2 28 	sts	0x28C2, r23
    24da:	80 93 c3 28 	sts	0x28C3, r24
    24de:	90 93 c4 28 	sts	0x28C4, r25

				rel_ugao = 0;
    24e2:	10 92 12 2e 	sts	0x2E12, r1
    24e6:	10 92 13 2e 	sts	0x2E13, r1
    24ea:	10 92 14 2e 	sts	0x2E14, r1
    24ee:	10 92 15 2e 	sts	0x2E15, r1
				rel_ugao |= (int)receiveArray[3] << 8;
    24f2:	20 91 6d 29 	lds	r18, 0x296D
    24f6:	40 91 12 2e 	lds	r20, 0x2E12
    24fa:	50 91 13 2e 	lds	r21, 0x2E13
    24fe:	60 91 14 2e 	lds	r22, 0x2E14
    2502:	70 91 15 2e 	lds	r23, 0x2E15
    2506:	92 2f       	mov	r25, r18
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	aa 27       	eor	r26, r26
    250c:	97 fd       	sbrc	r25, 7
    250e:	a0 95       	com	r26
    2510:	ba 2f       	mov	r27, r26
    2512:	84 2b       	or	r24, r20
    2514:	95 2b       	or	r25, r21
    2516:	a6 2b       	or	r26, r22
    2518:	b7 2b       	or	r27, r23
    251a:	80 93 12 2e 	sts	0x2E12, r24
    251e:	90 93 13 2e 	sts	0x2E13, r25
    2522:	a0 93 14 2e 	sts	0x2E14, r26
    2526:	b0 93 15 2e 	sts	0x2E15, r27
				rel_ugao |= (int)receiveArray[4];
    252a:	20 91 6e 29 	lds	r18, 0x296E
    252e:	80 91 12 2e 	lds	r24, 0x2E12
    2532:	90 91 13 2e 	lds	r25, 0x2E13
    2536:	a0 91 14 2e 	lds	r26, 0x2E14
    253a:	b0 91 15 2e 	lds	r27, 0x2E15
    253e:	82 2b       	or	r24, r18
    2540:	80 93 12 2e 	sts	0x2E12, r24
    2544:	90 93 13 2e 	sts	0x2E13, r25
    2548:	a0 93 14 2e 	sts	0x2E14, r26
    254c:	b0 93 15 2e 	sts	0x2E15, r27
				rel_ugao = (rel_ugao * krug360) / 360;
    2550:	20 91 12 2e 	lds	r18, 0x2E12
    2554:	30 91 13 2e 	lds	r19, 0x2E13
    2558:	40 91 14 2e 	lds	r20, 0x2E14
    255c:	50 91 15 2e 	lds	r21, 0x2E15
    2560:	60 91 71 32 	lds	r22, 0x3271
    2564:	70 91 72 32 	lds	r23, 0x3272
    2568:	80 91 73 32 	lds	r24, 0x3273
    256c:	90 91 74 32 	lds	r25, 0x3274
    2570:	0e 94 43 37 	call	0x6e86	; 0x6e86 <__mulsi3>
    2574:	28 e6       	ldi	r18, 0x68	; 104
    2576:	31 e0       	ldi	r19, 0x01	; 1
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    2580:	20 93 12 2e 	sts	0x2E12, r18
    2584:	30 93 13 2e 	sts	0x2E13, r19
    2588:	40 93 14 2e 	sts	0x2E14, r20
    258c:	50 93 15 2e 	sts	0x2E15, r21
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    2590:	40 91 7f 32 	lds	r20, 0x327F
    2594:	50 91 80 32 	lds	r21, 0x3280
    2598:	60 91 81 32 	lds	r22, 0x3281
    259c:	70 91 82 32 	lds	r23, 0x3282
    25a0:	80 91 12 2e 	lds	r24, 0x2E12
    25a4:	90 91 13 2e 	lds	r25, 0x2E13
    25a8:	a0 91 14 2e 	lds	r26, 0x2E14
    25ac:	b0 91 15 2e 	lds	r27, 0x2E15
    25b0:	c0 90 cb 28 	lds	r12, 0x28CB
    25b4:	d0 90 cc 28 	lds	r13, 0x28CC
    25b8:	e0 90 cd 28 	lds	r14, 0x28CD
    25bc:	f0 90 ce 28 	lds	r15, 0x28CE
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    25c0:	40 90 7f 32 	lds	r4, 0x327F
    25c4:	50 90 80 32 	lds	r5, 0x3280
    25c8:	60 90 81 32 	lds	r6, 0x3281
    25cc:	70 90 82 32 	lds	r7, 0x3282
    25d0:	00 91 12 2e 	lds	r16, 0x2E12
    25d4:	10 91 13 2e 	lds	r17, 0x2E13
    25d8:	20 91 14 2e 	lds	r18, 0x2E14
    25dc:	30 91 15 2e 	lds	r19, 0x2E15
    25e0:	09 83       	std	Y+1, r16	; 0x01
    25e2:	1a 83       	std	Y+2, r17	; 0x02
    25e4:	2b 83       	std	Y+3, r18	; 0x03
    25e6:	3c 83       	std	Y+4, r19	; 0x04
    25e8:	80 90 cb 28 	lds	r8, 0x28CB
    25ec:	90 90 cc 28 	lds	r9, 0x28CC
    25f0:	a0 90 cd 28 	lds	r10, 0x28CD
    25f4:	b0 90 ce 28 	lds	r11, 0x28CE
				rel_ugao |= (int)receiveArray[4];
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    25f8:	8a 01       	movw	r16, r20
    25fa:	9b 01       	movw	r18, r22
    25fc:	08 0f       	add	r16, r24
    25fe:	19 1f       	adc	r17, r25
    2600:	2a 1f       	adc	r18, r26
    2602:	3b 1f       	adc	r19, r27
    2604:	c9 01       	movw	r24, r18
    2606:	b8 01       	movw	r22, r16
    2608:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    260c:	6d 83       	std	Y+5, r22	; 0x05
    260e:	7e 83       	std	Y+6, r23	; 0x06
    2610:	8f 83       	std	Y+7, r24	; 0x07
    2612:	98 87       	std	Y+8, r25	; 0x08
    2614:	c7 01       	movw	r24, r14
    2616:	b6 01       	movw	r22, r12
    2618:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    261c:	9b 01       	movw	r18, r22
    261e:	ac 01       	movw	r20, r24
    2620:	6d 81       	ldd	r22, Y+5	; 0x05
    2622:	7e 81       	ldd	r23, Y+6	; 0x06
    2624:	8f 81       	ldd	r24, Y+7	; 0x07
    2626:	98 85       	ldd	r25, Y+8	; 0x08
    2628:	0e 94 bb 34 	call	0x6976	; 0x6976 <__divsf3>
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
    262c:	2b ed       	ldi	r18, 0xDB	; 219
    262e:	3f e0       	ldi	r19, 0x0F	; 15
    2630:	49 e4       	ldi	r20, 0x49	; 73
    2632:	50 e4       	ldi	r21, 0x40	; 64
    2634:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    2638:	0e 94 b8 34 	call	0x6970	; 0x6970 <cos>
    263c:	6b 01       	movw	r12, r22
    263e:	7c 01       	movw	r14, r24
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    2640:	69 81       	ldd	r22, Y+1	; 0x01
    2642:	7a 81       	ldd	r23, Y+2	; 0x02
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	9c 81       	ldd	r25, Y+4	; 0x04
    2648:	64 0d       	add	r22, r4
    264a:	75 1d       	adc	r23, r5
    264c:	86 1d       	adc	r24, r6
    264e:	97 1d       	adc	r25, r7
    2650:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    2654:	2b 01       	movw	r4, r22
    2656:	3c 01       	movw	r6, r24
    2658:	c5 01       	movw	r24, r10
    265a:	b4 01       	movw	r22, r8
    265c:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    2660:	9b 01       	movw	r18, r22
    2662:	ac 01       	movw	r20, r24
    2664:	c3 01       	movw	r24, r6
    2666:	b2 01       	movw	r22, r4
    2668:	0e 94 bb 34 	call	0x6976	; 0x6976 <__divsf3>
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
    266c:	2b ed       	ldi	r18, 0xDB	; 219
    266e:	3f e0       	ldi	r19, 0x0F	; 15
    2670:	49 e4       	ldi	r20, 0x49	; 73
    2672:	50 e4       	ldi	r21, 0x40	; 64
    2674:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    2678:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <sin>
    267c:	4b 01       	movw	r8, r22
    267e:	5c 01       	movw	r10, r24
				X_pos_cos = rel_distanca * X_pos_cos;
    2680:	60 91 c1 28 	lds	r22, 0x28C1
    2684:	70 91 c2 28 	lds	r23, 0x28C2
    2688:	80 91 c3 28 	lds	r24, 0x28C3
    268c:	90 91 c4 28 	lds	r25, 0x28C4
				Y_pos_sin = rel_distanca * Y_pos_sin;
    2690:	40 90 c1 28 	lds	r4, 0x28C1
    2694:	50 90 c2 28 	lds	r5, 0x28C2
    2698:	60 90 c3 28 	lds	r6, 0x28C3
    269c:	70 90 c4 28 	lds	r7, 0x28C4
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    26a0:	20 91 1f 2e 	lds	r18, 0x2E1F
    26a4:	30 91 20 2e 	lds	r19, 0x2E20
    26a8:	40 91 21 2e 	lds	r20, 0x2E21
    26ac:	50 91 22 2e 	lds	r21, 0x2E22
    26b0:	29 83       	std	Y+1, r18	; 0x01
    26b2:	3a 83       	std	Y+2, r19	; 0x02
    26b4:	4b 83       	std	Y+3, r20	; 0x03
    26b6:	5c 83       	std	Y+4, r21	; 0x04
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
    26b8:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    26bc:	a7 01       	movw	r20, r14
    26be:	96 01       	movw	r18, r12
    26c0:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
				Y_pos_sin = rel_distanca * Y_pos_sin;
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    26c4:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__fixsfsi>
    26c8:	09 81       	ldd	r16, Y+1	; 0x01
    26ca:	1a 81       	ldd	r17, Y+2	; 0x02
    26cc:	2b 81       	ldd	r18, Y+3	; 0x03
    26ce:	3c 81       	ldd	r19, Y+4	; 0x04
    26d0:	06 0f       	add	r16, r22
    26d2:	17 1f       	adc	r17, r23
    26d4:	28 1f       	adc	r18, r24
    26d6:	39 1f       	adc	r19, r25
    26d8:	00 93 ac 24 	sts	0x24AC, r16
    26dc:	10 93 ad 24 	sts	0x24AD, r17
    26e0:	20 93 ae 24 	sts	0x24AE, r18
    26e4:	30 93 af 24 	sts	0x24AF, r19
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    26e8:	c0 90 fe 29 	lds	r12, 0x29FE
    26ec:	d0 90 ff 29 	lds	r13, 0x29FF
    26f0:	e0 90 00 2a 	lds	r14, 0x2A00
    26f4:	f0 90 01 2a 	lds	r15, 0x2A01
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
				Y_pos_sin = rel_distanca * Y_pos_sin;
    26f8:	c3 01       	movw	r24, r6
    26fa:	b2 01       	movw	r22, r4
    26fc:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    2700:	a5 01       	movw	r20, r10
    2702:	94 01       	movw	r18, r8
    2704:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    2708:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__fixsfsi>
    270c:	c6 0e       	add	r12, r22
    270e:	d7 1e       	adc	r13, r23
    2710:	e8 1e       	adc	r14, r24
    2712:	f9 1e       	adc	r15, r25
    2714:	c0 92 07 2e 	sts	0x2E07, r12
    2718:	d0 92 08 2e 	sts	0x2E08, r13
    271c:	e0 92 09 2e 	sts	0x2E09, r14
    2720:	f0 92 0a 2e 	sts	0x2E0A, r15
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2724:	80 91 6a 29 	lds	r24, 0x296A
    2728:	80 93 d9 28 	sts	0x28D9, r24
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
    272c:	00 e0       	ldi	r16, 0x00	; 0
    272e:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2730:	f8 01       	movw	r30, r16
    2732:	e7 52       	subi	r30, 0x27	; 39
    2734:	f7 4d       	sbci	r31, 0xD7	; 215
    2736:	60 81       	ld	r22, Z
    2738:	89 e0       	ldi	r24, 0x09	; 9
    273a:	90 e2       	ldi	r25, 0x20	; 32
    273c:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2740:	88 23       	and	r24, r24
    2742:	11 f0       	breq	.+4      	; 0x2748 <__vector_61+0xb2c>
					{
						i++;
    2744:	0f 5f       	subi	r16, 0xFF	; 255
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2748:	10 16       	cp	r1, r16
    274a:	11 06       	cpc	r1, r17
    274c:	8c f7       	brge	.-30     	; 0x2730 <__vector_61+0xb14>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    274e:	10 92 59 29 	sts	0x2959, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda
    2752:	10 92 59 29 	sts	0x2959, r1
    2756:	ff c6       	rjmp	.+3582   	; 0x3556 <__vector_61+0x193a>
		}
	}
	//SET DIRECT OUT - 5
	else if(receiveArray[0] == 5)					//provera funkcijskog bajta
    2758:	80 91 6a 29 	lds	r24, 0x296A
    275c:	85 30       	cpi	r24, 0x05	; 5
    275e:	09 f0       	breq	.+2      	; 0x2762 <__vector_61+0xb46>
    2760:	6e c0       	rjmp	.+220    	; 0x283e <__vector_61+0xc22>
	{
		if(RX_i_E1 >= 3)							//stigla je cela poruka
    2762:	80 91 59 29 	lds	r24, 0x2959
    2766:	83 30       	cpi	r24, 0x03	; 3
    2768:	08 f4       	brcc	.+2      	; 0x276c <__vector_61+0xb50>
    276a:	f5 c6       	rjmp	.+3562   	; 0x3556 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    276c:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				//ENABLE
				set_direct_out = 1;
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	80 93 7d 32 	sts	0x327D, r24
				
				if(receiveArray[1] >= 128)
    2776:	80 91 6b 29 	lds	r24, 0x296B
    277a:	88 23       	and	r24, r24
    277c:	8c f4       	brge	.+34     	; 0x27a0 <__vector_61+0xb84>
					PID_brzina_L = (receiveArray[1] - 128) * 5;	//podesiti faktor!
    277e:	80 91 6b 29 	lds	r24, 0x296B
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	9c 01       	movw	r18, r24
    2786:	22 0f       	add	r18, r18
    2788:	33 1f       	adc	r19, r19
    278a:	22 0f       	add	r18, r18
    278c:	33 1f       	adc	r19, r19
    278e:	82 0f       	add	r24, r18
    2790:	93 1f       	adc	r25, r19
    2792:	80 58       	subi	r24, 0x80	; 128
    2794:	92 40       	sbci	r25, 0x02	; 2
    2796:	80 93 77 2e 	sts	0x2E77, r24
    279a:	90 93 78 2e 	sts	0x2E78, r25
    279e:	10 c0       	rjmp	.+32     	; 0x27c0 <__vector_61+0xba4>
				else
					PID_brzina_L = (128 - receiveArray[1]) * (-5);
    27a0:	80 91 6b 29 	lds	r24, 0x296B
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	9c 01       	movw	r18, r24
    27a8:	22 0f       	add	r18, r18
    27aa:	33 1f       	adc	r19, r19
    27ac:	22 0f       	add	r18, r18
    27ae:	33 1f       	adc	r19, r19
    27b0:	82 0f       	add	r24, r18
    27b2:	93 1f       	adc	r25, r19
    27b4:	80 58       	subi	r24, 0x80	; 128
    27b6:	92 40       	sbci	r25, 0x02	; 2
    27b8:	80 93 77 2e 	sts	0x2E77, r24
    27bc:	90 93 78 2e 	sts	0x2E78, r25
					
				if(receiveArray[2] >= 128)
    27c0:	80 91 6c 29 	lds	r24, 0x296C
    27c4:	88 23       	and	r24, r24
    27c6:	8c f4       	brge	.+34     	; 0x27ea <__vector_61+0xbce>
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
    27c8:	80 91 6c 29 	lds	r24, 0x296C
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9c 01       	movw	r18, r24
    27d0:	22 0f       	add	r18, r18
    27d2:	33 1f       	adc	r19, r19
    27d4:	22 0f       	add	r18, r18
    27d6:	33 1f       	adc	r19, r19
    27d8:	82 0f       	add	r24, r18
    27da:	93 1f       	adc	r25, r19
    27dc:	80 58       	subi	r24, 0x80	; 128
    27de:	92 40       	sbci	r25, 0x02	; 2
    27e0:	80 93 75 2e 	sts	0x2E75, r24
    27e4:	90 93 76 2e 	sts	0x2E76, r25
    27e8:	10 c0       	rjmp	.+32     	; 0x280a <__vector_61+0xbee>
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
    27ea:	80 91 6c 29 	lds	r24, 0x296C
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9c 01       	movw	r18, r24
    27f2:	22 0f       	add	r18, r18
    27f4:	33 1f       	adc	r19, r19
    27f6:	22 0f       	add	r18, r18
    27f8:	33 1f       	adc	r19, r19
    27fa:	82 0f       	add	r24, r18
    27fc:	93 1f       	adc	r25, r19
    27fe:	80 58       	subi	r24, 0x80	; 128
    2800:	92 40       	sbci	r25, 0x02	; 2
    2802:	80 93 75 2e 	sts	0x2E75, r24
    2806:	90 93 76 2e 	sts	0x2E76, r25
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    280a:	80 91 6a 29 	lds	r24, 0x296A
    280e:	80 93 d9 28 	sts	0x28D9, r24
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
    2812:	00 e0       	ldi	r16, 0x00	; 0
    2814:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2816:	f8 01       	movw	r30, r16
    2818:	e7 52       	subi	r30, 0x27	; 39
    281a:	f7 4d       	sbci	r31, 0xD7	; 215
    281c:	60 81       	ld	r22, Z
    281e:	89 e0       	ldi	r24, 0x09	; 9
    2820:	90 e2       	ldi	r25, 0x20	; 32
    2822:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2826:	88 23       	and	r24, r24
    2828:	11 f0       	breq	.+4      	; 0x282e <__vector_61+0xc12>
					{
						i++;
    282a:	0f 5f       	subi	r16, 0xFF	; 255
    282c:	1f 4f       	sbci	r17, 0xFF	; 255
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    282e:	10 16       	cp	r1, r16
    2830:	11 06       	cpc	r1, r17
    2832:	8c f7       	brge	.-30     	; 0x2816 <__vector_61+0xbfa>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2834:	10 92 59 29 	sts	0x2959, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda
    2838:	10 92 59 29 	sts	0x2959, r1
    283c:	8c c6       	rjmp	.+3352   	; 0x3556 <__vector_61+0x193a>
		}
	}			
	//PODESAVANJE FET izlaza i servoa - 6
	else if(receiveArray[0] == 6)					//provera funkcijskog bajta 
    283e:	80 91 6a 29 	lds	r24, 0x296A
    2842:	86 30       	cpi	r24, 0x06	; 6
    2844:	09 f0       	breq	.+2      	; 0x2848 <__vector_61+0xc2c>
    2846:	56 c0       	rjmp	.+172    	; 0x28f4 <__vector_61+0xcd8>
	{
		if(RX_i_E1 >= 7)							//stigla je cela poruka	(11)
    2848:	80 91 59 29 	lds	r24, 0x2959
    284c:	87 30       	cpi	r24, 0x07	; 7
    284e:	08 f4       	brcc	.+2      	; 0x2852 <__vector_61+0xc36>
    2850:	82 c6       	rjmp	.+3332   	; 0x3556 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2852:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				PORTC.OUT |= receiveArray[1] & receiveArray[2];	//izlazi + maska
    2856:	e0 e4       	ldi	r30, 0x40	; 64
    2858:	f6 e0       	ldi	r31, 0x06	; 6
    285a:	94 81       	ldd	r25, Z+4	; 0x04
    285c:	4b e6       	ldi	r20, 0x6B	; 107
    285e:	59 e2       	ldi	r21, 0x29	; 41
    2860:	da 01       	movw	r26, r20
    2862:	8c 91       	ld	r24, X
    2864:	6c e6       	ldi	r22, 0x6C	; 108
    2866:	79 e2       	ldi	r23, 0x29	; 41
    2868:	db 01       	movw	r26, r22
    286a:	2c 91       	ld	r18, X
    286c:	82 23       	and	r24, r18
    286e:	89 2b       	or	r24, r25
    2870:	84 83       	std	Z+4, r24	; 0x04
				PORTC.OUT &= ~(receiveArray[1] ^ receiveArray[2]);	//izlazi + maska
    2872:	94 81       	ldd	r25, Z+4	; 0x04
    2874:	da 01       	movw	r26, r20
    2876:	8c 91       	ld	r24, X
    2878:	db 01       	movw	r26, r22
    287a:	2c 91       	ld	r18, X
    287c:	82 27       	eor	r24, r18
    287e:	80 95       	com	r24
    2880:	89 23       	and	r24, r25
    2882:	84 83       	std	Z+4, r24	; 0x04
				
				//120 - nulti polozaj, 280 - krajnji polozaj
				TCF0.CCA = receiveArray[3] + 120;
    2884:	80 91 6d 29 	lds	r24, 0x296D
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	88 58       	subi	r24, 0x88	; 136
    288c:	9f 4f       	sbci	r25, 0xFF	; 255
    288e:	e0 e0       	ldi	r30, 0x00	; 0
    2890:	fb e0       	ldi	r31, 0x0B	; 11
    2892:	80 a7       	std	Z+40, r24	; 0x28
    2894:	91 a7       	std	Z+41, r25	; 0x29
				TCF0.CCB = receiveArray[4] + 120;
    2896:	80 91 6e 29 	lds	r24, 0x296E
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	88 58       	subi	r24, 0x88	; 136
    289e:	9f 4f       	sbci	r25, 0xFF	; 255
    28a0:	82 a7       	std	Z+42, r24	; 0x2a
    28a2:	93 a7       	std	Z+43, r25	; 0x2b
				TCF0.CCC = receiveArray[5] + 120;
    28a4:	80 91 6f 29 	lds	r24, 0x296F
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	88 58       	subi	r24, 0x88	; 136
    28ac:	9f 4f       	sbci	r25, 0xFF	; 255
    28ae:	84 a7       	std	Z+44, r24	; 0x2c
    28b0:	95 a7       	std	Z+45, r25	; 0x2d
				TCF0.CCD = receiveArray[6] + 120;
    28b2:	80 91 70 29 	lds	r24, 0x2970
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	88 58       	subi	r24, 0x88	; 136
    28ba:	9f 4f       	sbci	r25, 0xFF	; 255
    28bc:	86 a7       	std	Z+46, r24	; 0x2e
    28be:	97 a7       	std	Z+47, r25	; 0x2f
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    28c0:	80 91 6a 29 	lds	r24, 0x296A
    28c4:	80 93 d9 28 	sts	0x28D9, r24
				TCF0.CCB = receiveArray[4] + 120;
				TCF0.CCC = receiveArray[5] + 120;
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
    28c8:	00 e0       	ldi	r16, 0x00	; 0
    28ca:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    28cc:	f8 01       	movw	r30, r16
    28ce:	e7 52       	subi	r30, 0x27	; 39
    28d0:	f7 4d       	sbci	r31, 0xD7	; 215
    28d2:	60 81       	ld	r22, Z
    28d4:	89 e0       	ldi	r24, 0x09	; 9
    28d6:	90 e2       	ldi	r25, 0x20	; 32
    28d8:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    28dc:	88 23       	and	r24, r24
    28de:	11 f0       	breq	.+4      	; 0x28e4 <__vector_61+0xcc8>
					{
						i++;
    28e0:	0f 5f       	subi	r16, 0xFF	; 255
    28e2:	1f 4f       	sbci	r17, 0xFF	; 255
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    28e4:	10 16       	cp	r1, r16
    28e6:	11 06       	cpc	r1, r17
    28e8:	8c f7       	brge	.-30     	; 0x28cc <__vector_61+0xcb0>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    28ea:	10 92 59 29 	sts	0x2959, r1
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
    28ee:	10 92 59 29 	sts	0x2959, r1
    28f2:	31 c6       	rjmp	.+3170   	; 0x3556 <__vector_61+0x193a>
		}		
	}		
	//Upis trenutne pozicije - 7
	else if(receiveArray[0] == 7)					//provera funkcijskog bajta
    28f4:	80 91 6a 29 	lds	r24, 0x296A
    28f8:	87 30       	cpi	r24, 0x07	; 7
    28fa:	09 f0       	breq	.+2      	; 0x28fe <__vector_61+0xce2>
    28fc:	7d c1       	rjmp	.+762    	; 0x2bf8 <__vector_61+0xfdc>
	{
		if(RX_i_E1 >= 7)							//stigla je cela poruka	(11)
    28fe:	80 91 59 29 	lds	r24, 0x2959
    2902:	87 30       	cpi	r24, 0x07	; 7
    2904:	08 f4       	brcc	.+2      	; 0x2908 <__vector_61+0xcec>
    2906:	27 c6       	rjmp	.+3150   	; 0x3556 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2908:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				//x_pos
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    290c:	80 91 6b 29 	lds	r24, 0x296B
    2910:	8f 3f       	cpi	r24, 0xFF	; 255
    2912:	29 f4       	brne	.+10     	; 0x291e <__vector_61+0xd02>
    2914:	80 91 6c 29 	lds	r24, 0x296C
    2918:	8f 3f       	cpi	r24, 0xFF	; 255
    291a:	09 f4       	brne	.+2      	; 0x291e <__vector_61+0xd02>
    291c:	6d c0       	rjmp	.+218    	; 0x29f8 <__vector_61+0xddc>
				{
					X_pos = 0;
    291e:	10 92 1f 2e 	sts	0x2E1F, r1
    2922:	10 92 20 2e 	sts	0x2E20, r1
    2926:	10 92 21 2e 	sts	0x2E21, r1
    292a:	10 92 22 2e 	sts	0x2E22, r1
					X_pos |= (int)receiveArray[1] << 8;
    292e:	20 91 6b 29 	lds	r18, 0x296B
    2932:	40 91 1f 2e 	lds	r20, 0x2E1F
    2936:	50 91 20 2e 	lds	r21, 0x2E20
    293a:	60 91 21 2e 	lds	r22, 0x2E21
    293e:	70 91 22 2e 	lds	r23, 0x2E22
    2942:	92 2f       	mov	r25, r18
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	aa 27       	eor	r26, r26
    2948:	97 fd       	sbrc	r25, 7
    294a:	a0 95       	com	r26
    294c:	ba 2f       	mov	r27, r26
    294e:	84 2b       	or	r24, r20
    2950:	95 2b       	or	r25, r21
    2952:	a6 2b       	or	r26, r22
    2954:	b7 2b       	or	r27, r23
    2956:	80 93 1f 2e 	sts	0x2E1F, r24
    295a:	90 93 20 2e 	sts	0x2E20, r25
    295e:	a0 93 21 2e 	sts	0x2E21, r26
    2962:	b0 93 22 2e 	sts	0x2E22, r27
					X_pos |= (int)receiveArray[2];
    2966:	20 91 6c 29 	lds	r18, 0x296C
    296a:	80 91 1f 2e 	lds	r24, 0x2E1F
    296e:	90 91 20 2e 	lds	r25, 0x2E20
    2972:	a0 91 21 2e 	lds	r26, 0x2E21
    2976:	b0 91 22 2e 	lds	r27, 0x2E22
    297a:	82 2b       	or	r24, r18
    297c:	80 93 1f 2e 	sts	0x2E1F, r24
    2980:	90 93 20 2e 	sts	0x2E20, r25
    2984:	a0 93 21 2e 	sts	0x2E21, r26
    2988:	b0 93 22 2e 	sts	0x2E22, r27
					X_pos = (X_pos * scale_factor_for_mm);
    298c:	a0 91 fc 2d 	lds	r26, 0x2DFC
    2990:	b0 91 fd 2d 	lds	r27, 0x2DFD
    2994:	20 91 1f 2e 	lds	r18, 0x2E1F
    2998:	30 91 20 2e 	lds	r19, 0x2E20
    299c:	40 91 21 2e 	lds	r20, 0x2E21
    29a0:	50 91 22 2e 	lds	r21, 0x2E22
    29a4:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    29a8:	60 93 1f 2e 	sts	0x2E1F, r22
    29ac:	70 93 20 2e 	sts	0x2E20, r23
    29b0:	80 93 21 2e 	sts	0x2E21, r24
    29b4:	90 93 22 2e 	sts	0x2E22, r25
					X_cilj = X_pos;
    29b8:	80 91 1f 2e 	lds	r24, 0x2E1F
    29bc:	90 91 20 2e 	lds	r25, 0x2E20
    29c0:	a0 91 21 2e 	lds	r26, 0x2E21
    29c4:	b0 91 22 2e 	lds	r27, 0x2E22
    29c8:	80 93 ac 24 	sts	0x24AC, r24
    29cc:	90 93 ad 24 	sts	0x24AD, r25
    29d0:	a0 93 ae 24 	sts	0x24AE, r26
    29d4:	b0 93 af 24 	sts	0x24AF, r27
					X_cilj_stari = X_pos;
    29d8:	80 91 1f 2e 	lds	r24, 0x2E1F
    29dc:	90 91 20 2e 	lds	r25, 0x2E20
    29e0:	a0 91 21 2e 	lds	r26, 0x2E21
    29e4:	b0 91 22 2e 	lds	r27, 0x2E22
    29e8:	80 93 2d 2e 	sts	0x2E2D, r24
    29ec:	90 93 2e 2e 	sts	0x2E2E, r25
    29f0:	a0 93 2f 2e 	sts	0x2E2F, r26
    29f4:	b0 93 30 2e 	sts	0x2E30, r27
				}
				//Y_pos
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    29f8:	80 91 6d 29 	lds	r24, 0x296D
    29fc:	8f 3f       	cpi	r24, 0xFF	; 255
    29fe:	29 f4       	brne	.+10     	; 0x2a0a <__vector_61+0xdee>
    2a00:	80 91 6e 29 	lds	r24, 0x296E
    2a04:	8f 3f       	cpi	r24, 0xFF	; 255
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <__vector_61+0xdee>
    2a08:	6d c0       	rjmp	.+218    	; 0x2ae4 <__vector_61+0xec8>
				{
					Y_pos = 0;
    2a0a:	10 92 fe 29 	sts	0x29FE, r1
    2a0e:	10 92 ff 29 	sts	0x29FF, r1
    2a12:	10 92 00 2a 	sts	0x2A00, r1
    2a16:	10 92 01 2a 	sts	0x2A01, r1
					Y_pos |= (int)receiveArray[3] << 8;
    2a1a:	20 91 6d 29 	lds	r18, 0x296D
    2a1e:	40 91 fe 29 	lds	r20, 0x29FE
    2a22:	50 91 ff 29 	lds	r21, 0x29FF
    2a26:	60 91 00 2a 	lds	r22, 0x2A00
    2a2a:	70 91 01 2a 	lds	r23, 0x2A01
    2a2e:	92 2f       	mov	r25, r18
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	aa 27       	eor	r26, r26
    2a34:	97 fd       	sbrc	r25, 7
    2a36:	a0 95       	com	r26
    2a38:	ba 2f       	mov	r27, r26
    2a3a:	84 2b       	or	r24, r20
    2a3c:	95 2b       	or	r25, r21
    2a3e:	a6 2b       	or	r26, r22
    2a40:	b7 2b       	or	r27, r23
    2a42:	80 93 fe 29 	sts	0x29FE, r24
    2a46:	90 93 ff 29 	sts	0x29FF, r25
    2a4a:	a0 93 00 2a 	sts	0x2A00, r26
    2a4e:	b0 93 01 2a 	sts	0x2A01, r27
					Y_pos |= (int)receiveArray[4];
    2a52:	20 91 6e 29 	lds	r18, 0x296E
    2a56:	80 91 fe 29 	lds	r24, 0x29FE
    2a5a:	90 91 ff 29 	lds	r25, 0x29FF
    2a5e:	a0 91 00 2a 	lds	r26, 0x2A00
    2a62:	b0 91 01 2a 	lds	r27, 0x2A01
    2a66:	82 2b       	or	r24, r18
    2a68:	80 93 fe 29 	sts	0x29FE, r24
    2a6c:	90 93 ff 29 	sts	0x29FF, r25
    2a70:	a0 93 00 2a 	sts	0x2A00, r26
    2a74:	b0 93 01 2a 	sts	0x2A01, r27
					Y_pos = Y_cilj * scale_factor_for_mm;
    2a78:	a0 91 fc 2d 	lds	r26, 0x2DFC
    2a7c:	b0 91 fd 2d 	lds	r27, 0x2DFD
    2a80:	20 91 07 2e 	lds	r18, 0x2E07
    2a84:	30 91 08 2e 	lds	r19, 0x2E08
    2a88:	40 91 09 2e 	lds	r20, 0x2E09
    2a8c:	50 91 0a 2e 	lds	r21, 0x2E0A
    2a90:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    2a94:	60 93 fe 29 	sts	0x29FE, r22
    2a98:	70 93 ff 29 	sts	0x29FF, r23
    2a9c:	80 93 00 2a 	sts	0x2A00, r24
    2aa0:	90 93 01 2a 	sts	0x2A01, r25
					Y_cilj = Y_pos;
    2aa4:	80 91 fe 29 	lds	r24, 0x29FE
    2aa8:	90 91 ff 29 	lds	r25, 0x29FF
    2aac:	a0 91 00 2a 	lds	r26, 0x2A00
    2ab0:	b0 91 01 2a 	lds	r27, 0x2A01
    2ab4:	80 93 07 2e 	sts	0x2E07, r24
    2ab8:	90 93 08 2e 	sts	0x2E08, r25
    2abc:	a0 93 09 2e 	sts	0x2E09, r26
    2ac0:	b0 93 0a 2e 	sts	0x2E0A, r27
					Y_cilj_stari = Y_pos;
    2ac4:	80 91 fe 29 	lds	r24, 0x29FE
    2ac8:	90 91 ff 29 	lds	r25, 0x29FF
    2acc:	a0 91 00 2a 	lds	r26, 0x2A00
    2ad0:	b0 91 01 2a 	lds	r27, 0x2A01
    2ad4:	80 93 6c 2e 	sts	0x2E6C, r24
    2ad8:	90 93 6d 2e 	sts	0x2E6D, r25
    2adc:	a0 93 6e 2e 	sts	0x2E6E, r26
    2ae0:	b0 93 6f 2e 	sts	0x2E6F, r27
				}
				
				//teta
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2ae4:	80 91 6f 29 	lds	r24, 0x296F
    2ae8:	8f 3f       	cpi	r24, 0xFF	; 255
    2aea:	29 f4       	brne	.+10     	; 0x2af6 <__vector_61+0xeda>
    2aec:	80 91 70 29 	lds	r24, 0x2970
    2af0:	8f 3f       	cpi	r24, 0xFF	; 255
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <__vector_61+0xeda>
    2af4:	67 c0       	rjmp	.+206    	; 0x2bc4 <__vector_61+0xfa8>
				{
					teta = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    2af6:	10 92 7f 32 	sts	0x327F, r1
    2afa:	10 92 80 32 	sts	0x3280, r1
    2afe:	10 92 81 32 	sts	0x3281, r1
    2b02:	10 92 82 32 	sts	0x3282, r1
					teta |= (int)receiveArray[5] << 8;
    2b06:	20 91 6f 29 	lds	r18, 0x296F
    2b0a:	40 91 7f 32 	lds	r20, 0x327F
    2b0e:	50 91 80 32 	lds	r21, 0x3280
    2b12:	60 91 81 32 	lds	r22, 0x3281
    2b16:	70 91 82 32 	lds	r23, 0x3282
    2b1a:	92 2f       	mov	r25, r18
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	aa 27       	eor	r26, r26
    2b20:	97 fd       	sbrc	r25, 7
    2b22:	a0 95       	com	r26
    2b24:	ba 2f       	mov	r27, r26
    2b26:	84 2b       	or	r24, r20
    2b28:	95 2b       	or	r25, r21
    2b2a:	a6 2b       	or	r26, r22
    2b2c:	b7 2b       	or	r27, r23
    2b2e:	80 93 7f 32 	sts	0x327F, r24
    2b32:	90 93 80 32 	sts	0x3280, r25
    2b36:	a0 93 81 32 	sts	0x3281, r26
    2b3a:	b0 93 82 32 	sts	0x3282, r27
					teta |= (int)receiveArray[6];
    2b3e:	20 91 70 29 	lds	r18, 0x2970
    2b42:	80 91 7f 32 	lds	r24, 0x327F
    2b46:	90 91 80 32 	lds	r25, 0x3280
    2b4a:	a0 91 81 32 	lds	r26, 0x3281
    2b4e:	b0 91 82 32 	lds	r27, 0x3282
    2b52:	82 2b       	or	r24, r18
    2b54:	80 93 7f 32 	sts	0x327F, r24
    2b58:	90 93 80 32 	sts	0x3280, r25
    2b5c:	a0 93 81 32 	sts	0x3281, r26
    2b60:	b0 93 82 32 	sts	0x3282, r27
					teta = (teta * krug360) / 360;
    2b64:	20 91 7f 32 	lds	r18, 0x327F
    2b68:	30 91 80 32 	lds	r19, 0x3280
    2b6c:	40 91 81 32 	lds	r20, 0x3281
    2b70:	50 91 82 32 	lds	r21, 0x3282
    2b74:	60 91 71 32 	lds	r22, 0x3271
    2b78:	70 91 72 32 	lds	r23, 0x3272
    2b7c:	80 91 73 32 	lds	r24, 0x3273
    2b80:	90 91 74 32 	lds	r25, 0x3274
    2b84:	0e 94 43 37 	call	0x6e86	; 0x6e86 <__mulsi3>
    2b88:	28 e6       	ldi	r18, 0x68	; 104
    2b8a:	31 e0       	ldi	r19, 0x01	; 1
    2b8c:	40 e0       	ldi	r20, 0x00	; 0
    2b8e:	50 e0       	ldi	r21, 0x00	; 0
    2b90:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    2b94:	20 93 7f 32 	sts	0x327F, r18
    2b98:	30 93 80 32 	sts	0x3280, r19
    2b9c:	40 93 81 32 	sts	0x3281, r20
    2ba0:	50 93 82 32 	sts	0x3282, r21
					teta_cilj = teta;
    2ba4:	80 91 7f 32 	lds	r24, 0x327F
    2ba8:	90 91 80 32 	lds	r25, 0x3280
    2bac:	a0 91 81 32 	lds	r26, 0x3281
    2bb0:	b0 91 82 32 	lds	r27, 0x3282
    2bb4:	80 93 c8 24 	sts	0x24C8, r24
    2bb8:	90 93 c9 24 	sts	0x24C9, r25
    2bbc:	a0 93 ca 24 	sts	0x24CA, r26
    2bc0:	b0 93 cb 24 	sts	0x24CB, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2bc4:	80 91 6a 29 	lds	r24, 0x296A
    2bc8:	80 93 d9 28 	sts	0x28D9, r24
					teta = (teta * krug360) / 360;
					teta_cilj = teta;
				}
				
				//slanje odgovora
				i = 0;
    2bcc:	00 e0       	ldi	r16, 0x00	; 0
    2bce:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	e7 52       	subi	r30, 0x27	; 39
    2bd4:	f7 4d       	sbci	r31, 0xD7	; 215
    2bd6:	60 81       	ld	r22, Z
    2bd8:	89 e0       	ldi	r24, 0x09	; 9
    2bda:	90 e2       	ldi	r25, 0x20	; 32
    2bdc:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2be0:	88 23       	and	r24, r24
    2be2:	11 f0       	breq	.+4      	; 0x2be8 <__vector_61+0xfcc>
					{
						i++;
    2be4:	0f 5f       	subi	r16, 0xFF	; 255
    2be6:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2be8:	10 16       	cp	r1, r16
    2bea:	11 06       	cpc	r1, r17
    2bec:	8c f7       	brge	.-30     	; 0x2bd0 <__vector_61+0xfb4>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2bee:	10 92 59 29 	sts	0x2959, r1
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
    2bf2:	10 92 59 29 	sts	0x2959, r1
    2bf6:	af c4       	rjmp	.+2398   	; 0x3556 <__vector_61+0x193a>
		}
	}
	//Total Stop - 8
	else if(receiveArray[0] == 8)					//provera funkcijskog bajta
    2bf8:	80 91 6a 29 	lds	r24, 0x296A
    2bfc:	88 30       	cpi	r24, 0x08	; 8
    2bfe:	d9 f5       	brne	.+118    	; 0x2c76 <__vector_61+0x105a>
	{
		if(RX_i_E1 >= 3)							//stigla je cela poruka
    2c00:	80 91 59 29 	lds	r24, 0x2959
    2c04:	83 30       	cpi	r24, 0x03	; 3
    2c06:	08 f4       	brcc	.+2      	; 0x2c0a <__vector_61+0xfee>
    2c08:	a6 c4       	rjmp	.+2380   	; 0x3556 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2c0a:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				
				if(receiveArray[1] == 0x01)
    2c0e:	80 91 6b 29 	lds	r24, 0x296B
    2c12:	81 30       	cpi	r24, 0x01	; 1
    2c14:	39 f4       	brne	.+14     	; 0x2c24 <__vector_61+0x1008>
				{
					stop_PID_levi = 1;
    2c16:	80 93 ee 2d 	sts	0x2DEE, r24
					PID_brzina_L = 0;
    2c1a:	10 92 77 2e 	sts	0x2E77, r1
    2c1e:	10 92 78 2e 	sts	0x2E78, r1
    2c22:	02 c0       	rjmp	.+4      	; 0x2c28 <__vector_61+0x100c>
				}				
				else
					stop_PID_levi = 0;
    2c24:	10 92 ee 2d 	sts	0x2DEE, r1
					
				if(receiveArray[2] == 0x01)
    2c28:	80 91 6c 29 	lds	r24, 0x296C
    2c2c:	81 30       	cpi	r24, 0x01	; 1
    2c2e:	39 f4       	brne	.+14     	; 0x2c3e <__vector_61+0x1022>
				{
					stop_PID_desni = 1;
    2c30:	80 93 f0 29 	sts	0x29F0, r24
					PID_brzina_R = 0;
    2c34:	10 92 75 2e 	sts	0x2E75, r1
    2c38:	10 92 76 2e 	sts	0x2E76, r1
    2c3c:	02 c0       	rjmp	.+4      	; 0x2c42 <__vector_61+0x1026>
				}					
				else
					stop_PID_desni = 0;
    2c3e:	10 92 f0 29 	sts	0x29F0, r1
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2c42:	80 91 6a 29 	lds	r24, 0x296A
    2c46:	80 93 d9 28 	sts	0x28D9, r24
				}					
				else
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
    2c4a:	00 e0       	ldi	r16, 0x00	; 0
    2c4c:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2c4e:	f8 01       	movw	r30, r16
    2c50:	e7 52       	subi	r30, 0x27	; 39
    2c52:	f7 4d       	sbci	r31, 0xD7	; 215
    2c54:	60 81       	ld	r22, Z
    2c56:	89 e0       	ldi	r24, 0x09	; 9
    2c58:	90 e2       	ldi	r25, 0x20	; 32
    2c5a:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2c5e:	88 23       	and	r24, r24
    2c60:	11 f0       	breq	.+4      	; 0x2c66 <__vector_61+0x104a>
					{
						i++;
    2c62:	0f 5f       	subi	r16, 0xFF	; 255
    2c64:	1f 4f       	sbci	r17, 0xFF	; 255
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2c66:	10 16       	cp	r1, r16
    2c68:	11 06       	cpc	r1, r17
    2c6a:	8c f7       	brge	.-30     	; 0x2c4e <__vector_61+0x1032>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2c6c:	10 92 59 29 	sts	0x2959, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda
    2c70:	10 92 59 29 	sts	0x2959, r1
    2c74:	70 c4       	rjmp	.+2272   	; 0x3556 <__vector_61+0x193a>
		}
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//CIATNJE ADRESIRANOG PARAMETRA - 9
	else if(receiveArray[0] == 9)					//provera funkcijskog bajta
    2c76:	80 91 6a 29 	lds	r24, 0x296A
    2c7a:	89 30       	cpi	r24, 0x09	; 9
    2c7c:	09 f0       	breq	.+2      	; 0x2c80 <__vector_61+0x1064>
    2c7e:	03 c1       	rjmp	.+518    	; 0x2e86 <__vector_61+0x126a>
	{
		if(RX_i_E1 >= 6)								//stigla je cela poruka (7)
    2c80:	80 91 59 29 	lds	r24, 0x2959
    2c84:	86 30       	cpi	r24, 0x06	; 6
    2c86:	08 f4       	brcc	.+2      	; 0x2c8a <__vector_61+0x106e>
    2c88:	66 c4       	rjmp	.+2252   	; 0x3556 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena		
    2c8a:	10 92 f7 2d 	sts	0x2DF7, r1
// 			for(i=0; i<=4; i++)						//racunanje CHC
// 				CHC ^= receiveArray[i];

			//if(receiveArray[x] == CHC)			//CHC ok
			{
				adresa_long = 0;
    2c8e:	10 92 62 29 	sts	0x2962, r1
    2c92:	10 92 63 29 	sts	0x2963, r1
    2c96:	10 92 64 29 	sts	0x2964, r1
    2c9a:	10 92 65 29 	sts	0x2965, r1
				adresa_long |= (long)receiveArray[2] << 24;
    2c9e:	20 91 6c 29 	lds	r18, 0x296C
    2ca2:	80 91 62 29 	lds	r24, 0x2962
    2ca6:	90 91 63 29 	lds	r25, 0x2963
    2caa:	a0 91 64 29 	lds	r26, 0x2964
    2cae:	b0 91 65 29 	lds	r27, 0x2965
    2cb2:	b2 2b       	or	r27, r18
    2cb4:	80 93 62 29 	sts	0x2962, r24
    2cb8:	90 93 63 29 	sts	0x2963, r25
    2cbc:	a0 93 64 29 	sts	0x2964, r26
    2cc0:	b0 93 65 29 	sts	0x2965, r27
				adresa_long |= (long)receiveArray[3] << 16;
    2cc4:	20 91 6d 29 	lds	r18, 0x296D
    2cc8:	80 91 62 29 	lds	r24, 0x2962
    2ccc:	90 91 63 29 	lds	r25, 0x2963
    2cd0:	a0 91 64 29 	lds	r26, 0x2964
    2cd4:	b0 91 65 29 	lds	r27, 0x2965
    2cd8:	a2 2b       	or	r26, r18
    2cda:	80 93 62 29 	sts	0x2962, r24
    2cde:	90 93 63 29 	sts	0x2963, r25
    2ce2:	a0 93 64 29 	sts	0x2964, r26
    2ce6:	b0 93 65 29 	sts	0x2965, r27
				adresa_long |= (long)receiveArray[4] << 8;
    2cea:	20 91 6e 29 	lds	r18, 0x296E
    2cee:	80 91 62 29 	lds	r24, 0x2962
    2cf2:	90 91 63 29 	lds	r25, 0x2963
    2cf6:	a0 91 64 29 	lds	r26, 0x2964
    2cfa:	b0 91 65 29 	lds	r27, 0x2965
    2cfe:	92 2b       	or	r25, r18
    2d00:	80 93 62 29 	sts	0x2962, r24
    2d04:	90 93 63 29 	sts	0x2963, r25
    2d08:	a0 93 64 29 	sts	0x2964, r26
    2d0c:	b0 93 65 29 	sts	0x2965, r27
				adresa_long |= (long)receiveArray[5];
    2d10:	20 91 6f 29 	lds	r18, 0x296F
    2d14:	80 91 62 29 	lds	r24, 0x2962
    2d18:	90 91 63 29 	lds	r25, 0x2963
    2d1c:	a0 91 64 29 	lds	r26, 0x2964
    2d20:	b0 91 65 29 	lds	r27, 0x2965
    2d24:	82 2b       	or	r24, r18
    2d26:	80 93 62 29 	sts	0x2962, r24
    2d2a:	90 93 63 29 	sts	0x2963, r25
    2d2e:	a0 93 64 29 	sts	0x2964, r26
    2d32:	b0 93 65 29 	sts	0x2965, r27
	
				//unsigned long registerValue = mmio32(adresa_long);		// read
					
				if (receiveArray[1] == 1)	//jednobajtna promenljiva
    2d36:	80 91 6b 29 	lds	r24, 0x296B
    2d3a:	81 30       	cpi	r24, 0x01	; 1
    2d3c:	b1 f4       	brne	.+44     	; 0x2d6a <__vector_61+0x114e>
				{
					sendArray[4] = mmio32(adresa_long);
    2d3e:	80 91 62 29 	lds	r24, 0x2962
    2d42:	90 91 63 29 	lds	r25, 0x2963
    2d46:	a0 91 64 29 	lds	r26, 0x2964
    2d4a:	b0 91 65 29 	lds	r27, 0x2965
    2d4e:	fc 01       	movw	r30, r24
    2d50:	80 81       	ld	r24, Z
    2d52:	91 81       	ldd	r25, Z+1	; 0x01
    2d54:	a2 81       	ldd	r26, Z+2	; 0x02
    2d56:	b3 81       	ldd	r27, Z+3	; 0x03
    2d58:	80 93 dd 28 	sts	0x28DD, r24
					sendArray[3] = 0;
    2d5c:	10 92 dc 28 	sts	0x28DC, r1
					sendArray[2] = 0;
    2d60:	10 92 db 28 	sts	0x28DB, r1
					sendArray[1] = 0;
    2d64:	10 92 da 28 	sts	0x28DA, r1
    2d68:	74 c0       	rjmp	.+232    	; 0x2e52 <__vector_61+0x1236>
				}
				else if (receiveArray[1] == 2) //dvobajtna promenljiva
    2d6a:	80 91 6b 29 	lds	r24, 0x296B
    2d6e:	82 30       	cpi	r24, 0x02	; 2
    2d70:	31 f5       	brne	.+76     	; 0x2dbe <__vector_61+0x11a2>
				{
					sendArray[4] = mmio32(adresa_long);
    2d72:	80 91 62 29 	lds	r24, 0x2962
    2d76:	90 91 63 29 	lds	r25, 0x2963
    2d7a:	a0 91 64 29 	lds	r26, 0x2964
    2d7e:	b0 91 65 29 	lds	r27, 0x2965
    2d82:	fc 01       	movw	r30, r24
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	a2 81       	ldd	r26, Z+2	; 0x02
    2d8a:	b3 81       	ldd	r27, Z+3	; 0x03
    2d8c:	80 93 dd 28 	sts	0x28DD, r24
					sendArray[3] = mmio32(adresa_long+1);
    2d90:	80 91 62 29 	lds	r24, 0x2962
    2d94:	90 91 63 29 	lds	r25, 0x2963
    2d98:	a0 91 64 29 	lds	r26, 0x2964
    2d9c:	b0 91 65 29 	lds	r27, 0x2965
    2da0:	01 96       	adiw	r24, 0x01	; 1
    2da2:	a1 1d       	adc	r26, r1
    2da4:	b1 1d       	adc	r27, r1
    2da6:	fc 01       	movw	r30, r24
    2da8:	80 81       	ld	r24, Z
    2daa:	91 81       	ldd	r25, Z+1	; 0x01
    2dac:	a2 81       	ldd	r26, Z+2	; 0x02
    2dae:	b3 81       	ldd	r27, Z+3	; 0x03
    2db0:	80 93 dc 28 	sts	0x28DC, r24
					sendArray[2] = 0;
    2db4:	10 92 db 28 	sts	0x28DB, r1
					sendArray[1] = 0;
    2db8:	10 92 da 28 	sts	0x28DA, r1
    2dbc:	4a c0       	rjmp	.+148    	; 0x2e52 <__vector_61+0x1236>
				}
				else if (receiveArray[1] == 4)	//cetvorobajtna promenljiva
    2dbe:	80 91 6b 29 	lds	r24, 0x296B
    2dc2:	84 30       	cpi	r24, 0x04	; 4
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <__vector_61+0x11ac>
    2dc6:	45 c0       	rjmp	.+138    	; 0x2e52 <__vector_61+0x1236>
				{
					sendArray[4] = mmio32(adresa_long);
    2dc8:	80 91 62 29 	lds	r24, 0x2962
    2dcc:	90 91 63 29 	lds	r25, 0x2963
    2dd0:	a0 91 64 29 	lds	r26, 0x2964
    2dd4:	b0 91 65 29 	lds	r27, 0x2965
    2dd8:	fc 01       	movw	r30, r24
    2dda:	80 81       	ld	r24, Z
    2ddc:	91 81       	ldd	r25, Z+1	; 0x01
    2dde:	a2 81       	ldd	r26, Z+2	; 0x02
    2de0:	b3 81       	ldd	r27, Z+3	; 0x03
    2de2:	80 93 dd 28 	sts	0x28DD, r24
					sendArray[3] = mmio32(adresa_long+1);
    2de6:	80 91 62 29 	lds	r24, 0x2962
    2dea:	90 91 63 29 	lds	r25, 0x2963
    2dee:	a0 91 64 29 	lds	r26, 0x2964
    2df2:	b0 91 65 29 	lds	r27, 0x2965
    2df6:	01 96       	adiw	r24, 0x01	; 1
    2df8:	a1 1d       	adc	r26, r1
    2dfa:	b1 1d       	adc	r27, r1
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	80 81       	ld	r24, Z
    2e00:	91 81       	ldd	r25, Z+1	; 0x01
    2e02:	a2 81       	ldd	r26, Z+2	; 0x02
    2e04:	b3 81       	ldd	r27, Z+3	; 0x03
    2e06:	80 93 dc 28 	sts	0x28DC, r24
					sendArray[2] = mmio32(adresa_long+2);
    2e0a:	80 91 62 29 	lds	r24, 0x2962
    2e0e:	90 91 63 29 	lds	r25, 0x2963
    2e12:	a0 91 64 29 	lds	r26, 0x2964
    2e16:	b0 91 65 29 	lds	r27, 0x2965
    2e1a:	02 96       	adiw	r24, 0x02	; 2
    2e1c:	a1 1d       	adc	r26, r1
    2e1e:	b1 1d       	adc	r27, r1
    2e20:	fc 01       	movw	r30, r24
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	a2 81       	ldd	r26, Z+2	; 0x02
    2e28:	b3 81       	ldd	r27, Z+3	; 0x03
    2e2a:	80 93 db 28 	sts	0x28DB, r24
					sendArray[1] = mmio32(adresa_long+3);
    2e2e:	80 91 62 29 	lds	r24, 0x2962
    2e32:	90 91 63 29 	lds	r25, 0x2963
    2e36:	a0 91 64 29 	lds	r26, 0x2964
    2e3a:	b0 91 65 29 	lds	r27, 0x2965
    2e3e:	03 96       	adiw	r24, 0x03	; 3
    2e40:	a1 1d       	adc	r26, r1
    2e42:	b1 1d       	adc	r27, r1
    2e44:	fc 01       	movw	r30, r24
    2e46:	80 81       	ld	r24, Z
    2e48:	91 81       	ldd	r25, Z+1	; 0x01
    2e4a:	a2 81       	ldd	r26, Z+2	; 0x02
    2e4c:	b3 81       	ldd	r27, Z+3	; 0x03
    2e4e:	80 93 da 28 	sts	0x28DA, r24
				}
								
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2e52:	80 91 6a 29 	lds	r24, 0x296A
    2e56:	80 93 d9 28 	sts	0x28D9, r24
					sendArray[2] = mmio32(adresa_long+2);
					sendArray[1] = mmio32(adresa_long+3);
				}
								
				//slanje odgovora
				i = 0;
    2e5a:	00 e0       	ldi	r16, 0x00	; 0
    2e5c:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i <= 4)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2e5e:	f8 01       	movw	r30, r16
    2e60:	e7 52       	subi	r30, 0x27	; 39
    2e62:	f7 4d       	sbci	r31, 0xD7	; 215
    2e64:	60 81       	ld	r22, Z
    2e66:	89 e0       	ldi	r24, 0x09	; 9
    2e68:	90 e2       	ldi	r25, 0x20	; 32
    2e6a:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[5] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2e6e:	88 23       	and	r24, r24
    2e70:	11 f0       	breq	.+4      	; 0x2e76 <__vector_61+0x125a>
					{
						i++;
    2e72:	0f 5f       	subi	r16, 0xFF	; 255
    2e74:	1f 4f       	sbci	r17, 0xFF	; 255
				}
								
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i <= 4)
    2e76:	05 30       	cpi	r16, 0x05	; 5
    2e78:	11 05       	cpc	r17, r1
    2e7a:	8c f3       	brlt	.-30     	; 0x2e5e <__vector_61+0x1242>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2e7c:	10 92 59 29 	sts	0x2959, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    2e80:	10 92 59 29 	sts	0x2959, r1
    2e84:	68 c3       	rjmp	.+1744   	; 0x3556 <__vector_61+0x193a>
		}					
	}
	//UPIS U ADRESIRANU PROMENLJIVU - 10
	else if(receiveArray[0] == 10)					//provera funkcijskog bajta
    2e86:	80 91 6a 29 	lds	r24, 0x296A
    2e8a:	8a 30       	cpi	r24, 0x0A	; 10
    2e8c:	09 f0       	breq	.+2      	; 0x2e90 <__vector_61+0x1274>
    2e8e:	8e c1       	rjmp	.+796    	; 0x31ac <__vector_61+0x1590>
	{
		if(RX_i_E1 >= 10)								//stigla je cela poruka (1+1+4+4+1)
    2e90:	80 91 59 29 	lds	r24, 0x2959
    2e94:	8a 30       	cpi	r24, 0x0A	; 10
    2e96:	08 f4       	brcc	.+2      	; 0x2e9a <__vector_61+0x127e>
    2e98:	5e c3       	rjmp	.+1724   	; 0x3556 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2e9a:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				adresa_long = 0;
    2e9e:	10 92 62 29 	sts	0x2962, r1
    2ea2:	10 92 63 29 	sts	0x2963, r1
    2ea6:	10 92 64 29 	sts	0x2964, r1
    2eaa:	10 92 65 29 	sts	0x2965, r1
				adresa_long |= (long)receiveArray[2] << 24;
    2eae:	20 91 6c 29 	lds	r18, 0x296C
    2eb2:	80 91 62 29 	lds	r24, 0x2962
    2eb6:	90 91 63 29 	lds	r25, 0x2963
    2eba:	a0 91 64 29 	lds	r26, 0x2964
    2ebe:	b0 91 65 29 	lds	r27, 0x2965
    2ec2:	b2 2b       	or	r27, r18
    2ec4:	80 93 62 29 	sts	0x2962, r24
    2ec8:	90 93 63 29 	sts	0x2963, r25
    2ecc:	a0 93 64 29 	sts	0x2964, r26
    2ed0:	b0 93 65 29 	sts	0x2965, r27
				adresa_long |= (long)receiveArray[3] << 16;
    2ed4:	20 91 6d 29 	lds	r18, 0x296D
    2ed8:	80 91 62 29 	lds	r24, 0x2962
    2edc:	90 91 63 29 	lds	r25, 0x2963
    2ee0:	a0 91 64 29 	lds	r26, 0x2964
    2ee4:	b0 91 65 29 	lds	r27, 0x2965
    2ee8:	a2 2b       	or	r26, r18
    2eea:	80 93 62 29 	sts	0x2962, r24
    2eee:	90 93 63 29 	sts	0x2963, r25
    2ef2:	a0 93 64 29 	sts	0x2964, r26
    2ef6:	b0 93 65 29 	sts	0x2965, r27
				adresa_long |= (long)receiveArray[4] << 8;
    2efa:	20 91 6e 29 	lds	r18, 0x296E
    2efe:	80 91 62 29 	lds	r24, 0x2962
    2f02:	90 91 63 29 	lds	r25, 0x2963
    2f06:	a0 91 64 29 	lds	r26, 0x2964
    2f0a:	b0 91 65 29 	lds	r27, 0x2965
    2f0e:	92 2b       	or	r25, r18
    2f10:	80 93 62 29 	sts	0x2962, r24
    2f14:	90 93 63 29 	sts	0x2963, r25
    2f18:	a0 93 64 29 	sts	0x2964, r26
    2f1c:	b0 93 65 29 	sts	0x2965, r27
				adresa_long |= (long)receiveArray[5];
    2f20:	20 91 6f 29 	lds	r18, 0x296F
    2f24:	80 91 62 29 	lds	r24, 0x2962
    2f28:	90 91 63 29 	lds	r25, 0x2963
    2f2c:	a0 91 64 29 	lds	r26, 0x2964
    2f30:	b0 91 65 29 	lds	r27, 0x2965
    2f34:	82 2b       	or	r24, r18
    2f36:	80 93 62 29 	sts	0x2962, r24
    2f3a:	90 93 63 29 	sts	0x2963, r25
    2f3e:	a0 93 64 29 	sts	0x2964, r26
    2f42:	b0 93 65 29 	sts	0x2965, r27

				// write
				if (receiveArray[1] == 4)	//cetvorobajtna promenljiva
    2f46:	80 91 6b 29 	lds	r24, 0x296B
    2f4a:	84 30       	cpi	r24, 0x04	; 4
    2f4c:	09 f0       	breq	.+2      	; 0x2f50 <__vector_61+0x1334>
    2f4e:	97 c0       	rjmp	.+302    	; 0x307e <__vector_61+0x1462>
				{
					mmio32(adresa_long) = receiveArray[9];                     
    2f50:	80 91 62 29 	lds	r24, 0x2962
    2f54:	90 91 63 29 	lds	r25, 0x2963
    2f58:	a0 91 64 29 	lds	r26, 0x2964
    2f5c:	b0 91 65 29 	lds	r27, 0x2965
    2f60:	fc 01       	movw	r30, r24
    2f62:	80 91 73 29 	lds	r24, 0x2973
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	a0 e0       	ldi	r26, 0x00	; 0
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	80 83       	st	Z, r24
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	a2 83       	std	Z+2, r26	; 0x02
    2f72:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+1) = receiveArray[8];					
    2f74:	80 91 62 29 	lds	r24, 0x2962
    2f78:	90 91 63 29 	lds	r25, 0x2963
    2f7c:	a0 91 64 29 	lds	r26, 0x2964
    2f80:	b0 91 65 29 	lds	r27, 0x2965
    2f84:	01 96       	adiw	r24, 0x01	; 1
    2f86:	a1 1d       	adc	r26, r1
    2f88:	b1 1d       	adc	r27, r1
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	80 91 72 29 	lds	r24, 0x2972
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	a0 e0       	ldi	r26, 0x00	; 0
    2f94:	b0 e0       	ldi	r27, 0x00	; 0
    2f96:	80 83       	st	Z, r24
    2f98:	91 83       	std	Z+1, r25	; 0x01
    2f9a:	a2 83       	std	Z+2, r26	; 0x02
    2f9c:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+2) = receiveArray[7];
    2f9e:	80 91 62 29 	lds	r24, 0x2962
    2fa2:	90 91 63 29 	lds	r25, 0x2963
    2fa6:	a0 91 64 29 	lds	r26, 0x2964
    2faa:	b0 91 65 29 	lds	r27, 0x2965
    2fae:	02 96       	adiw	r24, 0x02	; 2
    2fb0:	a1 1d       	adc	r26, r1
    2fb2:	b1 1d       	adc	r27, r1
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	80 91 71 29 	lds	r24, 0x2971
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	a0 e0       	ldi	r26, 0x00	; 0
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	80 83       	st	Z, r24
    2fc2:	91 83       	std	Z+1, r25	; 0x01
    2fc4:	a2 83       	std	Z+2, r26	; 0x02
    2fc6:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+3) = receiveArray[6];   
    2fc8:	80 91 62 29 	lds	r24, 0x2962
    2fcc:	90 91 63 29 	lds	r25, 0x2963
    2fd0:	a0 91 64 29 	lds	r26, 0x2964
    2fd4:	b0 91 65 29 	lds	r27, 0x2965
    2fd8:	03 96       	adiw	r24, 0x03	; 3
    2fda:	a1 1d       	adc	r26, r1
    2fdc:	b1 1d       	adc	r27, r1
    2fde:	fc 01       	movw	r30, r24
    2fe0:	80 91 70 29 	lds	r24, 0x2970
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	a0 e0       	ldi	r26, 0x00	; 0
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	80 83       	st	Z, r24
    2fec:	91 83       	std	Z+1, r25	; 0x01
    2fee:	a2 83       	std	Z+2, r26	; 0x02
    2ff0:	b3 83       	std	Z+3, r27	; 0x03
					
					sendArray[1] = mmio32(adresa_long+3);
    2ff2:	80 91 62 29 	lds	r24, 0x2962
    2ff6:	90 91 63 29 	lds	r25, 0x2963
    2ffa:	a0 91 64 29 	lds	r26, 0x2964
    2ffe:	b0 91 65 29 	lds	r27, 0x2965
    3002:	03 96       	adiw	r24, 0x03	; 3
    3004:	a1 1d       	adc	r26, r1
    3006:	b1 1d       	adc	r27, r1
    3008:	fc 01       	movw	r30, r24
    300a:	80 81       	ld	r24, Z
    300c:	91 81       	ldd	r25, Z+1	; 0x01
    300e:	a2 81       	ldd	r26, Z+2	; 0x02
    3010:	b3 81       	ldd	r27, Z+3	; 0x03
    3012:	80 93 da 28 	sts	0x28DA, r24
					sendArray[2] = mmio32(adresa_long+2);
    3016:	80 91 62 29 	lds	r24, 0x2962
    301a:	90 91 63 29 	lds	r25, 0x2963
    301e:	a0 91 64 29 	lds	r26, 0x2964
    3022:	b0 91 65 29 	lds	r27, 0x2965
    3026:	02 96       	adiw	r24, 0x02	; 2
    3028:	a1 1d       	adc	r26, r1
    302a:	b1 1d       	adc	r27, r1
    302c:	fc 01       	movw	r30, r24
    302e:	80 81       	ld	r24, Z
    3030:	91 81       	ldd	r25, Z+1	; 0x01
    3032:	a2 81       	ldd	r26, Z+2	; 0x02
    3034:	b3 81       	ldd	r27, Z+3	; 0x03
    3036:	80 93 db 28 	sts	0x28DB, r24
					sendArray[3] = mmio32(adresa_long+1);
    303a:	80 91 62 29 	lds	r24, 0x2962
    303e:	90 91 63 29 	lds	r25, 0x2963
    3042:	a0 91 64 29 	lds	r26, 0x2964
    3046:	b0 91 65 29 	lds	r27, 0x2965
    304a:	01 96       	adiw	r24, 0x01	; 1
    304c:	a1 1d       	adc	r26, r1
    304e:	b1 1d       	adc	r27, r1
    3050:	fc 01       	movw	r30, r24
    3052:	80 81       	ld	r24, Z
    3054:	91 81       	ldd	r25, Z+1	; 0x01
    3056:	a2 81       	ldd	r26, Z+2	; 0x02
    3058:	b3 81       	ldd	r27, Z+3	; 0x03
    305a:	80 93 dc 28 	sts	0x28DC, r24
					sendArray[4] = mmio32(adresa_long);  
    305e:	80 91 62 29 	lds	r24, 0x2962
    3062:	90 91 63 29 	lds	r25, 0x2963
    3066:	a0 91 64 29 	lds	r26, 0x2964
    306a:	b0 91 65 29 	lds	r27, 0x2965
    306e:	fc 01       	movw	r30, r24
    3070:	80 81       	ld	r24, Z
    3072:	91 81       	ldd	r25, Z+1	; 0x01
    3074:	a2 81       	ldd	r26, Z+2	; 0x02
    3076:	b3 81       	ldd	r27, Z+3	; 0x03
    3078:	80 93 dd 28 	sts	0x28DD, r24
    307c:	7d c0       	rjmp	.+250    	; 0x3178 <__vector_61+0x155c>
				}	
				else if (receiveArray[1] == 2)	//dvobajtna promenljiva
    307e:	80 91 6b 29 	lds	r24, 0x296B
    3082:	82 30       	cpi	r24, 0x02	; 2
    3084:	09 f0       	breq	.+2      	; 0x3088 <__vector_61+0x146c>
    3086:	4d c0       	rjmp	.+154    	; 0x3122 <__vector_61+0x1506>
				{
					mmio32(adresa_long) = receiveArray[9];                     
    3088:	80 91 62 29 	lds	r24, 0x2962
    308c:	90 91 63 29 	lds	r25, 0x2963
    3090:	a0 91 64 29 	lds	r26, 0x2964
    3094:	b0 91 65 29 	lds	r27, 0x2965
    3098:	fc 01       	movw	r30, r24
    309a:	80 91 73 29 	lds	r24, 0x2973
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	a0 e0       	ldi	r26, 0x00	; 0
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	80 83       	st	Z, r24
    30a6:	91 83       	std	Z+1, r25	; 0x01
    30a8:	a2 83       	std	Z+2, r26	; 0x02
    30aa:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+1) = receiveArray[8];					
    30ac:	80 91 62 29 	lds	r24, 0x2962
    30b0:	90 91 63 29 	lds	r25, 0x2963
    30b4:	a0 91 64 29 	lds	r26, 0x2964
    30b8:	b0 91 65 29 	lds	r27, 0x2965
    30bc:	01 96       	adiw	r24, 0x01	; 1
    30be:	a1 1d       	adc	r26, r1
    30c0:	b1 1d       	adc	r27, r1
    30c2:	fc 01       	movw	r30, r24
    30c4:	80 91 72 29 	lds	r24, 0x2972
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	a0 e0       	ldi	r26, 0x00	; 0
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	80 83       	st	Z, r24
    30d0:	91 83       	std	Z+1, r25	; 0x01
    30d2:	a2 83       	std	Z+2, r26	; 0x02
    30d4:	b3 83       	std	Z+3, r27	; 0x03
					
					sendArray[1] = 0;
    30d6:	10 92 da 28 	sts	0x28DA, r1
					sendArray[2] = 0;
    30da:	10 92 db 28 	sts	0x28DB, r1
					sendArray[3] = mmio32(adresa_long+1);
    30de:	80 91 62 29 	lds	r24, 0x2962
    30e2:	90 91 63 29 	lds	r25, 0x2963
    30e6:	a0 91 64 29 	lds	r26, 0x2964
    30ea:	b0 91 65 29 	lds	r27, 0x2965
    30ee:	01 96       	adiw	r24, 0x01	; 1
    30f0:	a1 1d       	adc	r26, r1
    30f2:	b1 1d       	adc	r27, r1
    30f4:	fc 01       	movw	r30, r24
    30f6:	80 81       	ld	r24, Z
    30f8:	91 81       	ldd	r25, Z+1	; 0x01
    30fa:	a2 81       	ldd	r26, Z+2	; 0x02
    30fc:	b3 81       	ldd	r27, Z+3	; 0x03
    30fe:	80 93 dc 28 	sts	0x28DC, r24
					sendArray[4] = mmio32(adresa_long);  
    3102:	80 91 62 29 	lds	r24, 0x2962
    3106:	90 91 63 29 	lds	r25, 0x2963
    310a:	a0 91 64 29 	lds	r26, 0x2964
    310e:	b0 91 65 29 	lds	r27, 0x2965
    3112:	fc 01       	movw	r30, r24
    3114:	80 81       	ld	r24, Z
    3116:	91 81       	ldd	r25, Z+1	; 0x01
    3118:	a2 81       	ldd	r26, Z+2	; 0x02
    311a:	b3 81       	ldd	r27, Z+3	; 0x03
    311c:	80 93 dd 28 	sts	0x28DD, r24
    3120:	2b c0       	rjmp	.+86     	; 0x3178 <__vector_61+0x155c>
				}	
				else if (receiveArray[1] == 1)	//jednobajtna promenljiva
    3122:	80 91 6b 29 	lds	r24, 0x296B
    3126:	81 30       	cpi	r24, 0x01	; 1
    3128:	39 f5       	brne	.+78     	; 0x3178 <__vector_61+0x155c>
				{
					mmio32(adresa_long) = receiveArray[9];                        
    312a:	80 91 62 29 	lds	r24, 0x2962
    312e:	90 91 63 29 	lds	r25, 0x2963
    3132:	a0 91 64 29 	lds	r26, 0x2964
    3136:	b0 91 65 29 	lds	r27, 0x2965
    313a:	fc 01       	movw	r30, r24
    313c:	80 91 73 29 	lds	r24, 0x2973
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	a0 e0       	ldi	r26, 0x00	; 0
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	80 83       	st	Z, r24
    3148:	91 83       	std	Z+1, r25	; 0x01
    314a:	a2 83       	std	Z+2, r26	; 0x02
    314c:	b3 83       	std	Z+3, r27	; 0x03
					
					sendArray[1] = 0;
    314e:	10 92 da 28 	sts	0x28DA, r1
					sendArray[2] = 0;
    3152:	10 92 db 28 	sts	0x28DB, r1
					sendArray[3] = 0;
    3156:	10 92 dc 28 	sts	0x28DC, r1
					sendArray[4] = mmio32(adresa_long);  
    315a:	80 91 62 29 	lds	r24, 0x2962
    315e:	90 91 63 29 	lds	r25, 0x2963
    3162:	a0 91 64 29 	lds	r26, 0x2964
    3166:	b0 91 65 29 	lds	r27, 0x2965
    316a:	fc 01       	movw	r30, r24
    316c:	80 81       	ld	r24, Z
    316e:	91 81       	ldd	r25, Z+1	; 0x01
    3170:	a2 81       	ldd	r26, Z+2	; 0x02
    3172:	b3 81       	ldd	r27, Z+3	; 0x03
    3174:	80 93 dd 28 	sts	0x28DD, r24
				}						               
									
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    3178:	80 91 6a 29 	lds	r24, 0x296A
    317c:	80 93 d9 28 	sts	0x28D9, r24
					sendArray[3] = 0;
					sendArray[4] = mmio32(adresa_long);  
				}						               
									
				//slanje odgovora
				i = 0;
    3180:	00 e0       	ldi	r16, 0x00	; 0
    3182:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i <= 4)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    3184:	f8 01       	movw	r30, r16
    3186:	e7 52       	subi	r30, 0x27	; 39
    3188:	f7 4d       	sbci	r31, 0xD7	; 215
    318a:	60 81       	ld	r22, Z
    318c:	89 e0       	ldi	r24, 0x09	; 9
    318e:	90 e2       	ldi	r25, 0x20	; 32
    3190:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[5] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    3194:	88 23       	and	r24, r24
    3196:	11 f0       	breq	.+4      	; 0x319c <__vector_61+0x1580>
					{
						i++;
    3198:	0f 5f       	subi	r16, 0xFF	; 255
    319a:	1f 4f       	sbci	r17, 0xFF	; 255
				}						               
									
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i <= 4)
    319c:	05 30       	cpi	r16, 0x05	; 5
    319e:	11 05       	cpc	r17, r1
    31a0:	8c f3       	brlt	.-30     	; 0x3184 <__vector_61+0x1568>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    31a2:	10 92 59 29 	sts	0x2959, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    31a6:	10 92 59 29 	sts	0x2959, r1
    31aa:	d5 c1       	rjmp	.+938    	; 0x3556 <__vector_61+0x193a>
		}					
	}
	//PODESAVANJE NIZA ZA SNIMANJE - 11
	else if(receiveArray[0] == 11)					//provera funkcijskog bajta
    31ac:	80 91 6a 29 	lds	r24, 0x296A
    31b0:	8b 30       	cpi	r24, 0x0B	; 11
    31b2:	09 f0       	breq	.+2      	; 0x31b6 <__vector_61+0x159a>
    31b4:	44 c1       	rjmp	.+648    	; 0x343e <__vector_61+0x1822>
	{
		if(RX_i_E1 >= 7)							//stigla je cela poruka (3)
    31b6:	80 91 59 29 	lds	r24, 0x2959
    31ba:	87 30       	cpi	r24, 0x07	; 7
    31bc:	08 f4       	brcc	.+2      	; 0x31c0 <__vector_61+0x15a4>
    31be:	cb c1       	rjmp	.+918    	; 0x3556 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    31c0:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				if (receiveArray[1] == 1)	//niz_1
    31c4:	80 91 6b 29 	lds	r24, 0x296B
    31c8:	81 30       	cpi	r24, 0x01	; 1
    31ca:	09 f0       	breq	.+2      	; 0x31ce <__vector_61+0x15b2>
    31cc:	5c c0       	rjmp	.+184    	; 0x3286 <__vector_61+0x166a>
				{
					sample_time_niz_1 = receiveArray[2];
    31ce:	80 91 6c 29 	lds	r24, 0x296C
    31d2:	80 93 6e 32 	sts	0x326E, r24
					velicina_niz_1 = receiveArray[3];
    31d6:	80 91 6d 29 	lds	r24, 0x296D
    31da:	80 93 7e 32 	sts	0x327E, r24
					adresa_niz_1 = 0;
    31de:	10 92 f6 29 	sts	0x29F6, r1
    31e2:	10 92 f7 29 	sts	0x29F7, r1
    31e6:	10 92 f8 29 	sts	0x29F8, r1
    31ea:	10 92 f9 29 	sts	0x29F9, r1
					adresa_niz_1 |= (long)receiveArray[4] << 24;
    31ee:	20 91 6e 29 	lds	r18, 0x296E
    31f2:	80 91 f6 29 	lds	r24, 0x29F6
    31f6:	90 91 f7 29 	lds	r25, 0x29F7
    31fa:	a0 91 f8 29 	lds	r26, 0x29F8
    31fe:	b0 91 f9 29 	lds	r27, 0x29F9
    3202:	b2 2b       	or	r27, r18
    3204:	80 93 f6 29 	sts	0x29F6, r24
    3208:	90 93 f7 29 	sts	0x29F7, r25
    320c:	a0 93 f8 29 	sts	0x29F8, r26
    3210:	b0 93 f9 29 	sts	0x29F9, r27
					adresa_niz_1 |= (long)receiveArray[5] << 16;
    3214:	20 91 6f 29 	lds	r18, 0x296F
    3218:	80 91 f6 29 	lds	r24, 0x29F6
    321c:	90 91 f7 29 	lds	r25, 0x29F7
    3220:	a0 91 f8 29 	lds	r26, 0x29F8
    3224:	b0 91 f9 29 	lds	r27, 0x29F9
    3228:	a2 2b       	or	r26, r18
    322a:	80 93 f6 29 	sts	0x29F6, r24
    322e:	90 93 f7 29 	sts	0x29F7, r25
    3232:	a0 93 f8 29 	sts	0x29F8, r26
    3236:	b0 93 f9 29 	sts	0x29F9, r27
					adresa_niz_1 |= (long)receiveArray[6] << 8;
    323a:	20 91 70 29 	lds	r18, 0x2970
    323e:	80 91 f6 29 	lds	r24, 0x29F6
    3242:	90 91 f7 29 	lds	r25, 0x29F7
    3246:	a0 91 f8 29 	lds	r26, 0x29F8
    324a:	b0 91 f9 29 	lds	r27, 0x29F9
    324e:	92 2b       	or	r25, r18
    3250:	80 93 f6 29 	sts	0x29F6, r24
    3254:	90 93 f7 29 	sts	0x29F7, r25
    3258:	a0 93 f8 29 	sts	0x29F8, r26
    325c:	b0 93 f9 29 	sts	0x29F9, r27
					adresa_niz_1 |= (long)receiveArray[7];  
    3260:	20 91 71 29 	lds	r18, 0x2971
    3264:	80 91 f6 29 	lds	r24, 0x29F6
    3268:	90 91 f7 29 	lds	r25, 0x29F7
    326c:	a0 91 f8 29 	lds	r26, 0x29F8
    3270:	b0 91 f9 29 	lds	r27, 0x29F9
    3274:	82 2b       	or	r24, r18
    3276:	80 93 f6 29 	sts	0x29F6, r24
    327a:	90 93 f7 29 	sts	0x29F7, r25
    327e:	a0 93 f8 29 	sts	0x29F8, r26
    3282:	b0 93 f9 29 	sts	0x29F9, r27
				}
				if (receiveArray[1] == 2)	//niz_2
    3286:	80 91 6b 29 	lds	r24, 0x296B
    328a:	82 30       	cpi	r24, 0x02	; 2
    328c:	09 f0       	breq	.+2      	; 0x3290 <__vector_61+0x1674>
    328e:	5c c0       	rjmp	.+184    	; 0x3348 <__vector_61+0x172c>
				{
					sample_time_niz_2 = receiveArray[2];
    3290:	80 91 6c 29 	lds	r24, 0x296C
    3294:	80 93 79 2e 	sts	0x2E79, r24
					velicina_niz_2 = receiveArray[3];
    3298:	80 91 6d 29 	lds	r24, 0x296D
    329c:	80 93 5c 2e 	sts	0x2E5C, r24
					adresa_niz_2 = 0;
    32a0:	10 92 ba 24 	sts	0x24BA, r1
    32a4:	10 92 bb 24 	sts	0x24BB, r1
    32a8:	10 92 bc 24 	sts	0x24BC, r1
    32ac:	10 92 bd 24 	sts	0x24BD, r1
					adresa_niz_2 |= (long)receiveArray[4] << 24;
    32b0:	20 91 6e 29 	lds	r18, 0x296E
    32b4:	80 91 ba 24 	lds	r24, 0x24BA
    32b8:	90 91 bb 24 	lds	r25, 0x24BB
    32bc:	a0 91 bc 24 	lds	r26, 0x24BC
    32c0:	b0 91 bd 24 	lds	r27, 0x24BD
    32c4:	b2 2b       	or	r27, r18
    32c6:	80 93 ba 24 	sts	0x24BA, r24
    32ca:	90 93 bb 24 	sts	0x24BB, r25
    32ce:	a0 93 bc 24 	sts	0x24BC, r26
    32d2:	b0 93 bd 24 	sts	0x24BD, r27
					adresa_niz_2 |= (long)receiveArray[5] << 16;
    32d6:	20 91 6f 29 	lds	r18, 0x296F
    32da:	80 91 ba 24 	lds	r24, 0x24BA
    32de:	90 91 bb 24 	lds	r25, 0x24BB
    32e2:	a0 91 bc 24 	lds	r26, 0x24BC
    32e6:	b0 91 bd 24 	lds	r27, 0x24BD
    32ea:	a2 2b       	or	r26, r18
    32ec:	80 93 ba 24 	sts	0x24BA, r24
    32f0:	90 93 bb 24 	sts	0x24BB, r25
    32f4:	a0 93 bc 24 	sts	0x24BC, r26
    32f8:	b0 93 bd 24 	sts	0x24BD, r27
					adresa_niz_2 |= (long)receiveArray[6] << 8;
    32fc:	20 91 70 29 	lds	r18, 0x2970
    3300:	80 91 ba 24 	lds	r24, 0x24BA
    3304:	90 91 bb 24 	lds	r25, 0x24BB
    3308:	a0 91 bc 24 	lds	r26, 0x24BC
    330c:	b0 91 bd 24 	lds	r27, 0x24BD
    3310:	92 2b       	or	r25, r18
    3312:	80 93 ba 24 	sts	0x24BA, r24
    3316:	90 93 bb 24 	sts	0x24BB, r25
    331a:	a0 93 bc 24 	sts	0x24BC, r26
    331e:	b0 93 bd 24 	sts	0x24BD, r27
					adresa_niz_2 |= (long)receiveArray[7];
    3322:	20 91 71 29 	lds	r18, 0x2971
    3326:	80 91 ba 24 	lds	r24, 0x24BA
    332a:	90 91 bb 24 	lds	r25, 0x24BB
    332e:	a0 91 bc 24 	lds	r26, 0x24BC
    3332:	b0 91 bd 24 	lds	r27, 0x24BD
    3336:	82 2b       	or	r24, r18
    3338:	80 93 ba 24 	sts	0x24BA, r24
    333c:	90 93 bb 24 	sts	0x24BB, r25
    3340:	a0 93 bc 24 	sts	0x24BC, r26
    3344:	b0 93 bd 24 	sts	0x24BD, r27
				}
				
				if (receiveArray[1] == 3)	//niz_3
    3348:	80 91 6b 29 	lds	r24, 0x296B
    334c:	83 30       	cpi	r24, 0x03	; 3
    334e:	09 f0       	breq	.+2      	; 0x3352 <__vector_61+0x1736>
    3350:	5c c0       	rjmp	.+184    	; 0x340a <__vector_61+0x17ee>
				{
					sample_time_niz_3 = receiveArray[2];
    3352:	80 91 6c 29 	lds	r24, 0x296C
    3356:	80 93 0d 2e 	sts	0x2E0D, r24
					velicina_niz_3 = receiveArray[3];
    335a:	80 91 6d 29 	lds	r24, 0x296D
    335e:	80 93 ce 24 	sts	0x24CE, r24
					adresa_niz_3 = 0;
    3362:	10 92 3c 2e 	sts	0x2E3C, r1
    3366:	10 92 3d 2e 	sts	0x2E3D, r1
    336a:	10 92 3e 2e 	sts	0x2E3E, r1
    336e:	10 92 3f 2e 	sts	0x2E3F, r1
					adresa_niz_3 |= (long)receiveArray[4] << 24;
    3372:	20 91 6e 29 	lds	r18, 0x296E
    3376:	80 91 3c 2e 	lds	r24, 0x2E3C
    337a:	90 91 3d 2e 	lds	r25, 0x2E3D
    337e:	a0 91 3e 2e 	lds	r26, 0x2E3E
    3382:	b0 91 3f 2e 	lds	r27, 0x2E3F
    3386:	b2 2b       	or	r27, r18
    3388:	80 93 3c 2e 	sts	0x2E3C, r24
    338c:	90 93 3d 2e 	sts	0x2E3D, r25
    3390:	a0 93 3e 2e 	sts	0x2E3E, r26
    3394:	b0 93 3f 2e 	sts	0x2E3F, r27
					adresa_niz_3 |= (long)receiveArray[5] << 16;
    3398:	20 91 6f 29 	lds	r18, 0x296F
    339c:	80 91 3c 2e 	lds	r24, 0x2E3C
    33a0:	90 91 3d 2e 	lds	r25, 0x2E3D
    33a4:	a0 91 3e 2e 	lds	r26, 0x2E3E
    33a8:	b0 91 3f 2e 	lds	r27, 0x2E3F
    33ac:	a2 2b       	or	r26, r18
    33ae:	80 93 3c 2e 	sts	0x2E3C, r24
    33b2:	90 93 3d 2e 	sts	0x2E3D, r25
    33b6:	a0 93 3e 2e 	sts	0x2E3E, r26
    33ba:	b0 93 3f 2e 	sts	0x2E3F, r27
					adresa_niz_3 |= (long)receiveArray[6] << 8;
    33be:	20 91 70 29 	lds	r18, 0x2970
    33c2:	80 91 3c 2e 	lds	r24, 0x2E3C
    33c6:	90 91 3d 2e 	lds	r25, 0x2E3D
    33ca:	a0 91 3e 2e 	lds	r26, 0x2E3E
    33ce:	b0 91 3f 2e 	lds	r27, 0x2E3F
    33d2:	92 2b       	or	r25, r18
    33d4:	80 93 3c 2e 	sts	0x2E3C, r24
    33d8:	90 93 3d 2e 	sts	0x2E3D, r25
    33dc:	a0 93 3e 2e 	sts	0x2E3E, r26
    33e0:	b0 93 3f 2e 	sts	0x2E3F, r27
					adresa_niz_3 |= (long)receiveArray[7];
    33e4:	20 91 71 29 	lds	r18, 0x2971
    33e8:	80 91 3c 2e 	lds	r24, 0x2E3C
    33ec:	90 91 3d 2e 	lds	r25, 0x2E3D
    33f0:	a0 91 3e 2e 	lds	r26, 0x2E3E
    33f4:	b0 91 3f 2e 	lds	r27, 0x2E3F
    33f8:	82 2b       	or	r24, r18
    33fa:	80 93 3c 2e 	sts	0x2E3C, r24
    33fe:	90 93 3d 2e 	sts	0x2E3D, r25
    3402:	a0 93 3e 2e 	sts	0x2E3E, r26
    3406:	b0 93 3f 2e 	sts	0x2E3F, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    340a:	80 91 6a 29 	lds	r24, 0x296A
    340e:	80 93 d9 28 	sts	0x28D9, r24
					adresa_niz_3 |= (long)receiveArray[6] << 8;
					adresa_niz_3 |= (long)receiveArray[7];
				}
				
				//slanje odgovora
				i = 0;
    3412:	00 e0       	ldi	r16, 0x00	; 0
    3414:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    3416:	f8 01       	movw	r30, r16
    3418:	e7 52       	subi	r30, 0x27	; 39
    341a:	f7 4d       	sbci	r31, 0xD7	; 215
    341c:	60 81       	ld	r22, Z
    341e:	89 e0       	ldi	r24, 0x09	; 9
    3420:	90 e2       	ldi	r25, 0x20	; 32
    3422:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    3426:	88 23       	and	r24, r24
    3428:	11 f0       	breq	.+4      	; 0x342e <__vector_61+0x1812>
					{
						i++;
    342a:	0f 5f       	subi	r16, 0xFF	; 255
    342c:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    342e:	10 16       	cp	r1, r16
    3430:	11 06       	cpc	r1, r17
    3432:	8c f7       	brge	.-30     	; 0x3416 <__vector_61+0x17fa>
					if(byteToBuffer)
					{
						i++;
					}
				}			
				RX_i_E1 = 0;
    3434:	10 92 59 29 	sts	0x2959, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    3438:	10 92 59 29 	sts	0x2959, r1
    343c:	8c c0       	rjmp	.+280    	; 0x3556 <__vector_61+0x193a>
		}					
	}
	//CITANJE SNIMLJENOG NIZA - 12
	else if(receiveArray[0] == 12)					//provera funkcijskog bajta
    343e:	80 91 6a 29 	lds	r24, 0x296A
    3442:	8c 30       	cpi	r24, 0x0C	; 12
    3444:	09 f0       	breq	.+2      	; 0x3448 <__vector_61+0x182c>
    3446:	87 c0       	rjmp	.+270    	; 0x3556 <__vector_61+0x193a>
	{
		if(RX_i_E1 >= 2)							//stigla je cela poruka (3)
    3448:	80 91 59 29 	lds	r24, 0x2959
    344c:	82 30       	cpi	r24, 0x02	; 2
    344e:	08 f4       	brcc	.+2      	; 0x3452 <__vector_61+0x1836>
    3450:	82 c0       	rjmp	.+260    	; 0x3556 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    3452:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				if (receiveArray[1] == 1)			//niz_1
    3456:	80 91 6b 29 	lds	r24, 0x296B
    345a:	81 30       	cpi	r24, 0x01	; 1
    345c:	f9 f4       	brne	.+62     	; 0x349c <__vector_61+0x1880>
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	90 e0       	ldi	r25, 0x00	; 0
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
					{
						sendArray[j] = niz_1[k]>>8;
    3466:	fc 01       	movw	r30, r24
    3468:	ee 0f       	add	r30, r30
    346a:	ff 1f       	adc	r31, r31
    346c:	ee 5f       	subi	r30, 0xFE	; 254
    346e:	f5 4d       	sbci	r31, 0xD5	; 213
    3470:	40 81       	ld	r20, Z
    3472:	51 81       	ldd	r21, Z+1	; 0x01
    3474:	45 2f       	mov	r20, r21
    3476:	55 0f       	add	r21, r21
    3478:	55 0b       	sbc	r21, r21
    347a:	d9 01       	movw	r26, r18
    347c:	a7 52       	subi	r26, 0x27	; 39
    347e:	b7 4d       	sbci	r27, 0xD7	; 215
    3480:	4c 93       	st	X, r20
						j++;
						sendArray[j] = niz_1[k];
    3482:	40 81       	ld	r20, Z
    3484:	51 81       	ldd	r21, Z+1	; 0x01
    3486:	f9 01       	movw	r30, r18
    3488:	e6 52       	subi	r30, 0x26	; 38
    348a:	f7 4d       	sbci	r31, 0xD7	; 215
    348c:	40 83       	st	Z, r20
						j++;
    348e:	2e 5f       	subi	r18, 0xFE	; 254
    3490:	3f 4f       	sbci	r19, 0xFF	; 255
			proveri_vreme_primanja = 0;				//zastita iskljucena
			{
				if (receiveArray[1] == 1)			//niz_1
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
    3492:	01 96       	adiw	r24, 0x01	; 1
    3494:	8f 37       	cpi	r24, 0x7F	; 127
    3496:	91 05       	cpc	r25, r1
    3498:	31 f7       	brne	.-52     	; 0x3466 <__vector_61+0x184a>
    349a:	5a c0       	rjmp	.+180    	; 0x3550 <__vector_61+0x1934>
						j++;
						sendArray[j] = niz_1[k];
						j++;
					}
				}
				else if (receiveArray[1] == 2)			//niz_2
    349c:	80 91 6b 29 	lds	r24, 0x296B
    34a0:	82 30       	cpi	r24, 0x02	; 2
    34a2:	f9 f4       	brne	.+62     	; 0x34e2 <__vector_61+0x18c6>
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
					{
						sendArray[j] = niz_2[k]>>8;
    34ac:	fc 01       	movw	r30, r24
    34ae:	ee 0f       	add	r30, r30
    34b0:	ff 1f       	adc	r31, r31
    34b2:	ea 57       	subi	r30, 0x7A	; 122
    34b4:	f1 4d       	sbci	r31, 0xD1	; 209
    34b6:	40 81       	ld	r20, Z
    34b8:	51 81       	ldd	r21, Z+1	; 0x01
    34ba:	45 2f       	mov	r20, r21
    34bc:	55 0f       	add	r21, r21
    34be:	55 0b       	sbc	r21, r21
    34c0:	d9 01       	movw	r26, r18
    34c2:	a7 52       	subi	r26, 0x27	; 39
    34c4:	b7 4d       	sbci	r27, 0xD7	; 215
    34c6:	4c 93       	st	X, r20
						j++;
						sendArray[j] = niz_2[k];
    34c8:	40 81       	ld	r20, Z
    34ca:	51 81       	ldd	r21, Z+1	; 0x01
    34cc:	f9 01       	movw	r30, r18
    34ce:	e6 52       	subi	r30, 0x26	; 38
    34d0:	f7 4d       	sbci	r31, 0xD7	; 215
    34d2:	40 83       	st	Z, r20
						j++;
    34d4:	2e 5f       	subi	r18, 0xFE	; 254
    34d6:	3f 4f       	sbci	r19, 0xFF	; 255
					}
				}
				else if (receiveArray[1] == 2)			//niz_2
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
    34d8:	01 96       	adiw	r24, 0x01	; 1
    34da:	8f 37       	cpi	r24, 0x7F	; 127
    34dc:	91 05       	cpc	r25, r1
    34de:	31 f7       	brne	.-52     	; 0x34ac <__vector_61+0x1890>
    34e0:	37 c0       	rjmp	.+110    	; 0x3550 <__vector_61+0x1934>
						j++;
						sendArray[j] = niz_2[k];
						j++;
					}
				}
				else if (receiveArray[1] == 3)			//niz_3
    34e2:	80 91 6b 29 	lds	r24, 0x296B
    34e6:	83 30       	cpi	r24, 0x03	; 3
    34e8:	99 f5       	brne	.+102    	; 0x3550 <__vector_61+0x1934>
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	90 e0       	ldi	r25, 0x00	; 0
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
					{
						sendArray[j] = niz_3[k]>>8;
    34f2:	fc 01       	movw	r30, r24
    34f4:	ee 0f       	add	r30, r30
    34f6:	ff 1f       	adc	r31, r31
    34f8:	ed 52       	subi	r30, 0x2D	; 45
    34fa:	fb 4d       	sbci	r31, 0xDB	; 219
    34fc:	40 81       	ld	r20, Z
    34fe:	51 81       	ldd	r21, Z+1	; 0x01
    3500:	45 2f       	mov	r20, r21
    3502:	55 0f       	add	r21, r21
    3504:	55 0b       	sbc	r21, r21
    3506:	d9 01       	movw	r26, r18
    3508:	a7 52       	subi	r26, 0x27	; 39
    350a:	b7 4d       	sbci	r27, 0xD7	; 215
    350c:	4c 93       	st	X, r20
						j++;
						sendArray[j] = niz_3[k];
    350e:	40 81       	ld	r20, Z
    3510:	51 81       	ldd	r21, Z+1	; 0x01
    3512:	f9 01       	movw	r30, r18
    3514:	e6 52       	subi	r30, 0x26	; 38
    3516:	f7 4d       	sbci	r31, 0xD7	; 215
    3518:	40 83       	st	Z, r20
						j++;
    351a:	2e 5f       	subi	r18, 0xFE	; 254
    351c:	3f 4f       	sbci	r19, 0xFF	; 255
					}
				}
				else if (receiveArray[1] == 3)			//niz_3
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
    351e:	01 96       	adiw	r24, 0x01	; 1
    3520:	8f 37       	cpi	r24, 0x7F	; 127
    3522:	91 05       	cpc	r25, r1
    3524:	31 f7       	brne	.-52     	; 0x34f2 <__vector_61+0x18d6>
    3526:	14 c0       	rjmp	.+40     	; 0x3550 <__vector_61+0x1934>
				//slanje odgovora
				i = 0;
				while (i < 254)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    3528:	f8 01       	movw	r30, r16
    352a:	e7 52       	subi	r30, 0x27	; 39
    352c:	f7 4d       	sbci	r31, 0xD7	; 215
    352e:	60 81       	ld	r22, Z
    3530:	89 e0       	ldi	r24, 0x09	; 9
    3532:	90 e2       	ldi	r25, 0x20	; 32
    3534:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					if(byteToBuffer)
    3538:	88 23       	and	r24, r24
    353a:	11 f0       	breq	.+4      	; 0x3540 <__vector_61+0x1924>
					{
						i++;
    353c:	0f 5f       	subi	r16, 0xFF	; 255
    353e:	1f 4f       	sbci	r17, 0xFF	; 255
					}
				}
				
				//slanje odgovora
				i = 0;
				while (i < 254)
    3540:	0e 3f       	cpi	r16, 0xFE	; 254
    3542:	11 05       	cpc	r17, r1
    3544:	8c f3       	brlt	.-30     	; 0x3528 <__vector_61+0x190c>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    3546:	10 92 59 29 	sts	0x2959, r1
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
    354a:	10 92 59 29 	sts	0x2959, r1
    354e:	03 c0       	rjmp	.+6      	; 0x3556 <__vector_61+0x193a>
						j++;
						sendArray[j] = niz_2[k];
						j++;
					}
				}
				else if (receiveArray[1] == 3)			//niz_3
    3550:	00 e0       	ldi	r16, 0x00	; 0
    3552:	10 e0       	ldi	r17, 0x00	; 0
    3554:	e9 cf       	rjmp	.-46     	; 0x3528 <__vector_61+0x190c>
				RX_i_E1 = 0;
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
		}
	}	
}
    3556:	28 96       	adiw	r28, 0x08	; 8
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	ff 91       	pop	r31
    3562:	ef 91       	pop	r30
    3564:	bf 91       	pop	r27
    3566:	af 91       	pop	r26
    3568:	9f 91       	pop	r25
    356a:	8f 91       	pop	r24
    356c:	7f 91       	pop	r23
    356e:	6f 91       	pop	r22
    3570:	5f 91       	pop	r21
    3572:	4f 91       	pop	r20
    3574:	3f 91       	pop	r19
    3576:	2f 91       	pop	r18
    3578:	1f 91       	pop	r17
    357a:	0f 91       	pop	r16
    357c:	ff 90       	pop	r15
    357e:	ef 90       	pop	r14
    3580:	df 90       	pop	r13
    3582:	cf 90       	pop	r12
    3584:	bf 90       	pop	r11
    3586:	af 90       	pop	r10
    3588:	9f 90       	pop	r9
    358a:	8f 90       	pop	r8
    358c:	7f 90       	pop	r7
    358e:	6f 90       	pop	r6
    3590:	5f 90       	pop	r5
    3592:	4f 90       	pop	r4
    3594:	0f 90       	pop	r0
    3596:	0b be       	out	0x3b, r0	; 59
    3598:	0f 90       	pop	r0
    359a:	0a be       	out	0x3a, r0	; 58
    359c:	0f 90       	pop	r0
    359e:	09 be       	out	0x39, r0	; 57
    35a0:	0f 90       	pop	r0
    35a2:	08 be       	out	0x38, r0	; 56
    35a4:	0f 90       	pop	r0
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	0f 90       	pop	r0
    35aa:	1f 90       	pop	r1
    35ac:	18 95       	reti

000035ae <__vector_25>:
//Serijska komunikacija USART_C0 - BT - XmegaUSB		
ISR(USARTC0_RXC_vect)
{
    35ae:	1f 92       	push	r1
    35b0:	0f 92       	push	r0
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	0f 92       	push	r0
    35b6:	11 24       	eor	r1, r1
    35b8:	08 b6       	in	r0, 0x38	; 56
    35ba:	0f 92       	push	r0
    35bc:	18 be       	out	0x38, r1	; 56
    35be:	09 b6       	in	r0, 0x39	; 57
    35c0:	0f 92       	push	r0
    35c2:	19 be       	out	0x39, r1	; 57
    35c4:	0a b6       	in	r0, 0x3a	; 58
    35c6:	0f 92       	push	r0
    35c8:	1a be       	out	0x3a, r1	; 58
    35ca:	0b b6       	in	r0, 0x3b	; 59
    35cc:	0f 92       	push	r0
    35ce:	1b be       	out	0x3b, r1	; 59
    35d0:	4f 92       	push	r4
    35d2:	5f 92       	push	r5
    35d4:	6f 92       	push	r6
    35d6:	7f 92       	push	r7
    35d8:	8f 92       	push	r8
    35da:	9f 92       	push	r9
    35dc:	af 92       	push	r10
    35de:	bf 92       	push	r11
    35e0:	cf 92       	push	r12
    35e2:	df 92       	push	r13
    35e4:	ef 92       	push	r14
    35e6:	ff 92       	push	r15
    35e8:	0f 93       	push	r16
    35ea:	1f 93       	push	r17
    35ec:	2f 93       	push	r18
    35ee:	3f 93       	push	r19
    35f0:	4f 93       	push	r20
    35f2:	5f 93       	push	r21
    35f4:	6f 93       	push	r22
    35f6:	7f 93       	push	r23
    35f8:	8f 93       	push	r24
    35fa:	9f 93       	push	r25
    35fc:	af 93       	push	r26
    35fe:	bf 93       	push	r27
    3600:	ef 93       	push	r30
    3602:	ff 93       	push	r31
    3604:	cf 93       	push	r28
    3606:	df 93       	push	r29
    3608:	00 d0       	rcall	.+0      	; 0x360a <__vector_25+0x5c>
    360a:	1f 92       	push	r1
    360c:	cd b7       	in	r28, 0x3d	; 61
    360e:	de b7       	in	r29, 0x3e	; 62
	int i;
	USART_RXComplete(&USART_C0_data);
    3610:	80 e9       	ldi	r24, 0x90	; 144
    3612:	91 e2       	ldi	r25, 0x21	; 33
    3614:	0e 94 70 33 	call	0x66e0	; 0x66e0 <USART_RXComplete>
	receiveArray[RX_i_C0] = USART_RXBuffer_GetByte(&USART_C0_data);
    3618:	80 91 3b 2e 	lds	r24, 0x2E3B
    361c:	08 2f       	mov	r16, r24
    361e:	10 e0       	ldi	r17, 0x00	; 0
    3620:	80 e9       	ldi	r24, 0x90	; 144
    3622:	91 e2       	ldi	r25, 0x21	; 33
    3624:	0e 94 62 33 	call	0x66c4	; 0x66c4 <USART_RXBuffer_GetByte>
    3628:	f8 01       	movw	r30, r16
    362a:	e6 59       	subi	r30, 0x96	; 150
    362c:	f6 4d       	sbci	r31, 0xD6	; 214
    362e:	80 83       	st	Z, r24
	//USART_TXBuffer_PutByte(&USART_C0_data, receiveArray[RX_i_C0]);	//echo
	RX_i_C0++;
    3630:	80 91 3b 2e 	lds	r24, 0x2E3B
    3634:	8f 5f       	subi	r24, 0xFF	; 255
    3636:	80 93 3b 2e 	sts	0x2E3B, r24
	
	//vremenska zastita
	if (RX_i_C0 >= 1)
    363a:	80 91 3b 2e 	lds	r24, 0x2E3B
    363e:	88 23       	and	r24, r24
    3640:	19 f0       	breq	.+6      	; 0x3648 <__vector_25+0x9a>
 		proveri_vreme_primanja = 1;
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	80 93 f7 2d 	sts	0x2DF7, r24
	 
	//CITANJE PARAMETARA - 1
	if(receiveArray[0] == 1)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    3648:	80 91 6a 29 	lds	r24, 0x296A
    364c:	81 30       	cpi	r24, 0x01	; 1
    364e:	09 f0       	breq	.+2      	; 0x3652 <__vector_25+0xa4>
    3650:	fe c0       	rjmp	.+508    	; 0x384e <__vector_25+0x2a0>
	{
		if(RX_i_C0 == 1)								//stigla je cela poruka (2)
    3652:	80 91 3b 2e 	lds	r24, 0x2E3B
    3656:	81 30       	cpi	r24, 0x01	; 1
    3658:	09 f0       	breq	.+2      	; 0x365c <__vector_25+0xae>
    365a:	ac c7       	rjmp	.+3928   	; 0x45b4 <__stack+0x5b5>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    365c:	10 92 f7 2d 	sts	0x2DF7, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    3660:	80 91 6a 29 	lds	r24, 0x296A
    3664:	80 93 d9 28 	sts	0x28D9, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    3668:	60 91 1f 2e 	lds	r22, 0x2E1F
    366c:	70 91 20 2e 	lds	r23, 0x2E20
    3670:	80 91 21 2e 	lds	r24, 0x2E21
    3674:	90 91 22 2e 	lds	r25, 0x2E22
    3678:	20 91 fc 2d 	lds	r18, 0x2DFC
    367c:	30 91 fd 2d 	lds	r19, 0x2DFD
    3680:	40 e0       	ldi	r20, 0x00	; 0
    3682:	50 e0       	ldi	r21, 0x00	; 0
    3684:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    3688:	bb 27       	eor	r27, r27
    368a:	57 fd       	sbrc	r21, 7
    368c:	ba 95       	dec	r27
    368e:	a5 2f       	mov	r26, r21
    3690:	94 2f       	mov	r25, r20
    3692:	83 2f       	mov	r24, r19
    3694:	80 93 da 28 	sts	0x28DA, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    3698:	60 91 1f 2e 	lds	r22, 0x2E1F
    369c:	70 91 20 2e 	lds	r23, 0x2E20
    36a0:	80 91 21 2e 	lds	r24, 0x2E21
    36a4:	90 91 22 2e 	lds	r25, 0x2E22
    36a8:	20 91 fc 2d 	lds	r18, 0x2DFC
    36ac:	30 91 fd 2d 	lds	r19, 0x2DFD
    36b0:	40 e0       	ldi	r20, 0x00	; 0
    36b2:	50 e0       	ldi	r21, 0x00	; 0
    36b4:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    36b8:	20 93 db 28 	sts	0x28DB, r18
				sendArray[3] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna Y pozicija HI
    36bc:	60 91 fe 29 	lds	r22, 0x29FE
    36c0:	70 91 ff 29 	lds	r23, 0x29FF
    36c4:	80 91 00 2a 	lds	r24, 0x2A00
    36c8:	90 91 01 2a 	lds	r25, 0x2A01
    36cc:	20 91 fc 2d 	lds	r18, 0x2DFC
    36d0:	30 91 fd 2d 	lds	r19, 0x2DFD
    36d4:	40 e0       	ldi	r20, 0x00	; 0
    36d6:	50 e0       	ldi	r21, 0x00	; 0
    36d8:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    36dc:	bb 27       	eor	r27, r27
    36de:	57 fd       	sbrc	r21, 7
    36e0:	ba 95       	dec	r27
    36e2:	a5 2f       	mov	r26, r21
    36e4:	94 2f       	mov	r25, r20
    36e6:	83 2f       	mov	r24, r19
    36e8:	80 93 dc 28 	sts	0x28DC, r24
				sendArray[4] = Y_pos / scale_factor_for_mm;							//Absolutna Y pozicija LO
    36ec:	60 91 fe 29 	lds	r22, 0x29FE
    36f0:	70 91 ff 29 	lds	r23, 0x29FF
    36f4:	80 91 00 2a 	lds	r24, 0x2A00
    36f8:	90 91 01 2a 	lds	r25, 0x2A01
    36fc:	20 91 fc 2d 	lds	r18, 0x2DFC
    3700:	30 91 fd 2d 	lds	r19, 0x2DFD
    3704:	40 e0       	ldi	r20, 0x00	; 0
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    370c:	20 93 dd 28 	sts	0x28DD, r18
				sendArray[5] = ((teta * 360) / krug360) >> 8;						//Teta HI
    3710:	20 91 7f 32 	lds	r18, 0x327F
    3714:	30 91 80 32 	lds	r19, 0x3280
    3718:	40 91 81 32 	lds	r20, 0x3281
    371c:	50 91 82 32 	lds	r21, 0x3282
    3720:	c0 90 71 32 	lds	r12, 0x3271
    3724:	d0 90 72 32 	lds	r13, 0x3272
    3728:	e0 90 73 32 	lds	r14, 0x3273
    372c:	f0 90 74 32 	lds	r15, 0x3274
    3730:	a8 e6       	ldi	r26, 0x68	; 104
    3732:	b1 e0       	ldi	r27, 0x01	; 1
    3734:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    3738:	a7 01       	movw	r20, r14
    373a:	96 01       	movw	r18, r12
    373c:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    3740:	bb 27       	eor	r27, r27
    3742:	57 fd       	sbrc	r21, 7
    3744:	ba 95       	dec	r27
    3746:	a5 2f       	mov	r26, r21
    3748:	94 2f       	mov	r25, r20
    374a:	83 2f       	mov	r24, r19
    374c:	80 93 de 28 	sts	0x28DE, r24
				sendArray[6] = ((teta * 360) / krug360);							//Teta LO	
    3750:	20 91 7f 32 	lds	r18, 0x327F
    3754:	30 91 80 32 	lds	r19, 0x3280
    3758:	40 91 81 32 	lds	r20, 0x3281
    375c:	50 91 82 32 	lds	r21, 0x3282
    3760:	c0 90 71 32 	lds	r12, 0x3271
    3764:	d0 90 72 32 	lds	r13, 0x3272
    3768:	e0 90 73 32 	lds	r14, 0x3273
    376c:	f0 90 74 32 	lds	r15, 0x3274
    3770:	a8 e6       	ldi	r26, 0x68	; 104
    3772:	b1 e0       	ldi	r27, 0x01	; 1
    3774:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    3778:	a7 01       	movw	r20, r14
    377a:	96 01       	movw	r18, r12
    377c:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    3780:	20 93 df 28 	sts	0x28DF, r18
				sendArray[7] = (rastojanje_cilj_temp / scale_factor_for_mm) >> 8;	//Rastojanje od zadate tacke HI
    3784:	60 91 0e 2e 	lds	r22, 0x2E0E
    3788:	70 91 0f 2e 	lds	r23, 0x2E0F
    378c:	80 91 10 2e 	lds	r24, 0x2E10
    3790:	90 91 11 2e 	lds	r25, 0x2E11
    3794:	20 91 fc 2d 	lds	r18, 0x2DFC
    3798:	30 91 fd 2d 	lds	r19, 0x2DFD
    379c:	40 e0       	ldi	r20, 0x00	; 0
    379e:	50 e0       	ldi	r21, 0x00	; 0
    37a0:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    37a4:	bb 27       	eor	r27, r27
    37a6:	57 fd       	sbrc	r21, 7
    37a8:	ba 95       	dec	r27
    37aa:	a5 2f       	mov	r26, r21
    37ac:	94 2f       	mov	r25, r20
    37ae:	83 2f       	mov	r24, r19
    37b0:	80 93 e0 28 	sts	0x28E0, r24
				sendArray[8] = (rastojanje_cilj_temp / scale_factor_for_mm);		//Rastojanje od zadate tacke LO
    37b4:	60 91 0e 2e 	lds	r22, 0x2E0E
    37b8:	70 91 0f 2e 	lds	r23, 0x2E0F
    37bc:	80 91 10 2e 	lds	r24, 0x2E10
    37c0:	90 91 11 2e 	lds	r25, 0x2E11
    37c4:	20 91 fc 2d 	lds	r18, 0x2DFC
    37c8:	30 91 fd 2d 	lds	r19, 0x2DFD
    37cc:	40 e0       	ldi	r20, 0x00	; 0
    37ce:	50 e0       	ldi	r21, 0x00	; 0
    37d0:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    37d4:	20 93 e1 28 	sts	0x28E1, r18
				sendArray[9] = stigao_flag;											//stigao flag
    37d8:	80 91 06 20 	lds	r24, 0x2006
    37dc:	80 93 e2 28 	sts	0x28E2, r24
				sendArray[10] = sample_L16;											//trenutna brzina leva
    37e0:	80 91 9e 24 	lds	r24, 0x249E
    37e4:	90 91 9f 24 	lds	r25, 0x249F
    37e8:	80 93 e3 28 	sts	0x28E3, r24
				sendArray[11] = sample_R16;											//trenutna brzina desna
    37ec:	80 91 be 24 	lds	r24, 0x24BE
    37f0:	90 91 bf 24 	lds	r25, 0x24BF
    37f4:	80 93 e4 28 	sts	0x28E4, r24
				sendArray[12] =	ADC_ResultCh_GetWord(&ADCA.CH0, offset);			//struja motora 1
    37f8:	60 91 56 2e 	lds	r22, 0x2E56
    37fc:	80 e2       	ldi	r24, 0x20	; 32
    37fe:	92 e0       	ldi	r25, 0x02	; 2
    3800:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    3804:	80 93 e5 28 	sts	0x28E5, r24
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
    3808:	60 91 56 2e 	lds	r22, 0x2E56
    380c:	88 e2       	ldi	r24, 0x28	; 40
    380e:	92 e0       	ldi	r25, 0x02	; 2
    3810:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    3814:	80 93 e6 28 	sts	0x28E6, r24
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
    3818:	e0 e2       	ldi	r30, 0x20	; 32
    381a:	f6 e0       	ldi	r31, 0x06	; 6
    381c:	80 85       	ldd	r24, Z+8	; 0x08
    381e:	80 93 e7 28 	sts	0x28E7, r24
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
    3822:	00 e0       	ldi	r16, 0x00	; 0
    3824:	10 e0       	ldi	r17, 0x00	; 0
				while (i <= 14) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    3826:	f8 01       	movw	r30, r16
    3828:	e7 52       	subi	r30, 0x27	; 39
    382a:	f7 4d       	sbci	r31, 0xD7	; 215
    382c:	60 81       	ld	r22, Z
    382e:	80 e9       	ldi	r24, 0x90	; 144
    3830:	91 e2       	ldi	r25, 0x21	; 33
    3832:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    3836:	88 23       	and	r24, r24
    3838:	11 f0       	breq	.+4      	; 0x383e <__vector_25+0x290>
						i++;
    383a:	0f 5f       	subi	r16, 0xFF	; 255
    383c:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
				while (i <= 14) 
    383e:	0f 30       	cpi	r16, 0x0F	; 15
    3840:	11 05       	cpc	r17, r1
    3842:	8c f3       	brlt	.-30     	; 0x3826 <__vector_25+0x278>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_C0 = 0;
    3844:	10 92 3b 2e 	sts	0x2E3B, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda				
    3848:	10 92 3b 2e 	sts	0x2E3B, r1
    384c:	b3 c6       	rjmp	.+3430   	; 0x45b4 <__stack+0x5b5>
		}		
	}
	//ZADAVANJE X,Y KOORDINATA - 2
	else if(receiveArray[0] == 2)					//provera funkcijskog bajta >> 2-upis x,y koordinate
    384e:	80 91 6a 29 	lds	r24, 0x296A
    3852:	82 30       	cpi	r24, 0x02	; 2
    3854:	09 f0       	breq	.+2      	; 0x3858 <__vector_25+0x2aa>
    3856:	bf c0       	rjmp	.+382    	; 0x39d6 <__vector_25+0x428>
	{
		if(RX_i_C0 >= 5)							//stigla je cela poruka	(5 bajtova)
    3858:	80 91 3b 2e 	lds	r24, 0x2E3B
    385c:	85 30       	cpi	r24, 0x05	; 5
    385e:	08 f4       	brcc	.+2      	; 0x3862 <__vector_25+0x2b4>
    3860:	a9 c6       	rjmp	.+3410   	; 0x45b4 <__stack+0x5b5>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    3862:	10 92 f7 2d 	sts	0x2DF7, r1
			//ENABLE
			stop_PID_desni = 0;
    3866:	10 92 f0 29 	sts	0x29F0, r1
			stop_PID_levi = 0;
    386a:	10 92 ee 2d 	sts	0x2DEE, r1
			set_direct_out = 0;
    386e:	10 92 7d 32 	sts	0x327D, r1
			
			X_cilj = 0;
    3872:	10 92 ac 24 	sts	0x24AC, r1
    3876:	10 92 ad 24 	sts	0x24AD, r1
    387a:	10 92 ae 24 	sts	0x24AE, r1
    387e:	10 92 af 24 	sts	0x24AF, r1
			X_cilj |= ((int)receiveArray[1]) << 8;
    3882:	20 91 6b 29 	lds	r18, 0x296B
    3886:	40 91 ac 24 	lds	r20, 0x24AC
    388a:	50 91 ad 24 	lds	r21, 0x24AD
    388e:	60 91 ae 24 	lds	r22, 0x24AE
    3892:	70 91 af 24 	lds	r23, 0x24AF
    3896:	92 2f       	mov	r25, r18
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	aa 27       	eor	r26, r26
    389c:	97 fd       	sbrc	r25, 7
    389e:	a0 95       	com	r26
    38a0:	ba 2f       	mov	r27, r26
    38a2:	84 2b       	or	r24, r20
    38a4:	95 2b       	or	r25, r21
    38a6:	a6 2b       	or	r26, r22
    38a8:	b7 2b       	or	r27, r23
    38aa:	80 93 ac 24 	sts	0x24AC, r24
    38ae:	90 93 ad 24 	sts	0x24AD, r25
    38b2:	a0 93 ae 24 	sts	0x24AE, r26
    38b6:	b0 93 af 24 	sts	0x24AF, r27
			X_cilj |= (int)receiveArray[2];
    38ba:	20 91 6c 29 	lds	r18, 0x296C
    38be:	80 91 ac 24 	lds	r24, 0x24AC
    38c2:	90 91 ad 24 	lds	r25, 0x24AD
    38c6:	a0 91 ae 24 	lds	r26, 0x24AE
    38ca:	b0 91 af 24 	lds	r27, 0x24AF
    38ce:	82 2b       	or	r24, r18
    38d0:	80 93 ac 24 	sts	0x24AC, r24
    38d4:	90 93 ad 24 	sts	0x24AD, r25
    38d8:	a0 93 ae 24 	sts	0x24AE, r26
    38dc:	b0 93 af 24 	sts	0x24AF, r27
			X_cilj = (X_cilj * scale_factor_for_mm);
    38e0:	a0 91 fc 2d 	lds	r26, 0x2DFC
    38e4:	b0 91 fd 2d 	lds	r27, 0x2DFD
    38e8:	20 91 ac 24 	lds	r18, 0x24AC
    38ec:	30 91 ad 24 	lds	r19, 0x24AD
    38f0:	40 91 ae 24 	lds	r20, 0x24AE
    38f4:	50 91 af 24 	lds	r21, 0x24AF
    38f8:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    38fc:	60 93 ac 24 	sts	0x24AC, r22
    3900:	70 93 ad 24 	sts	0x24AD, r23
    3904:	80 93 ae 24 	sts	0x24AE, r24
    3908:	90 93 af 24 	sts	0x24AF, r25
			//Y_cilj
			Y_cilj = 0;
    390c:	10 92 07 2e 	sts	0x2E07, r1
    3910:	10 92 08 2e 	sts	0x2E08, r1
    3914:	10 92 09 2e 	sts	0x2E09, r1
    3918:	10 92 0a 2e 	sts	0x2E0A, r1
			Y_cilj |= ((int)receiveArray[3]) << 8;
    391c:	20 91 6d 29 	lds	r18, 0x296D
    3920:	40 91 07 2e 	lds	r20, 0x2E07
    3924:	50 91 08 2e 	lds	r21, 0x2E08
    3928:	60 91 09 2e 	lds	r22, 0x2E09
    392c:	70 91 0a 2e 	lds	r23, 0x2E0A
    3930:	92 2f       	mov	r25, r18
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	aa 27       	eor	r26, r26
    3936:	97 fd       	sbrc	r25, 7
    3938:	a0 95       	com	r26
    393a:	ba 2f       	mov	r27, r26
    393c:	84 2b       	or	r24, r20
    393e:	95 2b       	or	r25, r21
    3940:	a6 2b       	or	r26, r22
    3942:	b7 2b       	or	r27, r23
    3944:	80 93 07 2e 	sts	0x2E07, r24
    3948:	90 93 08 2e 	sts	0x2E08, r25
    394c:	a0 93 09 2e 	sts	0x2E09, r26
    3950:	b0 93 0a 2e 	sts	0x2E0A, r27
			Y_cilj |= (int)receiveArray[4];
    3954:	20 91 6e 29 	lds	r18, 0x296E
    3958:	80 91 07 2e 	lds	r24, 0x2E07
    395c:	90 91 08 2e 	lds	r25, 0x2E08
    3960:	a0 91 09 2e 	lds	r26, 0x2E09
    3964:	b0 91 0a 2e 	lds	r27, 0x2E0A
    3968:	82 2b       	or	r24, r18
    396a:	80 93 07 2e 	sts	0x2E07, r24
    396e:	90 93 08 2e 	sts	0x2E08, r25
    3972:	a0 93 09 2e 	sts	0x2E09, r26
    3976:	b0 93 0a 2e 	sts	0x2E0A, r27
			Y_cilj = Y_cilj * scale_factor_for_mm;
    397a:	a0 91 fc 2d 	lds	r26, 0x2DFC
    397e:	b0 91 fd 2d 	lds	r27, 0x2DFD
    3982:	20 91 07 2e 	lds	r18, 0x2E07
    3986:	30 91 08 2e 	lds	r19, 0x2E08
    398a:	40 91 09 2e 	lds	r20, 0x2E09
    398e:	50 91 0a 2e 	lds	r21, 0x2E0A
    3992:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    3996:	60 93 07 2e 	sts	0x2E07, r22
    399a:	70 93 08 2e 	sts	0x2E08, r23
    399e:	80 93 09 2e 	sts	0x2E09, r24
    39a2:	90 93 0a 2e 	sts	0x2E0A, r25
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
    39a6:	80 91 6a 29 	lds	r24, 0x296A
    39aa:	80 93 d9 28 	sts	0x28D9, r24
			i = 0;
    39ae:	00 e0       	ldi	r16, 0x00	; 0
    39b0:	10 e0       	ldi	r17, 0x00	; 0
			while (i < 1)
			{
				bool byteToBuffer;
				byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    39b2:	f8 01       	movw	r30, r16
    39b4:	e7 52       	subi	r30, 0x27	; 39
    39b6:	f7 4d       	sbci	r31, 0xD7	; 215
    39b8:	60 81       	ld	r22, Z
    39ba:	80 e9       	ldi	r24, 0x90	; 144
    39bc:	91 e2       	ldi	r25, 0x21	; 33
    39be:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
				if(byteToBuffer)
    39c2:	88 23       	and	r24, r24
    39c4:	11 f0       	breq	.+4      	; 0x39ca <__vector_25+0x41c>
				{
					i++;
    39c6:	0f 5f       	subi	r16, 0xFF	; 255
    39c8:	1f 4f       	sbci	r17, 0xFF	; 255
			Y_cilj = Y_cilj * scale_factor_for_mm;
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
			i = 0;
			while (i < 1)
    39ca:	10 16       	cp	r1, r16
    39cc:	11 06       	cpc	r1, r17
    39ce:	8c f7       	brge	.-30     	; 0x39b2 <__vector_25+0x404>
				if(byteToBuffer)
				{
					i++;
				}
			}
			RX_i_C0 = 0;
    39d0:	10 92 3b 2e 	sts	0x2E3B, r1
    39d4:	ef c5       	rjmp	.+3038   	; 0x45b4 <__stack+0x5b5>
		}
	}	
	//ZADAVANJE X,Y KOORDINATA I PARAMETRE KRETANJA - 3
	else if(receiveArray[0] == 3)					//provera funkcijskog bajta >> 3 - X,Y koordinate sa svim parametrima kretanja
    39d6:	80 91 6a 29 	lds	r24, 0x296A
    39da:	83 30       	cpi	r24, 0x03	; 3
    39dc:	09 f0       	breq	.+2      	; 0x39e0 <__vector_25+0x432>
    39de:	e3 c1       	rjmp	.+966    	; 0x3da6 <__vector_25+0x7f8>
	{
		if(RX_i_C0 >= 11)							//stigla je cela poruka	(11)
    39e0:	80 91 3b 2e 	lds	r24, 0x2E3B
    39e4:	8b 30       	cpi	r24, 0x0B	; 11
    39e6:	08 f4       	brcc	.+2      	; 0x39ea <__vector_25+0x43c>
    39e8:	e5 c5       	rjmp	.+3018   	; 0x45b4 <__stack+0x5b5>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    39ea:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				//x_cilj
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    39ee:	80 91 6b 29 	lds	r24, 0x296B
    39f2:	8f 3f       	cpi	r24, 0xFF	; 255
    39f4:	29 f4       	brne	.+10     	; 0x3a00 <__vector_25+0x452>
    39f6:	80 91 6c 29 	lds	r24, 0x296C
    39fa:	8f 3f       	cpi	r24, 0xFF	; 255
    39fc:	09 f4       	brne	.+2      	; 0x3a00 <__vector_25+0x452>
    39fe:	53 c0       	rjmp	.+166    	; 0x3aa6 <__vector_25+0x4f8>
				{
					//ENABLE
					stop_PID_desni = 0;
    3a00:	10 92 f0 29 	sts	0x29F0, r1
					stop_PID_levi = 0;
    3a04:	10 92 ee 2d 	sts	0x2DEE, r1
					set_direct_out = 0;
    3a08:	10 92 7d 32 	sts	0x327D, r1
					
					X_cilj = 0;
    3a0c:	10 92 ac 24 	sts	0x24AC, r1
    3a10:	10 92 ad 24 	sts	0x24AD, r1
    3a14:	10 92 ae 24 	sts	0x24AE, r1
    3a18:	10 92 af 24 	sts	0x24AF, r1
					X_cilj |= ((int)receiveArray[1]) << 8;
    3a1c:	20 91 6b 29 	lds	r18, 0x296B
    3a20:	40 91 ac 24 	lds	r20, 0x24AC
    3a24:	50 91 ad 24 	lds	r21, 0x24AD
    3a28:	60 91 ae 24 	lds	r22, 0x24AE
    3a2c:	70 91 af 24 	lds	r23, 0x24AF
    3a30:	92 2f       	mov	r25, r18
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	aa 27       	eor	r26, r26
    3a36:	97 fd       	sbrc	r25, 7
    3a38:	a0 95       	com	r26
    3a3a:	ba 2f       	mov	r27, r26
    3a3c:	84 2b       	or	r24, r20
    3a3e:	95 2b       	or	r25, r21
    3a40:	a6 2b       	or	r26, r22
    3a42:	b7 2b       	or	r27, r23
    3a44:	80 93 ac 24 	sts	0x24AC, r24
    3a48:	90 93 ad 24 	sts	0x24AD, r25
    3a4c:	a0 93 ae 24 	sts	0x24AE, r26
    3a50:	b0 93 af 24 	sts	0x24AF, r27
					X_cilj |= (int)receiveArray[2];
    3a54:	20 91 6c 29 	lds	r18, 0x296C
    3a58:	80 91 ac 24 	lds	r24, 0x24AC
    3a5c:	90 91 ad 24 	lds	r25, 0x24AD
    3a60:	a0 91 ae 24 	lds	r26, 0x24AE
    3a64:	b0 91 af 24 	lds	r27, 0x24AF
    3a68:	82 2b       	or	r24, r18
    3a6a:	80 93 ac 24 	sts	0x24AC, r24
    3a6e:	90 93 ad 24 	sts	0x24AD, r25
    3a72:	a0 93 ae 24 	sts	0x24AE, r26
    3a76:	b0 93 af 24 	sts	0x24AF, r27
					X_cilj = (X_cilj * scale_factor_for_mm);	
    3a7a:	a0 91 fc 2d 	lds	r26, 0x2DFC
    3a7e:	b0 91 fd 2d 	lds	r27, 0x2DFD
    3a82:	20 91 ac 24 	lds	r18, 0x24AC
    3a86:	30 91 ad 24 	lds	r19, 0x24AD
    3a8a:	40 91 ae 24 	lds	r20, 0x24AE
    3a8e:	50 91 af 24 	lds	r21, 0x24AF
    3a92:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    3a96:	60 93 ac 24 	sts	0x24AC, r22
    3a9a:	70 93 ad 24 	sts	0x24AD, r23
    3a9e:	80 93 ae 24 	sts	0x24AE, r24
    3aa2:	90 93 af 24 	sts	0x24AF, r25
				}	
				//Y_cilj
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3aa6:	80 91 6d 29 	lds	r24, 0x296D
    3aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    3aac:	29 f4       	brne	.+10     	; 0x3ab8 <__vector_25+0x50a>
    3aae:	80 91 6e 29 	lds	r24, 0x296E
    3ab2:	8f 3f       	cpi	r24, 0xFF	; 255
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <__vector_25+0x50a>
    3ab6:	53 c0       	rjmp	.+166    	; 0x3b5e <__vector_25+0x5b0>
				{		
					stop_PID_desni = 0;
    3ab8:	10 92 f0 29 	sts	0x29F0, r1
					stop_PID_levi = 0;	
    3abc:	10 92 ee 2d 	sts	0x2DEE, r1
					set_direct_out = 0;
    3ac0:	10 92 7d 32 	sts	0x327D, r1
					Y_cilj = 0;
    3ac4:	10 92 07 2e 	sts	0x2E07, r1
    3ac8:	10 92 08 2e 	sts	0x2E08, r1
    3acc:	10 92 09 2e 	sts	0x2E09, r1
    3ad0:	10 92 0a 2e 	sts	0x2E0A, r1
					Y_cilj |= ((int)receiveArray[3]) << 8;
    3ad4:	20 91 6d 29 	lds	r18, 0x296D
    3ad8:	40 91 07 2e 	lds	r20, 0x2E07
    3adc:	50 91 08 2e 	lds	r21, 0x2E08
    3ae0:	60 91 09 2e 	lds	r22, 0x2E09
    3ae4:	70 91 0a 2e 	lds	r23, 0x2E0A
    3ae8:	92 2f       	mov	r25, r18
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	aa 27       	eor	r26, r26
    3aee:	97 fd       	sbrc	r25, 7
    3af0:	a0 95       	com	r26
    3af2:	ba 2f       	mov	r27, r26
    3af4:	84 2b       	or	r24, r20
    3af6:	95 2b       	or	r25, r21
    3af8:	a6 2b       	or	r26, r22
    3afa:	b7 2b       	or	r27, r23
    3afc:	80 93 07 2e 	sts	0x2E07, r24
    3b00:	90 93 08 2e 	sts	0x2E08, r25
    3b04:	a0 93 09 2e 	sts	0x2E09, r26
    3b08:	b0 93 0a 2e 	sts	0x2E0A, r27
					Y_cilj |= (int)receiveArray[4];
    3b0c:	20 91 6e 29 	lds	r18, 0x296E
    3b10:	80 91 07 2e 	lds	r24, 0x2E07
    3b14:	90 91 08 2e 	lds	r25, 0x2E08
    3b18:	a0 91 09 2e 	lds	r26, 0x2E09
    3b1c:	b0 91 0a 2e 	lds	r27, 0x2E0A
    3b20:	82 2b       	or	r24, r18
    3b22:	80 93 07 2e 	sts	0x2E07, r24
    3b26:	90 93 08 2e 	sts	0x2E08, r25
    3b2a:	a0 93 09 2e 	sts	0x2E09, r26
    3b2e:	b0 93 0a 2e 	sts	0x2E0A, r27
					Y_cilj = Y_cilj * scale_factor_for_mm;
    3b32:	a0 91 fc 2d 	lds	r26, 0x2DFC
    3b36:	b0 91 fd 2d 	lds	r27, 0x2DFD
    3b3a:	20 91 07 2e 	lds	r18, 0x2E07
    3b3e:	30 91 08 2e 	lds	r19, 0x2E08
    3b42:	40 91 09 2e 	lds	r20, 0x2E09
    3b46:	50 91 0a 2e 	lds	r21, 0x2E0A
    3b4a:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    3b4e:	60 93 07 2e 	sts	0x2E07, r22
    3b52:	70 93 08 2e 	sts	0x2E08, r23
    3b56:	80 93 09 2e 	sts	0x2E09, r24
    3b5a:	90 93 0a 2e 	sts	0x2E0A, r25
				}	
				
				//teta_cilj_final_absolute
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3b5e:	80 91 6f 29 	lds	r24, 0x296F
    3b62:	8f 3f       	cpi	r24, 0xFF	; 255
    3b64:	29 f4       	brne	.+10     	; 0x3b70 <__vector_25+0x5c2>
    3b66:	80 91 70 29 	lds	r24, 0x2970
    3b6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3b6c:	09 f4       	brne	.+2      	; 0x3b70 <__vector_25+0x5c2>
    3b6e:	58 c0       	rjmp	.+176    	; 0x3c20 <__vector_25+0x672>
				{
					teta_cilj_final = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    3b70:	10 92 00 20 	sts	0x2000, r1
    3b74:	10 92 01 20 	sts	0x2001, r1
    3b78:	10 92 02 20 	sts	0x2002, r1
    3b7c:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[5]) << 8;
    3b80:	20 91 6f 29 	lds	r18, 0x296F
    3b84:	40 91 00 20 	lds	r20, 0x2000
    3b88:	50 91 01 20 	lds	r21, 0x2001
    3b8c:	60 91 02 20 	lds	r22, 0x2002
    3b90:	70 91 03 20 	lds	r23, 0x2003
    3b94:	92 2f       	mov	r25, r18
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	aa 27       	eor	r26, r26
    3b9a:	97 fd       	sbrc	r25, 7
    3b9c:	a0 95       	com	r26
    3b9e:	ba 2f       	mov	r27, r26
    3ba0:	84 2b       	or	r24, r20
    3ba2:	95 2b       	or	r25, r21
    3ba4:	a6 2b       	or	r26, r22
    3ba6:	b7 2b       	or	r27, r23
    3ba8:	80 93 00 20 	sts	0x2000, r24
    3bac:	90 93 01 20 	sts	0x2001, r25
    3bb0:	a0 93 02 20 	sts	0x2002, r26
    3bb4:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[6];
    3bb8:	20 91 70 29 	lds	r18, 0x2970
    3bbc:	80 91 00 20 	lds	r24, 0x2000
    3bc0:	90 91 01 20 	lds	r25, 0x2001
    3bc4:	a0 91 02 20 	lds	r26, 0x2002
    3bc8:	b0 91 03 20 	lds	r27, 0x2003
    3bcc:	82 2b       	or	r24, r18
    3bce:	80 93 00 20 	sts	0x2000, r24
    3bd2:	90 93 01 20 	sts	0x2001, r25
    3bd6:	a0 93 02 20 	sts	0x2002, r26
    3bda:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = (teta_cilj_final * krug360) / 360;
    3bde:	20 91 00 20 	lds	r18, 0x2000
    3be2:	30 91 01 20 	lds	r19, 0x2001
    3be6:	40 91 02 20 	lds	r20, 0x2002
    3bea:	50 91 03 20 	lds	r21, 0x2003
    3bee:	60 91 71 32 	lds	r22, 0x3271
    3bf2:	70 91 72 32 	lds	r23, 0x3272
    3bf6:	80 91 73 32 	lds	r24, 0x3273
    3bfa:	90 91 74 32 	lds	r25, 0x3274
    3bfe:	0e 94 43 37 	call	0x6e86	; 0x6e86 <__mulsi3>
    3c02:	28 e6       	ldi	r18, 0x68	; 104
    3c04:	31 e0       	ldi	r19, 0x01	; 1
    3c06:	40 e0       	ldi	r20, 0x00	; 0
    3c08:	50 e0       	ldi	r21, 0x00	; 0
    3c0a:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    3c0e:	20 93 00 20 	sts	0x2000, r18
    3c12:	30 93 01 20 	sts	0x2001, r19
    3c16:	40 93 02 20 	sts	0x2002, r20
    3c1a:	50 93 03 20 	sts	0x2003, r21
    3c1e:	78 c0       	rjmp	.+240    	; 0x3d10 <__vector_25+0x762>
				}	
				//teta_cilj_final_relative
				else if(!(receiveArray[7] == 0xFF && receiveArray[8] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3c20:	80 91 71 29 	lds	r24, 0x2971
    3c24:	8f 3f       	cpi	r24, 0xFF	; 255
    3c26:	29 f4       	brne	.+10     	; 0x3c32 <__vector_25+0x684>
    3c28:	80 91 72 29 	lds	r24, 0x2972
    3c2c:	8f 3f       	cpi	r24, 0xFF	; 255
    3c2e:	09 f4       	brne	.+2      	; 0x3c32 <__vector_25+0x684>
    3c30:	64 c0       	rjmp	.+200    	; 0x3cfa <__vector_25+0x74c>
				{
					teta_cilj_final = 0;
    3c32:	10 92 00 20 	sts	0x2000, r1
    3c36:	10 92 01 20 	sts	0x2001, r1
    3c3a:	10 92 02 20 	sts	0x2002, r1
    3c3e:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[7]) << 8;
    3c42:	20 91 71 29 	lds	r18, 0x2971
    3c46:	40 91 00 20 	lds	r20, 0x2000
    3c4a:	50 91 01 20 	lds	r21, 0x2001
    3c4e:	60 91 02 20 	lds	r22, 0x2002
    3c52:	70 91 03 20 	lds	r23, 0x2003
    3c56:	92 2f       	mov	r25, r18
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	aa 27       	eor	r26, r26
    3c5c:	97 fd       	sbrc	r25, 7
    3c5e:	a0 95       	com	r26
    3c60:	ba 2f       	mov	r27, r26
    3c62:	84 2b       	or	r24, r20
    3c64:	95 2b       	or	r25, r21
    3c66:	a6 2b       	or	r26, r22
    3c68:	b7 2b       	or	r27, r23
    3c6a:	80 93 00 20 	sts	0x2000, r24
    3c6e:	90 93 01 20 	sts	0x2001, r25
    3c72:	a0 93 02 20 	sts	0x2002, r26
    3c76:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[8];
    3c7a:	20 91 72 29 	lds	r18, 0x2972
    3c7e:	80 91 00 20 	lds	r24, 0x2000
    3c82:	90 91 01 20 	lds	r25, 0x2001
    3c86:	a0 91 02 20 	lds	r26, 0x2002
    3c8a:	b0 91 03 20 	lds	r27, 0x2003
    3c8e:	82 2b       	or	r24, r18
    3c90:	80 93 00 20 	sts	0x2000, r24
    3c94:	90 93 01 20 	sts	0x2001, r25
    3c98:	a0 93 02 20 	sts	0x2002, r26
    3c9c:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = teta + (teta_cilj_final * krug360) / 360;
    3ca0:	20 91 00 20 	lds	r18, 0x2000
    3ca4:	30 91 01 20 	lds	r19, 0x2001
    3ca8:	40 91 02 20 	lds	r20, 0x2002
    3cac:	50 91 03 20 	lds	r21, 0x2003
    3cb0:	60 91 71 32 	lds	r22, 0x3271
    3cb4:	70 91 72 32 	lds	r23, 0x3272
    3cb8:	80 91 73 32 	lds	r24, 0x3273
    3cbc:	90 91 74 32 	lds	r25, 0x3274
    3cc0:	c0 90 7f 32 	lds	r12, 0x327F
    3cc4:	d0 90 80 32 	lds	r13, 0x3280
    3cc8:	e0 90 81 32 	lds	r14, 0x3281
    3ccc:	f0 90 82 32 	lds	r15, 0x3282
    3cd0:	0e 94 43 37 	call	0x6e86	; 0x6e86 <__mulsi3>
    3cd4:	28 e6       	ldi	r18, 0x68	; 104
    3cd6:	31 e0       	ldi	r19, 0x01	; 1
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	50 e0       	ldi	r21, 0x00	; 0
    3cdc:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    3ce0:	c2 0e       	add	r12, r18
    3ce2:	d3 1e       	adc	r13, r19
    3ce4:	e4 1e       	adc	r14, r20
    3ce6:	f5 1e       	adc	r15, r21
    3ce8:	c0 92 00 20 	sts	0x2000, r12
    3cec:	d0 92 01 20 	sts	0x2001, r13
    3cf0:	e0 92 02 20 	sts	0x2002, r14
    3cf4:	f0 92 03 20 	sts	0x2003, r15
    3cf8:	0b c0       	rjmp	.+22     	; 0x3d10 <__vector_25+0x762>
				}
				else
					teta_cilj_final = 0xFFFFFFFF;				
    3cfa:	8f ef       	ldi	r24, 0xFF	; 255
    3cfc:	9f ef       	ldi	r25, 0xFF	; 255
    3cfe:	dc 01       	movw	r26, r24
    3d00:	80 93 00 20 	sts	0x2000, r24
    3d04:	90 93 01 20 	sts	0x2001, r25
    3d08:	a0 93 02 20 	sts	0x2002, r26
    3d0c:	b0 93 03 20 	sts	0x2003, r27
				//bzina
				if(receiveArray[9] != 0xFF)	// ako zadajemo 0xFF ne menja se brzina
    3d10:	80 91 73 29 	lds	r24, 0x2973
    3d14:	8f 3f       	cpi	r24, 0xFF	; 255
    3d16:	c9 f0       	breq	.+50     	; 0x3d4a <__vector_25+0x79c>
				{
					zeljena_pravolinijska_brzina = receiveArray[9] * 3;	//podesiti faktor!
    3d18:	80 91 73 29 	lds	r24, 0x2973
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	9c 01       	movw	r18, r24
    3d20:	22 0f       	add	r18, r18
    3d22:	33 1f       	adc	r19, r19
    3d24:	82 0f       	add	r24, r18
    3d26:	93 1f       	adc	r25, r19
    3d28:	80 93 7b 32 	sts	0x327B, r24
    3d2c:	90 93 7c 32 	sts	0x327C, r25
					zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2;
    3d30:	80 91 7b 32 	lds	r24, 0x327B
    3d34:	90 91 7c 32 	lds	r25, 0x327C
    3d38:	99 23       	and	r25, r25
    3d3a:	0c f4       	brge	.+2      	; 0x3d3e <__vector_25+0x790>
    3d3c:	01 96       	adiw	r24, 0x01	; 1
    3d3e:	95 95       	asr	r25
    3d40:	87 95       	ror	r24
    3d42:	80 93 5d 2e 	sts	0x2E5D, r24
    3d46:	90 93 5e 2e 	sts	0x2E5E, r25
				}				
				//smer
				if(receiveArray[10] != 0xFF)	// ako zadajemo 0xFF ne menja se smer
    3d4a:	80 91 74 29 	lds	r24, 0x2974
    3d4e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d50:	21 f0       	breq	.+8      	; 0x3d5a <__vector_25+0x7ac>
					smer_zadati = receiveArray[10];	
    3d52:	80 91 74 29 	lds	r24, 0x2974
    3d56:	80 93 5a 29 	sts	0x295A, r24
				
				//pokretanje snimanja u nizove
				sample_counter_niz_1 = 0;
    3d5a:	10 92 54 2e 	sts	0x2E54, r1
				niz_counter_niz_1 = 0;	
    3d5e:	10 92 55 2e 	sts	0x2E55, r1
				sample_counter_niz_2 = 0;
    3d62:	10 92 f5 2d 	sts	0x2DF5, r1
				niz_counter_niz_2 = 0;
    3d66:	10 92 f6 2d 	sts	0x2DF6, r1
				sample_counter_niz_3 = 0;
    3d6a:	10 92 5b 29 	sts	0x295B, r1
				niz_counter_niz_3 = 0;		
    3d6e:	10 92 c2 24 	sts	0x24C2, r1
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
    3d72:	80 91 6a 29 	lds	r24, 0x296A
    3d76:	80 93 d9 28 	sts	0x28D9, r24
				niz_counter_niz_2 = 0;
				sample_counter_niz_3 = 0;
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
    3d7a:	00 e0       	ldi	r16, 0x00	; 0
    3d7c:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];	
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    3d7e:	f8 01       	movw	r30, r16
    3d80:	e7 52       	subi	r30, 0x27	; 39
    3d82:	f7 4d       	sbci	r31, 0xD7	; 215
    3d84:	60 81       	ld	r22, Z
    3d86:	80 e9       	ldi	r24, 0x90	; 144
    3d88:	91 e2       	ldi	r25, 0x21	; 33
    3d8a:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    3d8e:	88 23       	and	r24, r24
    3d90:	11 f0       	breq	.+4      	; 0x3d96 <__vector_25+0x7e8>
					{
						i++;
    3d92:	0f 5f       	subi	r16, 0xFF	; 255
    3d94:	1f 4f       	sbci	r17, 0xFF	; 255
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
				while (i < 1)
    3d96:	10 16       	cp	r1, r16
    3d98:	11 06       	cpc	r1, r17
    3d9a:	8c f7       	brge	.-30     	; 0x3d7e <__vector_25+0x7d0>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    3d9c:	10 92 3b 2e 	sts	0x2E3B, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda	
    3da0:	10 92 3b 2e 	sts	0x2E3B, r1
    3da4:	07 c4       	rjmp	.+2062   	; 0x45b4 <__stack+0x5b5>
		}					
	}
	//RELATIVNA DISTANCA I UGAO - 4
	else if(receiveArray[0] == 4)					//provera funkcijskog bajta
    3da6:	80 91 6a 29 	lds	r24, 0x296A
    3daa:	84 30       	cpi	r24, 0x04	; 4
    3dac:	09 f0       	breq	.+2      	; 0x3db0 <__vector_25+0x802>
    3dae:	75 c1       	rjmp	.+746    	; 0x409a <__stack+0x9b>
	{
		if(RX_i_C0 >= 5)								//stigla je cela poruka
    3db0:	80 91 3b 2e 	lds	r24, 0x2E3B
    3db4:	85 30       	cpi	r24, 0x05	; 5
    3db6:	08 f4       	brcc	.+2      	; 0x3dba <__vector_25+0x80c>
    3db8:	fd c3       	rjmp	.+2042   	; 0x45b4 <__stack+0x5b5>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    3dba:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				//ENABLE
				stop_PID_desni = 0;
    3dbe:	10 92 f0 29 	sts	0x29F0, r1
				stop_PID_levi = 0;
    3dc2:	10 92 ee 2d 	sts	0x2DEE, r1
				set_direct_out = 0;
    3dc6:	10 92 7d 32 	sts	0x327D, r1
				
				rel_distanca = 0;
    3dca:	10 92 c1 28 	sts	0x28C1, r1
    3dce:	10 92 c2 28 	sts	0x28C2, r1
    3dd2:	10 92 c3 28 	sts	0x28C3, r1
    3dd6:	10 92 c4 28 	sts	0x28C4, r1
				rel_distanca |= ((int)receiveArray[1]) << 8;
    3dda:	20 91 6b 29 	lds	r18, 0x296B
    3dde:	40 91 c1 28 	lds	r20, 0x28C1
    3de2:	50 91 c2 28 	lds	r21, 0x28C2
    3de6:	60 91 c3 28 	lds	r22, 0x28C3
    3dea:	70 91 c4 28 	lds	r23, 0x28C4
    3dee:	92 2f       	mov	r25, r18
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	aa 27       	eor	r26, r26
    3df4:	97 fd       	sbrc	r25, 7
    3df6:	a0 95       	com	r26
    3df8:	ba 2f       	mov	r27, r26
    3dfa:	84 2b       	or	r24, r20
    3dfc:	95 2b       	or	r25, r21
    3dfe:	a6 2b       	or	r26, r22
    3e00:	b7 2b       	or	r27, r23
    3e02:	80 93 c1 28 	sts	0x28C1, r24
    3e06:	90 93 c2 28 	sts	0x28C2, r25
    3e0a:	a0 93 c3 28 	sts	0x28C3, r26
    3e0e:	b0 93 c4 28 	sts	0x28C4, r27
				rel_distanca |= (int)receiveArray[2];
    3e12:	20 91 6c 29 	lds	r18, 0x296C
    3e16:	80 91 c1 28 	lds	r24, 0x28C1
    3e1a:	90 91 c2 28 	lds	r25, 0x28C2
    3e1e:	a0 91 c3 28 	lds	r26, 0x28C3
    3e22:	b0 91 c4 28 	lds	r27, 0x28C4
    3e26:	82 2b       	or	r24, r18
    3e28:	80 93 c1 28 	sts	0x28C1, r24
    3e2c:	90 93 c2 28 	sts	0x28C2, r25
    3e30:	a0 93 c3 28 	sts	0x28C3, r26
    3e34:	b0 93 c4 28 	sts	0x28C4, r27
				rel_distanca = (rel_distanca * scale_factor_for_mm);
    3e38:	a0 91 fc 2d 	lds	r26, 0x2DFC
    3e3c:	b0 91 fd 2d 	lds	r27, 0x2DFD
    3e40:	20 91 c1 28 	lds	r18, 0x28C1
    3e44:	30 91 c2 28 	lds	r19, 0x28C2
    3e48:	40 91 c3 28 	lds	r20, 0x28C3
    3e4c:	50 91 c4 28 	lds	r21, 0x28C4
    3e50:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    3e54:	60 93 c1 28 	sts	0x28C1, r22
    3e58:	70 93 c2 28 	sts	0x28C2, r23
    3e5c:	80 93 c3 28 	sts	0x28C3, r24
    3e60:	90 93 c4 28 	sts	0x28C4, r25

				rel_ugao = 0;
    3e64:	10 92 12 2e 	sts	0x2E12, r1
    3e68:	10 92 13 2e 	sts	0x2E13, r1
    3e6c:	10 92 14 2e 	sts	0x2E14, r1
    3e70:	10 92 15 2e 	sts	0x2E15, r1
				rel_ugao |= ((int)receiveArray[3]) << 8;
    3e74:	20 91 6d 29 	lds	r18, 0x296D
    3e78:	40 91 12 2e 	lds	r20, 0x2E12
    3e7c:	50 91 13 2e 	lds	r21, 0x2E13
    3e80:	60 91 14 2e 	lds	r22, 0x2E14
    3e84:	70 91 15 2e 	lds	r23, 0x2E15
    3e88:	92 2f       	mov	r25, r18
    3e8a:	80 e0       	ldi	r24, 0x00	; 0
    3e8c:	aa 27       	eor	r26, r26
    3e8e:	97 fd       	sbrc	r25, 7
    3e90:	a0 95       	com	r26
    3e92:	ba 2f       	mov	r27, r26
    3e94:	84 2b       	or	r24, r20
    3e96:	95 2b       	or	r25, r21
    3e98:	a6 2b       	or	r26, r22
    3e9a:	b7 2b       	or	r27, r23
    3e9c:	80 93 12 2e 	sts	0x2E12, r24
    3ea0:	90 93 13 2e 	sts	0x2E13, r25
    3ea4:	a0 93 14 2e 	sts	0x2E14, r26
    3ea8:	b0 93 15 2e 	sts	0x2E15, r27
				rel_ugao |= (int)receiveArray[4];
    3eac:	20 91 6e 29 	lds	r18, 0x296E
    3eb0:	80 91 12 2e 	lds	r24, 0x2E12
    3eb4:	90 91 13 2e 	lds	r25, 0x2E13
    3eb8:	a0 91 14 2e 	lds	r26, 0x2E14
    3ebc:	b0 91 15 2e 	lds	r27, 0x2E15
    3ec0:	82 2b       	or	r24, r18
    3ec2:	80 93 12 2e 	sts	0x2E12, r24
    3ec6:	90 93 13 2e 	sts	0x2E13, r25
    3eca:	a0 93 14 2e 	sts	0x2E14, r26
    3ece:	b0 93 15 2e 	sts	0x2E15, r27
				rel_ugao = (rel_ugao * krug360) / 360;
    3ed2:	20 91 12 2e 	lds	r18, 0x2E12
    3ed6:	30 91 13 2e 	lds	r19, 0x2E13
    3eda:	40 91 14 2e 	lds	r20, 0x2E14
    3ede:	50 91 15 2e 	lds	r21, 0x2E15
    3ee2:	60 91 71 32 	lds	r22, 0x3271
    3ee6:	70 91 72 32 	lds	r23, 0x3272
    3eea:	80 91 73 32 	lds	r24, 0x3273
    3eee:	90 91 74 32 	lds	r25, 0x3274
    3ef2:	0e 94 43 37 	call	0x6e86	; 0x6e86 <__mulsi3>
    3ef6:	28 e6       	ldi	r18, 0x68	; 104
    3ef8:	31 e0       	ldi	r19, 0x01	; 1
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	50 e0       	ldi	r21, 0x00	; 0
    3efe:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    3f02:	20 93 12 2e 	sts	0x2E12, r18
    3f06:	30 93 13 2e 	sts	0x2E13, r19
    3f0a:	40 93 14 2e 	sts	0x2E14, r20
    3f0e:	50 93 15 2e 	sts	0x2E15, r21
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				//X_pos_cos = (double)(teta + rel_ugao) / krug180;
				//Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(((teta + rel_ugao) / krug180) * M_PI);
    3f12:	c0 90 7f 32 	lds	r12, 0x327F
    3f16:	d0 90 80 32 	lds	r13, 0x3280
    3f1a:	e0 90 81 32 	lds	r14, 0x3281
    3f1e:	f0 90 82 32 	lds	r15, 0x3282
    3f22:	80 91 12 2e 	lds	r24, 0x2E12
    3f26:	90 91 13 2e 	lds	r25, 0x2E13
    3f2a:	a0 91 14 2e 	lds	r26, 0x2E14
    3f2e:	b0 91 15 2e 	lds	r27, 0x2E15
    3f32:	20 91 cb 28 	lds	r18, 0x28CB
    3f36:	30 91 cc 28 	lds	r19, 0x28CC
    3f3a:	40 91 cd 28 	lds	r20, 0x28CD
    3f3e:	50 91 ce 28 	lds	r21, 0x28CE
    3f42:	bc 01       	movw	r22, r24
    3f44:	cd 01       	movw	r24, r26
    3f46:	6c 0d       	add	r22, r12
    3f48:	7d 1d       	adc	r23, r13
    3f4a:	8e 1d       	adc	r24, r14
    3f4c:	9f 1d       	adc	r25, r15
    3f4e:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    3f52:	ca 01       	movw	r24, r20
    3f54:	b9 01       	movw	r22, r18
    3f56:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    3f5a:	2b ed       	ldi	r18, 0xDB	; 219
    3f5c:	3f e0       	ldi	r19, 0x0F	; 15
    3f5e:	49 e4       	ldi	r20, 0x49	; 73
    3f60:	50 e4       	ldi	r21, 0x40	; 64
    3f62:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    3f66:	0e 94 b8 34 	call	0x6970	; 0x6970 <cos>
    3f6a:	69 83       	std	Y+1, r22	; 0x01
    3f6c:	7a 83       	std	Y+2, r23	; 0x02
    3f6e:	8b 83       	std	Y+3, r24	; 0x03
    3f70:	9c 83       	std	Y+4, r25	; 0x04
				Y_pos_sin = sin(((teta + rel_ugao) / krug180) * M_PI);
    3f72:	c0 90 7f 32 	lds	r12, 0x327F
    3f76:	d0 90 80 32 	lds	r13, 0x3280
    3f7a:	e0 90 81 32 	lds	r14, 0x3281
    3f7e:	f0 90 82 32 	lds	r15, 0x3282
    3f82:	80 91 12 2e 	lds	r24, 0x2E12
    3f86:	90 91 13 2e 	lds	r25, 0x2E13
    3f8a:	a0 91 14 2e 	lds	r26, 0x2E14
    3f8e:	b0 91 15 2e 	lds	r27, 0x2E15
    3f92:	20 91 cb 28 	lds	r18, 0x28CB
    3f96:	30 91 cc 28 	lds	r19, 0x28CC
    3f9a:	40 91 cd 28 	lds	r20, 0x28CD
    3f9e:	50 91 ce 28 	lds	r21, 0x28CE
    3fa2:	bc 01       	movw	r22, r24
    3fa4:	cd 01       	movw	r24, r26
    3fa6:	6c 0d       	add	r22, r12
    3fa8:	7d 1d       	adc	r23, r13
    3faa:	8e 1d       	adc	r24, r14
    3fac:	9f 1d       	adc	r25, r15
    3fae:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    3fb2:	ca 01       	movw	r24, r20
    3fb4:	b9 01       	movw	r22, r18
    3fb6:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    3fba:	2b ed       	ldi	r18, 0xDB	; 219
    3fbc:	3f e0       	ldi	r19, 0x0F	; 15
    3fbe:	49 e4       	ldi	r20, 0x49	; 73
    3fc0:	50 e4       	ldi	r21, 0x40	; 64
    3fc2:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    3fc6:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <sin>
    3fca:	4b 01       	movw	r8, r22
    3fcc:	5c 01       	movw	r10, r24
				X_pos_cos = rel_distanca * X_pos_cos;
    3fce:	60 91 c1 28 	lds	r22, 0x28C1
    3fd2:	70 91 c2 28 	lds	r23, 0x28C2
    3fd6:	80 91 c3 28 	lds	r24, 0x28C3
    3fda:	90 91 c4 28 	lds	r25, 0x28C4
				Y_pos_sin = rel_distanca * Y_pos_sin;
    3fde:	40 90 c1 28 	lds	r4, 0x28C1
    3fe2:	50 90 c2 28 	lds	r5, 0x28C2
    3fe6:	60 90 c3 28 	lds	r6, 0x28C3
    3fea:	70 90 c4 28 	lds	r7, 0x28C4
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    3fee:	c0 90 1f 2e 	lds	r12, 0x2E1F
    3ff2:	d0 90 20 2e 	lds	r13, 0x2E20
    3ff6:	e0 90 21 2e 	lds	r14, 0x2E21
    3ffa:	f0 90 22 2e 	lds	r15, 0x2E22
				double X_pos_cos, Y_pos_sin;
				//X_pos_cos = (double)(teta + rel_ugao) / krug180;
				//Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(((teta + rel_ugao) / krug180) * M_PI);
				Y_pos_sin = sin(((teta + rel_ugao) / krug180) * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
    3ffe:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    4002:	29 81       	ldd	r18, Y+1	; 0x01
    4004:	3a 81       	ldd	r19, Y+2	; 0x02
    4006:	4b 81       	ldd	r20, Y+3	; 0x03
    4008:	5c 81       	ldd	r21, Y+4	; 0x04
    400a:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
				Y_pos_sin = rel_distanca * Y_pos_sin;
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    400e:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__fixsfsi>
    4012:	c6 0e       	add	r12, r22
    4014:	d7 1e       	adc	r13, r23
    4016:	e8 1e       	adc	r14, r24
    4018:	f9 1e       	adc	r15, r25
    401a:	c0 92 ac 24 	sts	0x24AC, r12
    401e:	d0 92 ad 24 	sts	0x24AD, r13
    4022:	e0 92 ae 24 	sts	0x24AE, r14
    4026:	f0 92 af 24 	sts	0x24AF, r15
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    402a:	c0 90 fe 29 	lds	r12, 0x29FE
    402e:	d0 90 ff 29 	lds	r13, 0x29FF
    4032:	e0 90 00 2a 	lds	r14, 0x2A00
    4036:	f0 90 01 2a 	lds	r15, 0x2A01
				//X_pos_cos = (double)(teta + rel_ugao) / krug180;
				//Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(((teta + rel_ugao) / krug180) * M_PI);
				Y_pos_sin = sin(((teta + rel_ugao) / krug180) * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
				Y_pos_sin = rel_distanca * Y_pos_sin;
    403a:	c3 01       	movw	r24, r6
    403c:	b2 01       	movw	r22, r4
    403e:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    4042:	a5 01       	movw	r20, r10
    4044:	94 01       	movw	r18, r8
    4046:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    404a:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__fixsfsi>
    404e:	c6 0e       	add	r12, r22
    4050:	d7 1e       	adc	r13, r23
    4052:	e8 1e       	adc	r14, r24
    4054:	f9 1e       	adc	r15, r25
    4056:	c0 92 07 2e 	sts	0x2E07, r12
    405a:	d0 92 08 2e 	sts	0x2E08, r13
    405e:	e0 92 09 2e 	sts	0x2E09, r14
    4062:	f0 92 0a 2e 	sts	0x2E0A, r15
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4066:	80 91 6a 29 	lds	r24, 0x296A
    406a:	80 93 d9 28 	sts	0x28D9, r24
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
    406e:	00 e0       	ldi	r16, 0x00	; 0
    4070:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    4072:	f8 01       	movw	r30, r16
    4074:	e7 52       	subi	r30, 0x27	; 39
    4076:	f7 4d       	sbci	r31, 0xD7	; 215
    4078:	60 81       	ld	r22, Z
    407a:	80 e9       	ldi	r24, 0x90	; 144
    407c:	91 e2       	ldi	r25, 0x21	; 33
    407e:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    4082:	88 23       	and	r24, r24
    4084:	11 f0       	breq	.+4      	; 0x408a <__stack+0x8b>
					{
						i++;
    4086:	0f 5f       	subi	r16, 0xFF	; 255
    4088:	1f 4f       	sbci	r17, 0xFF	; 255
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    408a:	10 16       	cp	r1, r16
    408c:	11 06       	cpc	r1, r17
    408e:	8c f7       	brge	.-30     	; 0x4072 <__stack+0x73>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    4090:	10 92 3b 2e 	sts	0x2E3B, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda
    4094:	10 92 3b 2e 	sts	0x2E3B, r1
    4098:	8d c2       	rjmp	.+1306   	; 0x45b4 <__stack+0x5b5>
		}
	}
	//SET DIRECT OUT - 5
	else if(receiveArray[0] == 5)					//provera funkcijskog bajta
    409a:	80 91 6a 29 	lds	r24, 0x296A
    409e:	85 30       	cpi	r24, 0x05	; 5
    40a0:	09 f0       	breq	.+2      	; 0x40a4 <__stack+0xa5>
    40a2:	6e c0       	rjmp	.+220    	; 0x4180 <__stack+0x181>
	{
		if(RX_i_C0 >= 3)							//stigla je cela poruka
    40a4:	80 91 3b 2e 	lds	r24, 0x2E3B
    40a8:	83 30       	cpi	r24, 0x03	; 3
    40aa:	08 f4       	brcc	.+2      	; 0x40ae <__stack+0xaf>
    40ac:	83 c2       	rjmp	.+1286   	; 0x45b4 <__stack+0x5b5>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    40ae:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				//ENABLE
				set_direct_out = 1;
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	80 93 7d 32 	sts	0x327D, r24
				
				if(receiveArray[1] >= 128)
    40b8:	80 91 6b 29 	lds	r24, 0x296B
    40bc:	88 23       	and	r24, r24
    40be:	8c f4       	brge	.+34     	; 0x40e2 <__stack+0xe3>
					PID_brzina_L = (receiveArray[1] - 128) * 5;	//podesiti faktor!
    40c0:	80 91 6b 29 	lds	r24, 0x296B
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	9c 01       	movw	r18, r24
    40c8:	22 0f       	add	r18, r18
    40ca:	33 1f       	adc	r19, r19
    40cc:	22 0f       	add	r18, r18
    40ce:	33 1f       	adc	r19, r19
    40d0:	82 0f       	add	r24, r18
    40d2:	93 1f       	adc	r25, r19
    40d4:	80 58       	subi	r24, 0x80	; 128
    40d6:	92 40       	sbci	r25, 0x02	; 2
    40d8:	80 93 77 2e 	sts	0x2E77, r24
    40dc:	90 93 78 2e 	sts	0x2E78, r25
    40e0:	10 c0       	rjmp	.+32     	; 0x4102 <__stack+0x103>
				else
					PID_brzina_L = (128 - receiveArray[1]) * (-5);
    40e2:	80 91 6b 29 	lds	r24, 0x296B
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	9c 01       	movw	r18, r24
    40ea:	22 0f       	add	r18, r18
    40ec:	33 1f       	adc	r19, r19
    40ee:	22 0f       	add	r18, r18
    40f0:	33 1f       	adc	r19, r19
    40f2:	82 0f       	add	r24, r18
    40f4:	93 1f       	adc	r25, r19
    40f6:	80 58       	subi	r24, 0x80	; 128
    40f8:	92 40       	sbci	r25, 0x02	; 2
    40fa:	80 93 77 2e 	sts	0x2E77, r24
    40fe:	90 93 78 2e 	sts	0x2E78, r25
					
				if(receiveArray[2] >= 128)
    4102:	80 91 6c 29 	lds	r24, 0x296C
    4106:	88 23       	and	r24, r24
    4108:	8c f4       	brge	.+34     	; 0x412c <__stack+0x12d>
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
    410a:	80 91 6c 29 	lds	r24, 0x296C
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	9c 01       	movw	r18, r24
    4112:	22 0f       	add	r18, r18
    4114:	33 1f       	adc	r19, r19
    4116:	22 0f       	add	r18, r18
    4118:	33 1f       	adc	r19, r19
    411a:	82 0f       	add	r24, r18
    411c:	93 1f       	adc	r25, r19
    411e:	80 58       	subi	r24, 0x80	; 128
    4120:	92 40       	sbci	r25, 0x02	; 2
    4122:	80 93 75 2e 	sts	0x2E75, r24
    4126:	90 93 76 2e 	sts	0x2E76, r25
    412a:	10 c0       	rjmp	.+32     	; 0x414c <__stack+0x14d>
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
    412c:	80 91 6c 29 	lds	r24, 0x296C
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	9c 01       	movw	r18, r24
    4134:	22 0f       	add	r18, r18
    4136:	33 1f       	adc	r19, r19
    4138:	22 0f       	add	r18, r18
    413a:	33 1f       	adc	r19, r19
    413c:	82 0f       	add	r24, r18
    413e:	93 1f       	adc	r25, r19
    4140:	80 58       	subi	r24, 0x80	; 128
    4142:	92 40       	sbci	r25, 0x02	; 2
    4144:	80 93 75 2e 	sts	0x2E75, r24
    4148:	90 93 76 2e 	sts	0x2E76, r25
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    414c:	80 91 6a 29 	lds	r24, 0x296A
    4150:	80 93 d9 28 	sts	0x28D9, r24
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
    4154:	00 e0       	ldi	r16, 0x00	; 0
    4156:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    4158:	f8 01       	movw	r30, r16
    415a:	e7 52       	subi	r30, 0x27	; 39
    415c:	f7 4d       	sbci	r31, 0xD7	; 215
    415e:	60 81       	ld	r22, Z
    4160:	80 e9       	ldi	r24, 0x90	; 144
    4162:	91 e2       	ldi	r25, 0x21	; 33
    4164:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    4168:	88 23       	and	r24, r24
    416a:	11 f0       	breq	.+4      	; 0x4170 <__stack+0x171>
					{
						i++;
    416c:	0f 5f       	subi	r16, 0xFF	; 255
    416e:	1f 4f       	sbci	r17, 0xFF	; 255
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    4170:	10 16       	cp	r1, r16
    4172:	11 06       	cpc	r1, r17
    4174:	8c f7       	brge	.-30     	; 0x4158 <__stack+0x159>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    4176:	10 92 3b 2e 	sts	0x2E3B, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda
    417a:	10 92 3b 2e 	sts	0x2E3B, r1
    417e:	1a c2       	rjmp	.+1076   	; 0x45b4 <__stack+0x5b5>
		}
	}			
	//PODESAVANJE FET izlaza i servoa - 6
	else if(receiveArray[0] == 6)					//provera funkcijskog bajta 
    4180:	80 91 6a 29 	lds	r24, 0x296A
    4184:	86 30       	cpi	r24, 0x06	; 6
    4186:	09 f0       	breq	.+2      	; 0x418a <__stack+0x18b>
    4188:	56 c0       	rjmp	.+172    	; 0x4236 <__stack+0x237>
	{
		if(RX_i_C0 >= 7)							//stigla je cela poruka	(11)
    418a:	80 91 3b 2e 	lds	r24, 0x2E3B
    418e:	87 30       	cpi	r24, 0x07	; 7
    4190:	08 f4       	brcc	.+2      	; 0x4194 <__stack+0x195>
    4192:	10 c2       	rjmp	.+1056   	; 0x45b4 <__stack+0x5b5>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    4194:	10 92 f7 2d 	sts	0x2DF7, r1
// 			for(i=0; i<= 4; i++)					//racunanje CHC
// 			CHC ^= receiveArray[i];

			//if(receiveArray[x] == CHC)				//CHC ok
			{
				PORTC.OUT |= receiveArray[1] & receiveArray[2];	//izlazi + maska
    4198:	e0 e4       	ldi	r30, 0x40	; 64
    419a:	f6 e0       	ldi	r31, 0x06	; 6
    419c:	94 81       	ldd	r25, Z+4	; 0x04
    419e:	4b e6       	ldi	r20, 0x6B	; 107
    41a0:	59 e2       	ldi	r21, 0x29	; 41
    41a2:	da 01       	movw	r26, r20
    41a4:	8c 91       	ld	r24, X
    41a6:	6c e6       	ldi	r22, 0x6C	; 108
    41a8:	79 e2       	ldi	r23, 0x29	; 41
    41aa:	db 01       	movw	r26, r22
    41ac:	2c 91       	ld	r18, X
    41ae:	82 23       	and	r24, r18
    41b0:	89 2b       	or	r24, r25
    41b2:	84 83       	std	Z+4, r24	; 0x04
				PORTC.OUT &= ~(receiveArray[1] ^ receiveArray[2]);	//izlazi + maska
    41b4:	94 81       	ldd	r25, Z+4	; 0x04
    41b6:	da 01       	movw	r26, r20
    41b8:	8c 91       	ld	r24, X
    41ba:	db 01       	movw	r26, r22
    41bc:	2c 91       	ld	r18, X
    41be:	82 27       	eor	r24, r18
    41c0:	80 95       	com	r24
    41c2:	89 23       	and	r24, r25
    41c4:	84 83       	std	Z+4, r24	; 0x04
				
				//120 - nulti polozaj, 280 - krajnji polozaj
				TCF0.CCA = receiveArray[3] + 120;
    41c6:	80 91 6d 29 	lds	r24, 0x296D
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	88 58       	subi	r24, 0x88	; 136
    41ce:	9f 4f       	sbci	r25, 0xFF	; 255
    41d0:	e0 e0       	ldi	r30, 0x00	; 0
    41d2:	fb e0       	ldi	r31, 0x0B	; 11
    41d4:	80 a7       	std	Z+40, r24	; 0x28
    41d6:	91 a7       	std	Z+41, r25	; 0x29
				TCF0.CCB = receiveArray[4] + 120;
    41d8:	80 91 6e 29 	lds	r24, 0x296E
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	88 58       	subi	r24, 0x88	; 136
    41e0:	9f 4f       	sbci	r25, 0xFF	; 255
    41e2:	82 a7       	std	Z+42, r24	; 0x2a
    41e4:	93 a7       	std	Z+43, r25	; 0x2b
				TCF0.CCC = receiveArray[5] + 120;
    41e6:	80 91 6f 29 	lds	r24, 0x296F
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	88 58       	subi	r24, 0x88	; 136
    41ee:	9f 4f       	sbci	r25, 0xFF	; 255
    41f0:	84 a7       	std	Z+44, r24	; 0x2c
    41f2:	95 a7       	std	Z+45, r25	; 0x2d
				TCF0.CCD = receiveArray[6] + 120;
    41f4:	80 91 70 29 	lds	r24, 0x2970
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	88 58       	subi	r24, 0x88	; 136
    41fc:	9f 4f       	sbci	r25, 0xFF	; 255
    41fe:	86 a7       	std	Z+46, r24	; 0x2e
    4200:	97 a7       	std	Z+47, r25	; 0x2f
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4202:	80 91 6a 29 	lds	r24, 0x296A
    4206:	80 93 d9 28 	sts	0x28D9, r24
				TCF0.CCB = receiveArray[4] + 120;
				TCF0.CCC = receiveArray[5] + 120;
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
    420a:	00 e0       	ldi	r16, 0x00	; 0
    420c:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    420e:	f8 01       	movw	r30, r16
    4210:	e7 52       	subi	r30, 0x27	; 39
    4212:	f7 4d       	sbci	r31, 0xD7	; 215
    4214:	60 81       	ld	r22, Z
    4216:	80 e9       	ldi	r24, 0x90	; 144
    4218:	91 e2       	ldi	r25, 0x21	; 33
    421a:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    421e:	88 23       	and	r24, r24
    4220:	11 f0       	breq	.+4      	; 0x4226 <__stack+0x227>
					{
						i++;
    4222:	0f 5f       	subi	r16, 0xFF	; 255
    4224:	1f 4f       	sbci	r17, 0xFF	; 255
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    4226:	10 16       	cp	r1, r16
    4228:	11 06       	cpc	r1, r17
    422a:	8c f7       	brge	.-30     	; 0x420e <__stack+0x20f>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    422c:	10 92 3b 2e 	sts	0x2E3B, r1
			}
			RX_i_C0 = 0;	//ako ne valja CHC ponistava se komanda
    4230:	10 92 3b 2e 	sts	0x2E3B, r1
    4234:	bf c1       	rjmp	.+894    	; 0x45b4 <__stack+0x5b5>
		}		
	}		
	//Upis trenutne pozicije - 7
	else if(receiveArray[0] == 7)					//provera funkcijskog bajta
    4236:	80 91 6a 29 	lds	r24, 0x296A
    423a:	87 30       	cpi	r24, 0x07	; 7
    423c:	09 f0       	breq	.+2      	; 0x4240 <__stack+0x241>
    423e:	7d c1       	rjmp	.+762    	; 0x453a <__stack+0x53b>
	{
		if(RX_i_C0 >= 7)							//stigla je cela poruka	(11)
    4240:	80 91 3b 2e 	lds	r24, 0x2E3B
    4244:	87 30       	cpi	r24, 0x07	; 7
    4246:	08 f4       	brcc	.+2      	; 0x424a <__stack+0x24b>
    4248:	b5 c1       	rjmp	.+874    	; 0x45b4 <__stack+0x5b5>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    424a:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				//x_pos
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    424e:	80 91 6b 29 	lds	r24, 0x296B
    4252:	8f 3f       	cpi	r24, 0xFF	; 255
    4254:	29 f4       	brne	.+10     	; 0x4260 <__stack+0x261>
    4256:	80 91 6c 29 	lds	r24, 0x296C
    425a:	8f 3f       	cpi	r24, 0xFF	; 255
    425c:	09 f4       	brne	.+2      	; 0x4260 <__stack+0x261>
    425e:	6d c0       	rjmp	.+218    	; 0x433a <__stack+0x33b>
				{
					X_pos = 0;
    4260:	10 92 1f 2e 	sts	0x2E1F, r1
    4264:	10 92 20 2e 	sts	0x2E20, r1
    4268:	10 92 21 2e 	sts	0x2E21, r1
    426c:	10 92 22 2e 	sts	0x2E22, r1
					X_pos |= ((int)receiveArray[1]) << 8;
    4270:	20 91 6b 29 	lds	r18, 0x296B
    4274:	40 91 1f 2e 	lds	r20, 0x2E1F
    4278:	50 91 20 2e 	lds	r21, 0x2E20
    427c:	60 91 21 2e 	lds	r22, 0x2E21
    4280:	70 91 22 2e 	lds	r23, 0x2E22
    4284:	92 2f       	mov	r25, r18
    4286:	80 e0       	ldi	r24, 0x00	; 0
    4288:	aa 27       	eor	r26, r26
    428a:	97 fd       	sbrc	r25, 7
    428c:	a0 95       	com	r26
    428e:	ba 2f       	mov	r27, r26
    4290:	84 2b       	or	r24, r20
    4292:	95 2b       	or	r25, r21
    4294:	a6 2b       	or	r26, r22
    4296:	b7 2b       	or	r27, r23
    4298:	80 93 1f 2e 	sts	0x2E1F, r24
    429c:	90 93 20 2e 	sts	0x2E20, r25
    42a0:	a0 93 21 2e 	sts	0x2E21, r26
    42a4:	b0 93 22 2e 	sts	0x2E22, r27
					X_pos |= (int)receiveArray[2];
    42a8:	20 91 6c 29 	lds	r18, 0x296C
    42ac:	80 91 1f 2e 	lds	r24, 0x2E1F
    42b0:	90 91 20 2e 	lds	r25, 0x2E20
    42b4:	a0 91 21 2e 	lds	r26, 0x2E21
    42b8:	b0 91 22 2e 	lds	r27, 0x2E22
    42bc:	82 2b       	or	r24, r18
    42be:	80 93 1f 2e 	sts	0x2E1F, r24
    42c2:	90 93 20 2e 	sts	0x2E20, r25
    42c6:	a0 93 21 2e 	sts	0x2E21, r26
    42ca:	b0 93 22 2e 	sts	0x2E22, r27
					X_pos = (X_pos * scale_factor_for_mm);
    42ce:	a0 91 fc 2d 	lds	r26, 0x2DFC
    42d2:	b0 91 fd 2d 	lds	r27, 0x2DFD
    42d6:	20 91 1f 2e 	lds	r18, 0x2E1F
    42da:	30 91 20 2e 	lds	r19, 0x2E20
    42de:	40 91 21 2e 	lds	r20, 0x2E21
    42e2:	50 91 22 2e 	lds	r21, 0x2E22
    42e6:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    42ea:	60 93 1f 2e 	sts	0x2E1F, r22
    42ee:	70 93 20 2e 	sts	0x2E20, r23
    42f2:	80 93 21 2e 	sts	0x2E21, r24
    42f6:	90 93 22 2e 	sts	0x2E22, r25
					X_cilj = X_pos;
    42fa:	80 91 1f 2e 	lds	r24, 0x2E1F
    42fe:	90 91 20 2e 	lds	r25, 0x2E20
    4302:	a0 91 21 2e 	lds	r26, 0x2E21
    4306:	b0 91 22 2e 	lds	r27, 0x2E22
    430a:	80 93 ac 24 	sts	0x24AC, r24
    430e:	90 93 ad 24 	sts	0x24AD, r25
    4312:	a0 93 ae 24 	sts	0x24AE, r26
    4316:	b0 93 af 24 	sts	0x24AF, r27
					X_cilj_stari = X_pos;
    431a:	80 91 1f 2e 	lds	r24, 0x2E1F
    431e:	90 91 20 2e 	lds	r25, 0x2E20
    4322:	a0 91 21 2e 	lds	r26, 0x2E21
    4326:	b0 91 22 2e 	lds	r27, 0x2E22
    432a:	80 93 2d 2e 	sts	0x2E2D, r24
    432e:	90 93 2e 2e 	sts	0x2E2E, r25
    4332:	a0 93 2f 2e 	sts	0x2E2F, r26
    4336:	b0 93 30 2e 	sts	0x2E30, r27
				}
				//Y_pos
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    433a:	80 91 6d 29 	lds	r24, 0x296D
    433e:	8f 3f       	cpi	r24, 0xFF	; 255
    4340:	29 f4       	brne	.+10     	; 0x434c <__stack+0x34d>
    4342:	80 91 6e 29 	lds	r24, 0x296E
    4346:	8f 3f       	cpi	r24, 0xFF	; 255
    4348:	09 f4       	brne	.+2      	; 0x434c <__stack+0x34d>
    434a:	6d c0       	rjmp	.+218    	; 0x4426 <__stack+0x427>
				{
					Y_pos = 0;
    434c:	10 92 fe 29 	sts	0x29FE, r1
    4350:	10 92 ff 29 	sts	0x29FF, r1
    4354:	10 92 00 2a 	sts	0x2A00, r1
    4358:	10 92 01 2a 	sts	0x2A01, r1
					Y_pos |= ((int)receiveArray[3]) << 8;
    435c:	20 91 6d 29 	lds	r18, 0x296D
    4360:	40 91 fe 29 	lds	r20, 0x29FE
    4364:	50 91 ff 29 	lds	r21, 0x29FF
    4368:	60 91 00 2a 	lds	r22, 0x2A00
    436c:	70 91 01 2a 	lds	r23, 0x2A01
    4370:	92 2f       	mov	r25, r18
    4372:	80 e0       	ldi	r24, 0x00	; 0
    4374:	aa 27       	eor	r26, r26
    4376:	97 fd       	sbrc	r25, 7
    4378:	a0 95       	com	r26
    437a:	ba 2f       	mov	r27, r26
    437c:	84 2b       	or	r24, r20
    437e:	95 2b       	or	r25, r21
    4380:	a6 2b       	or	r26, r22
    4382:	b7 2b       	or	r27, r23
    4384:	80 93 fe 29 	sts	0x29FE, r24
    4388:	90 93 ff 29 	sts	0x29FF, r25
    438c:	a0 93 00 2a 	sts	0x2A00, r26
    4390:	b0 93 01 2a 	sts	0x2A01, r27
					Y_pos |= (int)receiveArray[4];
    4394:	20 91 6e 29 	lds	r18, 0x296E
    4398:	80 91 fe 29 	lds	r24, 0x29FE
    439c:	90 91 ff 29 	lds	r25, 0x29FF
    43a0:	a0 91 00 2a 	lds	r26, 0x2A00
    43a4:	b0 91 01 2a 	lds	r27, 0x2A01
    43a8:	82 2b       	or	r24, r18
    43aa:	80 93 fe 29 	sts	0x29FE, r24
    43ae:	90 93 ff 29 	sts	0x29FF, r25
    43b2:	a0 93 00 2a 	sts	0x2A00, r26
    43b6:	b0 93 01 2a 	sts	0x2A01, r27
					Y_pos = Y_cilj * scale_factor_for_mm;
    43ba:	a0 91 fc 2d 	lds	r26, 0x2DFC
    43be:	b0 91 fd 2d 	lds	r27, 0x2DFD
    43c2:	20 91 07 2e 	lds	r18, 0x2E07
    43c6:	30 91 08 2e 	lds	r19, 0x2E08
    43ca:	40 91 09 2e 	lds	r20, 0x2E09
    43ce:	50 91 0a 2e 	lds	r21, 0x2E0A
    43d2:	0e 94 80 37 	call	0x6f00	; 0x6f00 <__muluhisi3>
    43d6:	60 93 fe 29 	sts	0x29FE, r22
    43da:	70 93 ff 29 	sts	0x29FF, r23
    43de:	80 93 00 2a 	sts	0x2A00, r24
    43e2:	90 93 01 2a 	sts	0x2A01, r25
					Y_cilj = Y_pos;
    43e6:	80 91 fe 29 	lds	r24, 0x29FE
    43ea:	90 91 ff 29 	lds	r25, 0x29FF
    43ee:	a0 91 00 2a 	lds	r26, 0x2A00
    43f2:	b0 91 01 2a 	lds	r27, 0x2A01
    43f6:	80 93 07 2e 	sts	0x2E07, r24
    43fa:	90 93 08 2e 	sts	0x2E08, r25
    43fe:	a0 93 09 2e 	sts	0x2E09, r26
    4402:	b0 93 0a 2e 	sts	0x2E0A, r27
					Y_cilj_stari = Y_pos;
    4406:	80 91 fe 29 	lds	r24, 0x29FE
    440a:	90 91 ff 29 	lds	r25, 0x29FF
    440e:	a0 91 00 2a 	lds	r26, 0x2A00
    4412:	b0 91 01 2a 	lds	r27, 0x2A01
    4416:	80 93 6c 2e 	sts	0x2E6C, r24
    441a:	90 93 6d 2e 	sts	0x2E6D, r25
    441e:	a0 93 6e 2e 	sts	0x2E6E, r26
    4422:	b0 93 6f 2e 	sts	0x2E6F, r27
				}
				
				//teta
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    4426:	80 91 6f 29 	lds	r24, 0x296F
    442a:	8f 3f       	cpi	r24, 0xFF	; 255
    442c:	29 f4       	brne	.+10     	; 0x4438 <__stack+0x439>
    442e:	80 91 70 29 	lds	r24, 0x2970
    4432:	8f 3f       	cpi	r24, 0xFF	; 255
    4434:	09 f4       	brne	.+2      	; 0x4438 <__stack+0x439>
    4436:	67 c0       	rjmp	.+206    	; 0x4506 <__stack+0x507>
				{
					teta = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    4438:	10 92 7f 32 	sts	0x327F, r1
    443c:	10 92 80 32 	sts	0x3280, r1
    4440:	10 92 81 32 	sts	0x3281, r1
    4444:	10 92 82 32 	sts	0x3282, r1
					teta |= ((int)receiveArray[5]) << 8;
    4448:	20 91 6f 29 	lds	r18, 0x296F
    444c:	40 91 7f 32 	lds	r20, 0x327F
    4450:	50 91 80 32 	lds	r21, 0x3280
    4454:	60 91 81 32 	lds	r22, 0x3281
    4458:	70 91 82 32 	lds	r23, 0x3282
    445c:	92 2f       	mov	r25, r18
    445e:	80 e0       	ldi	r24, 0x00	; 0
    4460:	aa 27       	eor	r26, r26
    4462:	97 fd       	sbrc	r25, 7
    4464:	a0 95       	com	r26
    4466:	ba 2f       	mov	r27, r26
    4468:	84 2b       	or	r24, r20
    446a:	95 2b       	or	r25, r21
    446c:	a6 2b       	or	r26, r22
    446e:	b7 2b       	or	r27, r23
    4470:	80 93 7f 32 	sts	0x327F, r24
    4474:	90 93 80 32 	sts	0x3280, r25
    4478:	a0 93 81 32 	sts	0x3281, r26
    447c:	b0 93 82 32 	sts	0x3282, r27
					teta |= (int)receiveArray[6];
    4480:	20 91 70 29 	lds	r18, 0x2970
    4484:	80 91 7f 32 	lds	r24, 0x327F
    4488:	90 91 80 32 	lds	r25, 0x3280
    448c:	a0 91 81 32 	lds	r26, 0x3281
    4490:	b0 91 82 32 	lds	r27, 0x3282
    4494:	82 2b       	or	r24, r18
    4496:	80 93 7f 32 	sts	0x327F, r24
    449a:	90 93 80 32 	sts	0x3280, r25
    449e:	a0 93 81 32 	sts	0x3281, r26
    44a2:	b0 93 82 32 	sts	0x3282, r27
					teta = (teta * krug360) / 360;
    44a6:	20 91 7f 32 	lds	r18, 0x327F
    44aa:	30 91 80 32 	lds	r19, 0x3280
    44ae:	40 91 81 32 	lds	r20, 0x3281
    44b2:	50 91 82 32 	lds	r21, 0x3282
    44b6:	60 91 71 32 	lds	r22, 0x3271
    44ba:	70 91 72 32 	lds	r23, 0x3272
    44be:	80 91 73 32 	lds	r24, 0x3273
    44c2:	90 91 74 32 	lds	r25, 0x3274
    44c6:	0e 94 43 37 	call	0x6e86	; 0x6e86 <__mulsi3>
    44ca:	28 e6       	ldi	r18, 0x68	; 104
    44cc:	31 e0       	ldi	r19, 0x01	; 1
    44ce:	40 e0       	ldi	r20, 0x00	; 0
    44d0:	50 e0       	ldi	r21, 0x00	; 0
    44d2:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    44d6:	20 93 7f 32 	sts	0x327F, r18
    44da:	30 93 80 32 	sts	0x3280, r19
    44de:	40 93 81 32 	sts	0x3281, r20
    44e2:	50 93 82 32 	sts	0x3282, r21
					teta_cilj = teta;
    44e6:	80 91 7f 32 	lds	r24, 0x327F
    44ea:	90 91 80 32 	lds	r25, 0x3280
    44ee:	a0 91 81 32 	lds	r26, 0x3281
    44f2:	b0 91 82 32 	lds	r27, 0x3282
    44f6:	80 93 c8 24 	sts	0x24C8, r24
    44fa:	90 93 c9 24 	sts	0x24C9, r25
    44fe:	a0 93 ca 24 	sts	0x24CA, r26
    4502:	b0 93 cb 24 	sts	0x24CB, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4506:	80 91 6a 29 	lds	r24, 0x296A
    450a:	80 93 d9 28 	sts	0x28D9, r24
					teta = (teta * krug360) / 360;
					teta_cilj = teta;
				}
				
				//slanje odgovora
				i = 0;
    450e:	00 e0       	ldi	r16, 0x00	; 0
    4510:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    4512:	f8 01       	movw	r30, r16
    4514:	e7 52       	subi	r30, 0x27	; 39
    4516:	f7 4d       	sbci	r31, 0xD7	; 215
    4518:	60 81       	ld	r22, Z
    451a:	80 e9       	ldi	r24, 0x90	; 144
    451c:	91 e2       	ldi	r25, 0x21	; 33
    451e:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    4522:	88 23       	and	r24, r24
    4524:	11 f0       	breq	.+4      	; 0x452a <__stack+0x52b>
					{
						i++;
    4526:	0f 5f       	subi	r16, 0xFF	; 255
    4528:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    452a:	10 16       	cp	r1, r16
    452c:	11 06       	cpc	r1, r17
    452e:	8c f7       	brge	.-30     	; 0x4512 <__stack+0x513>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    4530:	10 92 3b 2e 	sts	0x2E3B, r1
			}
			RX_i_C0 = 0;	//ako ne valja CHC ponistava se komanda
    4534:	10 92 3b 2e 	sts	0x2E3B, r1
    4538:	3d c0       	rjmp	.+122    	; 0x45b4 <__stack+0x5b5>
		}
	}
	//Total Stop - 8
	else if(receiveArray[0] == 8)					//provera funkcijskog bajta
    453a:	80 91 6a 29 	lds	r24, 0x296A
    453e:	88 30       	cpi	r24, 0x08	; 8
    4540:	c9 f5       	brne	.+114    	; 0x45b4 <__stack+0x5b5>
	{
		if(RX_i_C0 >= 3)							//stigla je cela poruka
    4542:	80 91 3b 2e 	lds	r24, 0x2E3B
    4546:	83 30       	cpi	r24, 0x03	; 3
    4548:	a8 f1       	brcs	.+106    	; 0x45b4 <__stack+0x5b5>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    454a:	10 92 f7 2d 	sts	0x2DF7, r1
			{
				
				if(receiveArray[1] == 0x01)
    454e:	80 91 6b 29 	lds	r24, 0x296B
    4552:	81 30       	cpi	r24, 0x01	; 1
    4554:	39 f4       	brne	.+14     	; 0x4564 <__stack+0x565>
				{
					stop_PID_levi = 1;
    4556:	80 93 ee 2d 	sts	0x2DEE, r24
					PID_brzina_L = 0;
    455a:	10 92 77 2e 	sts	0x2E77, r1
    455e:	10 92 78 2e 	sts	0x2E78, r1
    4562:	02 c0       	rjmp	.+4      	; 0x4568 <__stack+0x569>
				}				
				else
					stop_PID_levi = 0;
    4564:	10 92 ee 2d 	sts	0x2DEE, r1
					
				if(receiveArray[2] == 0x01)
    4568:	80 91 6c 29 	lds	r24, 0x296C
    456c:	81 30       	cpi	r24, 0x01	; 1
    456e:	39 f4       	brne	.+14     	; 0x457e <__stack+0x57f>
				{
					stop_PID_desni = 1;
    4570:	80 93 f0 29 	sts	0x29F0, r24
					PID_brzina_R = 0;
    4574:	10 92 75 2e 	sts	0x2E75, r1
    4578:	10 92 76 2e 	sts	0x2E76, r1
    457c:	02 c0       	rjmp	.+4      	; 0x4582 <__stack+0x583>
				}					
				else
					stop_PID_desni = 0;
    457e:	10 92 f0 29 	sts	0x29F0, r1
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4582:	80 91 6a 29 	lds	r24, 0x296A
    4586:	80 93 d9 28 	sts	0x28D9, r24
				}					
				else
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
    458a:	00 e0       	ldi	r16, 0x00	; 0
    458c:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    458e:	f8 01       	movw	r30, r16
    4590:	e7 52       	subi	r30, 0x27	; 39
    4592:	f7 4d       	sbci	r31, 0xD7	; 215
    4594:	60 81       	ld	r22, Z
    4596:	80 e9       	ldi	r24, 0x90	; 144
    4598:	91 e2       	ldi	r25, 0x21	; 33
    459a:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    459e:	88 23       	and	r24, r24
    45a0:	11 f0       	breq	.+4      	; 0x45a6 <__stack+0x5a7>
					{
						i++;
    45a2:	0f 5f       	subi	r16, 0xFF	; 255
    45a4:	1f 4f       	sbci	r17, 0xFF	; 255
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    45a6:	10 16       	cp	r1, r16
    45a8:	11 06       	cpc	r1, r17
    45aa:	8c f7       	brge	.-30     	; 0x458e <__stack+0x58f>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    45ac:	10 92 3b 2e 	sts	0x2E3B, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda
    45b0:	10 92 3b 2e 	sts	0x2E3B, r1
		}
	}
}
    45b4:	24 96       	adiw	r28, 0x04	; 4
    45b6:	cd bf       	out	0x3d, r28	; 61
    45b8:	de bf       	out	0x3e, r29	; 62
    45ba:	df 91       	pop	r29
    45bc:	cf 91       	pop	r28
    45be:	ff 91       	pop	r31
    45c0:	ef 91       	pop	r30
    45c2:	bf 91       	pop	r27
    45c4:	af 91       	pop	r26
    45c6:	9f 91       	pop	r25
    45c8:	8f 91       	pop	r24
    45ca:	7f 91       	pop	r23
    45cc:	6f 91       	pop	r22
    45ce:	5f 91       	pop	r21
    45d0:	4f 91       	pop	r20
    45d2:	3f 91       	pop	r19
    45d4:	2f 91       	pop	r18
    45d6:	1f 91       	pop	r17
    45d8:	0f 91       	pop	r16
    45da:	ff 90       	pop	r15
    45dc:	ef 90       	pop	r14
    45de:	df 90       	pop	r13
    45e0:	cf 90       	pop	r12
    45e2:	bf 90       	pop	r11
    45e4:	af 90       	pop	r10
    45e6:	9f 90       	pop	r9
    45e8:	8f 90       	pop	r8
    45ea:	7f 90       	pop	r7
    45ec:	6f 90       	pop	r6
    45ee:	5f 90       	pop	r5
    45f0:	4f 90       	pop	r4
    45f2:	0f 90       	pop	r0
    45f4:	0b be       	out	0x3b, r0	; 59
    45f6:	0f 90       	pop	r0
    45f8:	0a be       	out	0x3a, r0	; 58
    45fa:	0f 90       	pop	r0
    45fc:	09 be       	out	0x39, r0	; 57
    45fe:	0f 90       	pop	r0
    4600:	08 be       	out	0x38, r0	; 56
    4602:	0f 90       	pop	r0
    4604:	0f be       	out	0x3f, r0	; 63
    4606:	0f 90       	pop	r0
    4608:	1f 90       	pop	r1
    460a:	18 95       	reti

0000460c <__vector_77>:

//DESNI PASIVNi QDEC
ISR(TCD0_OVF_vect)
{
    460c:	1f 92       	push	r1
    460e:	0f 92       	push	r0
    4610:	0f b6       	in	r0, 0x3f	; 63
    4612:	0f 92       	push	r0
    4614:	11 24       	eor	r1, r1
    4616:	08 b6       	in	r0, 0x38	; 56
    4618:	0f 92       	push	r0
    461a:	18 be       	out	0x38, r1	; 56
    461c:	0b b6       	in	r0, 0x3b	; 59
    461e:	0f 92       	push	r0
    4620:	1b be       	out	0x3b, r1	; 59
    4622:	8f 93       	push	r24
    4624:	ef 93       	push	r30
    4626:	ff 93       	push	r31
	if((TCD0.CTRLFSET & TC0_DIR_bm) == 0)
    4628:	e0 e0       	ldi	r30, 0x00	; 0
    462a:	f9 e0       	ldi	r31, 0x09	; 9
    462c:	81 85       	ldd	r24, Z+9	; 0x09
    462e:	80 fd       	sbrc	r24, 0
    4630:	03 c0       	rjmp	.+6      	; 0x4638 <__vector_77+0x2c>
		PASIVNI_QDEC_OWF_R = 1;
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	80 93 f3 2d 	sts	0x2DF3, r24
	
	if((TCD0.CTRLFSET & TC0_DIR_bm) == 1)
    4638:	e0 e0       	ldi	r30, 0x00	; 0
    463a:	f9 e0       	ldi	r31, 0x09	; 9
    463c:	81 85       	ldd	r24, Z+9	; 0x09
    463e:	80 ff       	sbrs	r24, 0
    4640:	03 c0       	rjmp	.+6      	; 0x4648 <__vector_77+0x3c>
		PASIVNI_QDEC_OWF_R = 2;
    4642:	82 e0       	ldi	r24, 0x02	; 2
    4644:	80 93 f3 2d 	sts	0x2DF3, r24
}
    4648:	ff 91       	pop	r31
    464a:	ef 91       	pop	r30
    464c:	8f 91       	pop	r24
    464e:	0f 90       	pop	r0
    4650:	0b be       	out	0x3b, r0	; 59
    4652:	0f 90       	pop	r0
    4654:	08 be       	out	0x38, r0	; 56
    4656:	0f 90       	pop	r0
    4658:	0f be       	out	0x3f, r0	; 63
    465a:	0f 90       	pop	r0
    465c:	1f 90       	pop	r1
    465e:	18 95       	reti

00004660 <__vector_83>:
//LEVI PASIVNI QDEC
ISR(TCD1_OVF_vect)
{
    4660:	1f 92       	push	r1
    4662:	0f 92       	push	r0
    4664:	0f b6       	in	r0, 0x3f	; 63
    4666:	0f 92       	push	r0
    4668:	11 24       	eor	r1, r1
    466a:	08 b6       	in	r0, 0x38	; 56
    466c:	0f 92       	push	r0
    466e:	18 be       	out	0x38, r1	; 56
    4670:	0b b6       	in	r0, 0x3b	; 59
    4672:	0f 92       	push	r0
    4674:	1b be       	out	0x3b, r1	; 59
    4676:	8f 93       	push	r24
    4678:	ef 93       	push	r30
    467a:	ff 93       	push	r31
	if((TCD1.CTRLFSET & TC1_DIR_bm) == 0)
    467c:	e0 e4       	ldi	r30, 0x40	; 64
    467e:	f9 e0       	ldi	r31, 0x09	; 9
    4680:	81 85       	ldd	r24, Z+9	; 0x09
    4682:	80 fd       	sbrc	r24, 0
    4684:	03 c0       	rjmp	.+6      	; 0x468c <__vector_83+0x2c>
		PASIVNI_QDEC_OWF_L = 1;
    4686:	81 e0       	ldi	r24, 0x01	; 1
    4688:	80 93 1e 2e 	sts	0x2E1E, r24
	
	if((TCD1.CTRLFSET & TC1_DIR_bm) == 1)
    468c:	e0 e4       	ldi	r30, 0x40	; 64
    468e:	f9 e0       	ldi	r31, 0x09	; 9
    4690:	81 85       	ldd	r24, Z+9	; 0x09
    4692:	80 ff       	sbrs	r24, 0
    4694:	03 c0       	rjmp	.+6      	; 0x469c <__vector_83+0x3c>
		PASIVNI_QDEC_OWF_L = 2;
    4696:	82 e0       	ldi	r24, 0x02	; 2
    4698:	80 93 1e 2e 	sts	0x2E1E, r24
}
    469c:	ff 91       	pop	r31
    469e:	ef 91       	pop	r30
    46a0:	8f 91       	pop	r24
    46a2:	0f 90       	pop	r0
    46a4:	0b be       	out	0x3b, r0	; 59
    46a6:	0f 90       	pop	r0
    46a8:	08 be       	out	0x38, r0	; 56
    46aa:	0f 90       	pop	r0
    46ac:	0f be       	out	0x3f, r0	; 63
    46ae:	0f 90       	pop	r0
    46b0:	1f 90       	pop	r1
    46b2:	18 95       	reti

000046b4 <__vector_59>:
	//return;
//}


ISR(USARTE0_DRE_vect)
{
    46b4:	1f 92       	push	r1
    46b6:	0f 92       	push	r0
    46b8:	0f b6       	in	r0, 0x3f	; 63
    46ba:	0f 92       	push	r0
    46bc:	11 24       	eor	r1, r1
    46be:	08 b6       	in	r0, 0x38	; 56
    46c0:	0f 92       	push	r0
    46c2:	18 be       	out	0x38, r1	; 56
    46c4:	09 b6       	in	r0, 0x39	; 57
    46c6:	0f 92       	push	r0
    46c8:	19 be       	out	0x39, r1	; 57
    46ca:	0b b6       	in	r0, 0x3b	; 59
    46cc:	0f 92       	push	r0
    46ce:	1b be       	out	0x3b, r1	; 59
    46d0:	2f 93       	push	r18
    46d2:	3f 93       	push	r19
    46d4:	4f 93       	push	r20
    46d6:	5f 93       	push	r21
    46d8:	6f 93       	push	r22
    46da:	7f 93       	push	r23
    46dc:	8f 93       	push	r24
    46de:	9f 93       	push	r25
    46e0:	af 93       	push	r26
    46e2:	bf 93       	push	r27
    46e4:	ef 93       	push	r30
    46e6:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_E0_data);
    46e8:	87 e1       	ldi	r24, 0x17	; 23
    46ea:	93 e2       	ldi	r25, 0x23	; 35
    46ec:	0e 94 8e 33 	call	0x671c	; 0x671c <USART_DataRegEmpty>
}
    46f0:	ff 91       	pop	r31
    46f2:	ef 91       	pop	r30
    46f4:	bf 91       	pop	r27
    46f6:	af 91       	pop	r26
    46f8:	9f 91       	pop	r25
    46fa:	8f 91       	pop	r24
    46fc:	7f 91       	pop	r23
    46fe:	6f 91       	pop	r22
    4700:	5f 91       	pop	r21
    4702:	4f 91       	pop	r20
    4704:	3f 91       	pop	r19
    4706:	2f 91       	pop	r18
    4708:	0f 90       	pop	r0
    470a:	0b be       	out	0x3b, r0	; 59
    470c:	0f 90       	pop	r0
    470e:	09 be       	out	0x39, r0	; 57
    4710:	0f 90       	pop	r0
    4712:	08 be       	out	0x38, r0	; 56
    4714:	0f 90       	pop	r0
    4716:	0f be       	out	0x3f, r0	; 63
    4718:	0f 90       	pop	r0
    471a:	1f 90       	pop	r1
    471c:	18 95       	reti

0000471e <__vector_62>:
ISR(USARTE1_DRE_vect)
{
    471e:	1f 92       	push	r1
    4720:	0f 92       	push	r0
    4722:	0f b6       	in	r0, 0x3f	; 63
    4724:	0f 92       	push	r0
    4726:	11 24       	eor	r1, r1
    4728:	08 b6       	in	r0, 0x38	; 56
    472a:	0f 92       	push	r0
    472c:	18 be       	out	0x38, r1	; 56
    472e:	09 b6       	in	r0, 0x39	; 57
    4730:	0f 92       	push	r0
    4732:	19 be       	out	0x39, r1	; 57
    4734:	0b b6       	in	r0, 0x3b	; 59
    4736:	0f 92       	push	r0
    4738:	1b be       	out	0x3b, r1	; 59
    473a:	2f 93       	push	r18
    473c:	3f 93       	push	r19
    473e:	4f 93       	push	r20
    4740:	5f 93       	push	r21
    4742:	6f 93       	push	r22
    4744:	7f 93       	push	r23
    4746:	8f 93       	push	r24
    4748:	9f 93       	push	r25
    474a:	af 93       	push	r26
    474c:	bf 93       	push	r27
    474e:	ef 93       	push	r30
    4750:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_E1_data);
    4752:	89 e0       	ldi	r24, 0x09	; 9
    4754:	90 e2       	ldi	r25, 0x20	; 32
    4756:	0e 94 8e 33 	call	0x671c	; 0x671c <USART_DataRegEmpty>
}
    475a:	ff 91       	pop	r31
    475c:	ef 91       	pop	r30
    475e:	bf 91       	pop	r27
    4760:	af 91       	pop	r26
    4762:	9f 91       	pop	r25
    4764:	8f 91       	pop	r24
    4766:	7f 91       	pop	r23
    4768:	6f 91       	pop	r22
    476a:	5f 91       	pop	r21
    476c:	4f 91       	pop	r20
    476e:	3f 91       	pop	r19
    4770:	2f 91       	pop	r18
    4772:	0f 90       	pop	r0
    4774:	0b be       	out	0x3b, r0	; 59
    4776:	0f 90       	pop	r0
    4778:	09 be       	out	0x39, r0	; 57
    477a:	0f 90       	pop	r0
    477c:	08 be       	out	0x38, r0	; 56
    477e:	0f 90       	pop	r0
    4780:	0f be       	out	0x3f, r0	; 63
    4782:	0f 90       	pop	r0
    4784:	1f 90       	pop	r1
    4786:	18 95       	reti

00004788 <__vector_26>:
ISR(USARTC0_DRE_vect)
{
    4788:	1f 92       	push	r1
    478a:	0f 92       	push	r0
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	0f 92       	push	r0
    4790:	11 24       	eor	r1, r1
    4792:	08 b6       	in	r0, 0x38	; 56
    4794:	0f 92       	push	r0
    4796:	18 be       	out	0x38, r1	; 56
    4798:	09 b6       	in	r0, 0x39	; 57
    479a:	0f 92       	push	r0
    479c:	19 be       	out	0x39, r1	; 57
    479e:	0b b6       	in	r0, 0x3b	; 59
    47a0:	0f 92       	push	r0
    47a2:	1b be       	out	0x3b, r1	; 59
    47a4:	2f 93       	push	r18
    47a6:	3f 93       	push	r19
    47a8:	4f 93       	push	r20
    47aa:	5f 93       	push	r21
    47ac:	6f 93       	push	r22
    47ae:	7f 93       	push	r23
    47b0:	8f 93       	push	r24
    47b2:	9f 93       	push	r25
    47b4:	af 93       	push	r26
    47b6:	bf 93       	push	r27
    47b8:	ef 93       	push	r30
    47ba:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_C0_data);
    47bc:	80 e9       	ldi	r24, 0x90	; 144
    47be:	91 e2       	ldi	r25, 0x21	; 33
    47c0:	0e 94 8e 33 	call	0x671c	; 0x671c <USART_DataRegEmpty>
}
    47c4:	ff 91       	pop	r31
    47c6:	ef 91       	pop	r30
    47c8:	bf 91       	pop	r27
    47ca:	af 91       	pop	r26
    47cc:	9f 91       	pop	r25
    47ce:	8f 91       	pop	r24
    47d0:	7f 91       	pop	r23
    47d2:	6f 91       	pop	r22
    47d4:	5f 91       	pop	r21
    47d6:	4f 91       	pop	r20
    47d8:	3f 91       	pop	r19
    47da:	2f 91       	pop	r18
    47dc:	0f 90       	pop	r0
    47de:	0b be       	out	0x3b, r0	; 59
    47e0:	0f 90       	pop	r0
    47e2:	09 be       	out	0x39, r0	; 57
    47e4:	0f 90       	pop	r0
    47e6:	08 be       	out	0x38, r0	; 56
    47e8:	0f 90       	pop	r0
    47ea:	0f be       	out	0x3f, r0	; 63
    47ec:	0f 90       	pop	r0
    47ee:	1f 90       	pop	r1
    47f0:	18 95       	reti

000047f2 <__vector_34>:

//Interrupt na taster
ISR(PORTB_INT0_vect)
{
    47f2:	1f 92       	push	r1
    47f4:	0f 92       	push	r0
    47f6:	0f b6       	in	r0, 0x3f	; 63
    47f8:	0f 92       	push	r0
    47fa:	11 24       	eor	r1, r1
    47fc:	08 b6       	in	r0, 0x38	; 56
    47fe:	0f 92       	push	r0
    4800:	18 be       	out	0x38, r1	; 56
    4802:	09 b6       	in	r0, 0x39	; 57
    4804:	0f 92       	push	r0
    4806:	19 be       	out	0x39, r1	; 57
    4808:	0b b6       	in	r0, 0x3b	; 59
    480a:	0f 92       	push	r0
    480c:	1b be       	out	0x3b, r1	; 59
    480e:	2f 93       	push	r18
    4810:	3f 93       	push	r19
    4812:	4f 93       	push	r20
    4814:	5f 93       	push	r21
    4816:	6f 93       	push	r22
    4818:	7f 93       	push	r23
    481a:	8f 93       	push	r24
    481c:	9f 93       	push	r25
    481e:	af 93       	push	r26
    4820:	bf 93       	push	r27
    4822:	ef 93       	push	r30
    4824:	ff 93       	push	r31
	PORT_TogglePins(&PORTC, 0xFF);
    4826:	8f ef       	ldi	r24, 0xFF	; 255
    4828:	e0 e4       	ldi	r30, 0x40	; 64
    482a:	f6 e0       	ldi	r31, 0x06	; 6
    482c:	87 83       	std	Z+7, r24	; 0x07
	//PORT_TogglePins(&PORTF, 0x08);
	//USART_TXBuffer_PutByte(&USART_C0_data, 43);	//+
	
	broj = motor_sample_L16; //ispis zeljene promenljive
    482e:	80 91 46 2e 	lds	r24, 0x2E46
    4832:	90 91 47 2e 	lds	r25, 0x2E47
    4836:	80 93 04 2e 	sts	0x2E04, r24
    483a:	90 93 05 2e 	sts	0x2E05, r25
	
	if(broj	> 0)	
    483e:	80 91 04 2e 	lds	r24, 0x2E04
    4842:	90 91 05 2e 	lds	r25, 0x2E05
    4846:	18 16       	cp	r1, r24
    4848:	19 06       	cpc	r1, r25
    484a:	34 f4       	brge	.+12     	; 0x4858 <__vector_34+0x66>
		USART_TXBuffer_PutByte(&USART_E1_data, 43);	//+
    484c:	6b e2       	ldi	r22, 0x2B	; 43
    484e:	89 e0       	ldi	r24, 0x09	; 9
    4850:	90 e2       	ldi	r25, 0x20	; 32
    4852:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
    4856:	11 c0       	rjmp	.+34     	; 0x487a <__vector_34+0x88>
	else if(broj < 0)	
    4858:	80 91 04 2e 	lds	r24, 0x2E04
    485c:	90 91 05 2e 	lds	r25, 0x2E05
    4860:	99 23       	and	r25, r25
    4862:	34 f4       	brge	.+12     	; 0x4870 <__vector_34+0x7e>
		USART_TXBuffer_PutByte(&USART_E1_data, 45);	//-
    4864:	6d e2       	ldi	r22, 0x2D	; 45
    4866:	89 e0       	ldi	r24, 0x09	; 9
    4868:	90 e2       	ldi	r25, 0x20	; 32
    486a:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
    486e:	05 c0       	rjmp	.+10     	; 0x487a <__vector_34+0x88>
	else
		USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space		
    4870:	60 e2       	ldi	r22, 0x20	; 32
    4872:	89 e0       	ldi	r24, 0x09	; 9
    4874:	90 e2       	ldi	r25, 0x20	; 32
    4876:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	if(broj < 0)	//pozitiviziramo broj
    487a:	80 91 04 2e 	lds	r24, 0x2E04
    487e:	90 91 05 2e 	lds	r25, 0x2E05
    4882:	99 23       	and	r25, r25
    4884:	5c f4       	brge	.+22     	; 0x489c <__vector_34+0xaa>
		broj = broj * (-1);	
    4886:	80 91 04 2e 	lds	r24, 0x2E04
    488a:	90 91 05 2e 	lds	r25, 0x2E05
    488e:	91 95       	neg	r25
    4890:	81 95       	neg	r24
    4892:	91 09       	sbc	r25, r1
    4894:	80 93 04 2e 	sts	0x2E04, r24
    4898:	90 93 05 2e 	sts	0x2E05, r25
	broj1 = broj % 10 | 0x30;	
    489c:	80 91 04 2e 	lds	r24, 0x2E04
    48a0:	90 91 05 2e 	lds	r25, 0x2E05
    48a4:	2a e0       	ldi	r18, 0x0A	; 10
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	b9 01       	movw	r22, r18
    48aa:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    48ae:	80 63       	ori	r24, 0x30	; 48
    48b0:	80 93 40 2e 	sts	0x2E40, r24
    48b4:	90 93 41 2e 	sts	0x2E41, r25
	broj = broj / 10;
    48b8:	80 91 04 2e 	lds	r24, 0x2E04
    48bc:	90 91 05 2e 	lds	r25, 0x2E05
    48c0:	b9 01       	movw	r22, r18
    48c2:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    48c6:	60 93 04 2e 	sts	0x2E04, r22
    48ca:	70 93 05 2e 	sts	0x2E05, r23
	broj10 = broj % 10 | 0x30;
    48ce:	80 91 04 2e 	lds	r24, 0x2E04
    48d2:	90 91 05 2e 	lds	r25, 0x2E05
    48d6:	b9 01       	movw	r22, r18
    48d8:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    48dc:	80 63       	ori	r24, 0x30	; 48
    48de:	80 93 6f 32 	sts	0x326F, r24
    48e2:	90 93 70 32 	sts	0x3270, r25
	broj = broj / 10;
    48e6:	80 91 04 2e 	lds	r24, 0x2E04
    48ea:	90 91 05 2e 	lds	r25, 0x2E05
    48ee:	b9 01       	movw	r22, r18
    48f0:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    48f4:	60 93 04 2e 	sts	0x2E04, r22
    48f8:	70 93 05 2e 	sts	0x2E05, r23
	broj100 = broj % 10 | 0x30;
    48fc:	80 91 04 2e 	lds	r24, 0x2E04
    4900:	90 91 05 2e 	lds	r25, 0x2E05
    4904:	b9 01       	movw	r22, r18
    4906:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    490a:	80 63       	ori	r24, 0x30	; 48
    490c:	80 93 33 2e 	sts	0x2E33, r24
    4910:	90 93 34 2e 	sts	0x2E34, r25
	broj = broj / 10;
    4914:	80 91 04 2e 	lds	r24, 0x2E04
    4918:	90 91 05 2e 	lds	r25, 0x2E05
    491c:	b9 01       	movw	r22, r18
    491e:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4922:	60 93 04 2e 	sts	0x2E04, r22
    4926:	70 93 05 2e 	sts	0x2E05, r23
	broj1000 = broj % 10 | 0x30;
    492a:	80 91 04 2e 	lds	r24, 0x2E04
    492e:	90 91 05 2e 	lds	r25, 0x2E05
    4932:	b9 01       	movw	r22, r18
    4934:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4938:	80 63       	ori	r24, 0x30	; 48
    493a:	80 93 d3 28 	sts	0x28D3, r24
    493e:	90 93 d4 28 	sts	0x28D4, r25
	broj = broj / 10;
    4942:	80 91 04 2e 	lds	r24, 0x2E04
    4946:	90 91 05 2e 	lds	r25, 0x2E05
    494a:	b9 01       	movw	r22, r18
    494c:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4950:	60 93 04 2e 	sts	0x2E04, r22
    4954:	70 93 05 2e 	sts	0x2E05, r23
	broj10000 = broj % 10 | 0x30;
    4958:	80 91 04 2e 	lds	r24, 0x2E04
    495c:	90 91 05 2e 	lds	r25, 0x2E05
    4960:	b9 01       	movw	r22, r18
    4962:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4966:	80 63       	ori	r24, 0x30	; 48
    4968:	80 93 bf 28 	sts	0x28BF, r24
    496c:	90 93 c0 28 	sts	0x28C0, r25
	USART_TXBuffer_PutByte(&USART_E1_data, broj10000);
    4970:	60 91 bf 28 	lds	r22, 0x28BF
    4974:	70 91 c0 28 	lds	r23, 0x28C0
    4978:	89 e0       	ldi	r24, 0x09	; 9
    497a:	90 e2       	ldi	r25, 0x20	; 32
    497c:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1000);
    4980:	60 91 d3 28 	lds	r22, 0x28D3
    4984:	70 91 d4 28 	lds	r23, 0x28D4
    4988:	89 e0       	ldi	r24, 0x09	; 9
    498a:	90 e2       	ldi	r25, 0x20	; 32
    498c:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj100);
    4990:	60 91 33 2e 	lds	r22, 0x2E33
    4994:	70 91 34 2e 	lds	r23, 0x2E34
    4998:	89 e0       	ldi	r24, 0x09	; 9
    499a:	90 e2       	ldi	r25, 0x20	; 32
    499c:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj10);
    49a0:	60 91 6f 32 	lds	r22, 0x326F
    49a4:	70 91 70 32 	lds	r23, 0x3270
    49a8:	89 e0       	ldi	r24, 0x09	; 9
    49aa:	90 e2       	ldi	r25, 0x20	; 32
    49ac:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1);
    49b0:	60 91 40 2e 	lds	r22, 0x2E40
    49b4:	70 91 41 2e 	lds	r23, 0x2E41
    49b8:	89 e0       	ldi	r24, 0x09	; 9
    49ba:	90 e2       	ldi	r25, 0x20	; 32
    49bc:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space		
    49c0:	60 e2       	ldi	r22, 0x20	; 32
    49c2:	89 e0       	ldi	r24, 0x09	; 9
    49c4:	90 e2       	ldi	r25, 0x20	; 32
    49c6:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 0x3A);	//:
    49ca:	6a e3       	ldi	r22, 0x3A	; 58
    49cc:	89 e0       	ldi	r24, 0x09	; 9
    49ce:	90 e2       	ldi	r25, 0x20	; 32
    49d0:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space		
    49d4:	60 e2       	ldi	r22, 0x20	; 32
    49d6:	89 e0       	ldi	r24, 0x09	; 9
    49d8:	90 e2       	ldi	r25, 0x20	; 32
    49da:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	
	
	broj = motor_sample_R16;	//ispis zeljene promenljive
    49de:	80 91 5f 2e 	lds	r24, 0x2E5F
    49e2:	90 91 60 2e 	lds	r25, 0x2E60
    49e6:	80 93 04 2e 	sts	0x2E04, r24
    49ea:	90 93 05 2e 	sts	0x2E05, r25
	
	if(broj	> 0)	
    49ee:	80 91 04 2e 	lds	r24, 0x2E04
    49f2:	90 91 05 2e 	lds	r25, 0x2E05
    49f6:	18 16       	cp	r1, r24
    49f8:	19 06       	cpc	r1, r25
    49fa:	34 f4       	brge	.+12     	; 0x4a08 <__vector_34+0x216>
		USART_TXBuffer_PutByte(&USART_E1_data, 43);	//+
    49fc:	6b e2       	ldi	r22, 0x2B	; 43
    49fe:	89 e0       	ldi	r24, 0x09	; 9
    4a00:	90 e2       	ldi	r25, 0x20	; 32
    4a02:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
    4a06:	11 c0       	rjmp	.+34     	; 0x4a2a <__vector_34+0x238>
	else if(broj < 0)	
    4a08:	80 91 04 2e 	lds	r24, 0x2E04
    4a0c:	90 91 05 2e 	lds	r25, 0x2E05
    4a10:	99 23       	and	r25, r25
    4a12:	34 f4       	brge	.+12     	; 0x4a20 <__vector_34+0x22e>
		USART_TXBuffer_PutByte(&USART_E1_data, 45);	//-
    4a14:	6d e2       	ldi	r22, 0x2D	; 45
    4a16:	89 e0       	ldi	r24, 0x09	; 9
    4a18:	90 e2       	ldi	r25, 0x20	; 32
    4a1a:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
    4a1e:	05 c0       	rjmp	.+10     	; 0x4a2a <__vector_34+0x238>
	else
		USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space	
    4a20:	60 e2       	ldi	r22, 0x20	; 32
    4a22:	89 e0       	ldi	r24, 0x09	; 9
    4a24:	90 e2       	ldi	r25, 0x20	; 32
    4a26:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	if(broj < 0)	//pozitiviramo broj
    4a2a:	80 91 04 2e 	lds	r24, 0x2E04
    4a2e:	90 91 05 2e 	lds	r25, 0x2E05
    4a32:	99 23       	and	r25, r25
    4a34:	5c f4       	brge	.+22     	; 0x4a4c <__vector_34+0x25a>
		broj = broj * (-1);
    4a36:	80 91 04 2e 	lds	r24, 0x2E04
    4a3a:	90 91 05 2e 	lds	r25, 0x2E05
    4a3e:	91 95       	neg	r25
    4a40:	81 95       	neg	r24
    4a42:	91 09       	sbc	r25, r1
    4a44:	80 93 04 2e 	sts	0x2E04, r24
    4a48:	90 93 05 2e 	sts	0x2E05, r25
	broj1 = broj % 10 | 0x30;	
    4a4c:	80 91 04 2e 	lds	r24, 0x2E04
    4a50:	90 91 05 2e 	lds	r25, 0x2E05
    4a54:	2a e0       	ldi	r18, 0x0A	; 10
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	b9 01       	movw	r22, r18
    4a5a:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4a5e:	80 63       	ori	r24, 0x30	; 48
    4a60:	80 93 40 2e 	sts	0x2E40, r24
    4a64:	90 93 41 2e 	sts	0x2E41, r25
	broj = broj / 10;
    4a68:	80 91 04 2e 	lds	r24, 0x2E04
    4a6c:	90 91 05 2e 	lds	r25, 0x2E05
    4a70:	b9 01       	movw	r22, r18
    4a72:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4a76:	60 93 04 2e 	sts	0x2E04, r22
    4a7a:	70 93 05 2e 	sts	0x2E05, r23
	broj10 = broj % 10 | 0x30;
    4a7e:	80 91 04 2e 	lds	r24, 0x2E04
    4a82:	90 91 05 2e 	lds	r25, 0x2E05
    4a86:	b9 01       	movw	r22, r18
    4a88:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4a8c:	80 63       	ori	r24, 0x30	; 48
    4a8e:	80 93 6f 32 	sts	0x326F, r24
    4a92:	90 93 70 32 	sts	0x3270, r25
	broj = broj / 10;	
    4a96:	80 91 04 2e 	lds	r24, 0x2E04
    4a9a:	90 91 05 2e 	lds	r25, 0x2E05
    4a9e:	b9 01       	movw	r22, r18
    4aa0:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4aa4:	60 93 04 2e 	sts	0x2E04, r22
    4aa8:	70 93 05 2e 	sts	0x2E05, r23
	broj100 = broj % 10 | 0x30;
    4aac:	80 91 04 2e 	lds	r24, 0x2E04
    4ab0:	90 91 05 2e 	lds	r25, 0x2E05
    4ab4:	b9 01       	movw	r22, r18
    4ab6:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4aba:	80 63       	ori	r24, 0x30	; 48
    4abc:	80 93 33 2e 	sts	0x2E33, r24
    4ac0:	90 93 34 2e 	sts	0x2E34, r25
	broj = broj / 10;
    4ac4:	80 91 04 2e 	lds	r24, 0x2E04
    4ac8:	90 91 05 2e 	lds	r25, 0x2E05
    4acc:	b9 01       	movw	r22, r18
    4ace:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4ad2:	60 93 04 2e 	sts	0x2E04, r22
    4ad6:	70 93 05 2e 	sts	0x2E05, r23
	broj1000 = broj % 10 | 0x30;
    4ada:	80 91 04 2e 	lds	r24, 0x2E04
    4ade:	90 91 05 2e 	lds	r25, 0x2E05
    4ae2:	b9 01       	movw	r22, r18
    4ae4:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4ae8:	80 63       	ori	r24, 0x30	; 48
    4aea:	80 93 d3 28 	sts	0x28D3, r24
    4aee:	90 93 d4 28 	sts	0x28D4, r25
	broj = broj / 10;
    4af2:	80 91 04 2e 	lds	r24, 0x2E04
    4af6:	90 91 05 2e 	lds	r25, 0x2E05
    4afa:	b9 01       	movw	r22, r18
    4afc:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4b00:	60 93 04 2e 	sts	0x2E04, r22
    4b04:	70 93 05 2e 	sts	0x2E05, r23
	broj10000 = broj % 10 | 0x30;
    4b08:	80 91 04 2e 	lds	r24, 0x2E04
    4b0c:	90 91 05 2e 	lds	r25, 0x2E05
    4b10:	b9 01       	movw	r22, r18
    4b12:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__divmodhi4>
    4b16:	80 63       	ori	r24, 0x30	; 48
    4b18:	80 93 bf 28 	sts	0x28BF, r24
    4b1c:	90 93 c0 28 	sts	0x28C0, r25
	USART_TXBuffer_PutByte(&USART_E1_data, broj10000);
    4b20:	60 91 bf 28 	lds	r22, 0x28BF
    4b24:	70 91 c0 28 	lds	r23, 0x28C0
    4b28:	89 e0       	ldi	r24, 0x09	; 9
    4b2a:	90 e2       	ldi	r25, 0x20	; 32
    4b2c:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1000);
    4b30:	60 91 d3 28 	lds	r22, 0x28D3
    4b34:	70 91 d4 28 	lds	r23, 0x28D4
    4b38:	89 e0       	ldi	r24, 0x09	; 9
    4b3a:	90 e2       	ldi	r25, 0x20	; 32
    4b3c:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj100);
    4b40:	60 91 33 2e 	lds	r22, 0x2E33
    4b44:	70 91 34 2e 	lds	r23, 0x2E34
    4b48:	89 e0       	ldi	r24, 0x09	; 9
    4b4a:	90 e2       	ldi	r25, 0x20	; 32
    4b4c:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj10);
    4b50:	60 91 6f 32 	lds	r22, 0x326F
    4b54:	70 91 70 32 	lds	r23, 0x3270
    4b58:	89 e0       	ldi	r24, 0x09	; 9
    4b5a:	90 e2       	ldi	r25, 0x20	; 32
    4b5c:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1);
    4b60:	60 91 40 2e 	lds	r22, 0x2E40
    4b64:	70 91 41 2e 	lds	r23, 0x2E41
    4b68:	89 e0       	ldi	r24, 0x09	; 9
    4b6a:	90 e2       	ldi	r25, 0x20	; 32
    4b6c:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 13);	//CR
    4b70:	6d e0       	ldi	r22, 0x0D	; 13
    4b72:	89 e0       	ldi	r24, 0x09	; 9
    4b74:	90 e2       	ldi	r25, 0x20	; 32
    4b76:	0e 94 43 33 	call	0x6686	; 0x6686 <USART_TXBuffer_PutByte>
}
    4b7a:	ff 91       	pop	r31
    4b7c:	ef 91       	pop	r30
    4b7e:	bf 91       	pop	r27
    4b80:	af 91       	pop	r26
    4b82:	9f 91       	pop	r25
    4b84:	8f 91       	pop	r24
    4b86:	7f 91       	pop	r23
    4b88:	6f 91       	pop	r22
    4b8a:	5f 91       	pop	r21
    4b8c:	4f 91       	pop	r20
    4b8e:	3f 91       	pop	r19
    4b90:	2f 91       	pop	r18
    4b92:	0f 90       	pop	r0
    4b94:	0b be       	out	0x3b, r0	; 59
    4b96:	0f 90       	pop	r0
    4b98:	09 be       	out	0x39, r0	; 57
    4b9a:	0f 90       	pop	r0
    4b9c:	08 be       	out	0x38, r0	; 56
    4b9e:	0f 90       	pop	r0
    4ba0:	0f be       	out	0x3f, r0	; 63
    4ba2:	0f 90       	pop	r0
    4ba4:	1f 90       	pop	r1
    4ba6:	18 95       	reti

00004ba8 <Racunanje_trenutne_pozicije>:
krug180,
krug360;


void Racunanje_trenutne_pozicije(void)
{
    4ba8:	8f 92       	push	r8
    4baa:	9f 92       	push	r9
    4bac:	af 92       	push	r10
    4bae:	bf 92       	push	r11
    4bb0:	cf 92       	push	r12
    4bb2:	df 92       	push	r13
    4bb4:	ef 92       	push	r14
    4bb6:	ff 92       	push	r15
    4bb8:	cf 93       	push	r28
    4bba:	df 93       	push	r29
    4bbc:	cd b7       	in	r28, 0x3d	; 61
    4bbe:	de b7       	in	r29, 0x3e	; 62
    4bc0:	28 97       	sbiw	r28, 0x08	; 8
    4bc2:	cd bf       	out	0x3d, r28	; 61
    4bc4:	de bf       	out	0x3e, r29	; 62
	//uzimanje stanja enkodera
	count_L = TCD1.CNT;
    4bc6:	e0 e4       	ldi	r30, 0x40	; 64
    4bc8:	f9 e0       	ldi	r31, 0x09	; 9
    4bca:	80 a1       	ldd	r24, Z+32	; 0x20
    4bcc:	91 a1       	ldd	r25, Z+33	; 0x21
    4bce:	80 93 79 32 	sts	0x3279, r24
    4bd2:	90 93 7a 32 	sts	0x327A, r25
	count_R = TCD0.CNT;
    4bd6:	e0 e0       	ldi	r30, 0x00	; 0
    4bd8:	f9 e0       	ldi	r31, 0x09	; 9
    4bda:	80 a1       	ldd	r24, Z+32	; 0x20
    4bdc:	91 a1       	ldd	r25, Z+33	; 0x21
    4bde:	a0 e0       	ldi	r26, 0x00	; 0
    4be0:	b0 e0       	ldi	r27, 0x00	; 0
    4be2:	80 93 1a 2e 	sts	0x2E1A, r24
    4be6:	90 93 1b 2e 	sts	0x2E1B, r25
    4bea:	a0 93 1c 2e 	sts	0x2E1C, r26
    4bee:	b0 93 1d 2e 	sts	0x2E1D, r27
	
	//desni enkoder
	if(PASIVNI_QDEC_OWF_R == 0)
    4bf2:	80 91 f3 2d 	lds	r24, 0x2DF3
    4bf6:	81 11       	cpse	r24, r1
    4bf8:	17 c0       	rjmp	.+46     	; 0x4c28 <Racunanje_trenutne_pozicije+0x80>
	{
		sample_R16 = (count_R - last_count_R);
    4bfa:	40 91 1a 2e 	lds	r20, 0x2E1A
    4bfe:	50 91 1b 2e 	lds	r21, 0x2E1B
    4c02:	60 91 1c 2e 	lds	r22, 0x2E1C
    4c06:	70 91 1d 2e 	lds	r23, 0x2E1D
    4c0a:	80 91 ea 29 	lds	r24, 0x29EA
    4c0e:	90 91 eb 29 	lds	r25, 0x29EB
    4c12:	a0 91 ec 29 	lds	r26, 0x29EC
    4c16:	b0 91 ed 29 	lds	r27, 0x29ED
    4c1a:	48 1b       	sub	r20, r24
    4c1c:	59 0b       	sbc	r21, r25
    4c1e:	40 93 be 24 	sts	0x24BE, r20
    4c22:	50 93 bf 24 	sts	0x24BF, r21
    4c26:	3b c0       	rjmp	.+118    	; 0x4c9e <Racunanje_trenutne_pozicije+0xf6>
	}
	else
	{
		if(PASIVNI_QDEC_OWF_R == 1)
    4c28:	80 91 f3 2d 	lds	r24, 0x2DF3
    4c2c:	81 30       	cpi	r24, 0x01	; 1
    4c2e:	c9 f4       	brne	.+50     	; 0x4c62 <Racunanje_trenutne_pozicije+0xba>
		{
			sample_R16 = count_R + ~(last_count_R);	//sample_R16 = count_R + ~(last_count_R);
    4c30:	40 91 ea 29 	lds	r20, 0x29EA
    4c34:	50 91 eb 29 	lds	r21, 0x29EB
    4c38:	60 91 ec 29 	lds	r22, 0x29EC
    4c3c:	70 91 ed 29 	lds	r23, 0x29ED
    4c40:	80 91 1a 2e 	lds	r24, 0x2E1A
    4c44:	90 91 1b 2e 	lds	r25, 0x2E1B
    4c48:	a0 91 1c 2e 	lds	r26, 0x2E1C
    4c4c:	b0 91 1d 2e 	lds	r27, 0x2E1D
    4c50:	40 95       	com	r20
    4c52:	50 95       	com	r21
    4c54:	84 0f       	add	r24, r20
    4c56:	95 1f       	adc	r25, r21
    4c58:	80 93 be 24 	sts	0x24BE, r24
    4c5c:	90 93 bf 24 	sts	0x24BF, r25
    4c60:	1c c0       	rjmp	.+56     	; 0x4c9a <Racunanje_trenutne_pozicije+0xf2>
		}
		else if(PASIVNI_QDEC_OWF_R == 2)
    4c62:	80 91 f3 2d 	lds	r24, 0x2DF3
    4c66:	82 30       	cpi	r24, 0x02	; 2
    4c68:	c1 f4       	brne	.+48     	; 0x4c9a <Racunanje_trenutne_pozicije+0xf2>
		{
			sample_R16 = -(last_count_R + ~(count_R));	//sample_R16 = -(last_count_R + ~(count_R));
    4c6a:	40 91 1a 2e 	lds	r20, 0x2E1A
    4c6e:	50 91 1b 2e 	lds	r21, 0x2E1B
    4c72:	60 91 1c 2e 	lds	r22, 0x2E1C
    4c76:	70 91 1d 2e 	lds	r23, 0x2E1D
    4c7a:	80 91 ea 29 	lds	r24, 0x29EA
    4c7e:	90 91 eb 29 	lds	r25, 0x29EB
    4c82:	a0 91 ec 29 	lds	r26, 0x29EC
    4c86:	b0 91 ed 29 	lds	r27, 0x29ED
    4c8a:	4f 5f       	subi	r20, 0xFF	; 255
    4c8c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c8e:	48 1b       	sub	r20, r24
    4c90:	59 0b       	sbc	r21, r25
    4c92:	40 93 be 24 	sts	0x24BE, r20
    4c96:	50 93 bf 24 	sts	0x24BF, r21
		}
		
		PASIVNI_QDEC_OWF_R = 0;
    4c9a:	10 92 f3 2d 	sts	0x2DF3, r1
	}
	
	//levi enkoder
	if(PASIVNI_QDEC_OWF_L == 0)
    4c9e:	80 91 1e 2e 	lds	r24, 0x2E1E
    4ca2:	81 11       	cpse	r24, r1
    4ca4:	0f c0       	rjmp	.+30     	; 0x4cc4 <Racunanje_trenutne_pozicije+0x11c>
	{
		sample_L16 = (count_L - last_count_L);
    4ca6:	80 91 79 32 	lds	r24, 0x3279
    4caa:	90 91 7a 32 	lds	r25, 0x327A
    4cae:	20 91 29 2e 	lds	r18, 0x2E29
    4cb2:	30 91 2a 2e 	lds	r19, 0x2E2A
    4cb6:	82 1b       	sub	r24, r18
    4cb8:	93 0b       	sbc	r25, r19
    4cba:	80 93 9e 24 	sts	0x249E, r24
    4cbe:	90 93 9f 24 	sts	0x249F, r25
    4cc2:	2a c0       	rjmp	.+84     	; 0x4d18 <Racunanje_trenutne_pozicije+0x170>
	}
	else
	{
		if(PASIVNI_QDEC_OWF_L == 1)
    4cc4:	80 91 1e 2e 	lds	r24, 0x2E1E
    4cc8:	81 30       	cpi	r24, 0x01	; 1
    4cca:	89 f4       	brne	.+34     	; 0x4cee <Racunanje_trenutne_pozicije+0x146>
		{
			sample_L16 = count_L + ~(last_count_L);//sample_L16 = count_L + ~(last_count_L);
    4ccc:	80 91 29 2e 	lds	r24, 0x2E29
    4cd0:	90 91 2a 2e 	lds	r25, 0x2E2A
    4cd4:	20 91 79 32 	lds	r18, 0x3279
    4cd8:	30 91 7a 32 	lds	r19, 0x327A
    4cdc:	80 95       	com	r24
    4cde:	90 95       	com	r25
    4ce0:	82 0f       	add	r24, r18
    4ce2:	93 1f       	adc	r25, r19
    4ce4:	80 93 9e 24 	sts	0x249E, r24
    4ce8:	90 93 9f 24 	sts	0x249F, r25
    4cec:	13 c0       	rjmp	.+38     	; 0x4d14 <Racunanje_trenutne_pozicije+0x16c>
		} 
		else if(PASIVNI_QDEC_OWF_L == 2)
    4cee:	80 91 1e 2e 	lds	r24, 0x2E1E
    4cf2:	82 30       	cpi	r24, 0x02	; 2
    4cf4:	79 f4       	brne	.+30     	; 0x4d14 <Racunanje_trenutne_pozicije+0x16c>
		{
			sample_L16 = -(last_count_L + ~(count_L));//sample_L16 = -(last_count_L + ~(count_L));
    4cf6:	80 91 79 32 	lds	r24, 0x3279
    4cfa:	90 91 7a 32 	lds	r25, 0x327A
    4cfe:	20 91 29 2e 	lds	r18, 0x2E29
    4d02:	30 91 2a 2e 	lds	r19, 0x2E2A
    4d06:	01 96       	adiw	r24, 0x01	; 1
    4d08:	82 1b       	sub	r24, r18
    4d0a:	93 0b       	sbc	r25, r19
    4d0c:	80 93 9e 24 	sts	0x249E, r24
    4d10:	90 93 9f 24 	sts	0x249F, r25
		}
		
		PASIVNI_QDEC_OWF_L = 0;
    4d14:	10 92 1e 2e 	sts	0x2E1E, r1
	}
	
	
	//osvezavanje last_ promenjive
	last_count_R = count_R;
    4d18:	80 91 1a 2e 	lds	r24, 0x2E1A
    4d1c:	90 91 1b 2e 	lds	r25, 0x2E1B
    4d20:	a0 91 1c 2e 	lds	r26, 0x2E1C
    4d24:	b0 91 1d 2e 	lds	r27, 0x2E1D
    4d28:	80 93 ea 29 	sts	0x29EA, r24
    4d2c:	90 93 eb 29 	sts	0x29EB, r25
    4d30:	a0 93 ec 29 	sts	0x29EC, r26
    4d34:	b0 93 ed 29 	sts	0x29ED, r27
	last_count_L = count_L;
    4d38:	80 91 79 32 	lds	r24, 0x3279
    4d3c:	90 91 7a 32 	lds	r25, 0x327A
    4d40:	80 93 29 2e 	sts	0x2E29, r24
    4d44:	90 93 2a 2e 	sts	0x2E2A, r25
	
	//potrebne vrednosti za trigonometriju
	translacija_10ms = -(sample_R16 + sample_L16);	//translacija_10ms = (sample_R16 + sample_L16);
    4d48:	20 91 be 24 	lds	r18, 0x24BE
    4d4c:	30 91 bf 24 	lds	r19, 0x24BF
    4d50:	80 91 9e 24 	lds	r24, 0x249E
    4d54:	90 91 9f 24 	lds	r25, 0x249F
    4d58:	82 0f       	add	r24, r18
    4d5a:	93 1f       	adc	r25, r19
    4d5c:	91 95       	neg	r25
    4d5e:	81 95       	neg	r24
    4d60:	91 09       	sbc	r25, r1
    4d62:	80 93 ee 29 	sts	0x29EE, r24
    4d66:	90 93 ef 29 	sts	0x29EF, r25
	rotacija_10ms = (sample_R16 - sample_L16);
    4d6a:	80 91 be 24 	lds	r24, 0x24BE
    4d6e:	90 91 bf 24 	lds	r25, 0x24BF
    4d72:	20 91 9e 24 	lds	r18, 0x249E
    4d76:	30 91 9f 24 	lds	r19, 0x249F
    4d7a:	82 1b       	sub	r24, r18
    4d7c:	93 0b       	sbc	r25, r19
    4d7e:	80 93 83 32 	sts	0x3283, r24
    4d82:	90 93 84 32 	sts	0x3284, r25
	teta += rotacija_10ms;
    4d86:	80 91 83 32 	lds	r24, 0x3283
    4d8a:	90 91 84 32 	lds	r25, 0x3284
    4d8e:	40 91 7f 32 	lds	r20, 0x327F
    4d92:	50 91 80 32 	lds	r21, 0x3280
    4d96:	60 91 81 32 	lds	r22, 0x3281
    4d9a:	70 91 82 32 	lds	r23, 0x3282
    4d9e:	aa 27       	eor	r26, r26
    4da0:	97 fd       	sbrc	r25, 7
    4da2:	a0 95       	com	r26
    4da4:	ba 2f       	mov	r27, r26
    4da6:	84 0f       	add	r24, r20
    4da8:	95 1f       	adc	r25, r21
    4daa:	a6 1f       	adc	r26, r22
    4dac:	b7 1f       	adc	r27, r23
    4dae:	80 93 7f 32 	sts	0x327F, r24
    4db2:	90 93 80 32 	sts	0x3280, r25
    4db6:	a0 93 81 32 	sts	0x3281, r26
    4dba:	b0 93 82 32 	sts	0x3282, r27
	translacija += ((long)(translacija_10ms));
    4dbe:	80 91 ee 29 	lds	r24, 0x29EE
    4dc2:	90 91 ef 29 	lds	r25, 0x29EF
    4dc6:	40 91 b2 24 	lds	r20, 0x24B2
    4dca:	50 91 b3 24 	lds	r21, 0x24B3
    4dce:	60 91 b4 24 	lds	r22, 0x24B4
    4dd2:	70 91 b5 24 	lds	r23, 0x24B5
    4dd6:	aa 27       	eor	r26, r26
    4dd8:	97 fd       	sbrc	r25, 7
    4dda:	a0 95       	com	r26
    4ddc:	ba 2f       	mov	r27, r26
    4dde:	84 0f       	add	r24, r20
    4de0:	95 1f       	adc	r25, r21
    4de2:	a6 1f       	adc	r26, r22
    4de4:	b7 1f       	adc	r27, r23
    4de6:	80 93 b2 24 	sts	0x24B2, r24
    4dea:	90 93 b3 24 	sts	0x24B3, r25
    4dee:	a0 93 b4 24 	sts	0x24B4, r26
    4df2:	b0 93 b5 24 	sts	0x24B5, r27

		
	//ako predje ceo krug u pozitivnom smeru  //PROVERI OVO
	if(teta >= krug360)
    4df6:	40 91 7f 32 	lds	r20, 0x327F
    4dfa:	50 91 80 32 	lds	r21, 0x3280
    4dfe:	60 91 81 32 	lds	r22, 0x3281
    4e02:	70 91 82 32 	lds	r23, 0x3282
    4e06:	80 91 71 32 	lds	r24, 0x3271
    4e0a:	90 91 72 32 	lds	r25, 0x3272
    4e0e:	a0 91 73 32 	lds	r26, 0x3273
    4e12:	b0 91 74 32 	lds	r27, 0x3274
    4e16:	48 17       	cp	r20, r24
    4e18:	59 07       	cpc	r21, r25
    4e1a:	6a 07       	cpc	r22, r26
    4e1c:	7b 07       	cpc	r23, r27
    4e1e:	e4 f0       	brlt	.+56     	; 0x4e58 <Racunanje_trenutne_pozicije+0x2b0>
	teta -= krug360;
    4e20:	80 91 7f 32 	lds	r24, 0x327F
    4e24:	90 91 80 32 	lds	r25, 0x3280
    4e28:	a0 91 81 32 	lds	r26, 0x3281
    4e2c:	b0 91 82 32 	lds	r27, 0x3282
    4e30:	40 91 71 32 	lds	r20, 0x3271
    4e34:	50 91 72 32 	lds	r21, 0x3272
    4e38:	60 91 73 32 	lds	r22, 0x3273
    4e3c:	70 91 74 32 	lds	r23, 0x3274
    4e40:	84 1b       	sub	r24, r20
    4e42:	95 0b       	sbc	r25, r21
    4e44:	a6 0b       	sbc	r26, r22
    4e46:	b7 0b       	sbc	r27, r23
    4e48:	80 93 7f 32 	sts	0x327F, r24
    4e4c:	90 93 80 32 	sts	0x3280, r25
    4e50:	a0 93 81 32 	sts	0x3281, r26
    4e54:	b0 93 82 32 	sts	0x3282, r27
		
	//ako predje u negativan smer
	if(teta < 0)
    4e58:	80 91 7f 32 	lds	r24, 0x327F
    4e5c:	90 91 80 32 	lds	r25, 0x3280
    4e60:	a0 91 81 32 	lds	r26, 0x3281
    4e64:	b0 91 82 32 	lds	r27, 0x3282
    4e68:	bb 23       	and	r27, r27
    4e6a:	e4 f4       	brge	.+56     	; 0x4ea4 <Racunanje_trenutne_pozicije+0x2fc>
	teta += krug360;
    4e6c:	40 91 7f 32 	lds	r20, 0x327F
    4e70:	50 91 80 32 	lds	r21, 0x3280
    4e74:	60 91 81 32 	lds	r22, 0x3281
    4e78:	70 91 82 32 	lds	r23, 0x3282
    4e7c:	80 91 71 32 	lds	r24, 0x3271
    4e80:	90 91 72 32 	lds	r25, 0x3272
    4e84:	a0 91 73 32 	lds	r26, 0x3273
    4e88:	b0 91 74 32 	lds	r27, 0x3274
    4e8c:	84 0f       	add	r24, r20
    4e8e:	95 1f       	adc	r25, r21
    4e90:	a6 1f       	adc	r26, r22
    4e92:	b7 1f       	adc	r27, r23
    4e94:	80 93 7f 32 	sts	0x327F, r24
    4e98:	90 93 80 32 	sts	0x3280, r25
    4e9c:	a0 93 81 32 	sts	0x3281, r26
    4ea0:	b0 93 82 32 	sts	0x3282, r27
	
	//racunanje pozicije
	volatile double X_pos_cos, Y_pos_sin;
	X_pos_cos = cos(((double)teta / krug180) * M_PI);
    4ea4:	60 91 7f 32 	lds	r22, 0x327F
    4ea8:	70 91 80 32 	lds	r23, 0x3280
    4eac:	80 91 81 32 	lds	r24, 0x3281
    4eb0:	90 91 82 32 	lds	r25, 0x3282
    4eb4:	c0 90 cb 28 	lds	r12, 0x28CB
    4eb8:	d0 90 cc 28 	lds	r13, 0x28CC
    4ebc:	e0 90 cd 28 	lds	r14, 0x28CD
    4ec0:	f0 90 ce 28 	lds	r15, 0x28CE
    4ec4:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    4ec8:	4b 01       	movw	r8, r22
    4eca:	5c 01       	movw	r10, r24
    4ecc:	c7 01       	movw	r24, r14
    4ece:	b6 01       	movw	r22, r12
    4ed0:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    4ed4:	9b 01       	movw	r18, r22
    4ed6:	ac 01       	movw	r20, r24
    4ed8:	c5 01       	movw	r24, r10
    4eda:	b4 01       	movw	r22, r8
    4edc:	0e 94 bb 34 	call	0x6976	; 0x6976 <__divsf3>
    4ee0:	2b ed       	ldi	r18, 0xDB	; 219
    4ee2:	3f e0       	ldi	r19, 0x0F	; 15
    4ee4:	49 e4       	ldi	r20, 0x49	; 73
    4ee6:	50 e4       	ldi	r21, 0x40	; 64
    4ee8:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    4eec:	0e 94 b8 34 	call	0x6970	; 0x6970 <cos>
    4ef0:	69 83       	std	Y+1, r22	; 0x01
    4ef2:	7a 83       	std	Y+2, r23	; 0x02
    4ef4:	8b 83       	std	Y+3, r24	; 0x03
    4ef6:	9c 83       	std	Y+4, r25	; 0x04
	Y_pos_sin = sin(((double)teta / krug180) * M_PI);
    4ef8:	60 91 7f 32 	lds	r22, 0x327F
    4efc:	70 91 80 32 	lds	r23, 0x3280
    4f00:	80 91 81 32 	lds	r24, 0x3281
    4f04:	90 91 82 32 	lds	r25, 0x3282
    4f08:	c0 90 cb 28 	lds	r12, 0x28CB
    4f0c:	d0 90 cc 28 	lds	r13, 0x28CC
    4f10:	e0 90 cd 28 	lds	r14, 0x28CD
    4f14:	f0 90 ce 28 	lds	r15, 0x28CE
    4f18:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    4f1c:	4b 01       	movw	r8, r22
    4f1e:	5c 01       	movw	r10, r24
    4f20:	c7 01       	movw	r24, r14
    4f22:	b6 01       	movw	r22, r12
    4f24:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    4f28:	9b 01       	movw	r18, r22
    4f2a:	ac 01       	movw	r20, r24
    4f2c:	c5 01       	movw	r24, r10
    4f2e:	b4 01       	movw	r22, r8
    4f30:	0e 94 bb 34 	call	0x6976	; 0x6976 <__divsf3>
    4f34:	2b ed       	ldi	r18, 0xDB	; 219
    4f36:	3f e0       	ldi	r19, 0x0F	; 15
    4f38:	49 e4       	ldi	r20, 0x49	; 73
    4f3a:	50 e4       	ldi	r21, 0x40	; 64
    4f3c:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    4f40:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <sin>
    4f44:	6d 83       	std	Y+5, r22	; 0x05
    4f46:	7e 83       	std	Y+6, r23	; 0x06
    4f48:	8f 83       	std	Y+7, r24	; 0x07
    4f4a:	98 87       	std	Y+8, r25	; 0x08
	X_pos += (int)(((double)translacija_10ms * X_pos_cos));
    4f4c:	60 91 ee 29 	lds	r22, 0x29EE
    4f50:	70 91 ef 29 	lds	r23, 0x29EF
    4f54:	c9 80       	ldd	r12, Y+1	; 0x01
    4f56:	da 80       	ldd	r13, Y+2	; 0x02
    4f58:	eb 80       	ldd	r14, Y+3	; 0x03
    4f5a:	fc 80       	ldd	r15, Y+4	; 0x04
    4f5c:	80 90 1f 2e 	lds	r8, 0x2E1F
    4f60:	90 90 20 2e 	lds	r9, 0x2E20
    4f64:	a0 90 21 2e 	lds	r10, 0x2E21
    4f68:	b0 90 22 2e 	lds	r11, 0x2E22
    4f6c:	88 27       	eor	r24, r24
    4f6e:	77 fd       	sbrc	r23, 7
    4f70:	80 95       	com	r24
    4f72:	98 2f       	mov	r25, r24
    4f74:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    4f78:	a7 01       	movw	r20, r14
    4f7a:	96 01       	movw	r18, r12
    4f7c:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    4f80:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__fixsfsi>
    4f84:	cb 01       	movw	r24, r22
    4f86:	aa 27       	eor	r26, r26
    4f88:	97 fd       	sbrc	r25, 7
    4f8a:	a0 95       	com	r26
    4f8c:	ba 2f       	mov	r27, r26
    4f8e:	88 0e       	add	r8, r24
    4f90:	99 1e       	adc	r9, r25
    4f92:	aa 1e       	adc	r10, r26
    4f94:	bb 1e       	adc	r11, r27
    4f96:	80 92 1f 2e 	sts	0x2E1F, r8
    4f9a:	90 92 20 2e 	sts	0x2E20, r9
    4f9e:	a0 92 21 2e 	sts	0x2E21, r10
    4fa2:	b0 92 22 2e 	sts	0x2E22, r11
	Y_pos += (int)(((double)translacija_10ms * Y_pos_sin));
    4fa6:	60 91 ee 29 	lds	r22, 0x29EE
    4faa:	70 91 ef 29 	lds	r23, 0x29EF
    4fae:	cd 80       	ldd	r12, Y+5	; 0x05
    4fb0:	de 80       	ldd	r13, Y+6	; 0x06
    4fb2:	ef 80       	ldd	r14, Y+7	; 0x07
    4fb4:	f8 84       	ldd	r15, Y+8	; 0x08
    4fb6:	80 90 fe 29 	lds	r8, 0x29FE
    4fba:	90 90 ff 29 	lds	r9, 0x29FF
    4fbe:	a0 90 00 2a 	lds	r10, 0x2A00
    4fc2:	b0 90 01 2a 	lds	r11, 0x2A01
    4fc6:	88 27       	eor	r24, r24
    4fc8:	77 fd       	sbrc	r23, 7
    4fca:	80 95       	com	r24
    4fcc:	98 2f       	mov	r25, r24
    4fce:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    4fd2:	a7 01       	movw	r20, r14
    4fd4:	96 01       	movw	r18, r12
    4fd6:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    4fda:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__fixsfsi>
    4fde:	cb 01       	movw	r24, r22
    4fe0:	aa 27       	eor	r26, r26
    4fe2:	97 fd       	sbrc	r25, 7
    4fe4:	a0 95       	com	r26
    4fe6:	ba 2f       	mov	r27, r26
    4fe8:	88 0e       	add	r8, r24
    4fea:	99 1e       	adc	r9, r25
    4fec:	aa 1e       	adc	r10, r26
    4fee:	bb 1e       	adc	r11, r27
    4ff0:	80 92 fe 29 	sts	0x29FE, r8
    4ff4:	90 92 ff 29 	sts	0x29FF, r9
    4ff8:	a0 92 00 2a 	sts	0x2A00, r10
    4ffc:	b0 92 01 2a 	sts	0x2A01, r11
}
    5000:	28 96       	adiw	r28, 0x08	; 8
    5002:	cd bf       	out	0x3d, r28	; 61
    5004:	de bf       	out	0x3e, r29	; 62
    5006:	df 91       	pop	r29
    5008:	cf 91       	pop	r28
    500a:	ff 90       	pop	r15
    500c:	ef 90       	pop	r14
    500e:	df 90       	pop	r13
    5010:	cf 90       	pop	r12
    5012:	bf 90       	pop	r11
    5014:	af 90       	pop	r10
    5016:	9f 90       	pop	r9
    5018:	8f 90       	pop	r8
    501a:	08 95       	ret

0000501c <Pracenje_pravca>:

void Pracenje_pravca(void) 
{
    501c:	4f 92       	push	r4
    501e:	5f 92       	push	r5
    5020:	6f 92       	push	r6
    5022:	7f 92       	push	r7
    5024:	8f 92       	push	r8
    5026:	9f 92       	push	r9
    5028:	af 92       	push	r10
    502a:	bf 92       	push	r11
    502c:	cf 92       	push	r12
    502e:	df 92       	push	r13
    5030:	ef 92       	push	r14
    5032:	ff 92       	push	r15
    5034:	0f 93       	push	r16
    5036:	1f 93       	push	r17
    5038:	cf 93       	push	r28
    503a:	df 93       	push	r29
	//Ulaz X_cilj i Y_cilj
	//Izlaz je teta_cilj i rastojanje_cilj
	double XY_zbir, teta_razlika, teta_cilj_radian;
	
	//ako stignu nove zadate koordinate
	if (X_cilj_stari != X_cilj || Y_cilj_stari != Y_cilj)	
    503c:	40 91 2d 2e 	lds	r20, 0x2E2D
    5040:	50 91 2e 2e 	lds	r21, 0x2E2E
    5044:	60 91 2f 2e 	lds	r22, 0x2E2F
    5048:	70 91 30 2e 	lds	r23, 0x2E30
    504c:	80 91 ac 24 	lds	r24, 0x24AC
    5050:	90 91 ad 24 	lds	r25, 0x24AD
    5054:	a0 91 ae 24 	lds	r26, 0x24AE
    5058:	b0 91 af 24 	lds	r27, 0x24AF
    505c:	48 17       	cp	r20, r24
    505e:	59 07       	cpc	r21, r25
    5060:	6a 07       	cpc	r22, r26
    5062:	7b 07       	cpc	r23, r27
    5064:	a9 f4       	brne	.+42     	; 0x5090 <Pracenje_pravca+0x74>
    5066:	40 91 6c 2e 	lds	r20, 0x2E6C
    506a:	50 91 6d 2e 	lds	r21, 0x2E6D
    506e:	60 91 6e 2e 	lds	r22, 0x2E6E
    5072:	70 91 6f 2e 	lds	r23, 0x2E6F
    5076:	80 91 07 2e 	lds	r24, 0x2E07
    507a:	90 91 08 2e 	lds	r25, 0x2E08
    507e:	a0 91 09 2e 	lds	r26, 0x2E09
    5082:	b0 91 0a 2e 	lds	r27, 0x2E0A
    5086:	48 17       	cp	r20, r24
    5088:	59 07       	cpc	r21, r25
    508a:	6a 07       	cpc	r22, r26
    508c:	7b 07       	cpc	r23, r27
    508e:	71 f0       	breq	.+28     	; 0x50ac <Pracenje_pravca+0x90>
	{
		rezervni_ugao = krug45;	//precizno se pozicioniramo u mestu
    5090:	80 91 c4 24 	lds	r24, 0x24C4
    5094:	90 91 c5 24 	lds	r25, 0x24C5
    5098:	a0 91 c6 24 	lds	r26, 0x24C6
    509c:	b0 91 c7 24 	lds	r27, 0x24C7
    50a0:	80 93 2b 2e 	sts	0x2E2B, r24
    50a4:	90 93 2c 2e 	sts	0x2E2C, r25
		stigao_flag = 0;
    50a8:	10 92 06 20 	sts	0x2006, r1
	}
	X_cilj_stari = X_cilj;
    50ac:	80 91 ac 24 	lds	r24, 0x24AC
    50b0:	90 91 ad 24 	lds	r25, 0x24AD
    50b4:	a0 91 ae 24 	lds	r26, 0x24AE
    50b8:	b0 91 af 24 	lds	r27, 0x24AF
    50bc:	80 93 2d 2e 	sts	0x2E2D, r24
    50c0:	90 93 2e 2e 	sts	0x2E2E, r25
    50c4:	a0 93 2f 2e 	sts	0x2E2F, r26
    50c8:	b0 93 30 2e 	sts	0x2E30, r27
	Y_cilj_stari = Y_cilj;
    50cc:	80 91 07 2e 	lds	r24, 0x2E07
    50d0:	90 91 08 2e 	lds	r25, 0x2E08
    50d4:	a0 91 09 2e 	lds	r26, 0x2E09
    50d8:	b0 91 0a 2e 	lds	r27, 0x2E0A
    50dc:	80 93 6c 2e 	sts	0x2E6C, r24
    50e0:	90 93 6d 2e 	sts	0x2E6D, r25
    50e4:	a0 93 6e 2e 	sts	0x2E6E, r26
    50e8:	b0 93 6f 2e 	sts	0x2E6F, r27
	
	double X_razlika, Y_razlika;
	X_razlika = (X_cilj - X_pos);
    50ec:	40 91 ac 24 	lds	r20, 0x24AC
    50f0:	50 91 ad 24 	lds	r21, 0x24AD
    50f4:	60 91 ae 24 	lds	r22, 0x24AE
    50f8:	70 91 af 24 	lds	r23, 0x24AF
    50fc:	80 91 1f 2e 	lds	r24, 0x2E1F
    5100:	90 91 20 2e 	lds	r25, 0x2E20
    5104:	a0 91 21 2e 	lds	r26, 0x2E21
    5108:	b0 91 22 2e 	lds	r27, 0x2E22
    510c:	8a 01       	movw	r16, r20
    510e:	9b 01       	movw	r18, r22
    5110:	08 1b       	sub	r16, r24
    5112:	19 0b       	sbc	r17, r25
    5114:	2a 0b       	sbc	r18, r26
    5116:	3b 0b       	sbc	r19, r27
    5118:	c9 01       	movw	r24, r18
    511a:	b8 01       	movw	r22, r16
    511c:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    5120:	c6 2e       	mov	r12, r22
    5122:	d7 2e       	mov	r13, r23
    5124:	e8 2e       	mov	r14, r24
    5126:	f9 2e       	mov	r15, r25
	Y_razlika = (Y_cilj - Y_pos);
    5128:	40 91 07 2e 	lds	r20, 0x2E07
    512c:	50 91 08 2e 	lds	r21, 0x2E08
    5130:	60 91 09 2e 	lds	r22, 0x2E09
    5134:	70 91 0a 2e 	lds	r23, 0x2E0A
    5138:	80 91 fe 29 	lds	r24, 0x29FE
    513c:	90 91 ff 29 	lds	r25, 0x29FF
    5140:	a0 91 00 2a 	lds	r26, 0x2A00
    5144:	b0 91 01 2a 	lds	r27, 0x2A01
    5148:	8a 01       	movw	r16, r20
    514a:	9b 01       	movw	r18, r22
    514c:	08 1b       	sub	r16, r24
    514e:	19 0b       	sbc	r17, r25
    5150:	2a 0b       	sbc	r18, r26
    5152:	3b 0b       	sbc	r19, r27
    5154:	c9 01       	movw	r24, r18
    5156:	b8 01       	movw	r22, r16
    5158:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    515c:	06 2f       	mov	r16, r22
    515e:	17 2f       	mov	r17, r23
    5160:	d8 2f       	mov	r29, r24
    5162:	c9 2f       	mov	r28, r25
	X_razlika *= X_razlika;
    5164:	2c 2d       	mov	r18, r12
    5166:	3d 2d       	mov	r19, r13
    5168:	4e 2d       	mov	r20, r14
    516a:	5f 2d       	mov	r21, r15
    516c:	6c 2d       	mov	r22, r12
    516e:	7d 2d       	mov	r23, r13
    5170:	8e 2d       	mov	r24, r14
    5172:	9f 2d       	mov	r25, r15
    5174:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    5178:	6b 01       	movw	r12, r22
    517a:	7c 01       	movw	r14, r24
	Y_razlika *= Y_razlika;
    517c:	20 2f       	mov	r18, r16
    517e:	31 2f       	mov	r19, r17
    5180:	4d 2f       	mov	r20, r29
    5182:	5c 2f       	mov	r21, r28
    5184:	60 2f       	mov	r22, r16
    5186:	71 2f       	mov	r23, r17
    5188:	8d 2f       	mov	r24, r29
    518a:	9c 2f       	mov	r25, r28
    518c:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    5190:	9b 01       	movw	r18, r22
    5192:	ac 01       	movw	r20, r24
	
	XY_zbir = X_razlika + Y_razlika;
    5194:	c7 01       	movw	r24, r14
    5196:	b6 01       	movw	r22, r12
    5198:	0e 94 ee 33 	call	0x67dc	; 0x67dc <__addsf3>
	rastojanje_cilj_temp = sqrt(XY_zbir);
    519c:	0e 94 dc 36 	call	0x6db8	; 0x6db8 <sqrt>
    51a0:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__fixsfsi>
    51a4:	60 93 0e 2e 	sts	0x2E0E, r22
    51a8:	70 93 0f 2e 	sts	0x2E0F, r23
    51ac:	80 93 10 2e 	sts	0x2E10, r24
    51b0:	90 93 11 2e 	sts	0x2E11, r25
	
	//ako je veca preostala distanca veca od 10 cm onda se radi korrekcija
	if(rastojanje_cilj_temp > (metar / 10))  // metar/12
    51b4:	60 91 cf 24 	lds	r22, 0x24CF
    51b8:	70 91 d0 24 	lds	r23, 0x24D0
    51bc:	80 91 d1 24 	lds	r24, 0x24D1
    51c0:	90 91 d2 24 	lds	r25, 0x24D2
    51c4:	c0 90 0e 2e 	lds	r12, 0x2E0E
    51c8:	d0 90 0f 2e 	lds	r13, 0x2E0F
    51cc:	e0 90 10 2e 	lds	r14, 0x2E10
    51d0:	f0 90 11 2e 	lds	r15, 0x2E11
    51d4:	2a e0       	ldi	r18, 0x0A	; 10
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	40 e0       	ldi	r20, 0x00	; 0
    51da:	50 e0       	ldi	r21, 0x00	; 0
    51dc:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    51e0:	2c 15       	cp	r18, r12
    51e2:	3d 05       	cpc	r19, r13
    51e4:	4e 05       	cpc	r20, r14
    51e6:	5f 05       	cpc	r21, r15
    51e8:	0c f0       	brlt	.+2      	; 0x51ec <Pracenje_pravca+0x1d0>
    51ea:	40 c1       	rjmp	.+640    	; 0x546c <Pracenje_pravca+0x450>
	{
		rastojanje_cilj = rastojanje_cilj_temp;
    51ec:	80 91 0e 2e 	lds	r24, 0x2E0E
    51f0:	90 91 0f 2e 	lds	r25, 0x2E0F
    51f4:	a0 91 10 2e 	lds	r26, 0x2E10
    51f8:	b0 91 11 2e 	lds	r27, 0x2E11
    51fc:	80 93 65 2e 	sts	0x2E65, r24
    5200:	90 93 66 2e 	sts	0x2E66, r25
    5204:	a0 93 67 2e 	sts	0x2E67, r26
    5208:	b0 93 68 2e 	sts	0x2E68, r27
		translacija = 0;
    520c:	10 92 b2 24 	sts	0x24B2, r1
    5210:	10 92 b3 24 	sts	0x24B3, r1
    5214:	10 92 b4 24 	sts	0x24B4, r1
    5218:	10 92 b5 24 	sts	0x24B5, r1
		vreme_pozicioniranja = 0;
    521c:	10 92 58 2e 	sts	0x2E58, r1
    5220:	10 92 59 2e 	sts	0x2E59, r1
		stigao_flag = 0;
    5224:	10 92 06 20 	sts	0x2006, r1
		
		X_razlika = (X_cilj - X_pos);
    5228:	40 91 ac 24 	lds	r20, 0x24AC
    522c:	50 91 ad 24 	lds	r21, 0x24AD
    5230:	60 91 ae 24 	lds	r22, 0x24AE
    5234:	70 91 af 24 	lds	r23, 0x24AF
    5238:	80 91 1f 2e 	lds	r24, 0x2E1F
    523c:	90 91 20 2e 	lds	r25, 0x2E20
    5240:	a0 91 21 2e 	lds	r26, 0x2E21
    5244:	b0 91 22 2e 	lds	r27, 0x2E22
		Y_razlika = (Y_cilj - Y_pos);
    5248:	40 90 07 2e 	lds	r4, 0x2E07
    524c:	50 90 08 2e 	lds	r5, 0x2E08
    5250:	60 90 09 2e 	lds	r6, 0x2E09
    5254:	70 90 0a 2e 	lds	r7, 0x2E0A
    5258:	80 90 fe 29 	lds	r8, 0x29FE
    525c:	90 90 ff 29 	lds	r9, 0x29FF
    5260:	a0 90 00 2a 	lds	r10, 0x2A00
    5264:	b0 90 01 2a 	lds	r11, 0x2A01
		rastojanje_cilj = rastojanje_cilj_temp;
		translacija = 0;
		vreme_pozicioniranja = 0;
		stigao_flag = 0;
		
		X_razlika = (X_cilj - X_pos);
    5268:	8a 01       	movw	r16, r20
    526a:	9b 01       	movw	r18, r22
    526c:	08 1b       	sub	r16, r24
    526e:	19 0b       	sbc	r17, r25
    5270:	2a 0b       	sbc	r18, r26
    5272:	3b 0b       	sbc	r19, r27
    5274:	c9 01       	movw	r24, r18
    5276:	b8 01       	movw	r22, r16
    5278:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    527c:	6b 01       	movw	r12, r22
    527e:	7c 01       	movw	r14, r24
		Y_razlika = (Y_cilj - Y_pos);
    5280:	c3 01       	movw	r24, r6
    5282:	b2 01       	movw	r22, r4
    5284:	68 19       	sub	r22, r8
    5286:	79 09       	sbc	r23, r9
    5288:	8a 09       	sbc	r24, r10
    528a:	9b 09       	sbc	r25, r11
    528c:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
		teta_cilj_radian = atan2((double)(Y_razlika), (double)(X_razlika));
    5290:	a7 01       	movw	r20, r14
    5292:	96 01       	movw	r18, r12
    5294:	0e 94 61 34 	call	0x68c2	; 0x68c2 <atan2>
    5298:	6b 01       	movw	r12, r22
    529a:	7c 01       	movw	r14, r24
		
		teta_cilj = (signed long)((teta_cilj_radian * krug180) / M_PI);
    529c:	60 91 cb 28 	lds	r22, 0x28CB
    52a0:	70 91 cc 28 	lds	r23, 0x28CC
    52a4:	80 91 cd 28 	lds	r24, 0x28CD
    52a8:	90 91 ce 28 	lds	r25, 0x28CE
    52ac:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    52b0:	a7 01       	movw	r20, r14
    52b2:	96 01       	movw	r18, r12
    52b4:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    52b8:	2b ed       	ldi	r18, 0xDB	; 219
    52ba:	3f e0       	ldi	r19, 0x0F	; 15
    52bc:	49 e4       	ldi	r20, 0x49	; 73
    52be:	50 e4       	ldi	r21, 0x40	; 64
    52c0:	0e 94 bb 34 	call	0x6976	; 0x6976 <__divsf3>
    52c4:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__fixsfsi>
    52c8:	60 93 c8 24 	sts	0x24C8, r22
    52cc:	70 93 c9 24 	sts	0x24C9, r23
    52d0:	80 93 ca 24 	sts	0x24CA, r24
    52d4:	90 93 cb 24 	sts	0x24CB, r25
		
		//Za automatsko kontanje rikverca po uglu
		if((smer_zadati) == 0)	//Sam bira smer
    52d8:	80 91 5a 29 	lds	r24, 0x295A
    52dc:	81 11       	cpse	r24, r1
    52de:	73 c0       	rjmp	.+230    	; 0x53c6 <Pracenje_pravca+0x3aa>
		{
			teta_razlika = teta - teta_cilj;
    52e0:	40 91 7f 32 	lds	r20, 0x327F
    52e4:	50 91 80 32 	lds	r21, 0x3280
    52e8:	60 91 81 32 	lds	r22, 0x3281
    52ec:	70 91 82 32 	lds	r23, 0x3282
    52f0:	80 91 c8 24 	lds	r24, 0x24C8
    52f4:	90 91 c9 24 	lds	r25, 0x24C9
    52f8:	a0 91 ca 24 	lds	r26, 0x24CA
    52fc:	b0 91 cb 24 	lds	r27, 0x24CB
    5300:	8a 01       	movw	r16, r20
    5302:	9b 01       	movw	r18, r22
    5304:	08 1b       	sub	r16, r24
    5306:	19 0b       	sbc	r17, r25
    5308:	2a 0b       	sbc	r18, r26
    530a:	3b 0b       	sbc	r19, r27
    530c:	c9 01       	movw	r24, r18
    530e:	b8 01       	movw	r22, r16
    5310:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    5314:	06 2f       	mov	r16, r22
    5316:	17 2f       	mov	r17, r23
    5318:	d8 2f       	mov	r29, r24
    531a:	c9 2f       	mov	r28, r25
			if(teta_razlika > (krug90) || teta_razlika < (-krug90))
    531c:	60 91 7a 2e 	lds	r22, 0x2E7A
    5320:	70 91 7b 2e 	lds	r23, 0x2E7B
    5324:	80 91 7c 2e 	lds	r24, 0x2E7C
    5328:	90 91 7d 2e 	lds	r25, 0x2E7D
    532c:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    5330:	9b 01       	movw	r18, r22
    5332:	ac 01       	movw	r20, r24
    5334:	60 2f       	mov	r22, r16
    5336:	71 2f       	mov	r23, r17
    5338:	8d 2f       	mov	r24, r29
    533a:	9c 2f       	mov	r25, r28
    533c:	0e 94 64 36 	call	0x6cc8	; 0x6cc8 <__gesf2>
    5340:	18 16       	cp	r1, r24
    5342:	ec f0       	brlt	.+58     	; 0x537e <Pracenje_pravca+0x362>
    5344:	80 91 7a 2e 	lds	r24, 0x2E7A
    5348:	90 91 7b 2e 	lds	r25, 0x2E7B
    534c:	a0 91 7c 2e 	lds	r26, 0x2E7C
    5350:	b0 91 7d 2e 	lds	r27, 0x2E7D
    5354:	9c 01       	movw	r18, r24
    5356:	ad 01       	movw	r20, r26
    5358:	66 27       	eor	r22, r22
    535a:	77 27       	eor	r23, r23
    535c:	cb 01       	movw	r24, r22
    535e:	62 1b       	sub	r22, r18
    5360:	73 0b       	sbc	r23, r19
    5362:	84 0b       	sbc	r24, r20
    5364:	95 0b       	sbc	r25, r21
    5366:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    536a:	9b 01       	movw	r18, r22
    536c:	ac 01       	movw	r20, r24
    536e:	60 2f       	mov	r22, r16
    5370:	71 2f       	mov	r23, r17
    5372:	8d 2f       	mov	r24, r29
    5374:	9c 2f       	mov	r25, r28
    5376:	0e 94 b4 34 	call	0x6968	; 0x6968 <__cmpsf2>
    537a:	88 23       	and	r24, r24
    537c:	04 f5       	brge	.+64     	; 0x53be <Pracenje_pravca+0x3a2>
			{
				smer_trenutni = -1;
    537e:	8f ef       	ldi	r24, 0xFF	; 255
    5380:	80 93 74 2e 	sts	0x2E74, r24
				teta_cilj -= krug180;
    5384:	80 91 c8 24 	lds	r24, 0x24C8
    5388:	90 91 c9 24 	lds	r25, 0x24C9
    538c:	a0 91 ca 24 	lds	r26, 0x24CA
    5390:	b0 91 cb 24 	lds	r27, 0x24CB
    5394:	40 91 cb 28 	lds	r20, 0x28CB
    5398:	50 91 cc 28 	lds	r21, 0x28CC
    539c:	60 91 cd 28 	lds	r22, 0x28CD
    53a0:	70 91 ce 28 	lds	r23, 0x28CE
    53a4:	84 1b       	sub	r24, r20
    53a6:	95 0b       	sbc	r25, r21
    53a8:	a6 0b       	sbc	r26, r22
    53aa:	b7 0b       	sbc	r27, r23
    53ac:	80 93 c8 24 	sts	0x24C8, r24
    53b0:	90 93 c9 24 	sts	0x24C9, r25
    53b4:	a0 93 ca 24 	sts	0x24CA, r26
    53b8:	b0 93 cb 24 	sts	0x24CB, r27
    53bc:	2f c0       	rjmp	.+94     	; 0x541c <Pracenje_pravca+0x400>
			}	
			else
			{
				smer_trenutni = 1;
    53be:	81 e0       	ldi	r24, 0x01	; 1
    53c0:	80 93 74 2e 	sts	0x2E74, r24
    53c4:	2b c0       	rjmp	.+86     	; 0x541c <Pracenje_pravca+0x400>
			}
		}
		else if(smer_zadati == 1)	//Samo napred
    53c6:	80 91 5a 29 	lds	r24, 0x295A
    53ca:	81 30       	cpi	r24, 0x01	; 1
    53cc:	21 f4       	brne	.+8      	; 0x53d6 <Pracenje_pravca+0x3ba>
		{
			smer_trenutni = -1; //1
    53ce:	8f ef       	ldi	r24, 0xFF	; 255
    53d0:	80 93 74 2e 	sts	0x2E74, r24
    53d4:	23 c0       	rjmp	.+70     	; 0x541c <Pracenje_pravca+0x400>
		}
		else if(smer_zadati == 2)	//Samo nazad
    53d6:	80 91 5a 29 	lds	r24, 0x295A
    53da:	82 30       	cpi	r24, 0x02	; 2
    53dc:	f9 f4       	brne	.+62     	; 0x541c <Pracenje_pravca+0x400>
		{
			smer_trenutni = 1; //-1
    53de:	81 e0       	ldi	r24, 0x01	; 1
    53e0:	80 93 74 2e 	sts	0x2E74, r24
			teta_cilj -= krug180;
    53e4:	80 91 c8 24 	lds	r24, 0x24C8
    53e8:	90 91 c9 24 	lds	r25, 0x24C9
    53ec:	a0 91 ca 24 	lds	r26, 0x24CA
    53f0:	b0 91 cb 24 	lds	r27, 0x24CB
    53f4:	40 91 cb 28 	lds	r20, 0x28CB
    53f8:	50 91 cc 28 	lds	r21, 0x28CC
    53fc:	60 91 cd 28 	lds	r22, 0x28CD
    5400:	70 91 ce 28 	lds	r23, 0x28CE
    5404:	84 1b       	sub	r24, r20
    5406:	95 0b       	sbc	r25, r21
    5408:	a6 0b       	sbc	r26, r22
    540a:	b7 0b       	sbc	r27, r23
    540c:	80 93 c8 24 	sts	0x24C8, r24
    5410:	90 93 c9 24 	sts	0x24C9, r25
    5414:	a0 93 ca 24 	sts	0x24CA, r26
    5418:	b0 93 cb 24 	sts	0x24CB, r27
		}
	
		if(teta_cilj < 0)
    541c:	80 91 c8 24 	lds	r24, 0x24C8
    5420:	90 91 c9 24 	lds	r25, 0x24C9
    5424:	a0 91 ca 24 	lds	r26, 0x24CA
    5428:	b0 91 cb 24 	lds	r27, 0x24CB
    542c:	bb 23       	and	r27, r27
    542e:	0c f0       	brlt	.+2      	; 0x5432 <Pracenje_pravca+0x416>
    5430:	53 c0       	rjmp	.+166    	; 0x54d8 <Pracenje_pravca+0x4bc>
			teta_cilj += krug360;
    5432:	40 91 c8 24 	lds	r20, 0x24C8
    5436:	50 91 c9 24 	lds	r21, 0x24C9
    543a:	60 91 ca 24 	lds	r22, 0x24CA
    543e:	70 91 cb 24 	lds	r23, 0x24CB
    5442:	80 91 71 32 	lds	r24, 0x3271
    5446:	90 91 72 32 	lds	r25, 0x3272
    544a:	a0 91 73 32 	lds	r26, 0x3273
    544e:	b0 91 74 32 	lds	r27, 0x3274
    5452:	84 0f       	add	r24, r20
    5454:	95 1f       	adc	r25, r21
    5456:	a6 1f       	adc	r26, r22
    5458:	b7 1f       	adc	r27, r23
    545a:	80 93 c8 24 	sts	0x24C8, r24
    545e:	90 93 c9 24 	sts	0x24C9, r25
    5462:	a0 93 ca 24 	sts	0x24CA, r26
    5466:	b0 93 cb 24 	sts	0x24CB, r27
    546a:	36 c0       	rjmp	.+108    	; 0x54d8 <Pracenje_pravca+0x4bc>
	}
	else if (vreme_pozicioniranja >= 300)	//stigli smo do cilja
    546c:	80 91 58 2e 	lds	r24, 0x2E58
    5470:	90 91 59 2e 	lds	r25, 0x2E59
    5474:	8c 32       	cpi	r24, 0x2C	; 44
    5476:	91 40       	sbci	r25, 0x01	; 1
    5478:	78 f1       	brcs	.+94     	; 0x54d8 <Pracenje_pravca+0x4bc>
	{
		if (stigao_flag == 0)
    547a:	80 91 06 20 	lds	r24, 0x2006
    547e:	81 11       	cpse	r24, r1
    5480:	03 c0       	rjmp	.+6      	; 0x5488 <Pracenje_pravca+0x46c>
		{
			stigao_flag = 1;
    5482:	81 e0       	ldi	r24, 0x01	; 1
    5484:	80 93 06 20 	sts	0x2006, r24
//  			USART_TXBuffer_PutByte(&USART_E1_data, 79);	//O
//  			USART_TXBuffer_PutByte(&USART_E1_data, 75);	//K
//  			USART_TXBuffer_PutByte(&USART_E1_data, 33);	//!
		}
		
		if (teta_cilj_final != 0xFFFFFFFF)	//ako treba zauzmemo krajnji ugao
    5488:	80 91 00 20 	lds	r24, 0x2000
    548c:	90 91 01 20 	lds	r25, 0x2001
    5490:	a0 91 02 20 	lds	r26, 0x2002
    5494:	b0 91 03 20 	lds	r27, 0x2003
    5498:	8f 3f       	cpi	r24, 0xFF	; 255
    549a:	9f 4f       	sbci	r25, 0xFF	; 255
    549c:	af 4f       	sbci	r26, 0xFF	; 255
    549e:	bf 4f       	sbci	r27, 0xFF	; 255
    54a0:	d9 f0       	breq	.+54     	; 0x54d8 <Pracenje_pravca+0x4bc>
		{
			teta_cilj = teta_cilj_final;
    54a2:	80 91 00 20 	lds	r24, 0x2000
    54a6:	90 91 01 20 	lds	r25, 0x2001
    54aa:	a0 91 02 20 	lds	r26, 0x2002
    54ae:	b0 91 03 20 	lds	r27, 0x2003
    54b2:	80 93 c8 24 	sts	0x24C8, r24
    54b6:	90 93 c9 24 	sts	0x24C9, r25
    54ba:	a0 93 ca 24 	sts	0x24CA, r26
    54be:	b0 93 cb 24 	sts	0x24CB, r27
			teta_cilj_final = 0xFFFFFFFF;	//postavlja se na FF, da sledeci put ne bi se izvrsavao
    54c2:	8f ef       	ldi	r24, 0xFF	; 255
    54c4:	9f ef       	ldi	r25, 0xFF	; 255
    54c6:	dc 01       	movw	r26, r24
    54c8:	80 93 00 20 	sts	0x2000, r24
    54cc:	90 93 01 20 	sts	0x2001, r25
    54d0:	a0 93 02 20 	sts	0x2002, r26
    54d4:	b0 93 03 20 	sts	0x2003, r27
		}		
	}
}
    54d8:	df 91       	pop	r29
    54da:	cf 91       	pop	r28
    54dc:	1f 91       	pop	r17
    54de:	0f 91       	pop	r16
    54e0:	ff 90       	pop	r15
    54e2:	ef 90       	pop	r14
    54e4:	df 90       	pop	r13
    54e6:	cf 90       	pop	r12
    54e8:	bf 90       	pop	r11
    54ea:	af 90       	pop	r10
    54ec:	9f 90       	pop	r9
    54ee:	8f 90       	pop	r8
    54f0:	7f 90       	pop	r7
    54f2:	6f 90       	pop	r6
    54f4:	5f 90       	pop	r5
    54f6:	4f 90       	pop	r4
    54f8:	08 95       	ret

000054fa <PID_pravolinijski>:

void PID_pravolinijski(void)
{	
    54fa:	4f 92       	push	r4
    54fc:	5f 92       	push	r5
    54fe:	6f 92       	push	r6
    5500:	7f 92       	push	r7
    5502:	8f 92       	push	r8
    5504:	9f 92       	push	r9
    5506:	af 92       	push	r10
    5508:	bf 92       	push	r11
    550a:	cf 92       	push	r12
    550c:	df 92       	push	r13
    550e:	ef 92       	push	r14
    5510:	ff 92       	push	r15
    5512:	0f 93       	push	r16
    5514:	1f 93       	push	r17
    5516:	cf 93       	push	r28
    5518:	df 93       	push	r29
    551a:	cd b7       	in	r28, 0x3d	; 61
    551c:	de b7       	in	r29, 0x3e	; 62
    551e:	2c 97       	sbiw	r28, 0x0c	; 12
    5520:	cd bf       	out	0x3d, r28	; 61
    5522:	de bf       	out	0x3e, r29	; 62
	pozicija_greska = rastojanje_cilj * smer_trenutni - translacija;
    5524:	a0 91 74 2e 	lds	r26, 0x2E74
    5528:	20 91 65 2e 	lds	r18, 0x2E65
    552c:	30 91 66 2e 	lds	r19, 0x2E66
    5530:	40 91 67 2e 	lds	r20, 0x2E67
    5534:	50 91 68 2e 	lds	r21, 0x2E68
    5538:	c0 90 b2 24 	lds	r12, 0x24B2
    553c:	d0 90 b3 24 	lds	r13, 0x24B3
    5540:	e0 90 b4 24 	lds	r14, 0x24B4
    5544:	f0 90 b5 24 	lds	r15, 0x24B5
    5548:	bb 27       	eor	r27, r27
    554a:	a7 fd       	sbrc	r26, 7
    554c:	b0 95       	com	r27
    554e:	0e 94 8a 37 	call	0x6f14	; 0x6f14 <__mulshisi3>
    5552:	dc 01       	movw	r26, r24
    5554:	cb 01       	movw	r24, r22
    5556:	8c 19       	sub	r24, r12
    5558:	9d 09       	sbc	r25, r13
    555a:	ae 09       	sbc	r26, r14
    555c:	bf 09       	sbc	r27, r15
    555e:	80 93 48 2e 	sts	0x2E48, r24
    5562:	90 93 49 2e 	sts	0x2E49, r25
    5566:	a0 93 4a 2e 	sts	0x2E4A, r26
    556a:	b0 93 4b 2e 	sts	0x2E4B, r27
	dif_error_pravolinijski = PID_pozicija - PID_pozicija_pret;	
    556e:	80 91 fa 29 	lds	r24, 0x29FA
    5572:	90 91 fb 29 	lds	r25, 0x29FB
    5576:	a0 91 fc 29 	lds	r26, 0x29FC
    557a:	b0 91 fd 29 	lds	r27, 0x29FD
    557e:	40 91 c7 28 	lds	r20, 0x28C7
    5582:	50 91 c8 28 	lds	r21, 0x28C8
    5586:	60 91 c9 28 	lds	r22, 0x28C9
    558a:	70 91 ca 28 	lds	r23, 0x28CA
    558e:	84 1b       	sub	r24, r20
    5590:	95 0b       	sbc	r25, r21
    5592:	a6 0b       	sbc	r26, r22
    5594:	b7 0b       	sbc	r27, r23
    5596:	80 93 ef 2d 	sts	0x2DEF, r24
    559a:	90 93 f0 2d 	sts	0x2DF0, r25
    559e:	a0 93 f1 2d 	sts	0x2DF1, r26
    55a2:	b0 93 f2 2d 	sts	0x2DF2, r27
	pozicija_greska_sum += pozicija_greska;
    55a6:	40 91 fe 2d 	lds	r20, 0x2DFE
    55aa:	50 91 ff 2d 	lds	r21, 0x2DFF
    55ae:	60 91 00 2e 	lds	r22, 0x2E00
    55b2:	70 91 01 2e 	lds	r23, 0x2E01
    55b6:	80 91 48 2e 	lds	r24, 0x2E48
    55ba:	90 91 49 2e 	lds	r25, 0x2E49
    55be:	a0 91 4a 2e 	lds	r26, 0x2E4A
    55c2:	b0 91 4b 2e 	lds	r27, 0x2E4B
    55c6:	84 0f       	add	r24, r20
    55c8:	95 1f       	adc	r25, r21
    55ca:	a6 1f       	adc	r26, r22
    55cc:	b7 1f       	adc	r27, r23
    55ce:	80 93 fe 2d 	sts	0x2DFE, r24
    55d2:	90 93 ff 2d 	sts	0x2DFF, r25
    55d6:	a0 93 00 2e 	sts	0x2E00, r26
    55da:	b0 93 01 2e 	sts	0x2E01, r27
	
	//anti wind-up
	if(pozicija_greska_sum > 200)
    55de:	80 91 fe 2d 	lds	r24, 0x2DFE
    55e2:	90 91 ff 2d 	lds	r25, 0x2DFF
    55e6:	a0 91 00 2e 	lds	r26, 0x2E00
    55ea:	b0 91 01 2e 	lds	r27, 0x2E01
    55ee:	89 3c       	cpi	r24, 0xC9	; 201
    55f0:	91 05       	cpc	r25, r1
    55f2:	a1 05       	cpc	r26, r1
    55f4:	b1 05       	cpc	r27, r1
    55f6:	6c f0       	brlt	.+26     	; 0x5612 <PID_pravolinijski+0x118>
		pozicija_greska_sum = 200;
    55f8:	88 ec       	ldi	r24, 0xC8	; 200
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	a0 e0       	ldi	r26, 0x00	; 0
    55fe:	b0 e0       	ldi	r27, 0x00	; 0
    5600:	80 93 fe 2d 	sts	0x2DFE, r24
    5604:	90 93 ff 2d 	sts	0x2DFF, r25
    5608:	a0 93 00 2e 	sts	0x2E00, r26
    560c:	b0 93 01 2e 	sts	0x2E01, r27
    5610:	19 c0       	rjmp	.+50     	; 0x5644 <PID_pravolinijski+0x14a>
	else if(pozicija_greska_sum < -200)
    5612:	80 91 fe 2d 	lds	r24, 0x2DFE
    5616:	90 91 ff 2d 	lds	r25, 0x2DFF
    561a:	a0 91 00 2e 	lds	r26, 0x2E00
    561e:	b0 91 01 2e 	lds	r27, 0x2E01
    5622:	88 33       	cpi	r24, 0x38	; 56
    5624:	9f 4f       	sbci	r25, 0xFF	; 255
    5626:	af 4f       	sbci	r26, 0xFF	; 255
    5628:	bf 4f       	sbci	r27, 0xFF	; 255
    562a:	64 f4       	brge	.+24     	; 0x5644 <PID_pravolinijski+0x14a>
		pozicija_greska_sum = -200;
    562c:	88 e3       	ldi	r24, 0x38	; 56
    562e:	9f ef       	ldi	r25, 0xFF	; 255
    5630:	af ef       	ldi	r26, 0xFF	; 255
    5632:	bf ef       	ldi	r27, 0xFF	; 255
    5634:	80 93 fe 2d 	sts	0x2DFE, r24
    5638:	90 93 ff 2d 	sts	0x2DFF, r25
    563c:	a0 93 00 2e 	sts	0x2E00, r26
    5640:	b0 93 01 2e 	sts	0x2E01, r27
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    5644:	60 91 48 2e 	lds	r22, 0x2E48
    5648:	70 91 49 2e 	lds	r23, 0x2E49
    564c:	80 91 4a 2e 	lds	r24, 0x2E4A
    5650:	90 91 4b 2e 	lds	r25, 0x2E4B
    5654:	80 90 66 29 	lds	r8, 0x2966
    5658:	90 90 67 29 	lds	r9, 0x2967
    565c:	a0 90 68 29 	lds	r10, 0x2968
    5660:	b0 90 69 29 	lds	r11, 0x2969
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
    5664:	20 91 ef 2d 	lds	r18, 0x2DEF
    5668:	30 91 f0 2d 	lds	r19, 0x2DF0
    566c:	40 91 f1 2d 	lds	r20, 0x2DF1
    5670:	50 91 f2 2d 	lds	r21, 0x2DF2
    5674:	29 83       	std	Y+1, r18	; 0x01
    5676:	3a 83       	std	Y+2, r19	; 0x02
    5678:	4b 83       	std	Y+3, r20	; 0x03
    567a:	5c 83       	std	Y+4, r21	; 0x04
    567c:	40 90 bb 28 	lds	r4, 0x28BB
    5680:	50 90 bc 28 	lds	r5, 0x28BC
    5684:	60 90 bd 28 	lds	r6, 0x28BD
    5688:	70 90 be 28 	lds	r7, 0x28BE
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
    568c:	c0 90 fe 2d 	lds	r12, 0x2DFE
    5690:	d0 90 ff 2d 	lds	r13, 0x2DFF
    5694:	e0 90 00 2e 	lds	r14, 0x2E00
    5698:	f0 90 01 2e 	lds	r15, 0x2E01
    569c:	20 91 75 32 	lds	r18, 0x3275
    56a0:	30 91 76 32 	lds	r19, 0x3276
    56a4:	40 91 77 32 	lds	r20, 0x3277
    56a8:	50 91 78 32 	lds	r21, 0x3278
    56ac:	2d 83       	std	Y+5, r18	; 0x05
    56ae:	3e 83       	std	Y+6, r19	; 0x06
    56b0:	4f 83       	std	Y+7, r20	; 0x07
    56b2:	58 87       	std	Y+8, r21	; 0x08
					((float)((metar >> 1) / zeljena_pravolinijska_brzina));	
    56b4:	20 91 cf 24 	lds	r18, 0x24CF
    56b8:	30 91 d0 24 	lds	r19, 0x24D0
    56bc:	40 91 d1 24 	lds	r20, 0x24D1
    56c0:	50 91 d2 24 	lds	r21, 0x24D2
    56c4:	29 87       	std	Y+9, r18	; 0x09
    56c6:	3a 87       	std	Y+10, r19	; 0x0a
    56c8:	4b 87       	std	Y+11, r20	; 0x0b
    56ca:	5c 87       	std	Y+12, r21	; 0x0c
    56cc:	00 91 7b 32 	lds	r16, 0x327B
    56d0:	10 91 7c 32 	lds	r17, 0x327C
		pozicija_greska_sum = 200;
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    56d4:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    56d8:	a5 01       	movw	r20, r10
    56da:	94 01       	movw	r18, r8
    56dc:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    56e0:	4b 01       	movw	r8, r22
    56e2:	5c 01       	movw	r10, r24
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
    56e4:	69 81       	ldd	r22, Y+1	; 0x01
    56e6:	7a 81       	ldd	r23, Y+2	; 0x02
    56e8:	8b 81       	ldd	r24, Y+3	; 0x03
    56ea:	9c 81       	ldd	r25, Y+4	; 0x04
    56ec:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    56f0:	a3 01       	movw	r20, r6
    56f2:	92 01       	movw	r18, r4
    56f4:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    56f8:	9b 01       	movw	r18, r22
    56fa:	ac 01       	movw	r20, r24
		pozicija_greska_sum = 200;
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    56fc:	c5 01       	movw	r24, r10
    56fe:	b4 01       	movw	r22, r8
    5700:	0e 94 ee 33 	call	0x67dc	; 0x67dc <__addsf3>
    5704:	4b 01       	movw	r8, r22
    5706:	5c 01       	movw	r10, r24
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
    5708:	c7 01       	movw	r24, r14
    570a:	b6 01       	movw	r22, r12
    570c:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    5710:	2d 81       	ldd	r18, Y+5	; 0x05
    5712:	3e 81       	ldd	r19, Y+6	; 0x06
    5714:	4f 81       	ldd	r20, Y+7	; 0x07
    5716:	58 85       	ldd	r21, Y+8	; 0x08
    5718:	0e 94 6f 36 	call	0x6cde	; 0x6cde <__mulsf3>
    571c:	9b 01       	movw	r18, r22
    571e:	ac 01       	movw	r20, r24
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
    5720:	c5 01       	movw	r24, r10
    5722:	b4 01       	movw	r22, r8
    5724:	0e 94 ee 33 	call	0x67dc	; 0x67dc <__addsf3>
    5728:	6b 01       	movw	r12, r22
    572a:	7c 01       	movw	r14, r24
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
					((float)((metar >> 1) / zeljena_pravolinijska_brzina));	
    572c:	69 85       	ldd	r22, Y+9	; 0x09
    572e:	7a 85       	ldd	r23, Y+10	; 0x0a
    5730:	8b 85       	ldd	r24, Y+11	; 0x0b
    5732:	9c 85       	ldd	r25, Y+12	; 0x0c
    5734:	95 95       	asr	r25
    5736:	87 95       	ror	r24
    5738:	77 95       	ror	r23
    573a:	67 95       	ror	r22
    573c:	98 01       	movw	r18, r16
    573e:	44 27       	eor	r20, r20
    5740:	37 fd       	sbrc	r19, 7
    5742:	40 95       	com	r20
    5744:	54 2f       	mov	r21, r20
    5746:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    574a:	ca 01       	movw	r24, r20
    574c:	b9 01       	movw	r22, r18
    574e:	0e 94 56 35 	call	0x6aac	; 0x6aac <__floatsisf>
    5752:	9b 01       	movw	r18, r22
    5754:	ac 01       	movw	r20, r24
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
    5756:	c7 01       	movw	r24, r14
    5758:	b6 01       	movw	r22, r12
    575a:	0e 94 bb 34 	call	0x6976	; 0x6976 <__divsf3>
		pozicija_greska_sum = 200;
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    575e:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__fixsfsi>
    5762:	60 93 fa 29 	sts	0x29FA, r22
    5766:	70 93 fb 29 	sts	0x29FB, r23
    576a:	80 93 fc 29 	sts	0x29FC, r24
    576e:	90 93 fd 29 	sts	0x29FD, r25
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
					((float)((metar >> 1) / zeljena_pravolinijska_brzina));	

	//ogranicenje
	if(PID_pozicija < -modifikovana_zeljena_pravolinijska_brzina)
    5772:	40 91 b0 24 	lds	r20, 0x24B0
    5776:	50 91 b1 24 	lds	r21, 0x24B1
    577a:	80 91 fa 29 	lds	r24, 0x29FA
    577e:	90 91 fb 29 	lds	r25, 0x29FB
    5782:	a0 91 fc 29 	lds	r26, 0x29FC
    5786:	b0 91 fd 29 	lds	r27, 0x29FD
    578a:	51 95       	neg	r21
    578c:	41 95       	neg	r20
    578e:	51 09       	sbc	r21, r1
    5790:	66 27       	eor	r22, r22
    5792:	57 fd       	sbrc	r21, 7
    5794:	60 95       	com	r22
    5796:	76 2f       	mov	r23, r22
    5798:	84 17       	cp	r24, r20
    579a:	95 07       	cpc	r25, r21
    579c:	a6 07       	cpc	r26, r22
    579e:	b7 07       	cpc	r27, r23
    57a0:	9c f4       	brge	.+38     	; 0x57c8 <PID_pravolinijski+0x2ce>
		PID_pozicija = -modifikovana_zeljena_pravolinijska_brzina;
    57a2:	80 91 b0 24 	lds	r24, 0x24B0
    57a6:	90 91 b1 24 	lds	r25, 0x24B1
    57aa:	91 95       	neg	r25
    57ac:	81 95       	neg	r24
    57ae:	91 09       	sbc	r25, r1
    57b0:	aa 27       	eor	r26, r26
    57b2:	97 fd       	sbrc	r25, 7
    57b4:	a0 95       	com	r26
    57b6:	ba 2f       	mov	r27, r26
    57b8:	80 93 fa 29 	sts	0x29FA, r24
    57bc:	90 93 fb 29 	sts	0x29FB, r25
    57c0:	a0 93 fc 29 	sts	0x29FC, r26
    57c4:	b0 93 fd 29 	sts	0x29FD, r27
	if(PID_pozicija > modifikovana_zeljena_pravolinijska_brzina)
    57c8:	40 91 b0 24 	lds	r20, 0x24B0
    57cc:	50 91 b1 24 	lds	r21, 0x24B1
    57d0:	80 91 fa 29 	lds	r24, 0x29FA
    57d4:	90 91 fb 29 	lds	r25, 0x29FB
    57d8:	a0 91 fc 29 	lds	r26, 0x29FC
    57dc:	b0 91 fd 29 	lds	r27, 0x29FD
    57e0:	66 27       	eor	r22, r22
    57e2:	57 fd       	sbrc	r21, 7
    57e4:	60 95       	com	r22
    57e6:	76 2f       	mov	r23, r22
    57e8:	48 17       	cp	r20, r24
    57ea:	59 07       	cpc	r21, r25
    57ec:	6a 07       	cpc	r22, r26
    57ee:	7b 07       	cpc	r23, r27
    57f0:	84 f4       	brge	.+32     	; 0x5812 <PID_pravolinijski+0x318>
		PID_pozicija = modifikovana_zeljena_pravolinijska_brzina;
    57f2:	80 91 b0 24 	lds	r24, 0x24B0
    57f6:	90 91 b1 24 	lds	r25, 0x24B1
    57fa:	aa 27       	eor	r26, r26
    57fc:	97 fd       	sbrc	r25, 7
    57fe:	a0 95       	com	r26
    5800:	ba 2f       	mov	r27, r26
    5802:	80 93 fa 29 	sts	0x29FA, r24
    5806:	90 93 fb 29 	sts	0x29FB, r25
    580a:	a0 93 fc 29 	sts	0x29FC, r26
    580e:	b0 93 fd 29 	sts	0x29FD, r27
		
	//ubrzavanje po rampi
	if(PID_pozicija < 0)
    5812:	80 91 fa 29 	lds	r24, 0x29FA
    5816:	90 91 fb 29 	lds	r25, 0x29FB
    581a:	a0 91 fc 29 	lds	r26, 0x29FC
    581e:	b0 91 fd 29 	lds	r27, 0x29FD
    5822:	bb 23       	and	r27, r27
    5824:	0c f0       	brlt	.+2      	; 0x5828 <PID_pravolinijski+0x32e>
    5826:	53 c0       	rjmp	.+166    	; 0x58ce <PID_pravolinijski+0x3d4>
	{
		if(PID_pozicija_pret > PID_pozicija)	//UBRZANJE U MINUS
    5828:	40 91 c7 28 	lds	r20, 0x28C7
    582c:	50 91 c8 28 	lds	r21, 0x28C8
    5830:	60 91 c9 28 	lds	r22, 0x28C9
    5834:	70 91 ca 28 	lds	r23, 0x28CA
    5838:	80 91 fa 29 	lds	r24, 0x29FA
    583c:	90 91 fb 29 	lds	r25, 0x29FB
    5840:	a0 91 fc 29 	lds	r26, 0x29FC
    5844:	b0 91 fd 29 	lds	r27, 0x29FD
    5848:	84 17       	cp	r24, r20
    584a:	95 07       	cpc	r25, r21
    584c:	a6 07       	cpc	r26, r22
    584e:	b7 07       	cpc	r27, r23
    5850:	0c f0       	brlt	.+2      	; 0x5854 <PID_pravolinijski+0x35a>
    5852:	8d c0       	rjmp	.+282    	; 0x596e <PID_pravolinijski+0x474>
		{
			if((abs(PID_pozicija) - abs(PID_pozicija_pret)) > Accel_PID_pos)
    5854:	40 91 fa 29 	lds	r20, 0x29FA
    5858:	50 91 fb 29 	lds	r21, 0x29FB
    585c:	60 91 fc 29 	lds	r22, 0x29FC
    5860:	70 91 fd 29 	lds	r23, 0x29FD
    5864:	80 91 c7 28 	lds	r24, 0x28C7
    5868:	90 91 c8 28 	lds	r25, 0x28C8
    586c:	a0 91 c9 28 	lds	r26, 0x28C9
    5870:	b0 91 ca 28 	lds	r27, 0x28CA
    5874:	20 91 cc 24 	lds	r18, 0x24CC
    5878:	30 91 cd 24 	lds	r19, 0x24CD
    587c:	55 23       	and	r21, r21
    587e:	1c f4       	brge	.+6      	; 0x5886 <PID_pravolinijski+0x38c>
    5880:	51 95       	neg	r21
    5882:	41 95       	neg	r20
    5884:	51 09       	sbc	r21, r1
    5886:	99 23       	and	r25, r25
    5888:	1c f4       	brge	.+6      	; 0x5890 <PID_pravolinijski+0x396>
    588a:	91 95       	neg	r25
    588c:	81 95       	neg	r24
    588e:	91 09       	sbc	r25, r1
    5890:	48 1b       	sub	r20, r24
    5892:	59 0b       	sbc	r21, r25
    5894:	24 17       	cp	r18, r20
    5896:	35 07       	cpc	r19, r21
    5898:	08 f0       	brcs	.+2      	; 0x589c <PID_pravolinijski+0x3a2>
    589a:	69 c0       	rjmp	.+210    	; 0x596e <PID_pravolinijski+0x474>
				PID_pozicija = PID_pozicija_pret - Accel_PID_pos;
    589c:	80 91 c7 28 	lds	r24, 0x28C7
    58a0:	90 91 c8 28 	lds	r25, 0x28C8
    58a4:	a0 91 c9 28 	lds	r26, 0x28C9
    58a8:	b0 91 ca 28 	lds	r27, 0x28CA
    58ac:	20 91 cc 24 	lds	r18, 0x24CC
    58b0:	30 91 cd 24 	lds	r19, 0x24CD
    58b4:	82 1b       	sub	r24, r18
    58b6:	93 0b       	sbc	r25, r19
    58b8:	a1 09       	sbc	r26, r1
    58ba:	b1 09       	sbc	r27, r1
    58bc:	80 93 fa 29 	sts	0x29FA, r24
    58c0:	90 93 fb 29 	sts	0x29FB, r25
    58c4:	a0 93 fc 29 	sts	0x29FC, r26
    58c8:	b0 93 fd 29 	sts	0x29FD, r27
    58cc:	50 c0       	rjmp	.+160    	; 0x596e <PID_pravolinijski+0x474>
		}
	}
	else
	{
		if(PID_pozicija_pret < PID_pozicija)	//UBRZANJE U PLUS
    58ce:	40 91 c7 28 	lds	r20, 0x28C7
    58d2:	50 91 c8 28 	lds	r21, 0x28C8
    58d6:	60 91 c9 28 	lds	r22, 0x28C9
    58da:	70 91 ca 28 	lds	r23, 0x28CA
    58de:	80 91 fa 29 	lds	r24, 0x29FA
    58e2:	90 91 fb 29 	lds	r25, 0x29FB
    58e6:	a0 91 fc 29 	lds	r26, 0x29FC
    58ea:	b0 91 fd 29 	lds	r27, 0x29FD
    58ee:	48 17       	cp	r20, r24
    58f0:	59 07       	cpc	r21, r25
    58f2:	6a 07       	cpc	r22, r26
    58f4:	7b 07       	cpc	r23, r27
    58f6:	dc f5       	brge	.+118    	; 0x596e <PID_pravolinijski+0x474>
		{
			if((abs(PID_pozicija) - abs(PID_pozicija_pret)) > Accel_PID_pos)
    58f8:	40 91 fa 29 	lds	r20, 0x29FA
    58fc:	50 91 fb 29 	lds	r21, 0x29FB
    5900:	60 91 fc 29 	lds	r22, 0x29FC
    5904:	70 91 fd 29 	lds	r23, 0x29FD
    5908:	80 91 c7 28 	lds	r24, 0x28C7
    590c:	90 91 c8 28 	lds	r25, 0x28C8
    5910:	a0 91 c9 28 	lds	r26, 0x28C9
    5914:	b0 91 ca 28 	lds	r27, 0x28CA
    5918:	20 91 cc 24 	lds	r18, 0x24CC
    591c:	30 91 cd 24 	lds	r19, 0x24CD
    5920:	55 23       	and	r21, r21
    5922:	1c f4       	brge	.+6      	; 0x592a <PID_pravolinijski+0x430>
    5924:	51 95       	neg	r21
    5926:	41 95       	neg	r20
    5928:	51 09       	sbc	r21, r1
    592a:	99 23       	and	r25, r25
    592c:	1c f4       	brge	.+6      	; 0x5934 <PID_pravolinijski+0x43a>
    592e:	91 95       	neg	r25
    5930:	81 95       	neg	r24
    5932:	91 09       	sbc	r25, r1
    5934:	48 1b       	sub	r20, r24
    5936:	59 0b       	sbc	r21, r25
    5938:	24 17       	cp	r18, r20
    593a:	35 07       	cpc	r19, r21
    593c:	c0 f4       	brcc	.+48     	; 0x596e <PID_pravolinijski+0x474>
				PID_pozicija = PID_pozicija_pret + Accel_PID_pos;
    593e:	20 91 cc 24 	lds	r18, 0x24CC
    5942:	30 91 cd 24 	lds	r19, 0x24CD
    5946:	80 91 c7 28 	lds	r24, 0x28C7
    594a:	90 91 c8 28 	lds	r25, 0x28C8
    594e:	a0 91 c9 28 	lds	r26, 0x28C9
    5952:	b0 91 ca 28 	lds	r27, 0x28CA
    5956:	82 0f       	add	r24, r18
    5958:	93 1f       	adc	r25, r19
    595a:	a1 1d       	adc	r26, r1
    595c:	b1 1d       	adc	r27, r1
    595e:	80 93 fa 29 	sts	0x29FA, r24
    5962:	90 93 fb 29 	sts	0x29FB, r25
    5966:	a0 93 fc 29 	sts	0x29FC, r26
    596a:	b0 93 fd 29 	sts	0x29FD, r27
		}
	}
	PID_pozicija_pret = PID_pozicija;
    596e:	80 91 fa 29 	lds	r24, 0x29FA
    5972:	90 91 fb 29 	lds	r25, 0x29FB
    5976:	a0 91 fc 29 	lds	r26, 0x29FC
    597a:	b0 91 fd 29 	lds	r27, 0x29FD
    597e:	80 93 c7 28 	sts	0x28C7, r24
    5982:	90 93 c8 28 	sts	0x28C8, r25
    5986:	a0 93 c9 28 	sts	0x28C9, r26
    598a:	b0 93 ca 28 	sts	0x28CA, r27
}
    598e:	2c 96       	adiw	r28, 0x0c	; 12
    5990:	cd bf       	out	0x3d, r28	; 61
    5992:	de bf       	out	0x3e, r29	; 62
    5994:	df 91       	pop	r29
    5996:	cf 91       	pop	r28
    5998:	1f 91       	pop	r17
    599a:	0f 91       	pop	r16
    599c:	ff 90       	pop	r15
    599e:	ef 90       	pop	r14
    59a0:	df 90       	pop	r13
    59a2:	cf 90       	pop	r12
    59a4:	bf 90       	pop	r11
    59a6:	af 90       	pop	r10
    59a8:	9f 90       	pop	r9
    59aa:	8f 90       	pop	r8
    59ac:	7f 90       	pop	r7
    59ae:	6f 90       	pop	r6
    59b0:	5f 90       	pop	r5
    59b2:	4f 90       	pop	r4
    59b4:	08 95       	ret

000059b6 <PID_ugaoni>:

void PID_ugaoni(void)
{	
    59b6:	4f 92       	push	r4
    59b8:	5f 92       	push	r5
    59ba:	6f 92       	push	r6
    59bc:	7f 92       	push	r7
    59be:	8f 92       	push	r8
    59c0:	9f 92       	push	r9
    59c2:	af 92       	push	r10
    59c4:	bf 92       	push	r11
    59c6:	cf 92       	push	r12
    59c8:	df 92       	push	r13
    59ca:	ef 92       	push	r14
    59cc:	ff 92       	push	r15
    59ce:	0f 93       	push	r16
    59d0:	1f 93       	push	r17
    59d2:	cf 93       	push	r28
    59d4:	df 93       	push	r29
    59d6:	cd b7       	in	r28, 0x3d	; 61
    59d8:	de b7       	in	r29, 0x3e	; 62
    59da:	2c 97       	sbiw	r28, 0x0c	; 12
    59dc:	cd bf       	out	0x3d, r28	; 61
    59de:	de bf       	out	0x3e, r29	; 62
	teta_greska = teta_cilj - teta;
    59e0:	80 91 c8 24 	lds	r24, 0x24C8
    59e4:	90 91 c9 24 	lds	r25, 0x24C9
    59e8:	a0 91 ca 24 	lds	r26, 0x24CA
    59ec:	b0 91 cb 24 	lds	r27, 0x24CB
    59f0:	40 91 7f 32 	lds	r20, 0x327F
    59f4:	50 91 80 32 	lds	r21, 0x3280
    59f8:	60 91 81 32 	lds	r22, 0x3281
    59fc:	70 91 82 32 	lds	r23, 0x3282
    5a00:	84 1b       	sub	r24, r20
    5a02:	95 0b       	sbc	r25, r21
    5a04:	a6 0b       	sbc	r26, r22
    5a06:	b7 0b       	sbc	r27, r23
    5a08:	80 93 70 2e 	sts	0x2E70, r24
    5a0c:	90 93 71 2e 	sts	0x2E71, r25
    5a10:	a0 93 72 2e 	sts	0x2E72, r26
    5a14:	b0 93 73 2e 	sts	0x2E73, r27
	
	dif_error_ugao = teta_greska - teta_greska_prethodno; // D dejstvo
    5a18:	80 91 70 2e 	lds	r24, 0x2E70
    5a1c:	90 91 71 2e 	lds	r25, 0x2E71
    5a20:	a0 91 72 2e 	lds	r26, 0x2E72
    5a24:	b0 91 73 2e 	lds	r27, 0x2E73
    5a28:	40 91 ea 2d 	lds	r20, 0x2DEA
    5a2c:	50 91 eb 2d 	lds	r21, 0x2DEB
    5a30:	60 91 ec 2d 	lds	r22, 0x2DEC
    5a34:	70 91 ed 2d 	lds	r23, 0x2DED
    5a38:	84 1b       	sub	r24, r20
    5a3a:	95 0b       	sbc	r25, r21
    5a3c:	a6 0b       	sbc	r26, r22
    5a3e:	b7 0b       	sbc	r27, r23
    5a40:	80 93 37 2e 	sts	0x2E37, r24
    5a44:	90 93 38 2e 	sts	0x2E38, r25
    5a48:	a0 93 39 2e 	sts	0x2E39, r26
    5a4c:	b0 93 3a 2e 	sts	0x2E3A, r27
	teta_greska_prethodno = teta_greska; //D dejstvo
    5a50:	80 91 70 2e 	lds	r24, 0x2E70
    5a54:	90 91 71 2e 	lds	r25, 0x2E71
    5a58:	a0 91 72 2e 	lds	r26, 0x2E72
    5a5c:	b0 91 73 2e 	lds	r27, 0x2E73
    5a60:	80 93 ea 2d 	sts	0x2DEA, r24
    5a64:	90 93 eb 2d 	sts	0x2DEB, r25
    5a68:	a0 93 ec 2d 	sts	0x2DEC, r26
    5a6c:	b0 93 ed 2d 	sts	0x2DED, r27
	
	//korigovanje greske, da bi se roobot uvek okretao u blizem smeru
	if(teta_greska < -krug180)
    5a70:	40 91 cb 28 	lds	r20, 0x28CB
    5a74:	50 91 cc 28 	lds	r21, 0x28CC
    5a78:	60 91 cd 28 	lds	r22, 0x28CD
    5a7c:	70 91 ce 28 	lds	r23, 0x28CE
    5a80:	80 91 70 2e 	lds	r24, 0x2E70
    5a84:	90 91 71 2e 	lds	r25, 0x2E71
    5a88:	a0 91 72 2e 	lds	r26, 0x2E72
    5a8c:	b0 91 73 2e 	lds	r27, 0x2E73
    5a90:	70 95       	com	r23
    5a92:	60 95       	com	r22
    5a94:	50 95       	com	r21
    5a96:	41 95       	neg	r20
    5a98:	5f 4f       	sbci	r21, 0xFF	; 255
    5a9a:	6f 4f       	sbci	r22, 0xFF	; 255
    5a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a9e:	84 17       	cp	r24, r20
    5aa0:	95 07       	cpc	r25, r21
    5aa2:	a6 07       	cpc	r26, r22
    5aa4:	b7 07       	cpc	r27, r23
    5aa6:	ec f4       	brge	.+58     	; 0x5ae2 <PID_ugaoni+0x12c>
		teta_greska += krug360;
    5aa8:	40 91 70 2e 	lds	r20, 0x2E70
    5aac:	50 91 71 2e 	lds	r21, 0x2E71
    5ab0:	60 91 72 2e 	lds	r22, 0x2E72
    5ab4:	70 91 73 2e 	lds	r23, 0x2E73
    5ab8:	80 91 71 32 	lds	r24, 0x3271
    5abc:	90 91 72 32 	lds	r25, 0x3272
    5ac0:	a0 91 73 32 	lds	r26, 0x3273
    5ac4:	b0 91 74 32 	lds	r27, 0x3274
    5ac8:	84 0f       	add	r24, r20
    5aca:	95 1f       	adc	r25, r21
    5acc:	a6 1f       	adc	r26, r22
    5ace:	b7 1f       	adc	r27, r23
    5ad0:	80 93 70 2e 	sts	0x2E70, r24
    5ad4:	90 93 71 2e 	sts	0x2E71, r25
    5ad8:	a0 93 72 2e 	sts	0x2E72, r26
    5adc:	b0 93 73 2e 	sts	0x2E73, r27
    5ae0:	31 c0       	rjmp	.+98     	; 0x5b44 <PID_ugaoni+0x18e>
	else if(teta_greska > krug180)
    5ae2:	40 91 70 2e 	lds	r20, 0x2E70
    5ae6:	50 91 71 2e 	lds	r21, 0x2E71
    5aea:	60 91 72 2e 	lds	r22, 0x2E72
    5aee:	70 91 73 2e 	lds	r23, 0x2E73
    5af2:	80 91 cb 28 	lds	r24, 0x28CB
    5af6:	90 91 cc 28 	lds	r25, 0x28CC
    5afa:	a0 91 cd 28 	lds	r26, 0x28CD
    5afe:	b0 91 ce 28 	lds	r27, 0x28CE
    5b02:	84 17       	cp	r24, r20
    5b04:	95 07       	cpc	r25, r21
    5b06:	a6 07       	cpc	r26, r22
    5b08:	b7 07       	cpc	r27, r23
    5b0a:	e4 f4       	brge	.+56     	; 0x5b44 <PID_ugaoni+0x18e>
		teta_greska -= krug360;
    5b0c:	80 91 70 2e 	lds	r24, 0x2E70
    5b10:	90 91 71 2e 	lds	r25, 0x2E71
    5b14:	a0 91 72 2e 	lds	r26, 0x2E72
    5b18:	b0 91 73 2e 	lds	r27, 0x2E73
    5b1c:	40 91 71 32 	lds	r20, 0x3271
    5b20:	50 91 72 32 	lds	r21, 0x3272
    5b24:	60 91 73 32 	lds	r22, 0x3273
    5b28:	70 91 74 32 	lds	r23, 0x3274
    5b2c:	84 1b       	sub	r24, r20
    5b2e:	95 0b       	sbc	r25, r21
    5b30:	a6 0b       	sbc	r26, r22
    5b32:	b7 0b       	sbc	r27, r23
    5b34:	80 93 70 2e 	sts	0x2E70, r24
    5b38:	90 93 71 2e 	sts	0x2E71, r25
    5b3c:	a0 93 72 2e 	sts	0x2E72, r26
    5b40:	b0 93 73 2e 	sts	0x2E73, r27
		
	teta_greska_sum += teta_greska;
    5b44:	40 91 23 2e 	lds	r20, 0x2E23
    5b48:	50 91 24 2e 	lds	r21, 0x2E24
    5b4c:	60 91 25 2e 	lds	r22, 0x2E25
    5b50:	70 91 26 2e 	lds	r23, 0x2E26
    5b54:	80 91 70 2e 	lds	r24, 0x2E70
    5b58:	90 91 71 2e 	lds	r25, 0x2E71
    5b5c:	a0 91 72 2e 	lds	r26, 0x2E72
    5b60:	b0 91 73 2e 	lds	r27, 0x2E73
    5b64:	84 0f       	add	r24, r20
    5b66:	95 1f       	adc	r25, r21
    5b68:	a6 1f       	adc	r26, r22
    5b6a:	b7 1f       	adc	r27, r23
    5b6c:	80 93 23 2e 	sts	0x2E23, r24
    5b70:	90 93 24 2e 	sts	0x2E24, r25
    5b74:	a0 93 25 2e 	sts	0x2E25, r26
    5b78:	b0 93 26 2e 	sts	0x2E26, r27
	
	//anti wind-up
	if(teta_greska_sum > 200)
    5b7c:	80 91 23 2e 	lds	r24, 0x2E23
    5b80:	90 91 24 2e 	lds	r25, 0x2E24
    5b84:	a0 91 25 2e 	lds	r26, 0x2E25
    5b88:	b0 91 26 2e 	lds	r27, 0x2E26
    5b8c:	89 3c       	cpi	r24, 0xC9	; 201
    5b8e:	91 05       	cpc	r25, r1
    5b90:	a1 05       	cpc	r26, r1
    5b92:	b1 05       	cpc	r27, r1
    5b94:	6c f0       	brlt	.+26     	; 0x5bb0 <PID_ugaoni+0x1fa>
		teta_greska_sum = 200;
    5b96:	88 ec       	ldi	r24, 0xC8	; 200
    5b98:	90 e0       	ldi	r25, 0x00	; 0
    5b9a:	a0 e0       	ldi	r26, 0x00	; 0
    5b9c:	b0 e0       	ldi	r27, 0x00	; 0
    5b9e:	80 93 23 2e 	sts	0x2E23, r24
    5ba2:	90 93 24 2e 	sts	0x2E24, r25
    5ba6:	a0 93 25 2e 	sts	0x2E25, r26
    5baa:	b0 93 26 2e 	sts	0x2E26, r27
    5bae:	19 c0       	rjmp	.+50     	; 0x5be2 <PID_ugaoni+0x22c>
	else if(teta_greska_sum < -200)
    5bb0:	80 91 23 2e 	lds	r24, 0x2E23
    5bb4:	90 91 24 2e 	lds	r25, 0x2E24
    5bb8:	a0 91 25 2e 	lds	r26, 0x2E25
    5bbc:	b0 91 26 2e 	lds	r27, 0x2E26
    5bc0:	88 33       	cpi	r24, 0x38	; 56
    5bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    5bc4:	af 4f       	sbci	r26, 0xFF	; 255
    5bc6:	bf 4f       	sbci	r27, 0xFF	; 255
    5bc8:	64 f4       	brge	.+24     	; 0x5be2 <PID_ugaoni+0x22c>
		teta_greska_sum = -200;
    5bca:	88 e3       	ldi	r24, 0x38	; 56
    5bcc:	9f ef       	ldi	r25, 0xFF	; 255
    5bce:	af ef       	ldi	r26, 0xFF	; 255
    5bd0:	bf ef       	ldi	r27, 0xFF	; 255
    5bd2:	80 93 23 2e 	sts	0x2E23, r24
    5bd6:	90 93 24 2e 	sts	0x2E24, r25
    5bda:	a0 93 25 2e 	sts	0x2E25, r26
    5bde:	b0 93 26 2e 	sts	0x2E26, r27
	
	//podesavanje pravca robota dok ne stigne u blizinu cilja
	if(rastojanje_cilj_temp > metar/10)
    5be2:	60 91 cf 24 	lds	r22, 0x24CF
    5be6:	70 91 d0 24 	lds	r23, 0x24D0
    5bea:	80 91 d1 24 	lds	r24, 0x24D1
    5bee:	90 91 d2 24 	lds	r25, 0x24D2
    5bf2:	c0 90 0e 2e 	lds	r12, 0x2E0E
    5bf6:	d0 90 0f 2e 	lds	r13, 0x2E0F
    5bfa:	e0 90 10 2e 	lds	r14, 0x2E10
    5bfe:	f0 90 11 2e 	lds	r15, 0x2E11
    5c02:	2a e0       	ldi	r18, 0x0A	; 10
    5c04:	30 e0       	ldi	r19, 0x00	; 0
    5c06:	40 e0       	ldi	r20, 0x00	; 0
    5c08:	50 e0       	ldi	r21, 0x00	; 0
    5c0a:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
    5c0e:	2c 15       	cp	r18, r12
    5c10:	3d 05       	cpc	r19, r13
    5c12:	4e 05       	cpc	r20, r14
    5c14:	5f 05       	cpc	r21, r15
    5c16:	0c f0       	brlt	.+2      	; 0x5c1a <PID_ugaoni+0x264>
    5c18:	49 c0       	rjmp	.+146    	; 0x5cac <PID_ugaoni+0x2f6>
	{
		if(labs(teta_greska) > rezervni_ugao)	//okrecemo se u mestu kad treba
    5c1a:	40 91 70 2e 	lds	r20, 0x2E70
    5c1e:	50 91 71 2e 	lds	r21, 0x2E71
    5c22:	60 91 72 2e 	lds	r22, 0x2E72
    5c26:	70 91 73 2e 	lds	r23, 0x2E73
    5c2a:	20 91 2b 2e 	lds	r18, 0x2E2B
    5c2e:	30 91 2c 2e 	lds	r19, 0x2E2C
    5c32:	db 01       	movw	r26, r22
    5c34:	ca 01       	movw	r24, r20
    5c36:	77 23       	and	r23, r23
    5c38:	3c f4       	brge	.+14     	; 0x5c48 <PID_ugaoni+0x292>
    5c3a:	88 27       	eor	r24, r24
    5c3c:	99 27       	eor	r25, r25
    5c3e:	dc 01       	movw	r26, r24
    5c40:	84 1b       	sub	r24, r20
    5c42:	95 0b       	sbc	r25, r21
    5c44:	a6 0b       	sbc	r26, r22
    5c46:	b7 0b       	sbc	r27, r23
    5c48:	a9 01       	movw	r20, r18
    5c4a:	66 27       	eor	r22, r22
    5c4c:	57 fd       	sbrc	r21, 7
    5c4e:	60 95       	com	r22
    5c50:	76 2f       	mov	r23, r22
    5c52:	48 17       	cp	r20, r24
    5c54:	59 07       	cpc	r21, r25
    5c56:	6a 07       	cpc	r22, r26
    5c58:	7b 07       	cpc	r23, r27
    5c5a:	ac f4       	brge	.+42     	; 0x5c86 <PID_ugaoni+0x2d0>
		{
			modifikovana_zeljena_pravolinijska_brzina = 0;	//zaustavlja se robot za okretanje u mestu
    5c5c:	10 92 b0 24 	sts	0x24B0, r1
    5c60:	10 92 b1 24 	sts	0x24B1, r1
			rezervni_ugao = krug45;
    5c64:	80 91 c4 24 	lds	r24, 0x24C4
    5c68:	90 91 c5 24 	lds	r25, 0x24C5
    5c6c:	a0 91 c6 24 	lds	r26, 0x24C6
    5c70:	b0 91 c7 24 	lds	r27, 0x24C7
    5c74:	80 93 2b 2e 	sts	0x2E2B, r24
    5c78:	90 93 2c 2e 	sts	0x2E2C, r25
			vreme_cekanja_tete = 0;
    5c7c:	10 92 60 29 	sts	0x2960, r1
    5c80:	10 92 61 29 	sts	0x2961, r1
    5c84:	13 c0       	rjmp	.+38     	; 0x5cac <PID_ugaoni+0x2f6>
		}
		else if(vreme_cekanja_tete >= 300)
    5c86:	80 91 60 29 	lds	r24, 0x2960
    5c8a:	90 91 61 29 	lds	r25, 0x2961
    5c8e:	8c 32       	cpi	r24, 0x2C	; 44
    5c90:	91 40       	sbci	r25, 0x01	; 1
    5c92:	60 f0       	brcs	.+24     	; 0x5cac <PID_ugaoni+0x2f6>
		{
			vreme_cekanja_tete = 0;
    5c94:	10 92 60 29 	sts	0x2960, r1
    5c98:	10 92 61 29 	sts	0x2961, r1
			modifikovana_zeljena_pravolinijska_brzina = zeljena_pravolinijska_brzina;	// robot se krece pravolinijski
    5c9c:	80 91 7b 32 	lds	r24, 0x327B
    5ca0:	90 91 7c 32 	lds	r25, 0x327C
    5ca4:	80 93 b0 24 	sts	0x24B0, r24
    5ca8:	90 93 b1 24 	sts	0x24B1, r25
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5cac:	60 91 70 2e 	lds	r22, 0x2E70
    5cb0:	70 91 71 2e 	lds	r23, 0x2E71
    5cb4:	80 91 72 2e 	lds	r24, 0x2E72
    5cb8:	90 91 73 2e 	lds	r25, 0x2E73
    5cbc:	80 90 85 32 	lds	r8, 0x3285
    5cc0:	90 90 86 32 	lds	r9, 0x3286
    5cc4:	a0 90 87 32 	lds	r10, 0x3287
    5cc8:	b0 90 88 32 	lds	r11, 0x3288
				(float)(dif_error_ugao * Kd_teta) +
    5ccc:	20 91 37 2e 	lds	r18, 0x2E37
    5cd0:	30 91 38 2e 	lds	r19, 0x2E38
    5cd4:	40 91 39 2e 	lds	r20, 0x2E39
    5cd8:	50 91 3a 2e 	lds	r21, 0x2E3A
    5cdc:	29 83       	std	Y+1, r18	; 0x01
    5cde:	3a 83       	std	Y+2, r19	; 0x02
    5ce0:	4b 83       	std	Y+3, r20	; 0x03
    5ce2:	5c 83       	std	Y+4, r21	; 0x04
    5ce4:	40 90 a0 24 	lds	r4, 0x24A0
    5ce8:	50 90 a1 24 	lds	r5, 0x24A1
    5cec:	60 90 a2 24 	lds	r6, 0x24A2
    5cf0:	70 90 a3 24 	lds	r7, 0x24A3
				(float)(teta_greska_sum * Ki_teta)) / 
    5cf4:	c0 90 23 2e 	lds	r12, 0x2E23
    5cf8:	d0 90 24 2e 	lds	r13, 0x2E24
    5cfc:	e0 90 25 2e 	lds	r14, 0x2E25
    5d00:	f0 90 26 2e 	lds	r15, 0x2E26
    5d04:	20 91 a6 24 	lds	r18, 0x24A6
    5d08:	30 91 a7 24 	lds	r19, 0x24A7
    5d0c:	40 91 a8 24 	lds	r20, 0x24A8
    5d10:	50 91 a9 24 	lds	r21, 0x24A9
    5d14:	2d 83       	std	Y+5, r18	; 0x05
    5d16:	3e 83       	std	Y+6, r19	; 0x06
    5d18:	4f 83       	std	Y+7, r20	; 0x07
    5d1a:	58 87       	std	Y+8, r21	; 0x08
				(krug90 / zeljena_brzina_okretanja);
    5d1c:	20 91 7a 2e 	lds	r18, 0x2E7A
    5d20:	30 91 7b 2e 	lds	r19, 0x2E7B
    5d24:	40 91 7c 2e 	lds	r20, 0x2E7C
    5d28:	50 91 7d 2e 	lds	r21, 0x2E7D
    5d2c:	29 87       	std	Y+9, r18	; 0x09
    5d2e:	3a 87       	std	Y+10, r19	; 0x0a
    5d30:	4b 87       	std	Y+11, r20	; 0x0b
    5d32:	5c 87       	std	Y+12, r21	; 0x0c
    5d34:	00 91 5d 2e 	lds	r16, 0x2E5D
    5d38:	10 91 5e 2e 	lds	r17, 0x2E5E
			modifikovana_zeljena_pravolinijska_brzina = zeljena_pravolinijska_brzina;	// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5d3c:	b7 d6       	rcall	.+3438   	; 0x6aac <__floatsisf>
    5d3e:	a5 01       	movw	r20, r10
    5d40:	94 01       	movw	r18, r8
    5d42:	cd d7       	rcall	.+3994   	; 0x6cde <__mulsf3>
    5d44:	4b 01       	movw	r8, r22
    5d46:	5c 01       	movw	r10, r24
				(float)(dif_error_ugao * Kd_teta) +
    5d48:	69 81       	ldd	r22, Y+1	; 0x01
    5d4a:	7a 81       	ldd	r23, Y+2	; 0x02
    5d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    5d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    5d50:	ad d6       	rcall	.+3418   	; 0x6aac <__floatsisf>
    5d52:	a3 01       	movw	r20, r6
    5d54:	92 01       	movw	r18, r4
    5d56:	c3 d7       	rcall	.+3974   	; 0x6cde <__mulsf3>
    5d58:	9b 01       	movw	r18, r22
    5d5a:	ac 01       	movw	r20, r24
			modifikovana_zeljena_pravolinijska_brzina = zeljena_pravolinijska_brzina;	// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5d5c:	c5 01       	movw	r24, r10
    5d5e:	b4 01       	movw	r22, r8
    5d60:	3d d5       	rcall	.+2682   	; 0x67dc <__addsf3>
    5d62:	4b 01       	movw	r8, r22
    5d64:	5c 01       	movw	r10, r24
				(float)(dif_error_ugao * Kd_teta) +
				(float)(teta_greska_sum * Ki_teta)) / 
    5d66:	c7 01       	movw	r24, r14
    5d68:	b6 01       	movw	r22, r12
    5d6a:	a0 d6       	rcall	.+3392   	; 0x6aac <__floatsisf>
    5d6c:	2d 81       	ldd	r18, Y+5	; 0x05
    5d6e:	3e 81       	ldd	r19, Y+6	; 0x06
    5d70:	4f 81       	ldd	r20, Y+7	; 0x07
    5d72:	58 85       	ldd	r21, Y+8	; 0x08
    5d74:	b4 d7       	rcall	.+3944   	; 0x6cde <__mulsf3>
    5d76:	9b 01       	movw	r18, r22
    5d78:	ac 01       	movw	r20, r24
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
				(float)(dif_error_ugao * Kd_teta) +
    5d7a:	c5 01       	movw	r24, r10
    5d7c:	b4 01       	movw	r22, r8
    5d7e:	2e d5       	rcall	.+2652   	; 0x67dc <__addsf3>
    5d80:	6b 01       	movw	r12, r22
    5d82:	7c 01       	movw	r14, r24
				(float)(teta_greska_sum * Ki_teta)) / 
				(krug90 / zeljena_brzina_okretanja);
    5d84:	98 01       	movw	r18, r16
    5d86:	44 27       	eor	r20, r20
    5d88:	37 fd       	sbrc	r19, 7
    5d8a:	40 95       	com	r20
    5d8c:	54 2f       	mov	r21, r20
    5d8e:	69 85       	ldd	r22, Y+9	; 0x09
    5d90:	7a 85       	ldd	r23, Y+10	; 0x0a
    5d92:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d94:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d96:	0e 94 65 37 	call	0x6eca	; 0x6eca <__divmodsi4>
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
				(float)(dif_error_ugao * Kd_teta) +
				(float)(teta_greska_sum * Ki_teta)) / 
    5d9a:	ca 01       	movw	r24, r20
    5d9c:	b9 01       	movw	r22, r18
    5d9e:	86 d6       	rcall	.+3340   	; 0x6aac <__floatsisf>
    5da0:	9b 01       	movw	r18, r22
    5da2:	ac 01       	movw	r20, r24
    5da4:	c7 01       	movw	r24, r14
    5da6:	b6 01       	movw	r22, r12
    5da8:	e6 d5       	rcall	.+3020   	; 0x6976 <__divsf3>
			modifikovana_zeljena_pravolinijska_brzina = zeljena_pravolinijska_brzina;	// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5daa:	4d d6       	rcall	.+3226   	; 0x6a46 <__fixsfsi>
    5dac:	60 93 50 2e 	sts	0x2E50, r22
    5db0:	70 93 51 2e 	sts	0x2E51, r23
    5db4:	80 93 52 2e 	sts	0x2E52, r24
    5db8:	90 93 53 2e 	sts	0x2E53, r25
				(float)(dif_error_ugao * Kd_teta) +
				(float)(teta_greska_sum * Ki_teta)) / 
				(krug90 / zeljena_brzina_okretanja);
	
	if(PID_teta < -zeljena_brzina_okretanja)
    5dbc:	40 91 5d 2e 	lds	r20, 0x2E5D
    5dc0:	50 91 5e 2e 	lds	r21, 0x2E5E
    5dc4:	80 91 50 2e 	lds	r24, 0x2E50
    5dc8:	90 91 51 2e 	lds	r25, 0x2E51
    5dcc:	a0 91 52 2e 	lds	r26, 0x2E52
    5dd0:	b0 91 53 2e 	lds	r27, 0x2E53
    5dd4:	51 95       	neg	r21
    5dd6:	41 95       	neg	r20
    5dd8:	51 09       	sbc	r21, r1
    5dda:	66 27       	eor	r22, r22
    5ddc:	57 fd       	sbrc	r21, 7
    5dde:	60 95       	com	r22
    5de0:	76 2f       	mov	r23, r22
    5de2:	84 17       	cp	r24, r20
    5de4:	95 07       	cpc	r25, r21
    5de6:	a6 07       	cpc	r26, r22
    5de8:	b7 07       	cpc	r27, r23
    5dea:	9c f4       	brge	.+38     	; 0x5e12 <PID_ugaoni+0x45c>
		PID_teta = -zeljena_brzina_okretanja;
    5dec:	80 91 5d 2e 	lds	r24, 0x2E5D
    5df0:	90 91 5e 2e 	lds	r25, 0x2E5E
    5df4:	91 95       	neg	r25
    5df6:	81 95       	neg	r24
    5df8:	91 09       	sbc	r25, r1
    5dfa:	aa 27       	eor	r26, r26
    5dfc:	97 fd       	sbrc	r25, 7
    5dfe:	a0 95       	com	r26
    5e00:	ba 2f       	mov	r27, r26
    5e02:	80 93 50 2e 	sts	0x2E50, r24
    5e06:	90 93 51 2e 	sts	0x2E51, r25
    5e0a:	a0 93 52 2e 	sts	0x2E52, r26
    5e0e:	b0 93 53 2e 	sts	0x2E53, r27
	if(PID_teta > zeljena_brzina_okretanja)
    5e12:	40 91 5d 2e 	lds	r20, 0x2E5D
    5e16:	50 91 5e 2e 	lds	r21, 0x2E5E
    5e1a:	80 91 50 2e 	lds	r24, 0x2E50
    5e1e:	90 91 51 2e 	lds	r25, 0x2E51
    5e22:	a0 91 52 2e 	lds	r26, 0x2E52
    5e26:	b0 91 53 2e 	lds	r27, 0x2E53
    5e2a:	66 27       	eor	r22, r22
    5e2c:	57 fd       	sbrc	r21, 7
    5e2e:	60 95       	com	r22
    5e30:	76 2f       	mov	r23, r22
    5e32:	48 17       	cp	r20, r24
    5e34:	59 07       	cpc	r21, r25
    5e36:	6a 07       	cpc	r22, r26
    5e38:	7b 07       	cpc	r23, r27
    5e3a:	84 f4       	brge	.+32     	; 0x5e5c <PID_ugaoni+0x4a6>
		PID_teta = zeljena_brzina_okretanja;
    5e3c:	80 91 5d 2e 	lds	r24, 0x2E5D
    5e40:	90 91 5e 2e 	lds	r25, 0x2E5E
    5e44:	aa 27       	eor	r26, r26
    5e46:	97 fd       	sbrc	r25, 7
    5e48:	a0 95       	com	r26
    5e4a:	ba 2f       	mov	r27, r26
    5e4c:	80 93 50 2e 	sts	0x2E50, r24
    5e50:	90 93 51 2e 	sts	0x2E51, r25
    5e54:	a0 93 52 2e 	sts	0x2E52, r26
    5e58:	b0 93 53 2e 	sts	0x2E53, r27
}
    5e5c:	2c 96       	adiw	r28, 0x0c	; 12
    5e5e:	cd bf       	out	0x3d, r28	; 61
    5e60:	de bf       	out	0x3e, r29	; 62
    5e62:	df 91       	pop	r29
    5e64:	cf 91       	pop	r28
    5e66:	1f 91       	pop	r17
    5e68:	0f 91       	pop	r16
    5e6a:	ff 90       	pop	r15
    5e6c:	ef 90       	pop	r14
    5e6e:	df 90       	pop	r13
    5e70:	cf 90       	pop	r12
    5e72:	bf 90       	pop	r11
    5e74:	af 90       	pop	r10
    5e76:	9f 90       	pop	r9
    5e78:	8f 90       	pop	r8
    5e7a:	7f 90       	pop	r7
    5e7c:	6f 90       	pop	r6
    5e7e:	5f 90       	pop	r5
    5e80:	4f 90       	pop	r4
    5e82:	08 95       	ret

00005e84 <PID_brzinski>:

void PID_brzinski(void)
{
    5e84:	4f 92       	push	r4
    5e86:	5f 92       	push	r5
    5e88:	6f 92       	push	r6
    5e8a:	7f 92       	push	r7
    5e8c:	8f 92       	push	r8
    5e8e:	9f 92       	push	r9
    5e90:	af 92       	push	r10
    5e92:	bf 92       	push	r11
    5e94:	cf 92       	push	r12
    5e96:	df 92       	push	r13
    5e98:	ef 92       	push	r14
    5e9a:	ff 92       	push	r15
    5e9c:	0f 93       	push	r16
    5e9e:	1f 93       	push	r17
    5ea0:	cf 93       	push	r28
    5ea2:	df 93       	push	r29
	//////////////PID//////////////////
	//ako nema stop signala, postavlja se izlaz
	
	if((stop_PID_levi == 0) && (set_direct_out == 0))
    5ea4:	80 91 ee 2d 	lds	r24, 0x2DEE
    5ea8:	81 11       	cpse	r24, r1
    5eaa:	1a c0       	rjmp	.+52     	; 0x5ee0 <PID_brzinski+0x5c>
    5eac:	80 91 7d 32 	lds	r24, 0x327D
    5eb0:	81 11       	cpse	r24, r1
    5eb2:	16 c0       	rjmp	.+44     	; 0x5ee0 <PID_brzinski+0x5c>
		PID_brzina_L = (PID_pozicija - PID_teta);
    5eb4:	40 91 fa 29 	lds	r20, 0x29FA
    5eb8:	50 91 fb 29 	lds	r21, 0x29FB
    5ebc:	60 91 fc 29 	lds	r22, 0x29FC
    5ec0:	70 91 fd 29 	lds	r23, 0x29FD
    5ec4:	80 91 50 2e 	lds	r24, 0x2E50
    5ec8:	90 91 51 2e 	lds	r25, 0x2E51
    5ecc:	a0 91 52 2e 	lds	r26, 0x2E52
    5ed0:	b0 91 53 2e 	lds	r27, 0x2E53
    5ed4:	48 1b       	sub	r20, r24
    5ed6:	59 0b       	sbc	r21, r25
    5ed8:	40 93 77 2e 	sts	0x2E77, r20
    5edc:	50 93 78 2e 	sts	0x2E78, r21
	if((stop_PID_desni == 0) && (set_direct_out == 0))
    5ee0:	80 91 f0 29 	lds	r24, 0x29F0
    5ee4:	81 11       	cpse	r24, r1
    5ee6:	1a c0       	rjmp	.+52     	; 0x5f1c <PID_brzinski+0x98>
    5ee8:	80 91 7d 32 	lds	r24, 0x327D
    5eec:	81 11       	cpse	r24, r1
    5eee:	16 c0       	rjmp	.+44     	; 0x5f1c <PID_brzinski+0x98>
		PID_brzina_R = (PID_pozicija + PID_teta); //+
    5ef0:	80 91 fa 29 	lds	r24, 0x29FA
    5ef4:	90 91 fb 29 	lds	r25, 0x29FB
    5ef8:	a0 91 fc 29 	lds	r26, 0x29FC
    5efc:	b0 91 fd 29 	lds	r27, 0x29FD
    5f00:	40 91 50 2e 	lds	r20, 0x2E50
    5f04:	50 91 51 2e 	lds	r21, 0x2E51
    5f08:	60 91 52 2e 	lds	r22, 0x2E52
    5f0c:	70 91 53 2e 	lds	r23, 0x2E53
    5f10:	84 0f       	add	r24, r20
    5f12:	95 1f       	adc	r25, r21
    5f14:	80 93 75 2e 	sts	0x2E75, r24
    5f18:	90 93 76 2e 	sts	0x2E76, r25
	
	//Ogranicenje brzinskog PID-a
	if(PID_brzina_L > max_brzina_motora)
    5f1c:	20 91 77 2e 	lds	r18, 0x2E77
    5f20:	30 91 78 2e 	lds	r19, 0x2E78
    5f24:	80 91 0b 2e 	lds	r24, 0x2E0B
    5f28:	90 91 0c 2e 	lds	r25, 0x2E0C
    5f2c:	82 17       	cp	r24, r18
    5f2e:	93 07       	cpc	r25, r19
    5f30:	44 f4       	brge	.+16     	; 0x5f42 <PID_brzinski+0xbe>
		PID_brzina_L = max_brzina_motora;
    5f32:	80 91 0b 2e 	lds	r24, 0x2E0B
    5f36:	90 91 0c 2e 	lds	r25, 0x2E0C
    5f3a:	80 93 77 2e 	sts	0x2E77, r24
    5f3e:	90 93 78 2e 	sts	0x2E78, r25
	if(PID_brzina_L < -max_brzina_motora)
    5f42:	20 91 0b 2e 	lds	r18, 0x2E0B
    5f46:	30 91 0c 2e 	lds	r19, 0x2E0C
    5f4a:	80 91 77 2e 	lds	r24, 0x2E77
    5f4e:	90 91 78 2e 	lds	r25, 0x2E78
    5f52:	31 95       	neg	r19
    5f54:	21 95       	neg	r18
    5f56:	31 09       	sbc	r19, r1
    5f58:	82 17       	cp	r24, r18
    5f5a:	93 07       	cpc	r25, r19
    5f5c:	5c f4       	brge	.+22     	; 0x5f74 <PID_brzinski+0xf0>
		PID_brzina_L = -max_brzina_motora;
    5f5e:	80 91 0b 2e 	lds	r24, 0x2E0B
    5f62:	90 91 0c 2e 	lds	r25, 0x2E0C
    5f66:	91 95       	neg	r25
    5f68:	81 95       	neg	r24
    5f6a:	91 09       	sbc	r25, r1
    5f6c:	80 93 77 2e 	sts	0x2E77, r24
    5f70:	90 93 78 2e 	sts	0x2E78, r25
	if(PID_brzina_R > max_brzina_motora)
    5f74:	20 91 75 2e 	lds	r18, 0x2E75
    5f78:	30 91 76 2e 	lds	r19, 0x2E76
    5f7c:	80 91 0b 2e 	lds	r24, 0x2E0B
    5f80:	90 91 0c 2e 	lds	r25, 0x2E0C
    5f84:	82 17       	cp	r24, r18
    5f86:	93 07       	cpc	r25, r19
    5f88:	44 f4       	brge	.+16     	; 0x5f9a <PID_brzinski+0x116>
		PID_brzina_R = max_brzina_motora;
    5f8a:	80 91 0b 2e 	lds	r24, 0x2E0B
    5f8e:	90 91 0c 2e 	lds	r25, 0x2E0C
    5f92:	80 93 75 2e 	sts	0x2E75, r24
    5f96:	90 93 76 2e 	sts	0x2E76, r25
	if(PID_brzina_R < -max_brzina_motora)
    5f9a:	20 91 0b 2e 	lds	r18, 0x2E0B
    5f9e:	30 91 0c 2e 	lds	r19, 0x2E0C
    5fa2:	80 91 75 2e 	lds	r24, 0x2E75
    5fa6:	90 91 76 2e 	lds	r25, 0x2E76
    5faa:	31 95       	neg	r19
    5fac:	21 95       	neg	r18
    5fae:	31 09       	sbc	r19, r1
    5fb0:	82 17       	cp	r24, r18
    5fb2:	93 07       	cpc	r25, r19
    5fb4:	5c f4       	brge	.+22     	; 0x5fcc <PID_brzinski+0x148>
		PID_brzina_R = -max_brzina_motora;
    5fb6:	80 91 0b 2e 	lds	r24, 0x2E0B
    5fba:	90 91 0c 2e 	lds	r25, 0x2E0C
    5fbe:	91 95       	neg	r25
    5fc0:	81 95       	neg	r24
    5fc2:	91 09       	sbc	r25, r1
    5fc4:	80 93 75 2e 	sts	0x2E75, r24
    5fc8:	90 93 76 2e 	sts	0x2E76, r25
	
	Pe_brzina_L = PID_brzina_L;
    5fcc:	80 91 77 2e 	lds	r24, 0x2E77
    5fd0:	90 91 78 2e 	lds	r25, 0x2E78
    5fd4:	80 93 7e 2e 	sts	0x2E7E, r24
    5fd8:	90 93 7f 2e 	sts	0x2E7F, r25
	Pe_brzina_R = PID_brzina_R;
    5fdc:	80 91 75 2e 	lds	r24, 0x2E75
    5fe0:	90 91 76 2e 	lds	r25, 0x2E76
    5fe4:	80 93 02 2e 	sts	0x2E02, r24
    5fe8:	90 93 03 2e 	sts	0x2E03, r25
	Ie_brzina_L += Pe_brzina_L;
    5fec:	20 91 84 2e 	lds	r18, 0x2E84
    5ff0:	30 91 85 2e 	lds	r19, 0x2E85
    5ff4:	80 91 7e 2e 	lds	r24, 0x2E7E
    5ff8:	90 91 7f 2e 	lds	r25, 0x2E7F
    5ffc:	82 0f       	add	r24, r18
    5ffe:	93 1f       	adc	r25, r19
    6000:	80 93 84 2e 	sts	0x2E84, r24
    6004:	90 93 85 2e 	sts	0x2E85, r25
	Ie_brzina_R += Pe_brzina_R;
    6008:	20 91 c0 24 	lds	r18, 0x24C0
    600c:	30 91 c1 24 	lds	r19, 0x24C1
    6010:	80 91 02 2e 	lds	r24, 0x2E02
    6014:	90 91 03 2e 	lds	r25, 0x2E03
    6018:	82 0f       	add	r24, r18
    601a:	93 1f       	adc	r25, r19
    601c:	80 93 c0 24 	sts	0x24C0, r24
    6020:	90 93 c1 24 	sts	0x24C1, r25
	De_brzina_L = PID_brzina_pret_L - PID_brzina_L;
    6024:	80 91 a4 24 	lds	r24, 0x24A4
    6028:	90 91 a5 24 	lds	r25, 0x24A5
    602c:	20 91 77 2e 	lds	r18, 0x2E77
    6030:	30 91 78 2e 	lds	r19, 0x2E78
    6034:	82 1b       	sub	r24, r18
    6036:	93 0b       	sbc	r25, r19
    6038:	80 93 6a 2e 	sts	0x2E6A, r24
    603c:	90 93 6b 2e 	sts	0x2E6B, r25
	De_brzina_R = PID_brzina_pret_R - PID_brzina_R;
    6040:	80 91 27 2e 	lds	r24, 0x2E27
    6044:	90 91 28 2e 	lds	r25, 0x2E28
    6048:	20 91 75 2e 	lds	r18, 0x2E75
    604c:	30 91 76 2e 	lds	r19, 0x2E76
    6050:	82 1b       	sub	r24, r18
    6052:	93 0b       	sbc	r25, r19
    6054:	80 93 c5 28 	sts	0x28C5, r24
    6058:	90 93 c6 28 	sts	0x28C6, r25
	
	PID_brzina_pret_L = PID_brzina_L;
    605c:	80 91 77 2e 	lds	r24, 0x2E77
    6060:	90 91 78 2e 	lds	r25, 0x2E78
    6064:	80 93 a4 24 	sts	0x24A4, r24
    6068:	90 93 a5 24 	sts	0x24A5, r25
	PID_brzina_pret_R = PID_brzina_R;
    606c:	80 91 75 2e 	lds	r24, 0x2E75
    6070:	90 91 76 2e 	lds	r25, 0x2E76
    6074:	80 93 27 2e 	sts	0x2E27, r24
    6078:	90 93 28 2e 	sts	0x2E28, r25
	
	//anti wind-up
	if(Ie_brzina_L > 200) //300
    607c:	80 91 84 2e 	lds	r24, 0x2E84
    6080:	90 91 85 2e 	lds	r25, 0x2E85
    6084:	89 3c       	cpi	r24, 0xC9	; 201
    6086:	91 05       	cpc	r25, r1
    6088:	34 f0       	brlt	.+12     	; 0x6096 <PID_brzinski+0x212>
		Ie_brzina_L = 200;
    608a:	88 ec       	ldi	r24, 0xC8	; 200
    608c:	90 e0       	ldi	r25, 0x00	; 0
    608e:	80 93 84 2e 	sts	0x2E84, r24
    6092:	90 93 85 2e 	sts	0x2E85, r25
	if(Ie_brzina_L < -200)
    6096:	80 91 84 2e 	lds	r24, 0x2E84
    609a:	90 91 85 2e 	lds	r25, 0x2E85
    609e:	88 33       	cpi	r24, 0x38	; 56
    60a0:	9f 4f       	sbci	r25, 0xFF	; 255
    60a2:	34 f4       	brge	.+12     	; 0x60b0 <PID_brzinski+0x22c>
		Ie_brzina_L = -200;
    60a4:	88 e3       	ldi	r24, 0x38	; 56
    60a6:	9f ef       	ldi	r25, 0xFF	; 255
    60a8:	80 93 84 2e 	sts	0x2E84, r24
    60ac:	90 93 85 2e 	sts	0x2E85, r25
	if(Ie_brzina_R > 200)
    60b0:	80 91 c0 24 	lds	r24, 0x24C0
    60b4:	90 91 c1 24 	lds	r25, 0x24C1
    60b8:	89 3c       	cpi	r24, 0xC9	; 201
    60ba:	91 05       	cpc	r25, r1
    60bc:	34 f0       	brlt	.+12     	; 0x60ca <PID_brzinski+0x246>
		Ie_brzina_R = 200;
    60be:	88 ec       	ldi	r24, 0xC8	; 200
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	80 93 c0 24 	sts	0x24C0, r24
    60c6:	90 93 c1 24 	sts	0x24C1, r25
	if(Ie_brzina_R < -200)
    60ca:	80 91 c0 24 	lds	r24, 0x24C0
    60ce:	90 91 c1 24 	lds	r25, 0x24C1
    60d2:	88 33       	cpi	r24, 0x38	; 56
    60d4:	9f 4f       	sbci	r25, 0xFF	; 255
    60d6:	34 f4       	brge	.+12     	; 0x60e4 <PID_brzinski+0x260>
		Ie_brzina_R = -200;
    60d8:	88 e3       	ldi	r24, 0x38	; 56
    60da:	9f ef       	ldi	r25, 0xFF	; 255
    60dc:	80 93 c0 24 	sts	0x24C0, r24
    60e0:	90 93 c1 24 	sts	0x24C1, r25

	PID_ukupni_L = (float)(Pe_brzina_L) * Kp_brzina + (float)(Ie_brzina_L) * Ki_brzina + (float)(De_brzina_L) * Kd_brzina; // znak - je zbog smera kretanja
    60e4:	60 91 7e 2e 	lds	r22, 0x2E7E
    60e8:	70 91 7f 2e 	lds	r23, 0x2E7F
    60ec:	c0 90 cf 28 	lds	r12, 0x28CF
    60f0:	d0 90 d0 28 	lds	r13, 0x28D0
    60f4:	e0 90 d1 28 	lds	r14, 0x28D1
    60f8:	f0 90 d2 28 	lds	r15, 0x28D2
    60fc:	00 91 84 2e 	lds	r16, 0x2E84
    6100:	10 91 85 2e 	lds	r17, 0x2E85
    6104:	40 90 b6 24 	lds	r4, 0x24B6
    6108:	50 90 b7 24 	lds	r5, 0x24B7
    610c:	60 90 b8 24 	lds	r6, 0x24B8
    6110:	70 90 b9 24 	lds	r7, 0x24B9
    6114:	c0 91 6a 2e 	lds	r28, 0x2E6A
    6118:	d0 91 6b 2e 	lds	r29, 0x2E6B
    611c:	80 90 4c 2e 	lds	r8, 0x2E4C
    6120:	90 90 4d 2e 	lds	r9, 0x2E4D
    6124:	a0 90 4e 2e 	lds	r10, 0x2E4E
    6128:	b0 90 4f 2e 	lds	r11, 0x2E4F
    612c:	88 27       	eor	r24, r24
    612e:	77 fd       	sbrc	r23, 7
    6130:	80 95       	com	r24
    6132:	98 2f       	mov	r25, r24
    6134:	bb d4       	rcall	.+2422   	; 0x6aac <__floatsisf>
    6136:	a7 01       	movw	r20, r14
    6138:	96 01       	movw	r18, r12
    613a:	d1 d5       	rcall	.+2978   	; 0x6cde <__mulsf3>
    613c:	6b 01       	movw	r12, r22
    613e:	7c 01       	movw	r14, r24
    6140:	b8 01       	movw	r22, r16
    6142:	88 27       	eor	r24, r24
    6144:	77 fd       	sbrc	r23, 7
    6146:	80 95       	com	r24
    6148:	98 2f       	mov	r25, r24
    614a:	b0 d4       	rcall	.+2400   	; 0x6aac <__floatsisf>
    614c:	a3 01       	movw	r20, r6
    614e:	92 01       	movw	r18, r4
    6150:	c6 d5       	rcall	.+2956   	; 0x6cde <__mulsf3>
    6152:	9b 01       	movw	r18, r22
    6154:	ac 01       	movw	r20, r24
    6156:	c7 01       	movw	r24, r14
    6158:	b6 01       	movw	r22, r12
    615a:	40 d3       	rcall	.+1664   	; 0x67dc <__addsf3>
    615c:	6b 01       	movw	r12, r22
    615e:	7c 01       	movw	r14, r24
    6160:	be 01       	movw	r22, r28
    6162:	88 27       	eor	r24, r24
    6164:	77 fd       	sbrc	r23, 7
    6166:	80 95       	com	r24
    6168:	98 2f       	mov	r25, r24
    616a:	a0 d4       	rcall	.+2368   	; 0x6aac <__floatsisf>
    616c:	a5 01       	movw	r20, r10
    616e:	94 01       	movw	r18, r8
    6170:	b6 d5       	rcall	.+2924   	; 0x6cde <__mulsf3>
    6172:	9b 01       	movw	r18, r22
    6174:	ac 01       	movw	r20, r24
    6176:	c7 01       	movw	r24, r14
    6178:	b6 01       	movw	r22, r12
    617a:	30 d3       	rcall	.+1632   	; 0x67dc <__addsf3>
    617c:	64 d4       	rcall	.+2248   	; 0x6a46 <__fixsfsi>
    617e:	60 93 d5 28 	sts	0x28D5, r22
    6182:	70 93 d6 28 	sts	0x28D6, r23
    6186:	80 93 d7 28 	sts	0x28D7, r24
    618a:	90 93 d8 28 	sts	0x28D8, r25
	PID_ukupni_R = (float)(Pe_brzina_R) * Kp_brzina + (float)(Ie_brzina_R) * Ki_brzina + (float)(De_brzina_R) * Kd_brzina;
    618e:	60 91 02 2e 	lds	r22, 0x2E02
    6192:	70 91 03 2e 	lds	r23, 0x2E03
    6196:	c0 90 cf 28 	lds	r12, 0x28CF
    619a:	d0 90 d0 28 	lds	r13, 0x28D0
    619e:	e0 90 d1 28 	lds	r14, 0x28D1
    61a2:	f0 90 d2 28 	lds	r15, 0x28D2
    61a6:	00 91 c0 24 	lds	r16, 0x24C0
    61aa:	10 91 c1 24 	lds	r17, 0x24C1
    61ae:	40 90 b6 24 	lds	r4, 0x24B6
    61b2:	50 90 b7 24 	lds	r5, 0x24B7
    61b6:	60 90 b8 24 	lds	r6, 0x24B8
    61ba:	70 90 b9 24 	lds	r7, 0x24B9
    61be:	c0 91 c5 28 	lds	r28, 0x28C5
    61c2:	d0 91 c6 28 	lds	r29, 0x28C6
    61c6:	80 90 4c 2e 	lds	r8, 0x2E4C
    61ca:	90 90 4d 2e 	lds	r9, 0x2E4D
    61ce:	a0 90 4e 2e 	lds	r10, 0x2E4E
    61d2:	b0 90 4f 2e 	lds	r11, 0x2E4F
    61d6:	88 27       	eor	r24, r24
    61d8:	77 fd       	sbrc	r23, 7
    61da:	80 95       	com	r24
    61dc:	98 2f       	mov	r25, r24
    61de:	66 d4       	rcall	.+2252   	; 0x6aac <__floatsisf>
    61e0:	a7 01       	movw	r20, r14
    61e2:	96 01       	movw	r18, r12
    61e4:	7c d5       	rcall	.+2808   	; 0x6cde <__mulsf3>
    61e6:	6b 01       	movw	r12, r22
    61e8:	7c 01       	movw	r14, r24
    61ea:	b8 01       	movw	r22, r16
    61ec:	88 27       	eor	r24, r24
    61ee:	77 fd       	sbrc	r23, 7
    61f0:	80 95       	com	r24
    61f2:	98 2f       	mov	r25, r24
    61f4:	5b d4       	rcall	.+2230   	; 0x6aac <__floatsisf>
    61f6:	a3 01       	movw	r20, r6
    61f8:	92 01       	movw	r18, r4
    61fa:	71 d5       	rcall	.+2786   	; 0x6cde <__mulsf3>
    61fc:	9b 01       	movw	r18, r22
    61fe:	ac 01       	movw	r20, r24
    6200:	c7 01       	movw	r24, r14
    6202:	b6 01       	movw	r22, r12
    6204:	eb d2       	rcall	.+1494   	; 0x67dc <__addsf3>
    6206:	6b 01       	movw	r12, r22
    6208:	7c 01       	movw	r14, r24
    620a:	be 01       	movw	r22, r28
    620c:	88 27       	eor	r24, r24
    620e:	77 fd       	sbrc	r23, 7
    6210:	80 95       	com	r24
    6212:	98 2f       	mov	r25, r24
    6214:	4b d4       	rcall	.+2198   	; 0x6aac <__floatsisf>
    6216:	a5 01       	movw	r20, r10
    6218:	94 01       	movw	r18, r8
    621a:	61 d5       	rcall	.+2754   	; 0x6cde <__mulsf3>
    621c:	9b 01       	movw	r18, r22
    621e:	ac 01       	movw	r20, r24
    6220:	c7 01       	movw	r24, r14
    6222:	b6 01       	movw	r22, r12
    6224:	db d2       	rcall	.+1462   	; 0x67dc <__addsf3>
    6226:	0f d4       	rcall	.+2078   	; 0x6a46 <__fixsfsi>
    6228:	60 93 80 2e 	sts	0x2E80, r22
    622c:	70 93 81 2e 	sts	0x2E81, r23
    6230:	80 93 82 2e 	sts	0x2E82, r24
    6234:	90 93 83 2e 	sts	0x2E83, r25

	//preskaliranje - ne mora da se radi posto su max_brzina_motora i PWM_perioda slicne velicine
	//PID_ukupni_L = (PID_ukupni_L * PWM_perioda) / max_brzina_motora; 
	
	//Ogranicenje PID izlaza
	if(PID_ukupni_L > PWM_perioda)
    6238:	40 91 5a 2e 	lds	r20, 0x2E5A
    623c:	50 91 5b 2e 	lds	r21, 0x2E5B
    6240:	80 91 d5 28 	lds	r24, 0x28D5
    6244:	90 91 d6 28 	lds	r25, 0x28D6
    6248:	a0 91 d7 28 	lds	r26, 0x28D7
    624c:	b0 91 d8 28 	lds	r27, 0x28D8
    6250:	66 27       	eor	r22, r22
    6252:	57 fd       	sbrc	r21, 7
    6254:	60 95       	com	r22
    6256:	76 2f       	mov	r23, r22
    6258:	48 17       	cp	r20, r24
    625a:	59 07       	cpc	r21, r25
    625c:	6a 07       	cpc	r22, r26
    625e:	7b 07       	cpc	r23, r27
    6260:	84 f4       	brge	.+32     	; 0x6282 <PID_brzinski+0x3fe>
		PID_ukupni_L = PWM_perioda;
    6262:	80 91 5a 2e 	lds	r24, 0x2E5A
    6266:	90 91 5b 2e 	lds	r25, 0x2E5B
    626a:	aa 27       	eor	r26, r26
    626c:	97 fd       	sbrc	r25, 7
    626e:	a0 95       	com	r26
    6270:	ba 2f       	mov	r27, r26
    6272:	80 93 d5 28 	sts	0x28D5, r24
    6276:	90 93 d6 28 	sts	0x28D6, r25
    627a:	a0 93 d7 28 	sts	0x28D7, r26
    627e:	b0 93 d8 28 	sts	0x28D8, r27
	if(PID_ukupni_L < -PWM_perioda)
    6282:	40 91 5a 2e 	lds	r20, 0x2E5A
    6286:	50 91 5b 2e 	lds	r21, 0x2E5B
    628a:	80 91 d5 28 	lds	r24, 0x28D5
    628e:	90 91 d6 28 	lds	r25, 0x28D6
    6292:	a0 91 d7 28 	lds	r26, 0x28D7
    6296:	b0 91 d8 28 	lds	r27, 0x28D8
    629a:	51 95       	neg	r21
    629c:	41 95       	neg	r20
    629e:	51 09       	sbc	r21, r1
    62a0:	66 27       	eor	r22, r22
    62a2:	57 fd       	sbrc	r21, 7
    62a4:	60 95       	com	r22
    62a6:	76 2f       	mov	r23, r22
    62a8:	84 17       	cp	r24, r20
    62aa:	95 07       	cpc	r25, r21
    62ac:	a6 07       	cpc	r26, r22
    62ae:	b7 07       	cpc	r27, r23
    62b0:	9c f4       	brge	.+38     	; 0x62d8 <PID_brzinski+0x454>
		PID_ukupni_L = -PWM_perioda;
    62b2:	80 91 5a 2e 	lds	r24, 0x2E5A
    62b6:	90 91 5b 2e 	lds	r25, 0x2E5B
    62ba:	91 95       	neg	r25
    62bc:	81 95       	neg	r24
    62be:	91 09       	sbc	r25, r1
    62c0:	aa 27       	eor	r26, r26
    62c2:	97 fd       	sbrc	r25, 7
    62c4:	a0 95       	com	r26
    62c6:	ba 2f       	mov	r27, r26
    62c8:	80 93 d5 28 	sts	0x28D5, r24
    62cc:	90 93 d6 28 	sts	0x28D6, r25
    62d0:	a0 93 d7 28 	sts	0x28D7, r26
    62d4:	b0 93 d8 28 	sts	0x28D8, r27
		
	if(PID_ukupni_R > PWM_perioda)
    62d8:	40 91 5a 2e 	lds	r20, 0x2E5A
    62dc:	50 91 5b 2e 	lds	r21, 0x2E5B
    62e0:	80 91 80 2e 	lds	r24, 0x2E80
    62e4:	90 91 81 2e 	lds	r25, 0x2E81
    62e8:	a0 91 82 2e 	lds	r26, 0x2E82
    62ec:	b0 91 83 2e 	lds	r27, 0x2E83
    62f0:	66 27       	eor	r22, r22
    62f2:	57 fd       	sbrc	r21, 7
    62f4:	60 95       	com	r22
    62f6:	76 2f       	mov	r23, r22
    62f8:	48 17       	cp	r20, r24
    62fa:	59 07       	cpc	r21, r25
    62fc:	6a 07       	cpc	r22, r26
    62fe:	7b 07       	cpc	r23, r27
    6300:	84 f4       	brge	.+32     	; 0x6322 <PID_brzinski+0x49e>
		PID_ukupni_R = PWM_perioda;
    6302:	80 91 5a 2e 	lds	r24, 0x2E5A
    6306:	90 91 5b 2e 	lds	r25, 0x2E5B
    630a:	aa 27       	eor	r26, r26
    630c:	97 fd       	sbrc	r25, 7
    630e:	a0 95       	com	r26
    6310:	ba 2f       	mov	r27, r26
    6312:	80 93 80 2e 	sts	0x2E80, r24
    6316:	90 93 81 2e 	sts	0x2E81, r25
    631a:	a0 93 82 2e 	sts	0x2E82, r26
    631e:	b0 93 83 2e 	sts	0x2E83, r27
	if(PID_ukupni_R < -PWM_perioda)
    6322:	40 91 5a 2e 	lds	r20, 0x2E5A
    6326:	50 91 5b 2e 	lds	r21, 0x2E5B
    632a:	80 91 80 2e 	lds	r24, 0x2E80
    632e:	90 91 81 2e 	lds	r25, 0x2E81
    6332:	a0 91 82 2e 	lds	r26, 0x2E82
    6336:	b0 91 83 2e 	lds	r27, 0x2E83
    633a:	51 95       	neg	r21
    633c:	41 95       	neg	r20
    633e:	51 09       	sbc	r21, r1
    6340:	66 27       	eor	r22, r22
    6342:	57 fd       	sbrc	r21, 7
    6344:	60 95       	com	r22
    6346:	76 2f       	mov	r23, r22
    6348:	84 17       	cp	r24, r20
    634a:	95 07       	cpc	r25, r21
    634c:	a6 07       	cpc	r26, r22
    634e:	b7 07       	cpc	r27, r23
    6350:	9c f4       	brge	.+38     	; 0x6378 <PID_brzinski+0x4f4>
		PID_ukupni_R = -PWM_perioda;
    6352:	80 91 5a 2e 	lds	r24, 0x2E5A
    6356:	90 91 5b 2e 	lds	r25, 0x2E5B
    635a:	91 95       	neg	r25
    635c:	81 95       	neg	r24
    635e:	91 09       	sbc	r25, r1
    6360:	aa 27       	eor	r26, r26
    6362:	97 fd       	sbrc	r25, 7
    6364:	a0 95       	com	r26
    6366:	ba 2f       	mov	r27, r26
    6368:	80 93 80 2e 	sts	0x2E80, r24
    636c:	90 93 81 2e 	sts	0x2E81, r25
    6370:	a0 93 82 2e 	sts	0x2E82, r26
    6374:	b0 93 83 2e 	sts	0x2E83, r27
		
	//levi motor
	if (PID_ukupni_L > 3)/*if (PID_ukupni_L > 5)*/	//smer 1
    6378:	80 91 d5 28 	lds	r24, 0x28D5
    637c:	90 91 d6 28 	lds	r25, 0x28D6
    6380:	a0 91 d7 28 	lds	r26, 0x28D7
    6384:	b0 91 d8 28 	lds	r27, 0x28D8
    6388:	04 97       	sbiw	r24, 0x04	; 4
    638a:	a1 05       	cpc	r26, r1
    638c:	b1 05       	cpc	r27, r1
    638e:	9c f0       	brlt	.+38     	; 0x63b6 <PID_brzinski+0x532>
	{
		PORT_ClearPins(&PORTH, 0b00010000);	//IN_A2=0
    6390:	e0 ee       	ldi	r30, 0xE0	; 224
    6392:	f6 e0       	ldi	r31, 0x06	; 6
    6394:	80 e1       	ldi	r24, 0x10	; 16
    6396:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b10000000);	//IN_B2=1
    6398:	80 e8       	ldi	r24, 0x80	; 128
    639a:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCBBUF = PID_ukupni_L;
    639c:	80 91 d5 28 	lds	r24, 0x28D5
    63a0:	90 91 d6 28 	lds	r25, 0x28D6
    63a4:	a0 91 d7 28 	lds	r26, 0x28D7
    63a8:	b0 91 d8 28 	lds	r27, 0x28D8
    63ac:	e0 e4       	ldi	r30, 0x40	; 64
    63ae:	fb e0       	ldi	r31, 0x0B	; 11
    63b0:	82 af       	std	Z+58, r24	; 0x3a
    63b2:	93 af       	std	Z+59, r25	; 0x3b
    63b4:	27 c0       	rjmp	.+78     	; 0x6404 <PID_brzinski+0x580>
	}
	else if (PID_ukupni_L < -3)	//smer 2
    63b6:	80 91 d5 28 	lds	r24, 0x28D5
    63ba:	90 91 d6 28 	lds	r25, 0x28D6
    63be:	a0 91 d7 28 	lds	r26, 0x28D7
    63c2:	b0 91 d8 28 	lds	r27, 0x28D8
    63c6:	8d 3f       	cpi	r24, 0xFD	; 253
    63c8:	9f 4f       	sbci	r25, 0xFF	; 255
    63ca:	af 4f       	sbci	r26, 0xFF	; 255
    63cc:	bf 4f       	sbci	r27, 0xFF	; 255
    63ce:	b4 f4       	brge	.+44     	; 0x63fc <PID_brzinski+0x578>
	{
		PORT_ClearPins(&PORTH, 0b10000000);	//IN_B2=0
    63d0:	e0 ee       	ldi	r30, 0xE0	; 224
    63d2:	f6 e0       	ldi	r31, 0x06	; 6
    63d4:	80 e8       	ldi	r24, 0x80	; 128
    63d6:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00010000);	//IN_A2=1,
    63d8:	80 e1       	ldi	r24, 0x10	; 16
    63da:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCBBUF = -PID_ukupni_L;
    63dc:	80 91 d5 28 	lds	r24, 0x28D5
    63e0:	90 91 d6 28 	lds	r25, 0x28D6
    63e4:	a0 91 d7 28 	lds	r26, 0x28D7
    63e8:	b0 91 d8 28 	lds	r27, 0x28D8
    63ec:	91 95       	neg	r25
    63ee:	81 95       	neg	r24
    63f0:	91 09       	sbc	r25, r1
    63f2:	e0 e4       	ldi	r30, 0x40	; 64
    63f4:	fb e0       	ldi	r31, 0x0B	; 11
    63f6:	82 af       	std	Z+58, r24	; 0x3a
    63f8:	93 af       	std	Z+59, r25	; 0x3b
    63fa:	04 c0       	rjmp	.+8      	; 0x6404 <PID_brzinski+0x580>
	}
	else	//kocenje
		PORT_ClearPins(&PORTH, 0b10010000);	//IN_A2=0, IN_B2=0	
    63fc:	80 e9       	ldi	r24, 0x90	; 144
    63fe:	e0 ee       	ldi	r30, 0xE0	; 224
    6400:	f6 e0       	ldi	r31, 0x06	; 6
    6402:	86 83       	std	Z+6, r24	; 0x06
	//desni motor
	if (PID_ukupni_R > 3) //smer 1
    6404:	80 91 80 2e 	lds	r24, 0x2E80
    6408:	90 91 81 2e 	lds	r25, 0x2E81
    640c:	a0 91 82 2e 	lds	r26, 0x2E82
    6410:	b0 91 83 2e 	lds	r27, 0x2E83
    6414:	04 97       	sbiw	r24, 0x04	; 4
    6416:	a1 05       	cpc	r26, r1
    6418:	b1 05       	cpc	r27, r1
    641a:	9c f0       	brlt	.+38     	; 0x6442 <PID_brzinski+0x5be>
	{
		PORT_ClearPins(&PORTH, 0b00001000);	//IN_B1=0
    641c:	e0 ee       	ldi	r30, 0xE0	; 224
    641e:	f6 e0       	ldi	r31, 0x06	; 6
    6420:	88 e0       	ldi	r24, 0x08	; 8
    6422:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00000001);	//IN_A1=1
    6424:	81 e0       	ldi	r24, 0x01	; 1
    6426:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCABUF = PID_ukupni_R;
    6428:	80 91 80 2e 	lds	r24, 0x2E80
    642c:	90 91 81 2e 	lds	r25, 0x2E81
    6430:	a0 91 82 2e 	lds	r26, 0x2E82
    6434:	b0 91 83 2e 	lds	r27, 0x2E83
    6438:	e0 e4       	ldi	r30, 0x40	; 64
    643a:	fb e0       	ldi	r31, 0x0B	; 11
    643c:	80 af       	std	Z+56, r24	; 0x38
    643e:	91 af       	std	Z+57, r25	; 0x39
    6440:	27 c0       	rjmp	.+78     	; 0x6490 <PID_brzinski+0x60c>
	}
	else if (PID_ukupni_R < -3)	//smer 2
    6442:	80 91 80 2e 	lds	r24, 0x2E80
    6446:	90 91 81 2e 	lds	r25, 0x2E81
    644a:	a0 91 82 2e 	lds	r26, 0x2E82
    644e:	b0 91 83 2e 	lds	r27, 0x2E83
    6452:	8d 3f       	cpi	r24, 0xFD	; 253
    6454:	9f 4f       	sbci	r25, 0xFF	; 255
    6456:	af 4f       	sbci	r26, 0xFF	; 255
    6458:	bf 4f       	sbci	r27, 0xFF	; 255
    645a:	b4 f4       	brge	.+44     	; 0x6488 <PID_brzinski+0x604>
	{
		PORT_ClearPins(&PORTH, 0b00000001);	//IN_A1=0
    645c:	e0 ee       	ldi	r30, 0xE0	; 224
    645e:	f6 e0       	ldi	r31, 0x06	; 6
    6460:	81 e0       	ldi	r24, 0x01	; 1
    6462:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00001000);	//IN_B1=1
    6464:	88 e0       	ldi	r24, 0x08	; 8
    6466:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCABUF = -PID_ukupni_R;
    6468:	80 91 80 2e 	lds	r24, 0x2E80
    646c:	90 91 81 2e 	lds	r25, 0x2E81
    6470:	a0 91 82 2e 	lds	r26, 0x2E82
    6474:	b0 91 83 2e 	lds	r27, 0x2E83
    6478:	91 95       	neg	r25
    647a:	81 95       	neg	r24
    647c:	91 09       	sbc	r25, r1
    647e:	e0 e4       	ldi	r30, 0x40	; 64
    6480:	fb e0       	ldi	r31, 0x0B	; 11
    6482:	80 af       	std	Z+56, r24	; 0x38
    6484:	91 af       	std	Z+57, r25	; 0x39
    6486:	04 c0       	rjmp	.+8      	; 0x6490 <PID_brzinski+0x60c>
	}
	else //kocenje
		PORT_ClearPins(&PORTH, 0b00001001);	//IN_A1=0, IN_B1=0
    6488:	89 e0       	ldi	r24, 0x09	; 9
    648a:	e0 ee       	ldi	r30, 0xE0	; 224
    648c:	f6 e0       	ldi	r31, 0x06	; 6
    648e:	86 83       	std	Z+6, r24	; 0x06
		
}
    6490:	df 91       	pop	r29
    6492:	cf 91       	pop	r28
    6494:	1f 91       	pop	r17
    6496:	0f 91       	pop	r16
    6498:	ff 90       	pop	r15
    649a:	ef 90       	pop	r14
    649c:	df 90       	pop	r13
    649e:	cf 90       	pop	r12
    64a0:	bf 90       	pop	r11
    64a2:	af 90       	pop	r10
    64a4:	9f 90       	pop	r9
    64a6:	8f 90       	pop	r8
    64a8:	7f 90       	pop	r7
    64aa:	6f 90       	pop	r6
    64ac:	5f 90       	pop	r5
    64ae:	4f 90       	pop	r4
    64b0:	08 95       	ret

000064b2 <PORT_ConfigureInterrupt0>:
void PORT_ConfigureInterrupt1( PORT_t * port,
                               PORT_INT1LVL_t intLevel,
                               uint8_t pinMask )
{
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT1LVL_gm ) | intLevel;
	port->INT1MASK = pinMask;
    64b2:	fc 01       	movw	r30, r24
    64b4:	81 85       	ldd	r24, Z+9	; 0x09
    64b6:	8c 7f       	andi	r24, 0xFC	; 252
    64b8:	68 2b       	or	r22, r24
    64ba:	61 87       	std	Z+9, r22	; 0x09
    64bc:	42 87       	std	Z+10, r20	; 0x0a
    64be:	08 95       	ret

000064c0 <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
    64c0:	ef 92       	push	r14
    64c2:	0f 93       	push	r16
	// Build pin control register value
	// N.B. Look in iox126a1.h for description of bit and group masks
	uint8_t temp = (uint8_t) opc |
    64c4:	0e 29       	or	r16, r14
    64c6:	44 23       	and	r20, r20
    64c8:	11 f0       	breq	.+4      	; 0x64ce <PORT_ConfigurePins+0xe>
    64ca:	30 e8       	ldi	r19, 0x80	; 128
    64cc:	01 c0       	rjmp	.+2      	; 0x64d0 <PORT_ConfigurePins+0x10>
    64ce:	30 e0       	ldi	r19, 0x00	; 0
    64d0:	03 2b       	or	r16, r19
    64d2:	22 23       	and	r18, r18
    64d4:	11 f0       	breq	.+4      	; 0x64da <PORT_ConfigurePins+0x1a>
    64d6:	20 e4       	ldi	r18, 0x40	; 64
    64d8:	01 c0       	rjmp	.+2      	; 0x64dc <PORT_ConfigurePins+0x1c>
    64da:	20 e0       	ldi	r18, 0x00	; 0
    64dc:	02 2b       	or	r16, r18
	               (invertEnable ? PORT_INVEN_bm : 0);

	// Configure the pins in one atomic operation. 

	// Save status register. 
	uint8_t sreg = SREG;
    64de:	2f b7       	in	r18, 0x3f	; 63

	// Disable the global interrupt flag
	cli();	
    64e0:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
    64e2:	60 93 b0 00 	sts	0x00B0, r22
	port->PIN0CTRL = temp;
    64e6:	fc 01       	movw	r30, r24
    64e8:	00 8b       	std	Z+16, r16	; 0x10

	// Restore status register. 
	SREG = sreg;
    64ea:	2f bf       	out	0x3f, r18	; 63
}
    64ec:	0f 91       	pop	r16
    64ee:	ef 90       	pop	r14
    64f0:	08 95       	ret

000064f2 <TC1_ConfigClockSource>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    64f2:	fc 01       	movw	r30, r24
    64f4:	20 81       	ld	r18, Z
    64f6:	20 7f       	andi	r18, 0xF0	; 240
    64f8:	62 2b       	or	r22, r18
    64fa:	60 83       	st	Z, r22
    64fc:	08 95       	ret

000064fe <TC1_SetOverflowIntLevel>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
    64fe:	fc 01       	movw	r30, r24
    6500:	26 81       	ldd	r18, Z+6	; 0x06
    6502:	2c 7f       	andi	r18, 0xFC	; 252
    6504:	62 2b       	or	r22, r18
    6506:	66 83       	std	Z+6, r22	; 0x06
    6508:	08 95       	ret

0000650a <nuliraj_poziciju_robota>:
	uint16_t res = (uint16_t)(deg*(250/180));	//250 cycles for 180 degree turn
	if(res <= 0)
		res = 125;								//125 cycles for 0 degree turn
	else if(res > 250)
		res = 250;
	TCF0.CCA = res;
    650a:	10 92 ac 24 	sts	0x24AC, r1
    650e:	10 92 ad 24 	sts	0x24AD, r1
    6512:	10 92 ae 24 	sts	0x24AE, r1
    6516:	10 92 af 24 	sts	0x24AF, r1
    651a:	10 92 1f 2e 	sts	0x2E1F, r1
    651e:	10 92 20 2e 	sts	0x2E20, r1
    6522:	10 92 21 2e 	sts	0x2E21, r1
    6526:	10 92 22 2e 	sts	0x2E22, r1
    652a:	10 92 07 2e 	sts	0x2E07, r1
    652e:	10 92 08 2e 	sts	0x2E08, r1
    6532:	10 92 09 2e 	sts	0x2E09, r1
    6536:	10 92 0a 2e 	sts	0x2E0A, r1
    653a:	10 92 fe 29 	sts	0x29FE, r1
    653e:	10 92 ff 29 	sts	0x29FF, r1
    6542:	10 92 00 2a 	sts	0x2A00, r1
    6546:	10 92 01 2a 	sts	0x2A01, r1
    654a:	10 92 00 20 	sts	0x2000, r1
    654e:	10 92 01 20 	sts	0x2001, r1
    6552:	10 92 02 20 	sts	0x2002, r1
    6556:	10 92 03 20 	sts	0x2003, r1
    655a:	10 92 c8 24 	sts	0x24C8, r1
    655e:	10 92 c9 24 	sts	0x24C9, r1
    6562:	10 92 ca 24 	sts	0x24CA, r1
    6566:	10 92 cb 24 	sts	0x24CB, r1
    656a:	10 92 7f 32 	sts	0x327F, r1
    656e:	10 92 80 32 	sts	0x3280, r1
    6572:	10 92 81 32 	sts	0x3281, r1
    6576:	10 92 82 32 	sts	0x3282, r1
    657a:	81 e0       	ldi	r24, 0x01	; 1
    657c:	80 93 74 2e 	sts	0x2E74, r24
    6580:	80 93 5a 29 	sts	0x295A, r24
    6584:	e0 e0       	ldi	r30, 0x00	; 0
    6586:	f9 e0       	ldi	r31, 0x09	; 9
    6588:	10 a2       	std	Z+32, r1	; 0x20
    658a:	11 a2       	std	Z+33, r1	; 0x21
    658c:	e0 e4       	ldi	r30, 0x40	; 64
    658e:	f9 e0       	ldi	r31, 0x09	; 9
    6590:	10 a2       	std	Z+32, r1	; 0x20
    6592:	11 a2       	std	Z+33, r1	; 0x21
    6594:	10 92 79 32 	sts	0x3279, r1
    6598:	10 92 7a 32 	sts	0x327A, r1
    659c:	10 92 1a 2e 	sts	0x2E1A, r1
    65a0:	10 92 1b 2e 	sts	0x2E1B, r1
    65a4:	10 92 1c 2e 	sts	0x2E1C, r1
    65a8:	10 92 1d 2e 	sts	0x2E1D, r1
    65ac:	10 92 ea 29 	sts	0x29EA, r1
    65b0:	10 92 eb 29 	sts	0x29EB, r1
    65b4:	10 92 ec 29 	sts	0x29EC, r1
    65b8:	10 92 ed 29 	sts	0x29ED, r1
    65bc:	10 92 29 2e 	sts	0x2E29, r1
    65c0:	10 92 2a 2e 	sts	0x2E2A, r1
    65c4:	08 95       	ret

000065c6 <__vector_110>:
}

ISR(TCF0_CCA_vect)
{
    65c6:	1f 92       	push	r1
    65c8:	0f 92       	push	r0
    65ca:	0f b6       	in	r0, 0x3f	; 63
    65cc:	0f 92       	push	r0
    65ce:	11 24       	eor	r1, r1
    65d0:	08 b6       	in	r0, 0x38	; 56
    65d2:	0f 92       	push	r0
    65d4:	18 be       	out	0x38, r1	; 56
    65d6:	0b b6       	in	r0, 0x3b	; 59
    65d8:	0f 92       	push	r0
    65da:	1b be       	out	0x3b, r1	; 59
    65dc:	8f 93       	push	r24
    65de:	ef 93       	push	r30
    65e0:	ff 93       	push	r31
	PORTF.OUT |= (1 << 0);
    65e2:	e0 ea       	ldi	r30, 0xA0	; 160
    65e4:	f6 e0       	ldi	r31, 0x06	; 6
    65e6:	84 81       	ldd	r24, Z+4	; 0x04
    65e8:	81 60       	ori	r24, 0x01	; 1
    65ea:	84 83       	std	Z+4, r24	; 0x04
}
    65ec:	ff 91       	pop	r31
    65ee:	ef 91       	pop	r30
    65f0:	8f 91       	pop	r24
    65f2:	0f 90       	pop	r0
    65f4:	0b be       	out	0x3b, r0	; 59
    65f6:	0f 90       	pop	r0
    65f8:	08 be       	out	0x38, r0	; 56
    65fa:	0f 90       	pop	r0
    65fc:	0f be       	out	0x3f, r0	; 63
    65fe:	0f 90       	pop	r0
    6600:	1f 90       	pop	r1
    6602:	18 95       	reti

00006604 <__vector_108>:

ISR(TCF0_OVF_vect)
{
    6604:	1f 92       	push	r1
    6606:	0f 92       	push	r0
    6608:	0f b6       	in	r0, 0x3f	; 63
    660a:	0f 92       	push	r0
    660c:	11 24       	eor	r1, r1
    660e:	08 b6       	in	r0, 0x38	; 56
    6610:	0f 92       	push	r0
    6612:	18 be       	out	0x38, r1	; 56
    6614:	0b b6       	in	r0, 0x3b	; 59
    6616:	0f 92       	push	r0
    6618:	1b be       	out	0x3b, r1	; 59
    661a:	8f 93       	push	r24
    661c:	ef 93       	push	r30
    661e:	ff 93       	push	r31
	PORTF.OUT &= ~(1 << 0);
    6620:	e0 ea       	ldi	r30, 0xA0	; 160
    6622:	f6 e0       	ldi	r31, 0x06	; 6
    6624:	84 81       	ldd	r24, Z+4	; 0x04
    6626:	8e 7f       	andi	r24, 0xFE	; 254
    6628:	84 83       	std	Z+4, r24	; 0x04
}
    662a:	ff 91       	pop	r31
    662c:	ef 91       	pop	r30
    662e:	8f 91       	pop	r24
    6630:	0f 90       	pop	r0
    6632:	0b be       	out	0x3b, r0	; 59
    6634:	0f 90       	pop	r0
    6636:	08 be       	out	0x38, r0	; 56
    6638:	0f 90       	pop	r0
    663a:	0f be       	out	0x3f, r0	; 63
    663c:	0f 90       	pop	r0
    663e:	1f 90       	pop	r1
    6640:	18 95       	reti

00006642 <USART_InterruptDriver_Initialize>:
	uint8_t tempHead = usart_data->buffer.RX_Head;
	uint8_t tempTail = usart_data->buffer.RX_Tail;

	// There are data left in the buffer unless Head and Tail are equal.  
	return (tempHead != tempTail);
}
    6642:	fc 01       	movw	r30, r24
    6644:	60 83       	st	Z, r22
    6646:	71 83       	std	Z+1, r23	; 0x01
    6648:	42 83       	std	Z+2, r20	; 0x02
    664a:	ec 57       	subi	r30, 0x7C	; 124
    664c:	fe 4f       	sbci	r31, 0xFE	; 254
    664e:	10 82       	st	Z, r1
    6650:	fc 01       	movw	r30, r24
    6652:	ed 57       	subi	r30, 0x7D	; 125
    6654:	fe 4f       	sbci	r31, 0xFE	; 254
    6656:	10 82       	st	Z, r1
    6658:	fc 01       	movw	r30, r24
    665a:	ea 57       	subi	r30, 0x7A	; 122
    665c:	fe 4f       	sbci	r31, 0xFE	; 254
    665e:	10 82       	st	Z, r1
    6660:	fc 01       	movw	r30, r24
    6662:	eb 57       	subi	r30, 0x7B	; 123
    6664:	fe 4f       	sbci	r31, 0xFE	; 254
    6666:	10 82       	st	Z, r1
    6668:	08 95       	ret

0000666a <USART_TXBuffer_FreeSpace>:
    666a:	fc 01       	movw	r30, r24
    666c:	eb 57       	subi	r30, 0x7B	; 123
    666e:	fe 4f       	sbci	r31, 0xFE	; 254
    6670:	20 81       	ld	r18, Z
    6672:	fc 01       	movw	r30, r24
    6674:	ea 57       	subi	r30, 0x7A	; 122
    6676:	fe 4f       	sbci	r31, 0xFE	; 254
    6678:	90 81       	ld	r25, Z
    667a:	2f 5f       	subi	r18, 0xFF	; 255
    667c:	81 e0       	ldi	r24, 0x01	; 1
    667e:	29 13       	cpse	r18, r25
    6680:	01 c0       	rjmp	.+2      	; 0x6684 <USART_TXBuffer_FreeSpace+0x1a>
    6682:	80 e0       	ldi	r24, 0x00	; 0
    6684:	08 95       	ret

00006686 <USART_TXBuffer_PutByte>:
    6686:	1f 93       	push	r17
    6688:	cf 93       	push	r28
    668a:	df 93       	push	r29
    668c:	ec 01       	movw	r28, r24
    668e:	16 2f       	mov	r17, r22
    6690:	ec df       	rcall	.-40     	; 0x666a <USART_TXBuffer_FreeSpace>
    6692:	88 23       	and	r24, r24
    6694:	99 f0       	breq	.+38     	; 0x66bc <USART_TXBuffer_PutByte+0x36>
    6696:	fe 01       	movw	r30, r28
    6698:	eb 57       	subi	r30, 0x7B	; 123
    669a:	fe 4f       	sbci	r31, 0xFE	; 254
    669c:	90 81       	ld	r25, Z
    669e:	de 01       	movw	r26, r28
    66a0:	a9 0f       	add	r26, r25
    66a2:	b1 1d       	adc	r27, r1
    66a4:	ad 57       	subi	r26, 0x7D	; 125
    66a6:	bf 4f       	sbci	r27, 0xFF	; 255
    66a8:	1c 93       	st	X, r17
    66aa:	9f 5f       	subi	r25, 0xFF	; 255
    66ac:	90 83       	st	Z, r25
    66ae:	e8 81       	ld	r30, Y
    66b0:	f9 81       	ldd	r31, Y+1	; 0x01
    66b2:	93 81       	ldd	r25, Z+3	; 0x03
    66b4:	9c 7f       	andi	r25, 0xFC	; 252
    66b6:	2a 81       	ldd	r18, Y+2	; 0x02
    66b8:	92 2b       	or	r25, r18
    66ba:	93 83       	std	Z+3, r25	; 0x03
    66bc:	df 91       	pop	r29
    66be:	cf 91       	pop	r28
    66c0:	1f 91       	pop	r17
    66c2:	08 95       	ret

000066c4 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    66c4:	fc 01       	movw	r30, r24
    66c6:	ec 57       	subi	r30, 0x7C	; 124
    66c8:	fe 4f       	sbci	r31, 0xFE	; 254
    66ca:	20 81       	ld	r18, Z
    66cc:	dc 01       	movw	r26, r24
    66ce:	a2 0f       	add	r26, r18
    66d0:	b1 1d       	adc	r27, r1
    66d2:	13 96       	adiw	r26, 0x03	; 3
    66d4:	8c 91       	ld	r24, X

	// Advance buffer tail.  
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    66d6:	90 81       	ld	r25, Z
    66d8:	9f 5f       	subi	r25, 0xFF	; 255
    66da:	9f 77       	andi	r25, 0x7F	; 127
    66dc:	90 83       	st	Z, r25

	return ans;
}
    66de:	08 95       	ret

000066e0 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	// Advance buffer head.  
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    66e0:	fc 01       	movw	r30, r24
    66e2:	ed 57       	subi	r30, 0x7D	; 125
    66e4:	fe 4f       	sbci	r31, 0xFE	; 254
    66e6:	20 81       	ld	r18, Z
    66e8:	2f 5f       	subi	r18, 0xFF	; 255
    66ea:	2f 77       	andi	r18, 0x7F	; 127

	// Check for overflow.  
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    66ec:	fc 01       	movw	r30, r24
    66ee:	ec 57       	subi	r30, 0x7C	; 124
    66f0:	fe 4f       	sbci	r31, 0xFE	; 254
    66f2:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    66f4:	dc 01       	movw	r26, r24
    66f6:	ed 91       	ld	r30, X+
    66f8:	fc 91       	ld	r31, X
    66fa:	11 97       	sbiw	r26, 0x01	; 1
    66fc:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    66fe:	23 17       	cp	r18, r19
    6700:	59 f0       	breq	.+22     	; 0x6718 <USART_RXComplete+0x38>
	  	ans = false;		//stigli su svi podaci
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    6702:	fc 01       	movw	r30, r24
    6704:	ed 57       	subi	r30, 0x7D	; 125
    6706:	fe 4f       	sbci	r31, 0xFE	; 254
    6708:	30 81       	ld	r19, Z
    670a:	a3 0f       	add	r26, r19
    670c:	b1 1d       	adc	r27, r1
    670e:	13 96       	adiw	r26, 0x03	; 3
    6710:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    6712:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;		//stigli su svi podaci
	}else{
		ans = true;
    6714:	81 e0       	ldi	r24, 0x01	; 1
    6716:	08 95       	ret
	// Check for overflow.  
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;		//stigli su svi podaci
    6718:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    671a:	08 95       	ret

0000671c <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    671c:	cf 93       	push	r28
    671e:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	// Check if all data is transmitted. 
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    6720:	fc 01       	movw	r30, r24
    6722:	ea 57       	subi	r30, 0x7A	; 122
    6724:	fe 4f       	sbci	r31, 0xFE	; 254
    6726:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    6728:	fc 01       	movw	r30, r24
    672a:	eb 57       	subi	r30, 0x7B	; 123
    672c:	fe 4f       	sbci	r31, 0xFE	; 254
    672e:	30 81       	ld	r19, Z
    6730:	32 13       	cpse	r19, r18
    6732:	07 c0       	rjmp	.+14     	; 0x6742 <USART_DataRegEmpty+0x26>
	    // Disable DRE interrupts.
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    6734:	dc 01       	movw	r26, r24
    6736:	ed 91       	ld	r30, X+
    6738:	fc 91       	ld	r31, X
    673a:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    673c:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    673e:	83 83       	std	Z+3, r24	; 0x03
    6740:	11 c0       	rjmp	.+34     	; 0x6764 <USART_DataRegEmpty+0x48>

	}else{
		// Start transmitting. 
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    6742:	fc 01       	movw	r30, r24
    6744:	ea 57       	subi	r30, 0x7A	; 122
    6746:	fe 4f       	sbci	r31, 0xFE	; 254
    6748:	20 81       	ld	r18, Z
    674a:	dc 01       	movw	r26, r24
    674c:	a2 0f       	add	r26, r18
    674e:	b1 1d       	adc	r27, r1
    6750:	ad 57       	subi	r26, 0x7D	; 125
    6752:	bf 4f       	sbci	r27, 0xFF	; 255
    6754:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    6756:	ec 01       	movw	r28, r24
    6758:	a8 81       	ld	r26, Y
    675a:	b9 81       	ldd	r27, Y+1	; 0x01
    675c:	2c 93       	st	X, r18

		// Advance buffer tail. 
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    675e:	80 81       	ld	r24, Z
    6760:	8f 5f       	subi	r24, 0xFF	; 255
    6762:	80 83       	st	Z, r24
	}
}
    6764:	df 91       	pop	r29
    6766:	cf 91       	pop	r28
    6768:	08 95       	ret

0000676a <main>:
int main(void)
{
	int msg_counter = 0;
	int servo_counter = 0;
	
	Podesi_Oscilator();					//podesavanje oscilatora
    676a:	0e 94 44 03 	call	0x688	; 0x688 <Podesi_Oscilator>
	Podesi_Parametre_Robota();			//podesavanje broja impulsa u krugu
    676e:	0e 94 b0 01 	call	0x360	; 0x360 <Podesi_Parametre_Robota>
	Podesi_PID_Pojacanja();				//podesavanje pojacanja PID regulatora
    6772:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Podesi_PID_Pojacanja>
	PodesiADC();						//podesavanje AD konvertora
    6776:	0e 94 fe 02 	call	0x5fc	; 0x5fc <PodesiADC>
	Podesi_Tajmere();					//podesavanje tajmera
    677a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <Podesi_Tajmere>
	Podesi_QDEC();						//podesavanje kvadraturnih dekodera
    677e:	0e 94 c6 02 	call	0x58c	; 0x58c <Podesi_QDEC>
	Podesi_PWM();						//podesavanje PWM signala za motore i servoe
    6782:	0e 94 e6 03 	call	0x7cc	; 0x7cc <Podesi_PWM>
	Podesi_Interapt();					//podesavanje interapt prioriteta
    6786:	0e 94 34 03 	call	0x668	; 0x668 <Podesi_Interapt>
	Podesi_Pinove();					//podesavanje I/O pinova
    678a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Podesi_Pinove>
	Podesi_USART_Komunikaciju();		//podesavanje komunikacije
    678e:	0e 94 56 03 	call	0x6ac	; 0x6ac <Podesi_USART_Komunikaciju>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6792:	2f ef       	ldi	r18, 0xFF	; 255
    6794:	8e e9       	ldi	r24, 0x9E	; 158
    6796:	94 e2       	ldi	r25, 0x24	; 36
    6798:	21 50       	subi	r18, 0x01	; 1
    679a:	80 40       	sbci	r24, 0x00	; 0
    679c:	90 40       	sbci	r25, 0x00	; 0
    679e:	e1 f7       	brne	.-8      	; 0x6798 <main+0x2e>
    67a0:	00 c0       	rjmp	.+0      	; 0x67a2 <main+0x38>
    67a2:	00 00       	nop
	//inicijalizuj_bluetooth();
	//inicijalizuj_servo_tajmer_20ms();
	//pomeri_servo_1(0);
	_delay_ms(1500);					//cekanje da se stabilizuje sistem
	
	nuliraj_poziciju_robota();
    67a4:	b2 de       	rcall	.-668    	; 0x650a <nuliraj_poziciju_robota>
	while(1)
	{
		//demo_2();
		
		//Racunanje trenutne pozicije
		if (Rac_tren_poz_sample_counter >= 3){		//9ms   3
    67a6:	80 91 08 20 	lds	r24, 0x2008
    67aa:	83 30       	cpi	r24, 0x03	; 3
    67ac:	20 f0       	brcs	.+8      	; 0x67b6 <main+0x4c>
			Rac_tren_poz_sample_counter = 0;
    67ae:	10 92 08 20 	sts	0x2008, r1
			Racunanje_trenutne_pozicije();
    67b2:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <Racunanje_trenutne_pozicije>
		}

		//Korekcija pravca i distance prema cilju
		if(Pracenje_Pravca_sample_counter >= 30){	//90ms   30
    67b6:	80 91 04 20 	lds	r24, 0x2004
    67ba:	8e 31       	cpi	r24, 0x1E	; 30
    67bc:	20 f0       	brcs	.+8      	; 0x67c6 <main+0x5c>
			msg_counter++;
			servo_counter++;
			Pracenje_Pravca_sample_counter = 0;
    67be:	10 92 04 20 	sts	0x2004, r1
			Pracenje_pravca();
    67c2:	0e 94 0e 28 	call	0x501c	; 0x501c <Pracenje_pravca>
		}
		
		//PID regulacija
		if(PID_pozicioni_sample_counter >= 3){		//9ms    3
    67c6:	80 91 05 20 	lds	r24, 0x2005
    67ca:	83 30       	cpi	r24, 0x03	; 3
    67cc:	60 f3       	brcs	.-40     	; 0x67a6 <main+0x3c>
			PID_pozicioni_sample_counter = 0;
    67ce:	10 92 05 20 	sts	0x2005, r1
			PID_ugaoni();
    67d2:	f1 d8       	rcall	.-3614   	; 0x59b6 <PID_ugaoni>
			PID_pravolinijski();
    67d4:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <PID_pravolinijski>
    67d8:	e6 cf       	rjmp	.-52     	; 0x67a6 <main+0x3c>

000067da <__subsf3>:
    67da:	50 58       	subi	r21, 0x80	; 128

000067dc <__addsf3>:
    67dc:	bb 27       	eor	r27, r27
    67de:	aa 27       	eor	r26, r26
    67e0:	0e d0       	rcall	.+28     	; 0x67fe <__addsf3x>
    67e2:	27 c2       	rjmp	.+1102   	; 0x6c32 <__fp_round>
    67e4:	f0 d1       	rcall	.+992    	; 0x6bc6 <__fp_pscA>
    67e6:	30 f0       	brcs	.+12     	; 0x67f4 <__addsf3+0x18>
    67e8:	f5 d1       	rcall	.+1002   	; 0x6bd4 <__fp_pscB>
    67ea:	20 f0       	brcs	.+8      	; 0x67f4 <__addsf3+0x18>
    67ec:	31 f4       	brne	.+12     	; 0x67fa <__addsf3+0x1e>
    67ee:	9f 3f       	cpi	r25, 0xFF	; 255
    67f0:	11 f4       	brne	.+4      	; 0x67f6 <__addsf3+0x1a>
    67f2:	1e f4       	brtc	.+6      	; 0x67fa <__addsf3+0x1e>
    67f4:	c0 c1       	rjmp	.+896    	; 0x6b76 <__fp_nan>
    67f6:	0e f4       	brtc	.+2      	; 0x67fa <__addsf3+0x1e>
    67f8:	e0 95       	com	r30
    67fa:	e7 fb       	bst	r30, 7
    67fc:	b6 c1       	rjmp	.+876    	; 0x6b6a <__fp_inf>

000067fe <__addsf3x>:
    67fe:	e9 2f       	mov	r30, r25
    6800:	3a d2       	rcall	.+1140   	; 0x6c76 <__fp_split3>
    6802:	80 f3       	brcs	.-32     	; 0x67e4 <__addsf3+0x8>
    6804:	ba 17       	cp	r27, r26
    6806:	62 07       	cpc	r22, r18
    6808:	73 07       	cpc	r23, r19
    680a:	84 07       	cpc	r24, r20
    680c:	95 07       	cpc	r25, r21
    680e:	18 f0       	brcs	.+6      	; 0x6816 <__addsf3x+0x18>
    6810:	71 f4       	brne	.+28     	; 0x682e <__addsf3x+0x30>
    6812:	9e f5       	brtc	.+102    	; 0x687a <__addsf3x+0x7c>
    6814:	52 c2       	rjmp	.+1188   	; 0x6cba <__fp_zero>
    6816:	0e f4       	brtc	.+2      	; 0x681a <__addsf3x+0x1c>
    6818:	e0 95       	com	r30
    681a:	0b 2e       	mov	r0, r27
    681c:	ba 2f       	mov	r27, r26
    681e:	a0 2d       	mov	r26, r0
    6820:	0b 01       	movw	r0, r22
    6822:	b9 01       	movw	r22, r18
    6824:	90 01       	movw	r18, r0
    6826:	0c 01       	movw	r0, r24
    6828:	ca 01       	movw	r24, r20
    682a:	a0 01       	movw	r20, r0
    682c:	11 24       	eor	r1, r1
    682e:	ff 27       	eor	r31, r31
    6830:	59 1b       	sub	r21, r25
    6832:	99 f0       	breq	.+38     	; 0x685a <__addsf3x+0x5c>
    6834:	59 3f       	cpi	r21, 0xF9	; 249
    6836:	50 f4       	brcc	.+20     	; 0x684c <__addsf3x+0x4e>
    6838:	50 3e       	cpi	r21, 0xE0	; 224
    683a:	68 f1       	brcs	.+90     	; 0x6896 <__addsf3x+0x98>
    683c:	1a 16       	cp	r1, r26
    683e:	f0 40       	sbci	r31, 0x00	; 0
    6840:	a2 2f       	mov	r26, r18
    6842:	23 2f       	mov	r18, r19
    6844:	34 2f       	mov	r19, r20
    6846:	44 27       	eor	r20, r20
    6848:	58 5f       	subi	r21, 0xF8	; 248
    684a:	f3 cf       	rjmp	.-26     	; 0x6832 <__addsf3x+0x34>
    684c:	46 95       	lsr	r20
    684e:	37 95       	ror	r19
    6850:	27 95       	ror	r18
    6852:	a7 95       	ror	r26
    6854:	f0 40       	sbci	r31, 0x00	; 0
    6856:	53 95       	inc	r21
    6858:	c9 f7       	brne	.-14     	; 0x684c <__addsf3x+0x4e>
    685a:	7e f4       	brtc	.+30     	; 0x687a <__addsf3x+0x7c>
    685c:	1f 16       	cp	r1, r31
    685e:	ba 0b       	sbc	r27, r26
    6860:	62 0b       	sbc	r22, r18
    6862:	73 0b       	sbc	r23, r19
    6864:	84 0b       	sbc	r24, r20
    6866:	ba f0       	brmi	.+46     	; 0x6896 <__addsf3x+0x98>
    6868:	91 50       	subi	r25, 0x01	; 1
    686a:	a1 f0       	breq	.+40     	; 0x6894 <__addsf3x+0x96>
    686c:	ff 0f       	add	r31, r31
    686e:	bb 1f       	adc	r27, r27
    6870:	66 1f       	adc	r22, r22
    6872:	77 1f       	adc	r23, r23
    6874:	88 1f       	adc	r24, r24
    6876:	c2 f7       	brpl	.-16     	; 0x6868 <__addsf3x+0x6a>
    6878:	0e c0       	rjmp	.+28     	; 0x6896 <__addsf3x+0x98>
    687a:	ba 0f       	add	r27, r26
    687c:	62 1f       	adc	r22, r18
    687e:	73 1f       	adc	r23, r19
    6880:	84 1f       	adc	r24, r20
    6882:	48 f4       	brcc	.+18     	; 0x6896 <__addsf3x+0x98>
    6884:	87 95       	ror	r24
    6886:	77 95       	ror	r23
    6888:	67 95       	ror	r22
    688a:	b7 95       	ror	r27
    688c:	f7 95       	ror	r31
    688e:	9e 3f       	cpi	r25, 0xFE	; 254
    6890:	08 f0       	brcs	.+2      	; 0x6894 <__addsf3x+0x96>
    6892:	b3 cf       	rjmp	.-154    	; 0x67fa <__addsf3+0x1e>
    6894:	93 95       	inc	r25
    6896:	88 0f       	add	r24, r24
    6898:	08 f0       	brcs	.+2      	; 0x689c <__addsf3x+0x9e>
    689a:	99 27       	eor	r25, r25
    689c:	ee 0f       	add	r30, r30
    689e:	97 95       	ror	r25
    68a0:	87 95       	ror	r24
    68a2:	08 95       	ret
    68a4:	90 d1       	rcall	.+800    	; 0x6bc6 <__fp_pscA>
    68a6:	58 f0       	brcs	.+22     	; 0x68be <__addsf3x+0xc0>
    68a8:	80 e8       	ldi	r24, 0x80	; 128
    68aa:	91 e0       	ldi	r25, 0x01	; 1
    68ac:	09 f4       	brne	.+2      	; 0x68b0 <__addsf3x+0xb2>
    68ae:	9e ef       	ldi	r25, 0xFE	; 254
    68b0:	91 d1       	rcall	.+802    	; 0x6bd4 <__fp_pscB>
    68b2:	28 f0       	brcs	.+10     	; 0x68be <__addsf3x+0xc0>
    68b4:	40 e8       	ldi	r20, 0x80	; 128
    68b6:	51 e0       	ldi	r21, 0x01	; 1
    68b8:	59 f4       	brne	.+22     	; 0x68d0 <atan2+0xe>
    68ba:	5e ef       	ldi	r21, 0xFE	; 254
    68bc:	09 c0       	rjmp	.+18     	; 0x68d0 <atan2+0xe>
    68be:	5b c1       	rjmp	.+694    	; 0x6b76 <__fp_nan>
    68c0:	fc c1       	rjmp	.+1016   	; 0x6cba <__fp_zero>

000068c2 <atan2>:
    68c2:	e9 2f       	mov	r30, r25
    68c4:	e0 78       	andi	r30, 0x80	; 128
    68c6:	d7 d1       	rcall	.+942    	; 0x6c76 <__fp_split3>
    68c8:	68 f3       	brcs	.-38     	; 0x68a4 <__addsf3x+0xa6>
    68ca:	09 2e       	mov	r0, r25
    68cc:	05 2a       	or	r0, r21
    68ce:	c1 f3       	breq	.-16     	; 0x68c0 <__addsf3x+0xc2>
    68d0:	26 17       	cp	r18, r22
    68d2:	37 07       	cpc	r19, r23
    68d4:	48 07       	cpc	r20, r24
    68d6:	59 07       	cpc	r21, r25
    68d8:	38 f0       	brcs	.+14     	; 0x68e8 <atan2+0x26>
    68da:	0e 2e       	mov	r0, r30
    68dc:	07 f8       	bld	r0, 7
    68de:	e0 25       	eor	r30, r0
    68e0:	69 f0       	breq	.+26     	; 0x68fc <atan2+0x3a>
    68e2:	e0 25       	eor	r30, r0
    68e4:	e0 64       	ori	r30, 0x40	; 64
    68e6:	0a c0       	rjmp	.+20     	; 0x68fc <atan2+0x3a>
    68e8:	ef 63       	ori	r30, 0x3F	; 63
    68ea:	07 f8       	bld	r0, 7
    68ec:	00 94       	com	r0
    68ee:	07 fa       	bst	r0, 7
    68f0:	db 01       	movw	r26, r22
    68f2:	b9 01       	movw	r22, r18
    68f4:	9d 01       	movw	r18, r26
    68f6:	dc 01       	movw	r26, r24
    68f8:	ca 01       	movw	r24, r20
    68fa:	ad 01       	movw	r20, r26
    68fc:	ef 93       	push	r30
    68fe:	4a d0       	rcall	.+148    	; 0x6994 <__divsf3_pse>
    6900:	98 d1       	rcall	.+816    	; 0x6c32 <__fp_round>
    6902:	0a d0       	rcall	.+20     	; 0x6918 <atan>
    6904:	5f 91       	pop	r21
    6906:	55 23       	and	r21, r21
    6908:	31 f0       	breq	.+12     	; 0x6916 <atan2+0x54>
    690a:	2b ed       	ldi	r18, 0xDB	; 219
    690c:	3f e0       	ldi	r19, 0x0F	; 15
    690e:	49 e4       	ldi	r20, 0x49	; 73
    6910:	50 fd       	sbrc	r21, 0
    6912:	49 ec       	ldi	r20, 0xC9	; 201
    6914:	63 cf       	rjmp	.-314    	; 0x67dc <__addsf3>
    6916:	08 95       	ret

00006918 <atan>:
    6918:	df 93       	push	r29
    691a:	dd 27       	eor	r29, r29
    691c:	b9 2f       	mov	r27, r25
    691e:	bf 77       	andi	r27, 0x7F	; 127
    6920:	40 e8       	ldi	r20, 0x80	; 128
    6922:	5f e3       	ldi	r21, 0x3F	; 63
    6924:	16 16       	cp	r1, r22
    6926:	17 06       	cpc	r1, r23
    6928:	48 07       	cpc	r20, r24
    692a:	5b 07       	cpc	r21, r27
    692c:	10 f4       	brcc	.+4      	; 0x6932 <atan+0x1a>
    692e:	d9 2f       	mov	r29, r25
    6930:	cf d1       	rcall	.+926    	; 0x6cd0 <inverse>
    6932:	9f 93       	push	r25
    6934:	8f 93       	push	r24
    6936:	7f 93       	push	r23
    6938:	6f 93       	push	r22
    693a:	7c d2       	rcall	.+1272   	; 0x6e34 <square>
    693c:	e4 ef       	ldi	r30, 0xF4	; 244
    693e:	f1 e0       	ldi	r31, 0x01	; 1
    6940:	1d d1       	rcall	.+570    	; 0x6b7c <__fp_powser>
    6942:	77 d1       	rcall	.+750    	; 0x6c32 <__fp_round>
    6944:	2f 91       	pop	r18
    6946:	3f 91       	pop	r19
    6948:	4f 91       	pop	r20
    694a:	5f 91       	pop	r21
    694c:	d4 d1       	rcall	.+936    	; 0x6cf6 <__mulsf3x>
    694e:	dd 23       	and	r29, r29
    6950:	49 f0       	breq	.+18     	; 0x6964 <atan+0x4c>
    6952:	90 58       	subi	r25, 0x80	; 128
    6954:	a2 ea       	ldi	r26, 0xA2	; 162
    6956:	2a ed       	ldi	r18, 0xDA	; 218
    6958:	3f e0       	ldi	r19, 0x0F	; 15
    695a:	49 ec       	ldi	r20, 0xC9	; 201
    695c:	5f e3       	ldi	r21, 0x3F	; 63
    695e:	d0 78       	andi	r29, 0x80	; 128
    6960:	5d 27       	eor	r21, r29
    6962:	4d df       	rcall	.-358    	; 0x67fe <__addsf3x>
    6964:	df 91       	pop	r29
    6966:	65 c1       	rjmp	.+714    	; 0x6c32 <__fp_round>

00006968 <__cmpsf2>:
    6968:	dc d0       	rcall	.+440    	; 0x6b22 <__fp_cmp>
    696a:	08 f4       	brcc	.+2      	; 0x696e <__cmpsf2+0x6>
    696c:	81 e0       	ldi	r24, 0x01	; 1
    696e:	08 95       	ret

00006970 <cos>:
    6970:	39 d1       	rcall	.+626    	; 0x6be4 <__fp_rempio2>
    6972:	e3 95       	inc	r30
    6974:	6f c1       	rjmp	.+734    	; 0x6c54 <__fp_sinus>

00006976 <__divsf3>:
    6976:	0c d0       	rcall	.+24     	; 0x6990 <__divsf3x>
    6978:	5c c1       	rjmp	.+696    	; 0x6c32 <__fp_round>
    697a:	2c d1       	rcall	.+600    	; 0x6bd4 <__fp_pscB>
    697c:	40 f0       	brcs	.+16     	; 0x698e <__divsf3+0x18>
    697e:	23 d1       	rcall	.+582    	; 0x6bc6 <__fp_pscA>
    6980:	30 f0       	brcs	.+12     	; 0x698e <__divsf3+0x18>
    6982:	21 f4       	brne	.+8      	; 0x698c <__divsf3+0x16>
    6984:	5f 3f       	cpi	r21, 0xFF	; 255
    6986:	19 f0       	breq	.+6      	; 0x698e <__divsf3+0x18>
    6988:	f0 c0       	rjmp	.+480    	; 0x6b6a <__fp_inf>
    698a:	51 11       	cpse	r21, r1
    698c:	97 c1       	rjmp	.+814    	; 0x6cbc <__fp_szero>
    698e:	f3 c0       	rjmp	.+486    	; 0x6b76 <__fp_nan>

00006990 <__divsf3x>:
    6990:	72 d1       	rcall	.+740    	; 0x6c76 <__fp_split3>
    6992:	98 f3       	brcs	.-26     	; 0x697a <__divsf3+0x4>

00006994 <__divsf3_pse>:
    6994:	99 23       	and	r25, r25
    6996:	c9 f3       	breq	.-14     	; 0x698a <__divsf3+0x14>
    6998:	55 23       	and	r21, r21
    699a:	b1 f3       	breq	.-20     	; 0x6988 <__divsf3+0x12>
    699c:	95 1b       	sub	r25, r21
    699e:	55 0b       	sbc	r21, r21
    69a0:	bb 27       	eor	r27, r27
    69a2:	aa 27       	eor	r26, r26
    69a4:	62 17       	cp	r22, r18
    69a6:	73 07       	cpc	r23, r19
    69a8:	84 07       	cpc	r24, r20
    69aa:	38 f0       	brcs	.+14     	; 0x69ba <__divsf3_pse+0x26>
    69ac:	9f 5f       	subi	r25, 0xFF	; 255
    69ae:	5f 4f       	sbci	r21, 0xFF	; 255
    69b0:	22 0f       	add	r18, r18
    69b2:	33 1f       	adc	r19, r19
    69b4:	44 1f       	adc	r20, r20
    69b6:	aa 1f       	adc	r26, r26
    69b8:	a9 f3       	breq	.-22     	; 0x69a4 <__divsf3_pse+0x10>
    69ba:	33 d0       	rcall	.+102    	; 0x6a22 <__divsf3_pse+0x8e>
    69bc:	0e 2e       	mov	r0, r30
    69be:	3a f0       	brmi	.+14     	; 0x69ce <__divsf3_pse+0x3a>
    69c0:	e0 e8       	ldi	r30, 0x80	; 128
    69c2:	30 d0       	rcall	.+96     	; 0x6a24 <__divsf3_pse+0x90>
    69c4:	91 50       	subi	r25, 0x01	; 1
    69c6:	50 40       	sbci	r21, 0x00	; 0
    69c8:	e6 95       	lsr	r30
    69ca:	00 1c       	adc	r0, r0
    69cc:	ca f7       	brpl	.-14     	; 0x69c0 <__divsf3_pse+0x2c>
    69ce:	29 d0       	rcall	.+82     	; 0x6a22 <__divsf3_pse+0x8e>
    69d0:	fe 2f       	mov	r31, r30
    69d2:	27 d0       	rcall	.+78     	; 0x6a22 <__divsf3_pse+0x8e>
    69d4:	66 0f       	add	r22, r22
    69d6:	77 1f       	adc	r23, r23
    69d8:	88 1f       	adc	r24, r24
    69da:	bb 1f       	adc	r27, r27
    69dc:	26 17       	cp	r18, r22
    69de:	37 07       	cpc	r19, r23
    69e0:	48 07       	cpc	r20, r24
    69e2:	ab 07       	cpc	r26, r27
    69e4:	b0 e8       	ldi	r27, 0x80	; 128
    69e6:	09 f0       	breq	.+2      	; 0x69ea <__divsf3_pse+0x56>
    69e8:	bb 0b       	sbc	r27, r27
    69ea:	80 2d       	mov	r24, r0
    69ec:	bf 01       	movw	r22, r30
    69ee:	ff 27       	eor	r31, r31
    69f0:	93 58       	subi	r25, 0x83	; 131
    69f2:	5f 4f       	sbci	r21, 0xFF	; 255
    69f4:	2a f0       	brmi	.+10     	; 0x6a00 <__divsf3_pse+0x6c>
    69f6:	9e 3f       	cpi	r25, 0xFE	; 254
    69f8:	51 05       	cpc	r21, r1
    69fa:	68 f0       	brcs	.+26     	; 0x6a16 <__divsf3_pse+0x82>
    69fc:	b6 c0       	rjmp	.+364    	; 0x6b6a <__fp_inf>
    69fe:	5e c1       	rjmp	.+700    	; 0x6cbc <__fp_szero>
    6a00:	5f 3f       	cpi	r21, 0xFF	; 255
    6a02:	ec f3       	brlt	.-6      	; 0x69fe <__divsf3_pse+0x6a>
    6a04:	98 3e       	cpi	r25, 0xE8	; 232
    6a06:	dc f3       	brlt	.-10     	; 0x69fe <__divsf3_pse+0x6a>
    6a08:	86 95       	lsr	r24
    6a0a:	77 95       	ror	r23
    6a0c:	67 95       	ror	r22
    6a0e:	b7 95       	ror	r27
    6a10:	f7 95       	ror	r31
    6a12:	9f 5f       	subi	r25, 0xFF	; 255
    6a14:	c9 f7       	brne	.-14     	; 0x6a08 <__divsf3_pse+0x74>
    6a16:	88 0f       	add	r24, r24
    6a18:	91 1d       	adc	r25, r1
    6a1a:	96 95       	lsr	r25
    6a1c:	87 95       	ror	r24
    6a1e:	97 f9       	bld	r25, 7
    6a20:	08 95       	ret
    6a22:	e1 e0       	ldi	r30, 0x01	; 1
    6a24:	66 0f       	add	r22, r22
    6a26:	77 1f       	adc	r23, r23
    6a28:	88 1f       	adc	r24, r24
    6a2a:	bb 1f       	adc	r27, r27
    6a2c:	62 17       	cp	r22, r18
    6a2e:	73 07       	cpc	r23, r19
    6a30:	84 07       	cpc	r24, r20
    6a32:	ba 07       	cpc	r27, r26
    6a34:	20 f0       	brcs	.+8      	; 0x6a3e <__divsf3_pse+0xaa>
    6a36:	62 1b       	sub	r22, r18
    6a38:	73 0b       	sbc	r23, r19
    6a3a:	84 0b       	sbc	r24, r20
    6a3c:	ba 0b       	sbc	r27, r26
    6a3e:	ee 1f       	adc	r30, r30
    6a40:	88 f7       	brcc	.-30     	; 0x6a24 <__divsf3_pse+0x90>
    6a42:	e0 95       	com	r30
    6a44:	08 95       	ret

00006a46 <__fixsfsi>:
    6a46:	04 d0       	rcall	.+8      	; 0x6a50 <__fixunssfsi>
    6a48:	68 94       	set
    6a4a:	b1 11       	cpse	r27, r1
    6a4c:	37 c1       	rjmp	.+622    	; 0x6cbc <__fp_szero>
    6a4e:	08 95       	ret

00006a50 <__fixunssfsi>:
    6a50:	1a d1       	rcall	.+564    	; 0x6c86 <__fp_splitA>
    6a52:	88 f0       	brcs	.+34     	; 0x6a76 <__fixunssfsi+0x26>
    6a54:	9f 57       	subi	r25, 0x7F	; 127
    6a56:	90 f0       	brcs	.+36     	; 0x6a7c <__fixunssfsi+0x2c>
    6a58:	b9 2f       	mov	r27, r25
    6a5a:	99 27       	eor	r25, r25
    6a5c:	b7 51       	subi	r27, 0x17	; 23
    6a5e:	a0 f0       	brcs	.+40     	; 0x6a88 <__fixunssfsi+0x38>
    6a60:	d1 f0       	breq	.+52     	; 0x6a96 <__fixunssfsi+0x46>
    6a62:	66 0f       	add	r22, r22
    6a64:	77 1f       	adc	r23, r23
    6a66:	88 1f       	adc	r24, r24
    6a68:	99 1f       	adc	r25, r25
    6a6a:	1a f0       	brmi	.+6      	; 0x6a72 <__fixunssfsi+0x22>
    6a6c:	ba 95       	dec	r27
    6a6e:	c9 f7       	brne	.-14     	; 0x6a62 <__fixunssfsi+0x12>
    6a70:	12 c0       	rjmp	.+36     	; 0x6a96 <__fixunssfsi+0x46>
    6a72:	b1 30       	cpi	r27, 0x01	; 1
    6a74:	81 f0       	breq	.+32     	; 0x6a96 <__fixunssfsi+0x46>
    6a76:	21 d1       	rcall	.+578    	; 0x6cba <__fp_zero>
    6a78:	b1 e0       	ldi	r27, 0x01	; 1
    6a7a:	08 95       	ret
    6a7c:	1e c1       	rjmp	.+572    	; 0x6cba <__fp_zero>
    6a7e:	67 2f       	mov	r22, r23
    6a80:	78 2f       	mov	r23, r24
    6a82:	88 27       	eor	r24, r24
    6a84:	b8 5f       	subi	r27, 0xF8	; 248
    6a86:	39 f0       	breq	.+14     	; 0x6a96 <__fixunssfsi+0x46>
    6a88:	b9 3f       	cpi	r27, 0xF9	; 249
    6a8a:	cc f3       	brlt	.-14     	; 0x6a7e <__fixunssfsi+0x2e>
    6a8c:	86 95       	lsr	r24
    6a8e:	77 95       	ror	r23
    6a90:	67 95       	ror	r22
    6a92:	b3 95       	inc	r27
    6a94:	d9 f7       	brne	.-10     	; 0x6a8c <__fixunssfsi+0x3c>
    6a96:	3e f4       	brtc	.+14     	; 0x6aa6 <__fixunssfsi+0x56>
    6a98:	90 95       	com	r25
    6a9a:	80 95       	com	r24
    6a9c:	70 95       	com	r23
    6a9e:	61 95       	neg	r22
    6aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    6aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    6aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    6aa6:	08 95       	ret

00006aa8 <__floatunsisf>:
    6aa8:	e8 94       	clt
    6aaa:	09 c0       	rjmp	.+18     	; 0x6abe <__floatsisf+0x12>

00006aac <__floatsisf>:
    6aac:	97 fb       	bst	r25, 7
    6aae:	3e f4       	brtc	.+14     	; 0x6abe <__floatsisf+0x12>
    6ab0:	90 95       	com	r25
    6ab2:	80 95       	com	r24
    6ab4:	70 95       	com	r23
    6ab6:	61 95       	neg	r22
    6ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    6aba:	8f 4f       	sbci	r24, 0xFF	; 255
    6abc:	9f 4f       	sbci	r25, 0xFF	; 255
    6abe:	99 23       	and	r25, r25
    6ac0:	a9 f0       	breq	.+42     	; 0x6aec <__floatsisf+0x40>
    6ac2:	f9 2f       	mov	r31, r25
    6ac4:	96 e9       	ldi	r25, 0x96	; 150
    6ac6:	bb 27       	eor	r27, r27
    6ac8:	93 95       	inc	r25
    6aca:	f6 95       	lsr	r31
    6acc:	87 95       	ror	r24
    6ace:	77 95       	ror	r23
    6ad0:	67 95       	ror	r22
    6ad2:	b7 95       	ror	r27
    6ad4:	f1 11       	cpse	r31, r1
    6ad6:	f8 cf       	rjmp	.-16     	; 0x6ac8 <__floatsisf+0x1c>
    6ad8:	fa f4       	brpl	.+62     	; 0x6b18 <__floatsisf+0x6c>
    6ada:	bb 0f       	add	r27, r27
    6adc:	11 f4       	brne	.+4      	; 0x6ae2 <__floatsisf+0x36>
    6ade:	60 ff       	sbrs	r22, 0
    6ae0:	1b c0       	rjmp	.+54     	; 0x6b18 <__floatsisf+0x6c>
    6ae2:	6f 5f       	subi	r22, 0xFF	; 255
    6ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    6ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    6aea:	16 c0       	rjmp	.+44     	; 0x6b18 <__floatsisf+0x6c>
    6aec:	88 23       	and	r24, r24
    6aee:	11 f0       	breq	.+4      	; 0x6af4 <__floatsisf+0x48>
    6af0:	96 e9       	ldi	r25, 0x96	; 150
    6af2:	11 c0       	rjmp	.+34     	; 0x6b16 <__floatsisf+0x6a>
    6af4:	77 23       	and	r23, r23
    6af6:	21 f0       	breq	.+8      	; 0x6b00 <__floatsisf+0x54>
    6af8:	9e e8       	ldi	r25, 0x8E	; 142
    6afa:	87 2f       	mov	r24, r23
    6afc:	76 2f       	mov	r23, r22
    6afe:	05 c0       	rjmp	.+10     	; 0x6b0a <__floatsisf+0x5e>
    6b00:	66 23       	and	r22, r22
    6b02:	71 f0       	breq	.+28     	; 0x6b20 <__floatsisf+0x74>
    6b04:	96 e8       	ldi	r25, 0x86	; 134
    6b06:	86 2f       	mov	r24, r22
    6b08:	70 e0       	ldi	r23, 0x00	; 0
    6b0a:	60 e0       	ldi	r22, 0x00	; 0
    6b0c:	2a f0       	brmi	.+10     	; 0x6b18 <__floatsisf+0x6c>
    6b0e:	9a 95       	dec	r25
    6b10:	66 0f       	add	r22, r22
    6b12:	77 1f       	adc	r23, r23
    6b14:	88 1f       	adc	r24, r24
    6b16:	da f7       	brpl	.-10     	; 0x6b0e <__floatsisf+0x62>
    6b18:	88 0f       	add	r24, r24
    6b1a:	96 95       	lsr	r25
    6b1c:	87 95       	ror	r24
    6b1e:	97 f9       	bld	r25, 7
    6b20:	08 95       	ret

00006b22 <__fp_cmp>:
    6b22:	99 0f       	add	r25, r25
    6b24:	00 08       	sbc	r0, r0
    6b26:	55 0f       	add	r21, r21
    6b28:	aa 0b       	sbc	r26, r26
    6b2a:	e0 e8       	ldi	r30, 0x80	; 128
    6b2c:	fe ef       	ldi	r31, 0xFE	; 254
    6b2e:	16 16       	cp	r1, r22
    6b30:	17 06       	cpc	r1, r23
    6b32:	e8 07       	cpc	r30, r24
    6b34:	f9 07       	cpc	r31, r25
    6b36:	c0 f0       	brcs	.+48     	; 0x6b68 <__fp_cmp+0x46>
    6b38:	12 16       	cp	r1, r18
    6b3a:	13 06       	cpc	r1, r19
    6b3c:	e4 07       	cpc	r30, r20
    6b3e:	f5 07       	cpc	r31, r21
    6b40:	98 f0       	brcs	.+38     	; 0x6b68 <__fp_cmp+0x46>
    6b42:	62 1b       	sub	r22, r18
    6b44:	73 0b       	sbc	r23, r19
    6b46:	84 0b       	sbc	r24, r20
    6b48:	95 0b       	sbc	r25, r21
    6b4a:	39 f4       	brne	.+14     	; 0x6b5a <__fp_cmp+0x38>
    6b4c:	0a 26       	eor	r0, r26
    6b4e:	61 f0       	breq	.+24     	; 0x6b68 <__fp_cmp+0x46>
    6b50:	23 2b       	or	r18, r19
    6b52:	24 2b       	or	r18, r20
    6b54:	25 2b       	or	r18, r21
    6b56:	21 f4       	brne	.+8      	; 0x6b60 <__fp_cmp+0x3e>
    6b58:	08 95       	ret
    6b5a:	0a 26       	eor	r0, r26
    6b5c:	09 f4       	brne	.+2      	; 0x6b60 <__fp_cmp+0x3e>
    6b5e:	a1 40       	sbci	r26, 0x01	; 1
    6b60:	a6 95       	lsr	r26
    6b62:	8f ef       	ldi	r24, 0xFF	; 255
    6b64:	81 1d       	adc	r24, r1
    6b66:	81 1d       	adc	r24, r1
    6b68:	08 95       	ret

00006b6a <__fp_inf>:
    6b6a:	97 f9       	bld	r25, 7
    6b6c:	9f 67       	ori	r25, 0x7F	; 127
    6b6e:	80 e8       	ldi	r24, 0x80	; 128
    6b70:	70 e0       	ldi	r23, 0x00	; 0
    6b72:	60 e0       	ldi	r22, 0x00	; 0
    6b74:	08 95       	ret

00006b76 <__fp_nan>:
    6b76:	9f ef       	ldi	r25, 0xFF	; 255
    6b78:	80 ec       	ldi	r24, 0xC0	; 192
    6b7a:	08 95       	ret

00006b7c <__fp_powser>:
    6b7c:	df 93       	push	r29
    6b7e:	cf 93       	push	r28
    6b80:	1f 93       	push	r17
    6b82:	0f 93       	push	r16
    6b84:	ff 92       	push	r15
    6b86:	ef 92       	push	r14
    6b88:	df 92       	push	r13
    6b8a:	7b 01       	movw	r14, r22
    6b8c:	8c 01       	movw	r16, r24
    6b8e:	68 94       	set
    6b90:	05 c0       	rjmp	.+10     	; 0x6b9c <__fp_powser+0x20>
    6b92:	da 2e       	mov	r13, r26
    6b94:	ef 01       	movw	r28, r30
    6b96:	af d0       	rcall	.+350    	; 0x6cf6 <__mulsf3x>
    6b98:	fe 01       	movw	r30, r28
    6b9a:	e8 94       	clt
    6b9c:	a5 91       	lpm	r26, Z+
    6b9e:	25 91       	lpm	r18, Z+
    6ba0:	35 91       	lpm	r19, Z+
    6ba2:	45 91       	lpm	r20, Z+
    6ba4:	55 91       	lpm	r21, Z+
    6ba6:	ae f3       	brts	.-22     	; 0x6b92 <__fp_powser+0x16>
    6ba8:	ef 01       	movw	r28, r30
    6baa:	29 de       	rcall	.-942    	; 0x67fe <__addsf3x>
    6bac:	fe 01       	movw	r30, r28
    6bae:	97 01       	movw	r18, r14
    6bb0:	a8 01       	movw	r20, r16
    6bb2:	da 94       	dec	r13
    6bb4:	79 f7       	brne	.-34     	; 0x6b94 <__fp_powser+0x18>
    6bb6:	df 90       	pop	r13
    6bb8:	ef 90       	pop	r14
    6bba:	ff 90       	pop	r15
    6bbc:	0f 91       	pop	r16
    6bbe:	1f 91       	pop	r17
    6bc0:	cf 91       	pop	r28
    6bc2:	df 91       	pop	r29
    6bc4:	08 95       	ret

00006bc6 <__fp_pscA>:
    6bc6:	00 24       	eor	r0, r0
    6bc8:	0a 94       	dec	r0
    6bca:	16 16       	cp	r1, r22
    6bcc:	17 06       	cpc	r1, r23
    6bce:	18 06       	cpc	r1, r24
    6bd0:	09 06       	cpc	r0, r25
    6bd2:	08 95       	ret

00006bd4 <__fp_pscB>:
    6bd4:	00 24       	eor	r0, r0
    6bd6:	0a 94       	dec	r0
    6bd8:	12 16       	cp	r1, r18
    6bda:	13 06       	cpc	r1, r19
    6bdc:	14 06       	cpc	r1, r20
    6bde:	05 06       	cpc	r0, r21
    6be0:	08 95       	ret
    6be2:	c9 cf       	rjmp	.-110    	; 0x6b76 <__fp_nan>

00006be4 <__fp_rempio2>:
    6be4:	50 d0       	rcall	.+160    	; 0x6c86 <__fp_splitA>
    6be6:	e8 f3       	brcs	.-6      	; 0x6be2 <__fp_pscB+0xe>
    6be8:	e8 94       	clt
    6bea:	e0 e0       	ldi	r30, 0x00	; 0
    6bec:	bb 27       	eor	r27, r27
    6bee:	9f 57       	subi	r25, 0x7F	; 127
    6bf0:	f0 f0       	brcs	.+60     	; 0x6c2e <__fp_rempio2+0x4a>
    6bf2:	2a ed       	ldi	r18, 0xDA	; 218
    6bf4:	3f e0       	ldi	r19, 0x0F	; 15
    6bf6:	49 ec       	ldi	r20, 0xC9	; 201
    6bf8:	06 c0       	rjmp	.+12     	; 0x6c06 <__fp_rempio2+0x22>
    6bfa:	ee 0f       	add	r30, r30
    6bfc:	bb 0f       	add	r27, r27
    6bfe:	66 1f       	adc	r22, r22
    6c00:	77 1f       	adc	r23, r23
    6c02:	88 1f       	adc	r24, r24
    6c04:	28 f0       	brcs	.+10     	; 0x6c10 <__fp_rempio2+0x2c>
    6c06:	b2 3a       	cpi	r27, 0xA2	; 162
    6c08:	62 07       	cpc	r22, r18
    6c0a:	73 07       	cpc	r23, r19
    6c0c:	84 07       	cpc	r24, r20
    6c0e:	28 f0       	brcs	.+10     	; 0x6c1a <__fp_rempio2+0x36>
    6c10:	b2 5a       	subi	r27, 0xA2	; 162
    6c12:	62 0b       	sbc	r22, r18
    6c14:	73 0b       	sbc	r23, r19
    6c16:	84 0b       	sbc	r24, r20
    6c18:	e3 95       	inc	r30
    6c1a:	9a 95       	dec	r25
    6c1c:	72 f7       	brpl	.-36     	; 0x6bfa <__fp_rempio2+0x16>
    6c1e:	80 38       	cpi	r24, 0x80	; 128
    6c20:	30 f4       	brcc	.+12     	; 0x6c2e <__fp_rempio2+0x4a>
    6c22:	9a 95       	dec	r25
    6c24:	bb 0f       	add	r27, r27
    6c26:	66 1f       	adc	r22, r22
    6c28:	77 1f       	adc	r23, r23
    6c2a:	88 1f       	adc	r24, r24
    6c2c:	d2 f7       	brpl	.-12     	; 0x6c22 <__fp_rempio2+0x3e>
    6c2e:	90 48       	sbci	r25, 0x80	; 128
    6c30:	06 c1       	rjmp	.+524    	; 0x6e3e <__fp_mpack_finite>

00006c32 <__fp_round>:
    6c32:	09 2e       	mov	r0, r25
    6c34:	03 94       	inc	r0
    6c36:	00 0c       	add	r0, r0
    6c38:	11 f4       	brne	.+4      	; 0x6c3e <__fp_round+0xc>
    6c3a:	88 23       	and	r24, r24
    6c3c:	52 f0       	brmi	.+20     	; 0x6c52 <__fp_round+0x20>
    6c3e:	bb 0f       	add	r27, r27
    6c40:	40 f4       	brcc	.+16     	; 0x6c52 <__fp_round+0x20>
    6c42:	bf 2b       	or	r27, r31
    6c44:	11 f4       	brne	.+4      	; 0x6c4a <__fp_round+0x18>
    6c46:	60 ff       	sbrs	r22, 0
    6c48:	04 c0       	rjmp	.+8      	; 0x6c52 <__fp_round+0x20>
    6c4a:	6f 5f       	subi	r22, 0xFF	; 255
    6c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    6c4e:	8f 4f       	sbci	r24, 0xFF	; 255
    6c50:	9f 4f       	sbci	r25, 0xFF	; 255
    6c52:	08 95       	ret

00006c54 <__fp_sinus>:
    6c54:	ef 93       	push	r30
    6c56:	e0 ff       	sbrs	r30, 0
    6c58:	06 c0       	rjmp	.+12     	; 0x6c66 <__fp_sinus+0x12>
    6c5a:	a2 ea       	ldi	r26, 0xA2	; 162
    6c5c:	2a ed       	ldi	r18, 0xDA	; 218
    6c5e:	3f e0       	ldi	r19, 0x0F	; 15
    6c60:	49 ec       	ldi	r20, 0xC9	; 201
    6c62:	5f eb       	ldi	r21, 0xBF	; 191
    6c64:	cc dd       	rcall	.-1128   	; 0x67fe <__addsf3x>
    6c66:	e5 df       	rcall	.-54     	; 0x6c32 <__fp_round>
    6c68:	0f 90       	pop	r0
    6c6a:	03 94       	inc	r0
    6c6c:	01 fc       	sbrc	r0, 1
    6c6e:	90 58       	subi	r25, 0x80	; 128
    6c70:	e1 e2       	ldi	r30, 0x21	; 33
    6c72:	f2 e0       	ldi	r31, 0x02	; 2
    6c74:	f7 c0       	rjmp	.+494    	; 0x6e64 <__fp_powsodd>

00006c76 <__fp_split3>:
    6c76:	57 fd       	sbrc	r21, 7
    6c78:	90 58       	subi	r25, 0x80	; 128
    6c7a:	44 0f       	add	r20, r20
    6c7c:	55 1f       	adc	r21, r21
    6c7e:	59 f0       	breq	.+22     	; 0x6c96 <__fp_splitA+0x10>
    6c80:	5f 3f       	cpi	r21, 0xFF	; 255
    6c82:	71 f0       	breq	.+28     	; 0x6ca0 <__fp_splitA+0x1a>
    6c84:	47 95       	ror	r20

00006c86 <__fp_splitA>:
    6c86:	88 0f       	add	r24, r24
    6c88:	97 fb       	bst	r25, 7
    6c8a:	99 1f       	adc	r25, r25
    6c8c:	61 f0       	breq	.+24     	; 0x6ca6 <__fp_splitA+0x20>
    6c8e:	9f 3f       	cpi	r25, 0xFF	; 255
    6c90:	79 f0       	breq	.+30     	; 0x6cb0 <__fp_splitA+0x2a>
    6c92:	87 95       	ror	r24
    6c94:	08 95       	ret
    6c96:	12 16       	cp	r1, r18
    6c98:	13 06       	cpc	r1, r19
    6c9a:	14 06       	cpc	r1, r20
    6c9c:	55 1f       	adc	r21, r21
    6c9e:	f2 cf       	rjmp	.-28     	; 0x6c84 <__fp_split3+0xe>
    6ca0:	46 95       	lsr	r20
    6ca2:	f1 df       	rcall	.-30     	; 0x6c86 <__fp_splitA>
    6ca4:	08 c0       	rjmp	.+16     	; 0x6cb6 <__fp_splitA+0x30>
    6ca6:	16 16       	cp	r1, r22
    6ca8:	17 06       	cpc	r1, r23
    6caa:	18 06       	cpc	r1, r24
    6cac:	99 1f       	adc	r25, r25
    6cae:	f1 cf       	rjmp	.-30     	; 0x6c92 <__fp_splitA+0xc>
    6cb0:	86 95       	lsr	r24
    6cb2:	71 05       	cpc	r23, r1
    6cb4:	61 05       	cpc	r22, r1
    6cb6:	08 94       	sec
    6cb8:	08 95       	ret

00006cba <__fp_zero>:
    6cba:	e8 94       	clt

00006cbc <__fp_szero>:
    6cbc:	bb 27       	eor	r27, r27
    6cbe:	66 27       	eor	r22, r22
    6cc0:	77 27       	eor	r23, r23
    6cc2:	cb 01       	movw	r24, r22
    6cc4:	97 f9       	bld	r25, 7
    6cc6:	08 95       	ret

00006cc8 <__gesf2>:
    6cc8:	2c df       	rcall	.-424    	; 0x6b22 <__fp_cmp>
    6cca:	08 f4       	brcc	.+2      	; 0x6cce <__gesf2+0x6>
    6ccc:	8f ef       	ldi	r24, 0xFF	; 255
    6cce:	08 95       	ret

00006cd0 <inverse>:
    6cd0:	9b 01       	movw	r18, r22
    6cd2:	ac 01       	movw	r20, r24
    6cd4:	60 e0       	ldi	r22, 0x00	; 0
    6cd6:	70 e0       	ldi	r23, 0x00	; 0
    6cd8:	80 e8       	ldi	r24, 0x80	; 128
    6cda:	9f e3       	ldi	r25, 0x3F	; 63
    6cdc:	4c ce       	rjmp	.-872    	; 0x6976 <__divsf3>

00006cde <__mulsf3>:
    6cde:	0b d0       	rcall	.+22     	; 0x6cf6 <__mulsf3x>
    6ce0:	a8 cf       	rjmp	.-176    	; 0x6c32 <__fp_round>
    6ce2:	71 df       	rcall	.-286    	; 0x6bc6 <__fp_pscA>
    6ce4:	28 f0       	brcs	.+10     	; 0x6cf0 <__mulsf3+0x12>
    6ce6:	76 df       	rcall	.-276    	; 0x6bd4 <__fp_pscB>
    6ce8:	18 f0       	brcs	.+6      	; 0x6cf0 <__mulsf3+0x12>
    6cea:	95 23       	and	r25, r21
    6cec:	09 f0       	breq	.+2      	; 0x6cf0 <__mulsf3+0x12>
    6cee:	3d cf       	rjmp	.-390    	; 0x6b6a <__fp_inf>
    6cf0:	42 cf       	rjmp	.-380    	; 0x6b76 <__fp_nan>
    6cf2:	11 24       	eor	r1, r1
    6cf4:	e3 cf       	rjmp	.-58     	; 0x6cbc <__fp_szero>

00006cf6 <__mulsf3x>:
    6cf6:	bf df       	rcall	.-130    	; 0x6c76 <__fp_split3>
    6cf8:	a0 f3       	brcs	.-24     	; 0x6ce2 <__mulsf3+0x4>

00006cfa <__mulsf3_pse>:
    6cfa:	95 9f       	mul	r25, r21
    6cfc:	d1 f3       	breq	.-12     	; 0x6cf2 <__mulsf3+0x14>
    6cfe:	95 0f       	add	r25, r21
    6d00:	50 e0       	ldi	r21, 0x00	; 0
    6d02:	55 1f       	adc	r21, r21
    6d04:	62 9f       	mul	r22, r18
    6d06:	f0 01       	movw	r30, r0
    6d08:	72 9f       	mul	r23, r18
    6d0a:	bb 27       	eor	r27, r27
    6d0c:	f0 0d       	add	r31, r0
    6d0e:	b1 1d       	adc	r27, r1
    6d10:	63 9f       	mul	r22, r19
    6d12:	aa 27       	eor	r26, r26
    6d14:	f0 0d       	add	r31, r0
    6d16:	b1 1d       	adc	r27, r1
    6d18:	aa 1f       	adc	r26, r26
    6d1a:	64 9f       	mul	r22, r20
    6d1c:	66 27       	eor	r22, r22
    6d1e:	b0 0d       	add	r27, r0
    6d20:	a1 1d       	adc	r26, r1
    6d22:	66 1f       	adc	r22, r22
    6d24:	82 9f       	mul	r24, r18
    6d26:	22 27       	eor	r18, r18
    6d28:	b0 0d       	add	r27, r0
    6d2a:	a1 1d       	adc	r26, r1
    6d2c:	62 1f       	adc	r22, r18
    6d2e:	73 9f       	mul	r23, r19
    6d30:	b0 0d       	add	r27, r0
    6d32:	a1 1d       	adc	r26, r1
    6d34:	62 1f       	adc	r22, r18
    6d36:	83 9f       	mul	r24, r19
    6d38:	a0 0d       	add	r26, r0
    6d3a:	61 1d       	adc	r22, r1
    6d3c:	22 1f       	adc	r18, r18
    6d3e:	74 9f       	mul	r23, r20
    6d40:	33 27       	eor	r19, r19
    6d42:	a0 0d       	add	r26, r0
    6d44:	61 1d       	adc	r22, r1
    6d46:	23 1f       	adc	r18, r19
    6d48:	84 9f       	mul	r24, r20
    6d4a:	60 0d       	add	r22, r0
    6d4c:	21 1d       	adc	r18, r1
    6d4e:	82 2f       	mov	r24, r18
    6d50:	76 2f       	mov	r23, r22
    6d52:	6a 2f       	mov	r22, r26
    6d54:	11 24       	eor	r1, r1
    6d56:	9f 57       	subi	r25, 0x7F	; 127
    6d58:	50 40       	sbci	r21, 0x00	; 0
    6d5a:	8a f0       	brmi	.+34     	; 0x6d7e <__mulsf3_pse+0x84>
    6d5c:	e1 f0       	breq	.+56     	; 0x6d96 <__mulsf3_pse+0x9c>
    6d5e:	88 23       	and	r24, r24
    6d60:	4a f0       	brmi	.+18     	; 0x6d74 <__mulsf3_pse+0x7a>
    6d62:	ee 0f       	add	r30, r30
    6d64:	ff 1f       	adc	r31, r31
    6d66:	bb 1f       	adc	r27, r27
    6d68:	66 1f       	adc	r22, r22
    6d6a:	77 1f       	adc	r23, r23
    6d6c:	88 1f       	adc	r24, r24
    6d6e:	91 50       	subi	r25, 0x01	; 1
    6d70:	50 40       	sbci	r21, 0x00	; 0
    6d72:	a9 f7       	brne	.-22     	; 0x6d5e <__mulsf3_pse+0x64>
    6d74:	9e 3f       	cpi	r25, 0xFE	; 254
    6d76:	51 05       	cpc	r21, r1
    6d78:	70 f0       	brcs	.+28     	; 0x6d96 <__mulsf3_pse+0x9c>
    6d7a:	f7 ce       	rjmp	.-530    	; 0x6b6a <__fp_inf>
    6d7c:	9f cf       	rjmp	.-194    	; 0x6cbc <__fp_szero>
    6d7e:	5f 3f       	cpi	r21, 0xFF	; 255
    6d80:	ec f3       	brlt	.-6      	; 0x6d7c <__mulsf3_pse+0x82>
    6d82:	98 3e       	cpi	r25, 0xE8	; 232
    6d84:	dc f3       	brlt	.-10     	; 0x6d7c <__mulsf3_pse+0x82>
    6d86:	86 95       	lsr	r24
    6d88:	77 95       	ror	r23
    6d8a:	67 95       	ror	r22
    6d8c:	b7 95       	ror	r27
    6d8e:	f7 95       	ror	r31
    6d90:	e7 95       	ror	r30
    6d92:	9f 5f       	subi	r25, 0xFF	; 255
    6d94:	c1 f7       	brne	.-16     	; 0x6d86 <__mulsf3_pse+0x8c>
    6d96:	fe 2b       	or	r31, r30
    6d98:	88 0f       	add	r24, r24
    6d9a:	91 1d       	adc	r25, r1
    6d9c:	96 95       	lsr	r25
    6d9e:	87 95       	ror	r24
    6da0:	97 f9       	bld	r25, 7
    6da2:	08 95       	ret

00006da4 <sin>:
    6da4:	9f 93       	push	r25
    6da6:	1e df       	rcall	.-452    	; 0x6be4 <__fp_rempio2>
    6da8:	0f 90       	pop	r0
    6daa:	07 fc       	sbrc	r0, 7
    6dac:	ee 5f       	subi	r30, 0xFE	; 254
    6dae:	52 cf       	rjmp	.-348    	; 0x6c54 <__fp_sinus>
    6db0:	11 f4       	brne	.+4      	; 0x6db6 <sin+0x12>
    6db2:	0e f4       	brtc	.+2      	; 0x6db6 <sin+0x12>
    6db4:	e0 ce       	rjmp	.-576    	; 0x6b76 <__fp_nan>
    6db6:	41 c0       	rjmp	.+130    	; 0x6e3a <__fp_mpack>

00006db8 <sqrt>:
    6db8:	66 df       	rcall	.-308    	; 0x6c86 <__fp_splitA>
    6dba:	d0 f3       	brcs	.-12     	; 0x6db0 <sin+0xc>
    6dbc:	99 23       	and	r25, r25
    6dbe:	d9 f3       	breq	.-10     	; 0x6db6 <sin+0x12>
    6dc0:	ce f3       	brts	.-14     	; 0x6db4 <sin+0x10>
    6dc2:	9f 57       	subi	r25, 0x7F	; 127
    6dc4:	55 0b       	sbc	r21, r21
    6dc6:	87 ff       	sbrs	r24, 7
    6dc8:	46 d0       	rcall	.+140    	; 0x6e56 <__fp_norm2>
    6dca:	00 24       	eor	r0, r0
    6dcc:	a0 e6       	ldi	r26, 0x60	; 96
    6dce:	40 ea       	ldi	r20, 0xA0	; 160
    6dd0:	90 01       	movw	r18, r0
    6dd2:	80 58       	subi	r24, 0x80	; 128
    6dd4:	56 95       	lsr	r21
    6dd6:	97 95       	ror	r25
    6dd8:	28 f4       	brcc	.+10     	; 0x6de4 <sqrt+0x2c>
    6dda:	80 5c       	subi	r24, 0xC0	; 192
    6ddc:	66 0f       	add	r22, r22
    6dde:	77 1f       	adc	r23, r23
    6de0:	88 1f       	adc	r24, r24
    6de2:	20 f0       	brcs	.+8      	; 0x6dec <sqrt+0x34>
    6de4:	26 17       	cp	r18, r22
    6de6:	37 07       	cpc	r19, r23
    6de8:	48 07       	cpc	r20, r24
    6dea:	30 f4       	brcc	.+12     	; 0x6df8 <sqrt+0x40>
    6dec:	62 1b       	sub	r22, r18
    6dee:	73 0b       	sbc	r23, r19
    6df0:	84 0b       	sbc	r24, r20
    6df2:	20 29       	or	r18, r0
    6df4:	31 29       	or	r19, r1
    6df6:	4a 2b       	or	r20, r26
    6df8:	a6 95       	lsr	r26
    6dfa:	17 94       	ror	r1
    6dfc:	07 94       	ror	r0
    6dfe:	20 25       	eor	r18, r0
    6e00:	31 25       	eor	r19, r1
    6e02:	4a 27       	eor	r20, r26
    6e04:	58 f7       	brcc	.-42     	; 0x6ddc <sqrt+0x24>
    6e06:	66 0f       	add	r22, r22
    6e08:	77 1f       	adc	r23, r23
    6e0a:	88 1f       	adc	r24, r24
    6e0c:	20 f0       	brcs	.+8      	; 0x6e16 <sqrt+0x5e>
    6e0e:	26 17       	cp	r18, r22
    6e10:	37 07       	cpc	r19, r23
    6e12:	48 07       	cpc	r20, r24
    6e14:	30 f4       	brcc	.+12     	; 0x6e22 <sqrt+0x6a>
    6e16:	62 0b       	sbc	r22, r18
    6e18:	73 0b       	sbc	r23, r19
    6e1a:	84 0b       	sbc	r24, r20
    6e1c:	20 0d       	add	r18, r0
    6e1e:	31 1d       	adc	r19, r1
    6e20:	41 1d       	adc	r20, r1
    6e22:	a0 95       	com	r26
    6e24:	81 f7       	brne	.-32     	; 0x6e06 <sqrt+0x4e>
    6e26:	b9 01       	movw	r22, r18
    6e28:	84 2f       	mov	r24, r20
    6e2a:	91 58       	subi	r25, 0x81	; 129
    6e2c:	88 0f       	add	r24, r24
    6e2e:	96 95       	lsr	r25
    6e30:	87 95       	ror	r24
    6e32:	08 95       	ret

00006e34 <square>:
    6e34:	9b 01       	movw	r18, r22
    6e36:	ac 01       	movw	r20, r24
    6e38:	52 cf       	rjmp	.-348    	; 0x6cde <__mulsf3>

00006e3a <__fp_mpack>:
    6e3a:	9f 3f       	cpi	r25, 0xFF	; 255
    6e3c:	31 f0       	breq	.+12     	; 0x6e4a <__fp_mpack_finite+0xc>

00006e3e <__fp_mpack_finite>:
    6e3e:	91 50       	subi	r25, 0x01	; 1
    6e40:	20 f4       	brcc	.+8      	; 0x6e4a <__fp_mpack_finite+0xc>
    6e42:	87 95       	ror	r24
    6e44:	77 95       	ror	r23
    6e46:	67 95       	ror	r22
    6e48:	b7 95       	ror	r27
    6e4a:	88 0f       	add	r24, r24
    6e4c:	91 1d       	adc	r25, r1
    6e4e:	96 95       	lsr	r25
    6e50:	87 95       	ror	r24
    6e52:	97 f9       	bld	r25, 7
    6e54:	08 95       	ret

00006e56 <__fp_norm2>:
    6e56:	91 50       	subi	r25, 0x01	; 1
    6e58:	50 40       	sbci	r21, 0x00	; 0
    6e5a:	66 0f       	add	r22, r22
    6e5c:	77 1f       	adc	r23, r23
    6e5e:	88 1f       	adc	r24, r24
    6e60:	d2 f7       	brpl	.-12     	; 0x6e56 <__fp_norm2>
    6e62:	08 95       	ret

00006e64 <__fp_powsodd>:
    6e64:	9f 93       	push	r25
    6e66:	8f 93       	push	r24
    6e68:	7f 93       	push	r23
    6e6a:	6f 93       	push	r22
    6e6c:	ff 93       	push	r31
    6e6e:	ef 93       	push	r30
    6e70:	9b 01       	movw	r18, r22
    6e72:	ac 01       	movw	r20, r24
    6e74:	34 df       	rcall	.-408    	; 0x6cde <__mulsf3>
    6e76:	ef 91       	pop	r30
    6e78:	ff 91       	pop	r31
    6e7a:	80 de       	rcall	.-768    	; 0x6b7c <__fp_powser>
    6e7c:	2f 91       	pop	r18
    6e7e:	3f 91       	pop	r19
    6e80:	4f 91       	pop	r20
    6e82:	5f 91       	pop	r21
    6e84:	2c cf       	rjmp	.-424    	; 0x6cde <__mulsf3>

00006e86 <__mulsi3>:
    6e86:	db 01       	movw	r26, r22
    6e88:	8f 93       	push	r24
    6e8a:	9f 93       	push	r25
    6e8c:	39 d0       	rcall	.+114    	; 0x6f00 <__muluhisi3>
    6e8e:	bf 91       	pop	r27
    6e90:	af 91       	pop	r26
    6e92:	a2 9f       	mul	r26, r18
    6e94:	80 0d       	add	r24, r0
    6e96:	91 1d       	adc	r25, r1
    6e98:	a3 9f       	mul	r26, r19
    6e9a:	90 0d       	add	r25, r0
    6e9c:	b2 9f       	mul	r27, r18
    6e9e:	90 0d       	add	r25, r0
    6ea0:	11 24       	eor	r1, r1
    6ea2:	08 95       	ret

00006ea4 <__divmodhi4>:
    6ea4:	97 fb       	bst	r25, 7
    6ea6:	07 2e       	mov	r0, r23
    6ea8:	16 f4       	brtc	.+4      	; 0x6eae <__divmodhi4+0xa>
    6eaa:	00 94       	com	r0
    6eac:	06 d0       	rcall	.+12     	; 0x6eba <__divmodhi4_neg1>
    6eae:	77 fd       	sbrc	r23, 7
    6eb0:	08 d0       	rcall	.+16     	; 0x6ec2 <__divmodhi4_neg2>
    6eb2:	36 d0       	rcall	.+108    	; 0x6f20 <__udivmodhi4>
    6eb4:	07 fc       	sbrc	r0, 7
    6eb6:	05 d0       	rcall	.+10     	; 0x6ec2 <__divmodhi4_neg2>
    6eb8:	3e f4       	brtc	.+14     	; 0x6ec8 <__divmodhi4_exit>

00006eba <__divmodhi4_neg1>:
    6eba:	90 95       	com	r25
    6ebc:	81 95       	neg	r24
    6ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    6ec0:	08 95       	ret

00006ec2 <__divmodhi4_neg2>:
    6ec2:	70 95       	com	r23
    6ec4:	61 95       	neg	r22
    6ec6:	7f 4f       	sbci	r23, 0xFF	; 255

00006ec8 <__divmodhi4_exit>:
    6ec8:	08 95       	ret

00006eca <__divmodsi4>:
    6eca:	05 2e       	mov	r0, r21
    6ecc:	97 fb       	bst	r25, 7
    6ece:	16 f4       	brtc	.+4      	; 0x6ed4 <__divmodsi4+0xa>
    6ed0:	00 94       	com	r0
    6ed2:	06 d0       	rcall	.+12     	; 0x6ee0 <__divmodsi4_neg1>
    6ed4:	57 fd       	sbrc	r21, 7
    6ed6:	0c d0       	rcall	.+24     	; 0x6ef0 <__divmodsi4_neg2>
    6ed8:	37 d0       	rcall	.+110    	; 0x6f48 <__udivmodsi4>
    6eda:	07 fc       	sbrc	r0, 7
    6edc:	09 d0       	rcall	.+18     	; 0x6ef0 <__divmodsi4_neg2>
    6ede:	7e f4       	brtc	.+30     	; 0x6efe <__divmodsi4_exit>

00006ee0 <__divmodsi4_neg1>:
    6ee0:	90 95       	com	r25
    6ee2:	80 95       	com	r24
    6ee4:	70 95       	com	r23
    6ee6:	61 95       	neg	r22
    6ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    6eea:	8f 4f       	sbci	r24, 0xFF	; 255
    6eec:	9f 4f       	sbci	r25, 0xFF	; 255
    6eee:	08 95       	ret

00006ef0 <__divmodsi4_neg2>:
    6ef0:	50 95       	com	r21
    6ef2:	40 95       	com	r20
    6ef4:	30 95       	com	r19
    6ef6:	21 95       	neg	r18
    6ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    6efa:	4f 4f       	sbci	r20, 0xFF	; 255
    6efc:	5f 4f       	sbci	r21, 0xFF	; 255

00006efe <__divmodsi4_exit>:
    6efe:	08 95       	ret

00006f00 <__muluhisi3>:
    6f00:	45 d0       	rcall	.+138    	; 0x6f8c <__umulhisi3>
    6f02:	a5 9f       	mul	r26, r21
    6f04:	90 0d       	add	r25, r0
    6f06:	b4 9f       	mul	r27, r20
    6f08:	90 0d       	add	r25, r0
    6f0a:	a4 9f       	mul	r26, r20
    6f0c:	80 0d       	add	r24, r0
    6f0e:	91 1d       	adc	r25, r1
    6f10:	11 24       	eor	r1, r1
    6f12:	08 95       	ret

00006f14 <__mulshisi3>:
    6f14:	b7 ff       	sbrs	r27, 7
    6f16:	f4 cf       	rjmp	.-24     	; 0x6f00 <__muluhisi3>

00006f18 <__mulohisi3>:
    6f18:	f3 df       	rcall	.-26     	; 0x6f00 <__muluhisi3>
    6f1a:	82 1b       	sub	r24, r18
    6f1c:	93 0b       	sbc	r25, r19
    6f1e:	08 95       	ret

00006f20 <__udivmodhi4>:
    6f20:	aa 1b       	sub	r26, r26
    6f22:	bb 1b       	sub	r27, r27
    6f24:	51 e1       	ldi	r21, 0x11	; 17
    6f26:	07 c0       	rjmp	.+14     	; 0x6f36 <__udivmodhi4_ep>

00006f28 <__udivmodhi4_loop>:
    6f28:	aa 1f       	adc	r26, r26
    6f2a:	bb 1f       	adc	r27, r27
    6f2c:	a6 17       	cp	r26, r22
    6f2e:	b7 07       	cpc	r27, r23
    6f30:	10 f0       	brcs	.+4      	; 0x6f36 <__udivmodhi4_ep>
    6f32:	a6 1b       	sub	r26, r22
    6f34:	b7 0b       	sbc	r27, r23

00006f36 <__udivmodhi4_ep>:
    6f36:	88 1f       	adc	r24, r24
    6f38:	99 1f       	adc	r25, r25
    6f3a:	5a 95       	dec	r21
    6f3c:	a9 f7       	brne	.-22     	; 0x6f28 <__udivmodhi4_loop>
    6f3e:	80 95       	com	r24
    6f40:	90 95       	com	r25
    6f42:	bc 01       	movw	r22, r24
    6f44:	cd 01       	movw	r24, r26
    6f46:	08 95       	ret

00006f48 <__udivmodsi4>:
    6f48:	a1 e2       	ldi	r26, 0x21	; 33
    6f4a:	1a 2e       	mov	r1, r26
    6f4c:	aa 1b       	sub	r26, r26
    6f4e:	bb 1b       	sub	r27, r27
    6f50:	fd 01       	movw	r30, r26
    6f52:	0d c0       	rjmp	.+26     	; 0x6f6e <__udivmodsi4_ep>

00006f54 <__udivmodsi4_loop>:
    6f54:	aa 1f       	adc	r26, r26
    6f56:	bb 1f       	adc	r27, r27
    6f58:	ee 1f       	adc	r30, r30
    6f5a:	ff 1f       	adc	r31, r31
    6f5c:	a2 17       	cp	r26, r18
    6f5e:	b3 07       	cpc	r27, r19
    6f60:	e4 07       	cpc	r30, r20
    6f62:	f5 07       	cpc	r31, r21
    6f64:	20 f0       	brcs	.+8      	; 0x6f6e <__udivmodsi4_ep>
    6f66:	a2 1b       	sub	r26, r18
    6f68:	b3 0b       	sbc	r27, r19
    6f6a:	e4 0b       	sbc	r30, r20
    6f6c:	f5 0b       	sbc	r31, r21

00006f6e <__udivmodsi4_ep>:
    6f6e:	66 1f       	adc	r22, r22
    6f70:	77 1f       	adc	r23, r23
    6f72:	88 1f       	adc	r24, r24
    6f74:	99 1f       	adc	r25, r25
    6f76:	1a 94       	dec	r1
    6f78:	69 f7       	brne	.-38     	; 0x6f54 <__udivmodsi4_loop>
    6f7a:	60 95       	com	r22
    6f7c:	70 95       	com	r23
    6f7e:	80 95       	com	r24
    6f80:	90 95       	com	r25
    6f82:	9b 01       	movw	r18, r22
    6f84:	ac 01       	movw	r20, r24
    6f86:	bd 01       	movw	r22, r26
    6f88:	cf 01       	movw	r24, r30
    6f8a:	08 95       	ret

00006f8c <__umulhisi3>:
    6f8c:	a2 9f       	mul	r26, r18
    6f8e:	b0 01       	movw	r22, r0
    6f90:	b3 9f       	mul	r27, r19
    6f92:	c0 01       	movw	r24, r0
    6f94:	a3 9f       	mul	r26, r19
    6f96:	01 d0       	rcall	.+2      	; 0x6f9a <__umulhisi3+0xe>
    6f98:	b2 9f       	mul	r27, r18
    6f9a:	70 0d       	add	r23, r0
    6f9c:	81 1d       	adc	r24, r1
    6f9e:	11 24       	eor	r1, r1
    6fa0:	91 1d       	adc	r25, r1
    6fa2:	08 95       	ret

00006fa4 <_exit>:
    6fa4:	f8 94       	cli

00006fa6 <__stop_program>:
    6fa6:	ff cf       	rjmp	.-2      	; 0x6fa6 <__stop_program>
