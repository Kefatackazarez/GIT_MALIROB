
XDRIVE_TIKVIC_V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  00007318  000073ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001285  00802010  00802010  000073bc  2**0
                  ALLOC
  3 .stab         000035f4  00000000  00000000  000073bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f10  00000000  00000000  0000a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000b8c0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003c0  00000000  00000000  0000b8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a50b  00000000  00000000  0000bcaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001291  00000000  00000000  000161ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e05  00000000  00000000  0001744b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d44  00000000  00000000  0001b250  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003050  00000000  00000000  0001bf94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002cee  00000000  00000000  0001efe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000330  00000000  00000000  00021cd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
       2:	00 00       	nop
       4:	43 c1       	rjmp	.+646    	; 0x28c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c1       	rjmp	.+642    	; 0x28c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c1       	rjmp	.+638    	; 0x28c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c1       	rjmp	.+634    	; 0x28c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c1       	rjmp	.+630    	; 0x28c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c1       	rjmp	.+626    	; 0x28c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c1       	rjmp	.+622    	; 0x28c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c1       	rjmp	.+618    	; 0x28c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c1       	rjmp	.+614    	; 0x28c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c1       	rjmp	.+610    	; 0x28c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c1       	rjmp	.+606    	; 0x28c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c1       	rjmp	.+602    	; 0x28c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c1       	rjmp	.+598    	; 0x28c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c1       	rjmp	.+594    	; 0x28c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c1       	rjmp	.+590    	; 0x28c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c1       	rjmp	.+586    	; 0x28c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c1       	rjmp	.+582    	; 0x28c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c1       	rjmp	.+578    	; 0x28c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c1       	rjmp	.+574    	; 0x28c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c1       	rjmp	.+570    	; 0x28c <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c1       	rjmp	.+566    	; 0x28c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c1       	rjmp	.+562    	; 0x28c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	17 c1       	rjmp	.+558    	; 0x28c <__bad_interrupt>
      5e:	00 00       	nop
      60:	15 c1       	rjmp	.+554    	; 0x28c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__vector_25>
      68:	0c 94 ca 23 	jmp	0x4794	; 0x4794 <__vector_26>
      6c:	0f c1       	rjmp	.+542    	; 0x28c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c1       	rjmp	.+538    	; 0x28c <__bad_interrupt>
      72:	00 00       	nop
      74:	0b c1       	rjmp	.+534    	; 0x28c <__bad_interrupt>
      76:	00 00       	nop
      78:	09 c1       	rjmp	.+530    	; 0x28c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	07 c1       	rjmp	.+526    	; 0x28c <__bad_interrupt>
      7e:	00 00       	nop
      80:	05 c1       	rjmp	.+522    	; 0x28c <__bad_interrupt>
      82:	00 00       	nop
      84:	03 c1       	rjmp	.+518    	; 0x28c <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 ff 23 	jmp	0x47fe	; 0x47fe <__vector_34>
      8c:	ff c0       	rjmp	.+510    	; 0x28c <__bad_interrupt>
      8e:	00 00       	nop
      90:	fd c0       	rjmp	.+506    	; 0x28c <__bad_interrupt>
      92:	00 00       	nop
      94:	fb c0       	rjmp	.+502    	; 0x28c <__bad_interrupt>
      96:	00 00       	nop
      98:	f9 c0       	rjmp	.+498    	; 0x28c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f7 c0       	rjmp	.+494    	; 0x28c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f5 c0       	rjmp	.+490    	; 0x28c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f3 c0       	rjmp	.+486    	; 0x28c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f1 c0       	rjmp	.+482    	; 0x28c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ef c0       	rjmp	.+478    	; 0x28c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ed c0       	rjmp	.+474    	; 0x28c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	eb c0       	rjmp	.+470    	; 0x28c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e9 c0       	rjmp	.+466    	; 0x28c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e7 c0       	rjmp	.+462    	; 0x28c <__bad_interrupt>
      be:	00 00       	nop
      c0:	e5 c0       	rjmp	.+458    	; 0x28c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e3 c0       	rjmp	.+454    	; 0x28c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e1 c0       	rjmp	.+450    	; 0x28c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	df c0       	rjmp	.+446    	; 0x28c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	dd c0       	rjmp	.+442    	; 0x28c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b6 c3       	rjmp	.+1900   	; 0x842 <__vector_53>
      d6:	00 00       	nop
      d8:	d9 c0       	rjmp	.+434    	; 0x28c <__bad_interrupt>
      da:	00 00       	nop
      dc:	d7 c0       	rjmp	.+430    	; 0x28c <__bad_interrupt>
      de:	00 00       	nop
      e0:	d5 c0       	rjmp	.+426    	; 0x28c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d3 c0       	rjmp	.+422    	; 0x28c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9c c4       	rjmp	.+2360   	; 0xa22 <__vector_58>
      ea:	00 00       	nop
      ec:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__vector_59>
      f0:	cd c0       	rjmp	.+410    	; 0x28c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__vector_61>
      f8:	0c 94 95 23 	jmp	0x472a	; 0x472a <__vector_62>
      fc:	c7 c0       	rjmp	.+398    	; 0x28c <__bad_interrupt>
      fe:	00 00       	nop
     100:	c5 c0       	rjmp	.+394    	; 0x28c <__bad_interrupt>
     102:	00 00       	nop
     104:	c3 c0       	rjmp	.+390    	; 0x28c <__bad_interrupt>
     106:	00 00       	nop
     108:	c1 c0       	rjmp	.+386    	; 0x28c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	bf c0       	rjmp	.+382    	; 0x28c <__bad_interrupt>
     10e:	00 00       	nop
     110:	bd c0       	rjmp	.+378    	; 0x28c <__bad_interrupt>
     112:	00 00       	nop
     114:	bb c0       	rjmp	.+374    	; 0x28c <__bad_interrupt>
     116:	00 00       	nop
     118:	b9 c0       	rjmp	.+370    	; 0x28c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b7 c0       	rjmp	.+366    	; 0x28c <__bad_interrupt>
     11e:	00 00       	nop
     120:	b5 c0       	rjmp	.+362    	; 0x28c <__bad_interrupt>
     122:	00 00       	nop
     124:	b3 c0       	rjmp	.+358    	; 0x28c <__bad_interrupt>
     126:	00 00       	nop
     128:	b1 c0       	rjmp	.+354    	; 0x28c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	af c0       	rjmp	.+350    	; 0x28c <__bad_interrupt>
     12e:	00 00       	nop
     130:	ad c0       	rjmp	.+346    	; 0x28c <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 0c 23 	jmp	0x4618	; 0x4618 <__vector_77>
     138:	a9 c0       	rjmp	.+338    	; 0x28c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a7 c0       	rjmp	.+334    	; 0x28c <__bad_interrupt>
     13e:	00 00       	nop
     140:	a5 c0       	rjmp	.+330    	; 0x28c <__bad_interrupt>
     142:	00 00       	nop
     144:	a3 c0       	rjmp	.+326    	; 0x28c <__bad_interrupt>
     146:	00 00       	nop
     148:	a1 c0       	rjmp	.+322    	; 0x28c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 36 23 	jmp	0x466c	; 0x466c <__vector_83>
     150:	9d c0       	rjmp	.+314    	; 0x28c <__bad_interrupt>
     152:	00 00       	nop
     154:	9b c0       	rjmp	.+310    	; 0x28c <__bad_interrupt>
     156:	00 00       	nop
     158:	99 c0       	rjmp	.+306    	; 0x28c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	97 c0       	rjmp	.+302    	; 0x28c <__bad_interrupt>
     15e:	00 00       	nop
     160:	95 c0       	rjmp	.+298    	; 0x28c <__bad_interrupt>
     162:	00 00       	nop
     164:	93 c0       	rjmp	.+294    	; 0x28c <__bad_interrupt>
     166:	00 00       	nop
     168:	91 c0       	rjmp	.+290    	; 0x28c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8f c0       	rjmp	.+286    	; 0x28c <__bad_interrupt>
     16e:	00 00       	nop
     170:	8d c0       	rjmp	.+282    	; 0x28c <__bad_interrupt>
     172:	00 00       	nop
     174:	8b c0       	rjmp	.+278    	; 0x28c <__bad_interrupt>
     176:	00 00       	nop
     178:	89 c0       	rjmp	.+274    	; 0x28c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	87 c0       	rjmp	.+270    	; 0x28c <__bad_interrupt>
     17e:	00 00       	nop
     180:	85 c0       	rjmp	.+266    	; 0x28c <__bad_interrupt>
     182:	00 00       	nop
     184:	83 c0       	rjmp	.+262    	; 0x28c <__bad_interrupt>
     186:	00 00       	nop
     188:	81 c0       	rjmp	.+258    	; 0x28c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7f c0       	rjmp	.+254    	; 0x28c <__bad_interrupt>
     18e:	00 00       	nop
     190:	7d c0       	rjmp	.+250    	; 0x28c <__bad_interrupt>
     192:	00 00       	nop
     194:	7b c0       	rjmp	.+246    	; 0x28c <__bad_interrupt>
     196:	00 00       	nop
     198:	79 c0       	rjmp	.+242    	; 0x28c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	77 c0       	rjmp	.+238    	; 0x28c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	75 c0       	rjmp	.+234    	; 0x28c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	73 c0       	rjmp	.+230    	; 0x28c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	71 c0       	rjmp	.+226    	; 0x28c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6f c0       	rjmp	.+222    	; 0x28c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <__vector_108>
     1b4:	6b c0       	rjmp	.+214    	; 0x28c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	0c 94 bd 33 	jmp	0x677a	; 0x677a <__vector_110>
     1bc:	67 c0       	rjmp	.+206    	; 0x28c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	65 c0       	rjmp	.+202    	; 0x28c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	63 c0       	rjmp	.+198    	; 0x28c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	61 c0       	rjmp	.+194    	; 0x28c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5f c0       	rjmp	.+190    	; 0x28c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	5d c0       	rjmp	.+186    	; 0x28c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	5b c0       	rjmp	.+182    	; 0x28c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	59 c0       	rjmp	.+178    	; 0x28c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	57 c0       	rjmp	.+174    	; 0x28c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	55 c0       	rjmp	.+170    	; 0x28c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	53 c0       	rjmp	.+166    	; 0x28c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	51 c0       	rjmp	.+162    	; 0x28c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4f c0       	rjmp	.+158    	; 0x28c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	4d c0       	rjmp	.+154    	; 0x28c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	08 4a       	sbci	r16, 0xA8	; 168
     1f6:	d7 3b       	cpi	r29, 0xB7	; 183
     1f8:	3b ce       	rjmp	.-906    	; 0xfffffe70 <__eeprom_end+0xff7efe70>
     1fa:	01 6e       	ori	r16, 0xE1	; 225
     1fc:	84 bc       	out	0x24, r8	; 36
     1fe:	bf fd       	.word	0xfdbf	; ????
     200:	c1 2f       	mov	r28, r17
     202:	3d 6c       	ori	r19, 0xCD	; 205
     204:	74 31       	cpi	r23, 0x14	; 20
     206:	9a bd       	out	0x2a, r25	; 42
     208:	56 83       	std	Z+6, r21	; 0x06
     20a:	3d da       	rcall	.-2950   	; 0xfffff686 <__eeprom_end+0xff7ef686>
     20c:	3d 00       	.word	0x003d	; ????
     20e:	c7 7f       	andi	r28, 0xF7	; 247
     210:	11 be       	out	0x31, r1	; 49
     212:	d9 e4       	ldi	r29, 0x49	; 73
     214:	bb 4c       	sbci	r27, 0xCB	; 203
     216:	3e 91       	ld	r19, -X
     218:	6b aa       	std	Y+51, r6	; 0x33
     21a:	aa be       	out	0x3a, r10	; 58
     21c:	00 00       	nop
     21e:	00 80       	ld	r0, Z
     220:	3f 05       	cpc	r19, r15
     222:	a8 4c       	sbci	r26, 0xC8	; 200
     224:	cd b2       	in	r12, 0x1d	; 29
     226:	d4 4e       	sbci	r29, 0xE4	; 228
     228:	b9 38       	cpi	r27, 0x89	; 137
     22a:	36 a9       	ldd	r19, Z+54	; 0x36
     22c:	02 0c       	add	r0, r2
     22e:	50 b9       	out	0x00, r21	; 0
     230:	91 86       	std	Z+9, r9	; 0x09
     232:	88 08       	sbc	r8, r8
     234:	3c a6       	std	Y+44, r3	; 0x2c
     236:	aa aa       	std	Y+50, r10	; 0x32
     238:	2a be       	out	0x3a, r2	; 58
     23a:	00 00       	nop
     23c:	00 80       	ld	r0, Z
     23e:	3f 00       	.word	0x003f	; ????

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	df e3       	ldi	r29, 0x3F	; 63
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	0c bf       	out	0x3c, r16	; 60
     250:	18 be       	out	0x38, r1	; 56
     252:	19 be       	out	0x39, r1	; 57
     254:	1a be       	out	0x3a, r1	; 58
     256:	1b be       	out	0x3b, r1	; 59

00000258 <__do_copy_data>:
     258:	10 e2       	ldi	r17, 0x20	; 32
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b0 e2       	ldi	r27, 0x20	; 32
     25e:	e8 e1       	ldi	r30, 0x18	; 24
     260:	f3 e7       	ldi	r31, 0x73	; 115
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	0b bf       	out	0x3b, r16	; 59
     266:	02 c0       	rjmp	.+4      	; 0x26c <__do_copy_data+0x14>
     268:	07 90       	elpm	r0, Z+
     26a:	0d 92       	st	X+, r0
     26c:	a0 31       	cpi	r26, 0x10	; 16
     26e:	b1 07       	cpc	r27, r17
     270:	d9 f7       	brne	.-10     	; 0x268 <__do_copy_data+0x10>
     272:	1b be       	out	0x3b, r1	; 59

00000274 <__do_clear_bss>:
     274:	22 e3       	ldi	r18, 0x32	; 50
     276:	a0 e1       	ldi	r26, 0x10	; 16
     278:	b0 e2       	ldi	r27, 0x20	; 32
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	a5 39       	cpi	r26, 0x95	; 149
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 57 35 	call	0x6aae	; 0x6aae <main>
     288:	0c 94 8a 39 	jmp	0x7314	; 0x7314 <_exit>

0000028c <__bad_interrupt>:
     28c:	b9 ce       	rjmp	.-654    	; 0x0 <__vectors>

0000028e <ADC_ResultCh_GetWord>:

	// Wait 4*COMMEN_MODE_CYCLES for common mode to settle.  
	delay_us(4*COMMEN_MODE_CYCLES);

	// Set prescaler to old value 
	adc->PRESCALER = prescaler_val;
     28e:	46 2f       	mov	r20, r22
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	66 23       	and	r22, r22
     294:	0c f4       	brge	.+2      	; 0x298 <ADC_ResultCh_GetWord+0xa>
     296:	5f 6f       	ori	r21, 0xFF	; 255
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	fc 01       	movw	r30, r24
     29c:	23 83       	std	Z+3, r18	; 0x03
     29e:	24 81       	ldd	r18, Z+4	; 0x04
     2a0:	35 81       	ldd	r19, Z+5	; 0x05
     2a2:	24 1b       	sub	r18, r20
     2a4:	35 0b       	sbc	r19, r21
     2a6:	82 2f       	mov	r24, r18
     2a8:	93 2f       	mov	r25, r19
     2aa:	08 95       	ret

000002ac <ADC_ResultCh_GetLowByte>:
     2ac:	21 e0       	ldi	r18, 0x01	; 1
     2ae:	fc 01       	movw	r30, r24
     2b0:	23 83       	std	Z+3, r18	; 0x03
     2b2:	84 81       	ldd	r24, Z+4	; 0x04
     2b4:	86 1b       	sub	r24, r22
     2b6:	08 95       	ret

000002b8 <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
     2b8:	fc 01       	movw	r30, r24
  	// Store old prescaler value.  
  	uint8_t prescaler_val = adc->PRESCALER;
     2ba:	84 81       	ldd	r24, Z+4	; 0x04

	// Set prescaler value to minimum value.  
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	94 83       	std	Z+4, r25	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c0:	af ef       	ldi	r26, 0xFF	; 255
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	11 97       	sbiw	r26, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <ADC_Wait_32MHz+0xc>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <ADC_Wait_32MHz+0x12>
     2ca:	00 00       	nop

	// wait 8*COMMEN_MODE_CYCLES for common mode to settle 
	delay_us(8*COMMEN_MODE_CYCLES);

	// Set prescaler to old value 
	adc->PRESCALER = prescaler_val;
     2cc:	84 83       	std	Z+4, r24	; 0x04
     2ce:	08 95       	ret

000002d0 <ADC_Offset_Get>:
 *  \param adc Pointer to the ADC to calculate offset from.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get(ADC_t * adc)
{
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	ec 01       	movw	r28, r24
	uint8_t offset;

  	// Set up ADC to get offset.  
  	ADC_ConvMode_and_Resolution_Config(adc, true, ADC_RESOLUTION_12BIT_gc);
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	89 7e       	andi	r24, 0xE9	; 233
     2da:	80 61       	ori	r24, 0x10	; 16
     2dc:	89 83       	std	Y+1, r24	; 0x01

	ADC_Prescaler_Config(adc , ADC_PRESCALER_DIV8_gc);
     2de:	8c 81       	ldd	r24, Y+4	; 0x04
     2e0:	88 7f       	andi	r24, 0xF8	; 248
     2e2:	81 60       	ori	r24, 0x01	; 1
     2e4:	8c 83       	std	Y+4, r24	; 0x04

	ADC_Referance_Config(adc , ADC_REFSEL_INT1V_gc);
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	8f 7c       	andi	r24, 0xCF	; 207
     2ea:	8a 83       	std	Y+2, r24	; 0x02

	ADC_Ch_InputMode_and_Gain_Config(&(adc->CH0),
     2ec:	88 a1       	ldd	r24, Y+32	; 0x20
     2ee:	80 7e       	andi	r24, 0xE0	; 224
     2f0:	82 60       	ori	r24, 0x02	; 2
     2f2:	88 a3       	std	Y+32, r24	; 0x20
	                                 ADC_CH_INPUTMODE_DIFF_gc,
	                                 ADC_CH_GAIN_1X_gc);

	ADC_Ch_InputMux_Config(&(adc->CH0), ADC_CH_MUXPOS_PIN0_gc, ADC_CH_MUXNEG_PIN0_gc);
     2f4:	19 a2       	std	Y+33, r1	; 0x21

	// Enable ADC.  
	ADC_Enable(adc);
     2f6:	88 81       	ld	r24, Y
     2f8:	81 60       	ori	r24, 0x01	; 1
     2fa:	88 83       	st	Y, r24

	// Wait until ADC is ready.  
	ADC_Wait_32MHz(adc);
     2fc:	ce 01       	movw	r24, r28
     2fe:	dc df       	rcall	.-72     	; 0x2b8 <ADC_Wait_32MHz>

	// Do one conversion to find offset.  
	ADC_Ch_Conversion_Start(&(adc->CH0));
     300:	88 a1       	ldd	r24, Y+32	; 0x20
     302:	80 68       	ori	r24, 0x80	; 128
     304:	88 a3       	std	Y+32, r24	; 0x20

	do{
	}while(!ADC_Ch_Conversion_Complete(&(adc->CH0)));
     306:	8b a1       	ldd	r24, Y+35	; 0x23
     308:	80 ff       	sbrs	r24, 0
     30a:	fd cf       	rjmp	.-6      	; 0x306 <ADC_Offset_Get+0x36>
	offset = ADC_ResultCh_GetLowByte(&(adc->CH0), 0x00);
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	ce 01       	movw	r24, r28
     310:	80 96       	adiw	r24, 0x20	; 32
     312:	cc df       	rcall	.-104    	; 0x2ac <ADC_ResultCh_GetLowByte>

	// Disable ADC.  
	ADC_Disable(adc);
     314:	98 81       	ld	r25, Y
     316:	9e 7f       	andi	r25, 0xFE	; 254
     318:	98 83       	st	Y, r25

	return offset;
}
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <SP_ReadCalibrationByte>:
		  "M" (NVM_CMD_READ_CALIB_ROW_gc),
		  "M" (NVM_CMD_NO_OPERATION_gc)
		: "r20", "r30", "r31"
		); */

		GPIO30 = index;  // r30 - LSB of Z pointer to EEPROM
     320:	8e bb       	out	0x1e, r24	; 30
		GPIO31 = 0;
     322:	1f ba       	out	0x1f, r1	; 31
		NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     324:	ea ec       	ldi	r30, 0xCA	; 202
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	80 83       	st	Z, r24
		result = GPIO30;
     32c:	8e b3       	in	r24, 0x1e	; 30
		NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     32e:	10 82       	st	Z, r1


		return result;

}
     330:	08 95       	ret

00000332 <ADC_CalibrationValues_Set>:
 *  register. The calibration data reduces the gain error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
 void ADC_CalibrationValues_Set(ADC_t * adc)
{
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     338:	c1 15       	cp	r28, r1
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	d8 07       	cpc	r29, r24
     33e:	41 f4       	brne	.+16     	; 0x350 <ADC_CalibrationValues_Set+0x1e>
		 // Get ADCCAL0 from byte address 0x20 (Word address 0x10.  
		adc->CAL = SP_ReadCalibrationByte(0x20);
     340:	80 e2       	ldi	r24, 0x20	; 32
     342:	ee df       	rcall	.-36     	; 0x320 <SP_ReadCalibrationByte>
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	e0 e0       	ldi	r30, 0x00	; 0
     348:	f2 e0       	ldi	r31, 0x02	; 2
     34a:	84 87       	std	Z+12, r24	; 0x0c
     34c:	95 87       	std	Z+13, r25	; 0x0d
     34e:	05 c0       	rjmp	.+10     	; 0x35a <ADC_CalibrationValues_Set+0x28>
	}else {
		// Get ADCCAL0 from byte address 0x24 (Word address 0x12.  
		adc->CAL = SP_ReadCalibrationByte(0x24);
     350:	84 e2       	ldi	r24, 0x24	; 36
     352:	e6 df       	rcall	.-52     	; 0x320 <SP_ReadCalibrationByte>
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	8c 87       	std	Y+12, r24	; 0x0c
     358:	9d 87       	std	Y+13, r25	; 0x0d
	}
} 
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <Podesi_Parametre_Robota>:


void Podesi_Parametre_Robota(void)
{
	//mehanicke karakteristike
	metar = 38415*2; //75000; //broj inkremenata za 1m - eksperiment!      /39035*2 izracunata vrednost
     360:	8e e1       	ldi	r24, 0x1E	; 30
     362:	9c e2       	ldi	r25, 0x2C	; 44
     364:	a1 e0       	ldi	r26, 0x01	; 1
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	80 93 db 24 	sts	0x24DB, r24
     36c:	90 93 dc 24 	sts	0x24DC, r25
     370:	a0 93 dd 24 	sts	0x24DD, r26
     374:	b0 93 de 24 	sts	0x24DE, r27
	krug360 = 13925; //49650 - eksperiment 1;  //66250 - matematika;	//broj inkremenata za jedan krug - eksperiment!		//13653
     378:	85 e6       	ldi	r24, 0x65	; 101
     37a:	96 e3       	ldi	r25, 0x36	; 54
     37c:	a0 e0       	ldi	r26, 0x00	; 0
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	80 93 7d 32 	sts	0x327D, r24
     384:	90 93 7e 32 	sts	0x327E, r25
     388:	a0 93 7f 32 	sts	0x327F, r26
     38c:	b0 93 80 32 	sts	0x3280, r27
	
	scale_factor_for_mm = metar / 1000;
     390:	60 91 db 24 	lds	r22, 0x24DB
     394:	70 91 dc 24 	lds	r23, 0x24DC
     398:	80 91 dd 24 	lds	r24, 0x24DD
     39c:	90 91 de 24 	lds	r25, 0x24DE
     3a0:	28 ee       	ldi	r18, 0xE8	; 232
     3a2:	33 e0       	ldi	r19, 0x03	; 3
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
     3ac:	20 93 08 2e 	sts	0x2E08, r18
     3b0:	30 93 09 2e 	sts	0x2E09, r19
	krug180 = krug360 >> 1;	
     3b4:	80 91 7d 32 	lds	r24, 0x327D
     3b8:	90 91 7e 32 	lds	r25, 0x327E
     3bc:	a0 91 7f 32 	lds	r26, 0x327F
     3c0:	b0 91 80 32 	lds	r27, 0x3280
     3c4:	b5 95       	asr	r27
     3c6:	a7 95       	ror	r26
     3c8:	97 95       	ror	r25
     3ca:	87 95       	ror	r24
     3cc:	80 93 d7 28 	sts	0x28D7, r24
     3d0:	90 93 d8 28 	sts	0x28D8, r25
     3d4:	a0 93 d9 28 	sts	0x28D9, r26
     3d8:	b0 93 da 28 	sts	0x28DA, r27
	krug90 =  krug360 >> 2;
     3dc:	80 91 7d 32 	lds	r24, 0x327D
     3e0:	90 91 7e 32 	lds	r25, 0x327E
     3e4:	a0 91 7f 32 	lds	r26, 0x327F
     3e8:	b0 91 80 32 	lds	r27, 0x3280
     3ec:	b5 95       	asr	r27
     3ee:	a7 95       	ror	r26
     3f0:	97 95       	ror	r25
     3f2:	87 95       	ror	r24
     3f4:	b5 95       	asr	r27
     3f6:	a7 95       	ror	r26
     3f8:	97 95       	ror	r25
     3fa:	87 95       	ror	r24
     3fc:	80 93 86 2e 	sts	0x2E86, r24
     400:	90 93 87 2e 	sts	0x2E87, r25
     404:	a0 93 88 2e 	sts	0x2E88, r26
     408:	b0 93 89 2e 	sts	0x2E89, r27
	krug45 =  krug360 >> 3;			
     40c:	80 91 7d 32 	lds	r24, 0x327D
     410:	90 91 7e 32 	lds	r25, 0x327E
     414:	a0 91 7f 32 	lds	r26, 0x327F
     418:	b0 91 80 32 	lds	r27, 0x3280
     41c:	68 94       	set
     41e:	12 f8       	bld	r1, 2
     420:	b5 95       	asr	r27
     422:	a7 95       	ror	r26
     424:	97 95       	ror	r25
     426:	87 95       	ror	r24
     428:	16 94       	lsr	r1
     42a:	d1 f7       	brne	.-12     	; 0x420 <Podesi_Parametre_Robota+0xc0>
     42c:	80 93 d0 24 	sts	0x24D0, r24
     430:	90 93 d1 24 	sts	0x24D1, r25
     434:	a0 93 d2 24 	sts	0x24D2, r26
     438:	b0 93 d3 24 	sts	0x24D3, r27

	smer_zadati = 1;						//1-napred, 2-nazad, 0-sam bira smer
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	80 93 66 29 	sts	0x2966, r24
	zeljena_pravolinijska_brzina = 500;		//brzina kojom se pravo krece robot
     442:	84 ef       	ldi	r24, 0xF4	; 244
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	80 93 87 32 	sts	0x3287, r24
     44a:	90 93 88 32 	sts	0x3288, r25
	zeljena_brzina_okretanja = 300; //brzina kojom se okrece robot
     44e:	8c e2       	ldi	r24, 0x2C	; 44
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	80 93 69 2e 	sts	0x2E69, r24
     456:	90 93 6a 2e 	sts	0x2E6A, r25
	max_brzina_motora = 800;				//eksperimentalno utvrdjena max brzina motora [impuls/vreme_odabiranja(3ms)] (max je oko 1000)
     45a:	20 e2       	ldi	r18, 0x20	; 32
     45c:	33 e0       	ldi	r19, 0x03	; 3
     45e:	20 93 17 2e 	sts	0x2E17, r18
     462:	30 93 18 2e 	sts	0x2E18, r19
	
	modifikovana_zeljena_pravolinijska_brzina = zeljena_pravolinijska_brzina;
     466:	80 91 87 32 	lds	r24, 0x3287
     46a:	90 91 88 32 	lds	r25, 0x3288
     46e:	80 93 ba 24 	sts	0x24BA, r24
     472:	90 93 bb 24 	sts	0x24BB, r25
	rezervni_ugao = krug45;		//vrednost ugaone greske preko koje se radi reorijentacija robota  
     476:	80 91 d0 24 	lds	r24, 0x24D0
     47a:	90 91 d1 24 	lds	r25, 0x24D1
     47e:	a0 91 d2 24 	lds	r26, 0x24D2
     482:	b0 91 d3 24 	lds	r27, 0x24D3
     486:	80 93 37 2e 	sts	0x2E37, r24
     48a:	90 93 38 2e 	sts	0x2E38, r25
	PWM_perioda = 800;			//PWM tajmer broji do 800 - frekvenicja 20KHz
     48e:	20 93 66 2e 	sts	0x2E66, r18
     492:	30 93 67 2e 	sts	0x2E67, r19
     496:	08 95       	ret

00000498 <Podesi_PID_Pojacanja>:

void Podesi_PID_Pojacanja(void)
{
	//PID parametri
	//Regulacija pravolinijskog kretanja
	Kp_pravolinijski = 6;			//3
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	a0 ec       	ldi	r26, 0xC0	; 192
     49e:	b0 e4       	ldi	r27, 0x40	; 64
     4a0:	80 93 72 29 	sts	0x2972, r24
     4a4:	90 93 73 29 	sts	0x2973, r25
     4a8:	a0 93 74 29 	sts	0x2974, r26
     4ac:	b0 93 75 29 	sts	0x2975, r27
	Ki_pravolinijski = 1.6;			//1.7
     4b0:	8d ec       	ldi	r24, 0xCD	; 205
     4b2:	9c ec       	ldi	r25, 0xCC	; 204
     4b4:	ac ec       	ldi	r26, 0xCC	; 204
     4b6:	bf e3       	ldi	r27, 0x3F	; 63
     4b8:	80 93 81 32 	sts	0x3281, r24
     4bc:	90 93 82 32 	sts	0x3282, r25
     4c0:	a0 93 83 32 	sts	0x3283, r26
     4c4:	b0 93 84 32 	sts	0x3284, r27
	Kd_pravolinijski = 30;		//1000
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	a0 ef       	ldi	r26, 0xF0	; 240
     4ce:	b1 e4       	ldi	r27, 0x41	; 65
     4d0:	80 93 c7 28 	sts	0x28C7, r24
     4d4:	90 93 c8 28 	sts	0x28C8, r25
     4d8:	a0 93 c9 28 	sts	0x28C9, r26
     4dc:	b0 93 ca 28 	sts	0x28CA, r27
	Kp_teta_pravolinijski = 20;
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	a0 ea       	ldi	r26, 0xA0	; 160
     4e6:	b1 e4       	ldi	r27, 0x41	; 65
     4e8:	80 93 04 2e 	sts	0x2E04, r24
     4ec:	90 93 05 2e 	sts	0x2E05, r25
     4f0:	a0 93 06 2e 	sts	0x2E06, r26
     4f4:	b0 93 07 2e 	sts	0x2E07, r27
		
	//Regulacija ugaonog zakretanja
	Kp_teta = 20;
     4f8:	80 93 91 32 	sts	0x3291, r24
     4fc:	90 93 92 32 	sts	0x3292, r25
     500:	a0 93 93 32 	sts	0x3293, r26
     504:	b0 93 94 32 	sts	0x3294, r27
	Ki_teta = 1.2;
     508:	4a e9       	ldi	r20, 0x9A	; 154
     50a:	59 e9       	ldi	r21, 0x99	; 153
     50c:	69 e9       	ldi	r22, 0x99	; 153
     50e:	7f e3       	ldi	r23, 0x3F	; 63
     510:	40 93 b0 24 	sts	0x24B0, r20
     514:	50 93 b1 24 	sts	0x24B1, r21
     518:	60 93 b2 24 	sts	0x24B2, r22
     51c:	70 93 b3 24 	sts	0x24B3, r23
	Kd_teta = 20;
     520:	80 93 aa 24 	sts	0x24AA, r24
     524:	90 93 ab 24 	sts	0x24AB, r25
     528:	a0 93 ac 24 	sts	0x24AC, r26
     52c:	b0 93 ad 24 	sts	0x24AD, r27
	Kp_teta_okretanje = 20;
     530:	80 93 6d 2e 	sts	0x2E6D, r24
     534:	90 93 6e 2e 	sts	0x2E6E, r25
     538:	a0 93 6f 2e 	sts	0x2E6F, r26
     53c:	b0 93 70 2e 	sts	0x2E70, r27
		
	//Regulacija brzine
	Kp_brzina = 0.25;
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	a0 e8       	ldi	r26, 0x80	; 128
     546:	be e3       	ldi	r27, 0x3E	; 62
     548:	80 93 db 28 	sts	0x28DB, r24
     54c:	90 93 dc 28 	sts	0x28DC, r25
     550:	a0 93 dd 28 	sts	0x28DD, r26
     554:	b0 93 de 28 	sts	0x28DE, r27
	Ki_brzina = 0;
     558:	10 92 c0 24 	sts	0x24C0, r1
     55c:	10 92 c1 24 	sts	0x24C1, r1
     560:	10 92 c2 24 	sts	0x24C2, r1
     564:	10 92 c3 24 	sts	0x24C3, r1
	Kd_brzina = 0;
     568:	10 92 58 2e 	sts	0x2E58, r1
     56c:	10 92 59 2e 	sts	0x2E59, r1
     570:	10 92 5a 2e 	sts	0x2E5A, r1
     574:	10 92 5b 2e 	sts	0x2E5B, r1

	//Ubrzavanje po rampi
	Accel_PID_pos = 2;	//bilo 2
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	80 93 d8 24 	sts	0x24D8, r24
     580:	90 93 d9 24 	sts	0x24D9, r25
     584:	08 95       	ret

00000586 <Podesi_QDEC>:
}

void Podesi_QDEC(void)
{
     586:	ef 92       	push	r14
     588:	0f 93       	push	r16
	//enkoderski ulazi
	PORT_ConfigurePins( &PORTD, 0xFF, false, false, PORT_OPC_PULLUP_gc, PORT_ISC_FALLING_gc);
     58a:	68 94       	set
     58c:	ee 24       	eor	r14, r14
     58e:	e1 f8       	bld	r14, 1
     590:	08 e1       	ldi	r16, 0x18	; 24
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	40 e0       	ldi	r20, 0x00	; 0
     596:	6f ef       	ldi	r22, 0xFF	; 255
     598:	80 e6       	ldi	r24, 0x60	; 96
     59a:	96 e0       	ldi	r25, 0x06	; 6
     59c:	0e 94 78 32 	call	0x64f0	; 0x64f0 <PORT_ConfigurePins>
	PORT_SetPinsAsInput( &PORTD, 0xFF );
     5a0:	e0 e6       	ldi	r30, 0x60	; 96
     5a2:	f6 e0       	ldi	r31, 0x06	; 6
     5a4:	8f ef       	ldi	r24, 0xFF	; 255
     5a6:	82 83       	std	Z+2, r24	; 0x02
	
	//Levi pasivni PORTD6,7
	PORTD.PIN6CTRL |= 0b01000000;	//invertuje se pin, da enkoder broji u drugom smeru
     5a8:	86 89       	ldd	r24, Z+22	; 0x16
     5aa:	80 64       	ori	r24, 0x40	; 64
     5ac:	86 8b       	std	Z+22, r24	; 0x16
	EVSYS.CH0MUX = 0b01101110;		// PORTD6 mux input -> MOTOR_QDEC.LEFT
     5ae:	e0 e8       	ldi	r30, 0x80	; 128
     5b0:	f1 e0       	ldi	r31, 0x01	; 1
     5b2:	8e e6       	ldi	r24, 0x6E	; 110
     5b4:	80 83       	st	Z, r24
	EVSYS.CH0CTRL = 0b00001001;		//enable QDEC, filtering 2x
     5b6:	99 e0       	ldi	r25, 0x09	; 9
     5b8:	90 87       	std	Z+8, r25	; 0x08
	TCD1.CTRLA = 0b00000001;		//clock source
     5ba:	a0 e4       	ldi	r26, 0x40	; 64
     5bc:	b9 e0       	ldi	r27, 0x09	; 9
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	8c 93       	st	X, r24
	TCD1.CTRLD = 0b01101000;  		//event action=QDEC, event source=ch0 [01101000]
     5c2:	28 e6       	ldi	r18, 0x68	; 104
     5c4:	13 96       	adiw	r26, 0x03	; 3
     5c6:	2c 93       	st	X, r18
     5c8:	13 97       	sbiw	r26, 0x03	; 3
	TCD1.INTCTRLA = ( TCD1.INTCTRLA & ~TC1_OVFINTLVL_gm ) | 1;	//interapt na owerflov
     5ca:	16 96       	adiw	r26, 0x06	; 6
     5cc:	2c 91       	ld	r18, X
     5ce:	16 97       	sbiw	r26, 0x06	; 6
     5d0:	2c 7f       	andi	r18, 0xFC	; 252
     5d2:	21 60       	ori	r18, 0x01	; 1
     5d4:	16 96       	adiw	r26, 0x06	; 6
     5d6:	2c 93       	st	X, r18

	//Desni pasivni	PORTD4,5
	//PORTD.PIN4CTRL |= 0b01000000;	//invertuje se pin, da enkoder broji u drugom smeru
	EVSYS.CH2MUX = 0b01101100;			//PORTD4 mux input -> PASIVNI_DESNI
     5d8:	2c e6       	ldi	r18, 0x6C	; 108
     5da:	22 83       	std	Z+2, r18	; 0x02
	EVSYS.CH2CTRL = 0b00001001;			//enable QDEC, filtering 2x
     5dc:	92 87       	std	Z+10, r25	; 0x0a
	TCD0.CTRLA = 0b00000001;			//clock source
     5de:	e0 e0       	ldi	r30, 0x00	; 0
     5e0:	f9 e0       	ldi	r31, 0x09	; 9
     5e2:	80 83       	st	Z, r24
	TCD0.CTRLD = 0b01101010;  			//event action=QDEC, event source=ch2
     5e4:	8a e6       	ldi	r24, 0x6A	; 106
     5e6:	83 83       	std	Z+3, r24	; 0x03
	TCD0.INTCTRLA = ( TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | 1;
     5e8:	86 81       	ldd	r24, Z+6	; 0x06
     5ea:	8c 7f       	andi	r24, 0xFC	; 252
     5ec:	81 60       	ori	r24, 0x01	; 1
     5ee:	86 83       	std	Z+6, r24	; 0x06
}
     5f0:	0f 91       	pop	r16
     5f2:	ef 90       	pop	r14
     5f4:	08 95       	ret

000005f6 <PodesiADC>:

void PodesiADC(void)
{
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
	//ADCB.REFCTRL = 0b00000010; //bandgap
	//ADCB.EVCTRL = 0b00000000;	//
	

	/* Move stored calibration values to ADC B. */
	ADC_CalibrationValues_Set(&ADCA);
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	99 de       	rcall	.-718    	; 0x332 <ADC_CalibrationValues_Set>

	/* Get offset value for ADC A. */
 	offset = ADC_Offset_Get(&ADCA);
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	65 de       	rcall	.-822    	; 0x2d0 <ADC_Offset_Get>
     606:	80 93 62 2e 	sts	0x2E62, r24

	/* Set up ADC B to have signed conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, false, ADC_RESOLUTION_8BIT_gc);
     60a:	c0 e0       	ldi	r28, 0x00	; 0
     60c:	d2 e0       	ldi	r29, 0x02	; 2
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	89 7e       	andi	r24, 0xE9	; 233
     612:	84 60       	ori	r24, 0x04	; 4
     614:	89 83       	std	Y+1, r24	; 0x01

	/* Sample rate is CPUFREQ/8. Allow time for storing data. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV4_gc);
     616:	8c 81       	ldd	r24, Y+4	; 0x04
     618:	88 7f       	andi	r24, 0xF8	; 248
     61a:	8c 83       	std	Y+4, r24	; 0x04

	/* Set referance voltage on ADC B to be VCC-0.6 V.*/
	ADC_Referance_Config(&ADCA, ADC_REFSEL_INT1V_gc);
     61c:	8a 81       	ldd	r24, Y+2	; 0x02
     61e:	8f 7c       	andi	r24, 0xCF	; 207
     620:	8a 83       	std	Y+2, r24	; 0x02

	/* Setup channel 0 to have single ended input. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     622:	a0 e2       	ldi	r26, 0x20	; 32
     624:	b2 e0       	ldi	r27, 0x02	; 2
     626:	8c 91       	ld	r24, X
     628:	80 7e       	andi	r24, 0xE0	; 224
     62a:	81 60       	ori	r24, 0x01	; 1
     62c:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_CH_GAIN_1X_gc);
	/* Setup channel 1 to have single ended input. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH1,
     62e:	e8 e2       	ldi	r30, 0x28	; 40
     630:	f2 e0       	ldi	r31, 0x02	; 2
     632:	80 81       	ld	r24, Z
     634:	80 7e       	andi	r24, 0xE0	; 224
     636:	81 60       	ori	r24, 0x01	; 1
     638:	80 83       	st	Z, r24
										ADC_CH_INPUTMODE_SINGLEENDED_gc,
										ADC_CH_GAIN_1X_gc);

	/* Set input to the channel in ADC B to be PIN 1. */	//Levi motor pin0
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, ADC_CH_MUXNEG_PIN0_gc);
     63a:	11 96       	adiw	r26, 0x01	; 1
     63c:	1c 92       	st	X, r1
	/* Set input to the channel in ADC B to be PIN 1. */	//Desni motor pin1
	ADC_Ch_InputMux_Config(&ADCA.CH1, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN0_gc);
     63e:	88 e0       	ldi	r24, 0x08	; 8
     640:	81 83       	std	Z+1, r24	; 0x01
	
	/* Setup sweep of all four virtual channels. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_01_gc);
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	8f 73       	andi	r24, 0x3F	; 63
     646:	80 64       	ori	r24, 0x40	; 64
     648:	8b 83       	std	Y+3, r24	; 0x03

	/* Enable ADC B with free running mode, Vcc reference and unsigned conversion.*/
	ADC_Enable(&ADCA);
     64a:	88 81       	ld	r24, Y
     64c:	81 60       	ori	r24, 0x01	; 1
     64e:	88 83       	st	Y, r24

	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	31 de       	rcall	.-926    	; 0x2b8 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	88 60       	ori	r24, 0x08	; 8
     65a:	89 83       	std	Y+1, r24	; 0x01

}
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <Podesi_Interapt>:

void Podesi_Interapt(void)
{
	// Enable high level interrupts in the PMIC. 
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     662:	e0 ea       	ldi	r30, 0xA0	; 160
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	82 81       	ldd	r24, Z+2	; 0x02
     668:	84 60       	ori	r24, 0x04	; 4
     66a:	82 83       	std	Z+2, r24	; 0x02
	// Enable medium level interrupts in the PMIC. 
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     66c:	82 81       	ldd	r24, Z+2	; 0x02
     66e:	82 60       	ori	r24, 0x02	; 2
     670:	82 83       	std	Z+2, r24	; 0x02
	// Enable low level interrupts in the PMIC. 
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     672:	82 81       	ldd	r24, Z+2	; 0x02
     674:	81 60       	ori	r24, 0x01	; 1
     676:	82 83       	std	Z+2, r24	; 0x02
	//round-robin algoritam EN
	PMIC.CTRL |= PMIC_RREN_bm;
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	80 68       	ori	r24, 0x80	; 128
     67c:	82 83       	std	Z+2, r24	; 0x02
	
	sei(); // enable all inerrupts
     67e:	78 94       	sei
     680:	08 95       	ret

00000682 <Podesi_Oscilator>:
}

void Podesi_Oscilator(void)
{
	//Startovanje internog oscilatora od 32MHz
	OSC.CTRL = OSC_RC32MEN_bm;
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	80 93 50 00 	sts	0x0050, r24

	do {
		//Sacekaj dok se stabilizuje oscilator
	} while ( ( OSC.STATUS & OSC_RC32MRDY_bm ) == 0 );
     688:	e0 e5       	ldi	r30, 0x50	; 80
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	81 81       	ldd	r24, Z+1	; 0x01
     68e:	81 ff       	sbrs	r24, 1
     690:	fd cf       	rjmp	.-6      	; 0x68c <Podesi_Oscilator+0xa>
	
	//Ukljuci preskalere B i C
	CCP = CCP_IOREG_gc;
     692:	88 ed       	ldi	r24, 0xD8	; 216
     694:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = CLK_PSBCDIV_2_2_gc;
     696:	e0 e4       	ldi	r30, 0x40	; 64
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	91 83       	std	Z+1, r25	; 0x01

	//Postavi 32MHz kao glavni oscilator
	CCP = CCP_IOREG_gc;
     69e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;	
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	80 83       	st	Z, r24
     6a4:	08 95       	ret

000006a6 <Podesi_USART_Komunikaciju>:
}

void Podesi_USART_Komunikaciju(void)
{
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
	//USART_E1 - BT - 115200
  	//PE7 (TXE1) - izlaz  
	PORTE.DIR |= PIN7_bm;
     6b0:	c0 e8       	ldi	r28, 0x80	; 128
     6b2:	d6 e0       	ldi	r29, 0x06	; 6
     6b4:	88 81       	ld	r24, Y
     6b6:	80 68       	ori	r24, 0x80	; 128
     6b8:	88 83       	st	Y, r24
	//PE6 (RXE1) - ulaz
	PORTE.DIR  &= ~PIN6_bm;
     6ba:	88 81       	ld	r24, Y
     6bc:	8f 7b       	andi	r24, 0xBF	; 191
     6be:	88 83       	st	Y, r24
	//Koriscenje USARTE1 (definisano u globals.h) i inicijalizacija buffer-a
	USART_InterruptDriver_Initialize(&USART_E1_data, &USARTE1, USART_DREINTLVL_LO_gc);
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	60 eb       	ldi	r22, 0xB0	; 176
     6c4:	7a e0       	ldi	r23, 0x0A	; 10
     6c6:	83 e1       	ldi	r24, 0x13	; 19
     6c8:	90 e2       	ldi	r25, 0x20	; 32
     6ca:	0e 94 c3 34 	call	0x6986	; 0x6986 <USART_InterruptDriver_Initialize>
	//USARTE1, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(USART_E1_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     6ce:	e0 91 13 20 	lds	r30, 0x2013
     6d2:	f0 91 14 20 	lds	r31, 0x2014
     6d6:	13 e0       	ldi	r17, 0x03	; 3
     6d8:	15 83       	std	Z+5, r17	; 0x05
	//Aktiviranje RXC interrupt-a
	USART_RxdInterruptLevel_Set(USART_E1_data.usart, USART_RXCINTLVL_LO_gc);
     6da:	83 81       	ldd	r24, Z+3	; 0x03
     6dc:	8f 7c       	andi	r24, 0xCF	; 207
     6de:	80 61       	ori	r24, 0x10	; 16
     6e0:	83 83       	std	Z+3, r24	; 0x03
	//Podesavanje Baud rate
	//USART_Baudrate_Set(&USARTE1, 14, -2 );	//115200
	USART_Baudrate_Set(&USARTE1,3269, -6 );	//9600
     6e2:	a0 eb       	ldi	r26, 0xB0	; 176
     6e4:	ba e0       	ldi	r27, 0x0A	; 10
     6e6:	0f 2e       	mov	r0, r31
     6e8:	f5 ec       	ldi	r31, 0xC5	; 197
     6ea:	ff 2e       	mov	r15, r31
     6ec:	f0 2d       	mov	r31, r0
     6ee:	16 96       	adiw	r26, 0x06	; 6
     6f0:	fc 92       	st	X, r15
     6f2:	16 97       	sbiw	r26, 0x06	; 6
     6f4:	0c ea       	ldi	r16, 0xAC	; 172
     6f6:	17 96       	adiw	r26, 0x07	; 7
     6f8:	0c 93       	st	X, r16
	//Ukljucivanje RX i TX
	USART_Rx_Enable(USART_E1_data.usart);
     6fa:	84 81       	ldd	r24, Z+4	; 0x04
     6fc:	80 61       	ori	r24, 0x10	; 16
     6fe:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_E1_data.usart);
     700:	84 81       	ldd	r24, Z+4	; 0x04
     702:	88 60       	ori	r24, 0x08	; 8
     704:	84 83       	std	Z+4, r24	; 0x04
	
	//USART_E0 BT_RS232 - MCU - 19200
	//PE3 (TXE0) - izlaz
	PORTE.DIR |= PIN3_bm;
     706:	88 81       	ld	r24, Y
     708:	88 60       	ori	r24, 0x08	; 8
     70a:	88 83       	st	Y, r24
	//PE2 (RXE0) - ulaz
	PORTE.DIR  &= ~PIN2_bm;
     70c:	88 81       	ld	r24, Y
     70e:	8b 7f       	andi	r24, 0xFB	; 251
     710:	88 83       	st	Y, r24
	//Koriscenje USARTE0 i inicijalizacija buffer-a
	USART_InterruptDriver_Initialize(&USART_E0_data, &USARTE0, USART_DREINTLVL_LO_gc);
     712:	41 e0       	ldi	r20, 0x01	; 1
     714:	60 ea       	ldi	r22, 0xA0	; 160
     716:	7a e0       	ldi	r23, 0x0A	; 10
     718:	81 e2       	ldi	r24, 0x21	; 33
     71a:	93 e2       	ldi	r25, 0x23	; 35
     71c:	0e 94 c3 34 	call	0x6986	; 0x6986 <USART_InterruptDriver_Initialize>
	//USARTE0, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(USART_E0_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     720:	e0 91 21 23 	lds	r30, 0x2321
     724:	f0 91 22 23 	lds	r31, 0x2322
     728:	15 83       	std	Z+5, r17	; 0x05
	//Aktiviranje RXC interrupt-a
	USART_RxdInterruptLevel_Set(USART_E0_data.usart, USART_RXCINTLVL_LO_gc);
     72a:	83 81       	ldd	r24, Z+3	; 0x03
     72c:	8f 7c       	andi	r24, 0xCF	; 207
     72e:	80 61       	ori	r24, 0x10	; 16
     730:	83 83       	std	Z+3, r24	; 0x03
	//19200 @ 32Mhz as calculated from ProtoTalk Calc
	USART_Baudrate_Set(&USARTE0, 3269, -6 ); //9600
     732:	a0 ea       	ldi	r26, 0xA0	; 160
     734:	ba e0       	ldi	r27, 0x0A	; 10
     736:	16 96       	adiw	r26, 0x06	; 6
     738:	fc 92       	st	X, r15
     73a:	16 97       	sbiw	r26, 0x06	; 6
     73c:	17 96       	adiw	r26, 0x07	; 7
     73e:	0c 93       	st	X, r16
	//Ukljucivanje RX i TX
	USART_Rx_Enable(USART_E0_data.usart);
     740:	84 81       	ldd	r24, Z+4	; 0x04
     742:	80 61       	ori	r24, 0x10	; 16
     744:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_E0_data.usart);
     746:	84 81       	ldd	r24, Z+4	; 0x04
     748:	88 60       	ori	r24, 0x08	; 8
     74a:	84 83       	std	Z+4, r24	; 0x04
	

	//USART_C0 - Xmega_USB - 115200
	//PE3 (TXE0) - izlaz
	PORTC.DIR &= PIN3_bm;
     74c:	e0 e4       	ldi	r30, 0x40	; 64
     74e:	f6 e0       	ldi	r31, 0x06	; 6
     750:	80 81       	ld	r24, Z
     752:	88 70       	andi	r24, 0x08	; 8
     754:	80 83       	st	Z, r24
	//PE2 (RXE0) - ulaz
	PORTC.DIR  |= ~PIN2_bm;
     756:	80 81       	ld	r24, Z
     758:	8b 6f       	ori	r24, 0xFB	; 251
     75a:	80 83       	st	Z, r24
	//Koriscenje USARTE0 i inicijalizacija buffer-a
	USART_InterruptDriver_Initialize(&USART_C0_data, &USARTC0, USART_DREINTLVL_LO_gc);
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	60 ea       	ldi	r22, 0xA0	; 160
     760:	78 e0       	ldi	r23, 0x08	; 8
     762:	8a e9       	ldi	r24, 0x9A	; 154
     764:	91 e2       	ldi	r25, 0x21	; 33
     766:	0e 94 c3 34 	call	0x6986	; 0x6986 <USART_InterruptDriver_Initialize>
	//USARTE0, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(USART_C0_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     76a:	e0 91 9a 21 	lds	r30, 0x219A
     76e:	f0 91 9b 21 	lds	r31, 0x219B
     772:	15 83       	std	Z+5, r17	; 0x05
	//Aktiviranje RXC interrupt-a
	USART_RxdInterruptLevel_Set(USART_C0_data.usart, USART_RXCINTLVL_LO_gc);
     774:	83 81       	ldd	r24, Z+3	; 0x03
     776:	8f 7c       	andi	r24, 0xCF	; 207
     778:	80 61       	ori	r24, 0x10	; 16
     77a:	83 83       	std	Z+3, r24	; 0x03
	//Podesavanje Baud rate
	USART_Baudrate_Set(&USARTC0, 107, -5 );	//115200
     77c:	a0 ea       	ldi	r26, 0xA0	; 160
     77e:	b8 e0       	ldi	r27, 0x08	; 8
     780:	8b e6       	ldi	r24, 0x6B	; 107
     782:	16 96       	adiw	r26, 0x06	; 6
     784:	8c 93       	st	X, r24
     786:	16 97       	sbiw	r26, 0x06	; 6
     788:	80 eb       	ldi	r24, 0xB0	; 176
     78a:	17 96       	adiw	r26, 0x07	; 7
     78c:	8c 93       	st	X, r24
	//Ukljucivanje RX i TX
	USART_Rx_Enable(USART_C0_data.usart);
     78e:	84 81       	ldd	r24, Z+4	; 0x04
     790:	80 61       	ori	r24, 0x10	; 16
     792:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_C0_data.usart);
     794:	84 81       	ldd	r24, Z+4	; 0x04
     796:	88 60       	ori	r24, 0x08	; 8
     798:	84 83       	std	Z+4, r24	; 0x04

}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	08 95       	ret

000007a6 <Podesi_Tajmere>:
	//TCF0 - servo signal generator
	//TCF1 - motor PWM (levi, desni)
	
	//System tajmer za uzorkovanje enkodera i PID regulaciju
	/* Set period ( TOP value ). */
	TC_SetPeriod( &TCE1, 0x002F ); //0x00BF = 12ms //0x5F = 6ms //0x2F = 3ms <- Mirko //Nasa -> //0x5DC0
     7a6:	8f e2       	ldi	r24, 0x2F	; 47
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	e0 e4       	ldi	r30, 0x40	; 64
     7ac:	fa e0       	ldi	r31, 0x0A	; 10
     7ae:	86 a3       	std	Z+38, r24	; 0x26
     7b0:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable overflow interrupt at low level */
	TC1_SetOverflowIntLevel( &TCE1, TC_OVFINTLVL_MED_gc );
     7b2:	62 e0       	ldi	r22, 0x02	; 2
     7b4:	80 e4       	ldi	r24, 0x40	; 64
     7b6:	9a e0       	ldi	r25, 0x0A	; 10
     7b8:	0e 94 97 32 	call	0x652e	; 0x652e <TC1_SetOverflowIntLevel>
	/* Start Timer/Counter. */
	TC1_ConfigClockSource( &TCE1, TC_CLKSEL_DIV256_gc );
     7bc:	66 e0       	ldi	r22, 0x06	; 6
     7be:	80 e4       	ldi	r24, 0x40	; 64
     7c0:	9a e0       	ldi	r25, 0x0A	; 10
     7c2:	0c 94 91 32 	jmp	0x6522	; 0x6522 <TC1_ConfigClockSource>

000007c6 <Podesi_PWM>:
	//TC0_ConfigClockSource( &TCF0, TC_CLKSEL_DIV64_gc );
}

void Podesi_PWM(void)
{	
	HIRESF_CTRLA = 0b00000010; //enable hi-res za TCF1
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	80 93 90 0b 	sts	0x0B90, r24
	// Configure timer 
	TCF1.PER = PWM_perioda;
     7cc:	80 91 66 2e 	lds	r24, 0x2E66
     7d0:	90 91 67 2e 	lds	r25, 0x2E67
     7d4:	e0 e4       	ldi	r30, 0x40	; 64
     7d6:	fb e0       	ldi	r31, 0x0B	; 11
     7d8:	86 a3       	std	Z+38, r24	; 0x26
     7da:	97 a3       	std	Z+39, r25	; 0x27
	TCF1.CTRLB = TC1_CCBEN_bm | TC1_CCAEN_bm | TC_WGMODE_DS_T_gc;
     7dc:	85 e3       	ldi	r24, 0x35	; 53
     7de:	81 83       	std	Z+1, r24	; 0x01
	TCF1.CTRLA = TC_CLKSEL_DIV1_gc;
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	80 83       	st	Z, r24
	
	PORT_SetPinsAsOutput( &PORTF, 0b00110000 ); //PF5 - PWM_L, PF4 - PWM_D
     7e4:	80 e3       	ldi	r24, 0x30	; 48
     7e6:	e0 ea       	ldi	r30, 0xA0	; 160
     7e8:	f6 e0       	ldi	r31, 0x06	; 6
     7ea:	81 83       	std	Z+1, r24	; 0x01
     7ec:	08 95       	ret

000007ee <Podesi_Pinove>:
}

void Podesi_Pinove(void)
{
     7ee:	ef 92       	push	r14
     7f0:	0f 93       	push	r16
     7f2:	cf 93       	push	r28
	//PORTB - digitalni ulazi 
	
	PORT_SetPinsAsInput( &PORTB, 0xFF );
     7f4:	cf ef       	ldi	r28, 0xFF	; 255
     7f6:	e0 e2       	ldi	r30, 0x20	; 32
     7f8:	f6 e0       	ldi	r31, 0x06	; 6
     7fa:	c2 83       	std	Z+2, r28	; 0x02
	PORT_ConfigurePins( &PORTB,
     7fc:	68 94       	set
     7fe:	ee 24       	eor	r14, r14
     800:	e1 f8       	bld	r14, 1
     802:	08 e1       	ldi	r16, 0x18	; 24
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	6f ef       	ldi	r22, 0xFF	; 255
     80a:	80 e2       	ldi	r24, 0x20	; 32
     80c:	96 e0       	ldi	r25, 0x06	; 6
     80e:	0e 94 78 32 	call	0x64f0	; 0x64f0 <PORT_ConfigurePins>
						false,
						PORT_OPC_PULLUP_gc,
						PORT_ISC_FALLING_gc);
	
	//podesavanje interrupt0 za PORTB.0 - ISR(PORTB_INT0_vect)
	PORT_ConfigureInterrupt0( &PORTB, PORT_INT0LVL_LO_gc, 0x01 );
     812:	41 e0       	ldi	r20, 0x01	; 1
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	80 e2       	ldi	r24, 0x20	; 32
     818:	96 e0       	ldi	r25, 0x06	; 6
     81a:	0e 94 71 32 	call	0x64e2	; 0x64e2 <PORT_ConfigureInterrupt0>
	
	//PORTC - FET izlazi 
	PORT_SetPinsAsOutput(&PORTC, 0xFF);
     81e:	e0 e4       	ldi	r30, 0x40	; 64
     820:	f6 e0       	ldi	r31, 0x06	; 6
     822:	c1 83       	std	Z+1, r28	; 0x01
//  	PORT_MapVirtualPort0( PORTCFG_VP0MAP_PORTC_gc );	//mapiranje virtualnog porta 0 na PORTC
//  	PORT_SetDirection( &VPORT0, 0xFF );
//		VPORT0.OUT = 0x00;	//clear
	
	//pinovi za upravljanje moorima
	PORT_SetPinsAsOutput(&PORTH, 0xFF); //PH0-IN_A1, PH1-EN_A1, PH2-EN_B1, PH3-IN_B1, PH4-IN_A2, PH5-EN_A2, PH6-EN_B2, PH7-IN_B2
     824:	e0 ee       	ldi	r30, 0xE0	; 224
     826:	f6 e0       	ldi	r31, 0x06	; 6
     828:	c1 83       	std	Z+1, r28	; 0x01
	PORT_ClearPins(&PORTH, 0xFF);
     82a:	c6 83       	std	Z+6, r28	; 0x06
	PORT_SetPins(&PORTH, 0b01100110); // EN ALL	
     82c:	86 e6       	ldi	r24, 0x66	; 102
     82e:	85 83       	std	Z+5, r24	; 0x05

	//servo izlazi
	PORT_SetPinsAsOutput(&PORTF, 0x0F);
     830:	e0 ea       	ldi	r30, 0xA0	; 160
     832:	f6 e0       	ldi	r31, 0x06	; 6
     834:	8f e0       	ldi	r24, 0x0F	; 15
     836:	81 83       	std	Z+1, r24	; 0x01
	PORT_ClearPins(&PORTF, 0x0F);
     838:	86 83       	std	Z+6, r24	; 0x06
	
}
     83a:	cf 91       	pop	r28
     83c:	0f 91       	pop	r16
     83e:	ef 90       	pop	r14
     840:	08 95       	ret

00000842 <__vector_53>:
#include "Headers/port_driver.h"
#include "math.h"

//Tajmer za rad drajvera
ISR(TCE1_OVF_vect)	//3ms
{	
     842:	1f 92       	push	r1
     844:	0f 92       	push	r0
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	0f 92       	push	r0
     84a:	11 24       	eor	r1, r1
     84c:	08 b6       	in	r0, 0x38	; 56
     84e:	0f 92       	push	r0
     850:	18 be       	out	0x38, r1	; 56
     852:	09 b6       	in	r0, 0x39	; 57
     854:	0f 92       	push	r0
     856:	19 be       	out	0x39, r1	; 57
     858:	0b b6       	in	r0, 0x3b	; 59
     85a:	0f 92       	push	r0
     85c:	1b be       	out	0x3b, r1	; 59
     85e:	2f 93       	push	r18
     860:	3f 93       	push	r19
     862:	4f 93       	push	r20
     864:	5f 93       	push	r21
     866:	6f 93       	push	r22
     868:	7f 93       	push	r23
     86a:	8f 93       	push	r24
     86c:	9f 93       	push	r25
     86e:	af 93       	push	r26
     870:	bf 93       	push	r27
     872:	ef 93       	push	r30
     874:	ff 93       	push	r31
	vreme_cekanja_tete++;
     876:	80 91 6c 29 	lds	r24, 0x296C
     87a:	90 91 6d 29 	lds	r25, 0x296D
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	80 93 6c 29 	sts	0x296C, r24
     884:	90 93 6d 29 	sts	0x296D, r25
	vreme_pozicioniranja++;
     888:	80 91 64 2e 	lds	r24, 0x2E64
     88c:	90 91 65 2e 	lds	r25, 0x2E65
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	80 93 64 2e 	sts	0x2E64, r24
     896:	90 93 65 2e 	sts	0x2E65, r25
	sys_time++;
     89a:	80 91 cc 24 	lds	r24, 0x24CC
     89e:	90 91 cd 24 	lds	r25, 0x24CD
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	80 93 cc 24 	sts	0x24CC, r24
     8a8:	90 93 cd 24 	sts	0x24CD, r25
	
	sample_counter_niz_1++;
     8ac:	80 91 60 2e 	lds	r24, 0x2E60
     8b0:	8f 5f       	subi	r24, 0xFF	; 255
     8b2:	80 93 60 2e 	sts	0x2E60, r24
	sample_counter_niz_2++;
     8b6:	80 91 01 2e 	lds	r24, 0x2E01
     8ba:	8f 5f       	subi	r24, 0xFF	; 255
     8bc:	80 93 01 2e 	sts	0x2E01, r24
	sample_counter_niz_3++;
     8c0:	80 91 67 29 	lds	r24, 0x2967
     8c4:	8f 5f       	subi	r24, 0xFF	; 255
     8c6:	80 93 67 29 	sts	0x2967, r24
	
	//Sample time za PID brzinski
	PID_brzinski();
     8ca:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <PID_brzinski>
	//Sample time za uzimanje trenutnog stanja enkodera i racunaje pozicije
	Rac_tren_poz_sample_counter++;
     8ce:	80 91 10 20 	lds	r24, 0x2010
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	80 93 10 20 	sts	0x2010, r24
	//Sample time za pracenje pravca
	Pracenje_Pravca_sample_counter++;
     8d8:	80 91 04 20 	lds	r24, 0x2004
     8dc:	8f 5f       	subi	r24, 0xFF	; 255
     8de:	80 93 04 20 	sts	0x2004, r24
	//Sample time za pozicioni PID
	PID_pozicioni_sample_counter++;
     8e2:	80 91 05 20 	lds	r24, 0x2005
     8e6:	8f 5f       	subi	r24, 0xFF	; 255
     8e8:	80 93 05 20 	sts	0x2005, r24
	
	if(timeout)
     8ec:	80 91 3d 2e 	lds	r24, 0x2E3D
     8f0:	90 91 3e 2e 	lds	r25, 0x2E3E
     8f4:	89 2b       	or	r24, r25
     8f6:	49 f0       	breq	.+18     	; 0x90a <__vector_53+0xc8>
	{
		timeout--;
     8f8:	80 91 3d 2e 	lds	r24, 0x2E3D
     8fc:	90 91 3e 2e 	lds	r25, 0x2E3E
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	80 93 3d 2e 	sts	0x2E3D, r24
     906:	90 93 3e 2e 	sts	0x2E3E, r25
	}
	
	//provera vreme primanja
	if (proveri_vreme_primanja > 0)
     90a:	80 91 03 2e 	lds	r24, 0x2E03
     90e:	88 23       	and	r24, r24
     910:	89 f0       	breq	.+34     	; 0x934 <__vector_53+0xf2>
	{
		proveri_vreme_primanja++;
     912:	80 91 03 2e 	lds	r24, 0x2E03
     916:	8f 5f       	subi	r24, 0xFF	; 255
     918:	80 93 03 2e 	sts	0x2E03, r24
		if (proveri_vreme_primanja > 100)
     91c:	80 91 03 2e 	lds	r24, 0x2E03
     920:	85 36       	cpi	r24, 0x65	; 101
     922:	40 f0       	brcs	.+16     	; 0x934 <__vector_53+0xf2>
		{
			RX_i_E0 = 0;
     924:	10 92 63 2e 	sts	0x2E63, r1
			RX_i_E1 = 0;
     928:	10 92 65 29 	sts	0x2965, r1
			RX_i_C0 = 0;
     92c:	10 92 47 2e 	sts	0x2E47, r1
			proveri_vreme_primanja = 0;
     930:	10 92 03 2e 	sts	0x2E03, r1
		}
	}
	
	//snimanje niz_1
	if ((sample_counter_niz_1 > sample_time_niz_1) && (niz_counter_niz_1 < 127))
     934:	90 91 60 2e 	lds	r25, 0x2E60
     938:	80 91 7a 32 	lds	r24, 0x327A
     93c:	89 17       	cp	r24, r25
     93e:	08 f0       	brcs	.+2      	; 0x942 <__vector_53+0x100>
     940:	59 c0       	rjmp	.+178    	; 0x9f4 <__vector_53+0x1b2>
     942:	80 91 61 2e 	lds	r24, 0x2E61
     946:	8f 37       	cpi	r24, 0x7F	; 127
     948:	08 f0       	brcs	.+2      	; 0x94c <__vector_53+0x10a>
     94a:	54 c0       	rjmp	.+168    	; 0x9f4 <__vector_53+0x1b2>
	{
		if (velicina_niz_1 == 2)
     94c:	80 91 8a 32 	lds	r24, 0x328A
     950:	82 30       	cpi	r24, 0x02	; 2
     952:	91 f5       	brne	.+100    	; 0x9b8 <__vector_53+0x176>
		{
			niz_1[niz_counter_niz_1] = mmio32(adresa_niz_1 + 1);
     954:	e0 91 61 2e 	lds	r30, 0x2E61
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 91 02 2a 	lds	r24, 0x2A02
     95e:	90 91 03 2a 	lds	r25, 0x2A03
     962:	a0 91 04 2a 	lds	r26, 0x2A04
     966:	b0 91 05 2a 	lds	r27, 0x2A05
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	a1 1d       	adc	r26, r1
     96e:	b1 1d       	adc	r27, r1
     970:	dc 01       	movw	r26, r24
     972:	8d 91       	ld	r24, X+
     974:	9d 91       	ld	r25, X+
     976:	0d 90       	ld	r0, X+
     978:	bc 91       	ld	r27, X
     97a:	a0 2d       	mov	r26, r0
     97c:	ee 0f       	add	r30, r30
     97e:	ff 1f       	adc	r31, r31
     980:	e2 5f       	subi	r30, 0xF2	; 242
     982:	f5 4d       	sbci	r31, 0xD5	; 213
     984:	80 83       	st	Z, r24
     986:	91 83       	std	Z+1, r25	; 0x01
			niz_1[niz_counter_niz_1] = mmio32(adresa_niz_1);
     988:	e0 91 61 2e 	lds	r30, 0x2E61
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 91 02 2a 	lds	r24, 0x2A02
     992:	90 91 03 2a 	lds	r25, 0x2A03
     996:	a0 91 04 2a 	lds	r26, 0x2A04
     99a:	b0 91 05 2a 	lds	r27, 0x2A05
     99e:	dc 01       	movw	r26, r24
     9a0:	8d 91       	ld	r24, X+
     9a2:	9d 91       	ld	r25, X+
     9a4:	0d 90       	ld	r0, X+
     9a6:	bc 91       	ld	r27, X
     9a8:	a0 2d       	mov	r26, r0
     9aa:	ee 0f       	add	r30, r30
     9ac:	ff 1f       	adc	r31, r31
     9ae:	e2 5f       	subi	r30, 0xF2	; 242
     9b0:	f5 4d       	sbci	r31, 0xD5	; 213
     9b2:	80 83       	st	Z, r24
     9b4:	91 83       	std	Z+1, r25	; 0x01
     9b6:	17 c0       	rjmp	.+46     	; 0x9e6 <__vector_53+0x1a4>
		}
		else
		niz_1[niz_counter_niz_1] = mmio32(adresa_niz_1);
     9b8:	e0 91 61 2e 	lds	r30, 0x2E61
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 91 02 2a 	lds	r24, 0x2A02
     9c2:	90 91 03 2a 	lds	r25, 0x2A03
     9c6:	a0 91 04 2a 	lds	r26, 0x2A04
     9ca:	b0 91 05 2a 	lds	r27, 0x2A05
     9ce:	dc 01       	movw	r26, r24
     9d0:	8d 91       	ld	r24, X+
     9d2:	9d 91       	ld	r25, X+
     9d4:	0d 90       	ld	r0, X+
     9d6:	bc 91       	ld	r27, X
     9d8:	a0 2d       	mov	r26, r0
     9da:	ee 0f       	add	r30, r30
     9dc:	ff 1f       	adc	r31, r31
     9de:	e2 5f       	subi	r30, 0xF2	; 242
     9e0:	f5 4d       	sbci	r31, 0xD5	; 213
     9e2:	80 83       	st	Z, r24
     9e4:	91 83       	std	Z+1, r25	; 0x01
		
		niz_counter_niz_1++;
     9e6:	80 91 61 2e 	lds	r24, 0x2E61
     9ea:	8f 5f       	subi	r24, 0xFF	; 255
     9ec:	80 93 61 2e 	sts	0x2E61, r24
		sample_counter_niz_1 = 0;
     9f0:	10 92 60 2e 	sts	0x2E60, r1
	}
}
     9f4:	ff 91       	pop	r31
     9f6:	ef 91       	pop	r30
     9f8:	bf 91       	pop	r27
     9fa:	af 91       	pop	r26
     9fc:	9f 91       	pop	r25
     9fe:	8f 91       	pop	r24
     a00:	7f 91       	pop	r23
     a02:	6f 91       	pop	r22
     a04:	5f 91       	pop	r21
     a06:	4f 91       	pop	r20
     a08:	3f 91       	pop	r19
     a0a:	2f 91       	pop	r18
     a0c:	0f 90       	pop	r0
     a0e:	0b be       	out	0x3b, r0	; 59
     a10:	0f 90       	pop	r0
     a12:	09 be       	out	0x39, r0	; 57
     a14:	0f 90       	pop	r0
     a16:	08 be       	out	0x38, r0	; 56
     a18:	0f 90       	pop	r0
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	0f 90       	pop	r0
     a1e:	1f 90       	pop	r1
     a20:	18 95       	reti

00000a22 <__vector_58>:
//Serijska komunikacija - USART_E0 - BT_RS232 - MCU
ISR(USARTE0_RXC_vect)
{
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	08 b6       	in	r0, 0x38	; 56
     a2e:	0f 92       	push	r0
     a30:	18 be       	out	0x38, r1	; 56
     a32:	09 b6       	in	r0, 0x39	; 57
     a34:	0f 92       	push	r0
     a36:	19 be       	out	0x39, r1	; 57
     a38:	0a b6       	in	r0, 0x3a	; 58
     a3a:	0f 92       	push	r0
     a3c:	1a be       	out	0x3a, r1	; 58
     a3e:	0b b6       	in	r0, 0x3b	; 59
     a40:	0f 92       	push	r0
     a42:	1b be       	out	0x3b, r1	; 59
     a44:	4f 92       	push	r4
     a46:	5f 92       	push	r5
     a48:	6f 92       	push	r6
     a4a:	7f 92       	push	r7
     a4c:	8f 92       	push	r8
     a4e:	9f 92       	push	r9
     a50:	af 92       	push	r10
     a52:	bf 92       	push	r11
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	2f 93       	push	r18
     a62:	3f 93       	push	r19
     a64:	4f 93       	push	r20
     a66:	5f 93       	push	r21
     a68:	6f 93       	push	r22
     a6a:	7f 93       	push	r23
     a6c:	8f 93       	push	r24
     a6e:	9f 93       	push	r25
     a70:	af 93       	push	r26
     a72:	bf 93       	push	r27
     a74:	ef 93       	push	r30
     a76:	ff 93       	push	r31
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	28 97       	sbiw	r28, 0x08	; 8
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	de bf       	out	0x3e, r29	; 62
	int i;
	USART_RXComplete(&USART_E0_data);
     a86:	81 e2       	ldi	r24, 0x21	; 33
     a88:	93 e2       	ldi	r25, 0x23	; 35
     a8a:	0e 94 12 35 	call	0x6a24	; 0x6a24 <USART_RXComplete>
	receiveArray[RX_i_E0] = USART_RXBuffer_GetByte(&USART_E0_data);
     a8e:	80 91 63 2e 	lds	r24, 0x2E63
     a92:	08 2f       	mov	r16, r24
     a94:	10 e0       	ldi	r17, 0x00	; 0
     a96:	81 e2       	ldi	r24, 0x21	; 33
     a98:	93 e2       	ldi	r25, 0x23	; 35
     a9a:	0e 94 04 35 	call	0x6a08	; 0x6a08 <USART_RXBuffer_GetByte>
     a9e:	f8 01       	movw	r30, r16
     aa0:	ea 58       	subi	r30, 0x8A	; 138
     aa2:	f6 4d       	sbci	r31, 0xD6	; 214
     aa4:	80 83       	st	Z, r24
	//USART_TXBuffer_PutByte(&USART_E0_data, receiveArray[RX_i_E0]);	//echo
	RX_i_E0++;
     aa6:	80 91 63 2e 	lds	r24, 0x2E63
     aaa:	8f 5f       	subi	r24, 0xFF	; 255
     aac:	80 93 63 2e 	sts	0x2E63, r24
	
	//vremenska zastita
	if (RX_i_E0 >= 1)
     ab0:	80 91 63 2e 	lds	r24, 0x2E63
     ab4:	88 23       	and	r24, r24
     ab6:	19 f0       	breq	.+6      	; 0xabe <__vector_58+0x9c>
 		proveri_vreme_primanja = 1;
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 93 03 2e 	sts	0x2E03, r24
	 
	//CITANJE PARAMETARA - 1
	if(receiveArray[0] == 1)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
     abe:	80 91 76 29 	lds	r24, 0x2976
     ac2:	81 30       	cpi	r24, 0x01	; 1
     ac4:	09 f0       	breq	.+2      	; 0xac8 <__vector_58+0xa6>
     ac6:	b0 c0       	rjmp	.+352    	; 0xc28 <__vector_58+0x206>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
     ac8:	80 91 63 2e 	lds	r24, 0x2E63
     acc:	81 30       	cpi	r24, 0x01	; 1
     ace:	11 f0       	breq	.+4      	; 0xad4 <__vector_58+0xb2>
     ad0:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
     ad4:	10 92 03 2e 	sts	0x2E03, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
     ad8:	80 91 76 29 	lds	r24, 0x2976
     adc:	80 93 e5 28 	sts	0x28E5, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
     ae0:	60 91 2b 2e 	lds	r22, 0x2E2B
     ae4:	70 91 2c 2e 	lds	r23, 0x2E2C
     ae8:	80 91 2d 2e 	lds	r24, 0x2E2D
     aec:	90 91 2e 2e 	lds	r25, 0x2E2E
     af0:	20 91 08 2e 	lds	r18, 0x2E08
     af4:	30 91 09 2e 	lds	r19, 0x2E09
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
     b00:	bb 27       	eor	r27, r27
     b02:	57 fd       	sbrc	r21, 7
     b04:	ba 95       	dec	r27
     b06:	a5 2f       	mov	r26, r21
     b08:	94 2f       	mov	r25, r20
     b0a:	83 2f       	mov	r24, r19
     b0c:	80 93 e6 28 	sts	0x28E6, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
     b10:	60 91 2b 2e 	lds	r22, 0x2E2B
     b14:	70 91 2c 2e 	lds	r23, 0x2E2C
     b18:	80 91 2d 2e 	lds	r24, 0x2E2D
     b1c:	90 91 2e 2e 	lds	r25, 0x2E2E
     b20:	20 91 08 2e 	lds	r18, 0x2E08
     b24:	30 91 09 2e 	lds	r19, 0x2E09
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
     b30:	20 93 e7 28 	sts	0x28E7, r18
				sendArray[3] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna Y pozicija HI
     b34:	60 91 0a 2a 	lds	r22, 0x2A0A
     b38:	70 91 0b 2a 	lds	r23, 0x2A0B
     b3c:	80 91 0c 2a 	lds	r24, 0x2A0C
     b40:	90 91 0d 2a 	lds	r25, 0x2A0D
     b44:	20 91 08 2e 	lds	r18, 0x2E08
     b48:	30 91 09 2e 	lds	r19, 0x2E09
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
     b54:	bb 27       	eor	r27, r27
     b56:	57 fd       	sbrc	r21, 7
     b58:	ba 95       	dec	r27
     b5a:	a5 2f       	mov	r26, r21
     b5c:	94 2f       	mov	r25, r20
     b5e:	83 2f       	mov	r24, r19
     b60:	80 93 e8 28 	sts	0x28E8, r24
				sendArray[4] = Y_pos / scale_factor_for_mm;							//Absolutna Y pozicija LO
     b64:	60 91 0a 2a 	lds	r22, 0x2A0A
     b68:	70 91 0b 2a 	lds	r23, 0x2A0B
     b6c:	80 91 0c 2a 	lds	r24, 0x2A0C
     b70:	90 91 0d 2a 	lds	r25, 0x2A0D
     b74:	20 91 08 2e 	lds	r18, 0x2E08
     b78:	30 91 09 2e 	lds	r19, 0x2E09
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
     b84:	20 93 e9 28 	sts	0x28E9, r18
				sendArray[5] = ((teta * 360) / krug360) >> 8;						//Teta HI
     b88:	20 91 8b 32 	lds	r18, 0x328B
     b8c:	30 91 8c 32 	lds	r19, 0x328C
     b90:	40 91 8d 32 	lds	r20, 0x328D
     b94:	50 91 8e 32 	lds	r21, 0x328E
     b98:	c0 90 7d 32 	lds	r12, 0x327D
     b9c:	d0 90 7e 32 	lds	r13, 0x327E
     ba0:	e0 90 7f 32 	lds	r14, 0x327F
     ba4:	f0 90 80 32 	lds	r15, 0x3280
     ba8:	a8 e6       	ldi	r26, 0x68	; 104
     baa:	b1 e0       	ldi	r27, 0x01	; 1
     bac:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
     bb0:	a7 01       	movw	r20, r14
     bb2:	96 01       	movw	r18, r12
     bb4:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
     bb8:	bb 27       	eor	r27, r27
     bba:	57 fd       	sbrc	r21, 7
     bbc:	ba 95       	dec	r27
     bbe:	a5 2f       	mov	r26, r21
     bc0:	94 2f       	mov	r25, r20
     bc2:	83 2f       	mov	r24, r19
     bc4:	80 93 ea 28 	sts	0x28EA, r24
				sendArray[6] = ((teta * 360) / krug360);							//Teta LO	
     bc8:	20 91 8b 32 	lds	r18, 0x328B
     bcc:	30 91 8c 32 	lds	r19, 0x328C
     bd0:	40 91 8d 32 	lds	r20, 0x328D
     bd4:	50 91 8e 32 	lds	r21, 0x328E
     bd8:	c0 90 7d 32 	lds	r12, 0x327D
     bdc:	d0 90 7e 32 	lds	r13, 0x327E
     be0:	e0 90 7f 32 	lds	r14, 0x327F
     be4:	f0 90 80 32 	lds	r15, 0x3280
     be8:	a8 e6       	ldi	r26, 0x68	; 104
     bea:	b1 e0       	ldi	r27, 0x01	; 1
     bec:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
     bf0:	a7 01       	movw	r20, r14
     bf2:	96 01       	movw	r18, r12
     bf4:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
     bf8:	20 93 eb 28 	sts	0x28EB, r18
// 				sendArray[12] =	ADC_ResultCh_GetWord(&ADCA.CH0, offset);			//struja motora 1
// 				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
// 				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	10 e0       	ldi	r17, 0x00	; 0
				while (i <= 14) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
     c00:	f8 01       	movw	r30, r16
     c02:	eb 51       	subi	r30, 0x1B	; 27
     c04:	f7 4d       	sbci	r31, 0xD7	; 215
     c06:	60 81       	ld	r22, Z
     c08:	81 e2       	ldi	r24, 0x21	; 33
     c0a:	93 e2       	ldi	r25, 0x23	; 35
     c0c:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
     c10:	88 23       	and	r24, r24
     c12:	11 f0       	breq	.+4      	; 0xc18 <__vector_58+0x1f6>
						i++;
     c14:	0f 5f       	subi	r16, 0xFF	; 255
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
// 				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
// 				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
				while (i <= 14) 
     c18:	0f 30       	cpi	r16, 0x0F	; 15
     c1a:	11 05       	cpc	r17, r1
     c1c:	8c f3       	brlt	.-30     	; 0xc00 <__vector_58+0x1de>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
     c1e:	10 92 63 2e 	sts	0x2E63, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
     c22:	10 92 63 2e 	sts	0x2E63, r1
     c26:	d4 c7       	rjmp	.+4008   	; 0x1bd0 <__vector_58+0x11ae>
		}		
	}
	//ZADAVANJE X,Y KOORDINATA - 2
	else if(receiveArray[0] == 2)					//provera funkcijskog bajta >> 2-upis x,y koordinate
     c28:	80 91 76 29 	lds	r24, 0x2976
     c2c:	82 30       	cpi	r24, 0x02	; 2
     c2e:	09 f0       	breq	.+2      	; 0xc32 <__vector_58+0x210>
     c30:	bf c0       	rjmp	.+382    	; 0xdb0 <__vector_58+0x38e>
	{
		if(RX_i_E0 >= 5)							//stigla je cela poruka	(5 bajtova)
     c32:	80 91 63 2e 	lds	r24, 0x2E63
     c36:	85 30       	cpi	r24, 0x05	; 5
     c38:	08 f4       	brcc	.+2      	; 0xc3c <__vector_58+0x21a>
     c3a:	ca c7       	rjmp	.+3988   	; 0x1bd0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
     c3c:	10 92 03 2e 	sts	0x2E03, r1
			//ENABLE
			stop_PID_desni = 0;
     c40:	10 92 fc 29 	sts	0x29FC, r1
			stop_PID_levi = 0;
     c44:	10 92 fa 2d 	sts	0x2DFA, r1
			set_direct_out = 0;
     c48:	10 92 89 32 	sts	0x3289, r1
			
			X_cilj = 0;
     c4c:	10 92 b6 24 	sts	0x24B6, r1
     c50:	10 92 b7 24 	sts	0x24B7, r1
     c54:	10 92 b8 24 	sts	0x24B8, r1
     c58:	10 92 b9 24 	sts	0x24B9, r1
			X_cilj |= ((int)receiveArray[1]) << 8;
     c5c:	20 91 77 29 	lds	r18, 0x2977
     c60:	40 91 b6 24 	lds	r20, 0x24B6
     c64:	50 91 b7 24 	lds	r21, 0x24B7
     c68:	60 91 b8 24 	lds	r22, 0x24B8
     c6c:	70 91 b9 24 	lds	r23, 0x24B9
     c70:	92 2f       	mov	r25, r18
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	aa 27       	eor	r26, r26
     c76:	97 fd       	sbrc	r25, 7
     c78:	a0 95       	com	r26
     c7a:	ba 2f       	mov	r27, r26
     c7c:	84 2b       	or	r24, r20
     c7e:	95 2b       	or	r25, r21
     c80:	a6 2b       	or	r26, r22
     c82:	b7 2b       	or	r27, r23
     c84:	80 93 b6 24 	sts	0x24B6, r24
     c88:	90 93 b7 24 	sts	0x24B7, r25
     c8c:	a0 93 b8 24 	sts	0x24B8, r26
     c90:	b0 93 b9 24 	sts	0x24B9, r27
			X_cilj |= (int)receiveArray[2];
     c94:	20 91 78 29 	lds	r18, 0x2978
     c98:	80 91 b6 24 	lds	r24, 0x24B6
     c9c:	90 91 b7 24 	lds	r25, 0x24B7
     ca0:	a0 91 b8 24 	lds	r26, 0x24B8
     ca4:	b0 91 b9 24 	lds	r27, 0x24B9
     ca8:	82 2b       	or	r24, r18
     caa:	80 93 b6 24 	sts	0x24B6, r24
     cae:	90 93 b7 24 	sts	0x24B7, r25
     cb2:	a0 93 b8 24 	sts	0x24B8, r26
     cb6:	b0 93 b9 24 	sts	0x24B9, r27
			X_cilj = (X_cilj * scale_factor_for_mm);
     cba:	a0 91 08 2e 	lds	r26, 0x2E08
     cbe:	b0 91 09 2e 	lds	r27, 0x2E09
     cc2:	20 91 b6 24 	lds	r18, 0x24B6
     cc6:	30 91 b7 24 	lds	r19, 0x24B7
     cca:	40 91 b8 24 	lds	r20, 0x24B8
     cce:	50 91 b9 24 	lds	r21, 0x24B9
     cd2:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
     cd6:	60 93 b6 24 	sts	0x24B6, r22
     cda:	70 93 b7 24 	sts	0x24B7, r23
     cde:	80 93 b8 24 	sts	0x24B8, r24
     ce2:	90 93 b9 24 	sts	0x24B9, r25
			//Y_cilj
			Y_cilj = 0;
     ce6:	10 92 13 2e 	sts	0x2E13, r1
     cea:	10 92 14 2e 	sts	0x2E14, r1
     cee:	10 92 15 2e 	sts	0x2E15, r1
     cf2:	10 92 16 2e 	sts	0x2E16, r1
			Y_cilj |= ((int)receiveArray[3]) << 8;
     cf6:	20 91 79 29 	lds	r18, 0x2979
     cfa:	40 91 13 2e 	lds	r20, 0x2E13
     cfe:	50 91 14 2e 	lds	r21, 0x2E14
     d02:	60 91 15 2e 	lds	r22, 0x2E15
     d06:	70 91 16 2e 	lds	r23, 0x2E16
     d0a:	92 2f       	mov	r25, r18
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	aa 27       	eor	r26, r26
     d10:	97 fd       	sbrc	r25, 7
     d12:	a0 95       	com	r26
     d14:	ba 2f       	mov	r27, r26
     d16:	84 2b       	or	r24, r20
     d18:	95 2b       	or	r25, r21
     d1a:	a6 2b       	or	r26, r22
     d1c:	b7 2b       	or	r27, r23
     d1e:	80 93 13 2e 	sts	0x2E13, r24
     d22:	90 93 14 2e 	sts	0x2E14, r25
     d26:	a0 93 15 2e 	sts	0x2E15, r26
     d2a:	b0 93 16 2e 	sts	0x2E16, r27
			Y_cilj |= (int)receiveArray[4];
     d2e:	20 91 7a 29 	lds	r18, 0x297A
     d32:	80 91 13 2e 	lds	r24, 0x2E13
     d36:	90 91 14 2e 	lds	r25, 0x2E14
     d3a:	a0 91 15 2e 	lds	r26, 0x2E15
     d3e:	b0 91 16 2e 	lds	r27, 0x2E16
     d42:	82 2b       	or	r24, r18
     d44:	80 93 13 2e 	sts	0x2E13, r24
     d48:	90 93 14 2e 	sts	0x2E14, r25
     d4c:	a0 93 15 2e 	sts	0x2E15, r26
     d50:	b0 93 16 2e 	sts	0x2E16, r27
			Y_cilj = Y_cilj * scale_factor_for_mm;
     d54:	a0 91 08 2e 	lds	r26, 0x2E08
     d58:	b0 91 09 2e 	lds	r27, 0x2E09
     d5c:	20 91 13 2e 	lds	r18, 0x2E13
     d60:	30 91 14 2e 	lds	r19, 0x2E14
     d64:	40 91 15 2e 	lds	r20, 0x2E15
     d68:	50 91 16 2e 	lds	r21, 0x2E16
     d6c:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
     d70:	60 93 13 2e 	sts	0x2E13, r22
     d74:	70 93 14 2e 	sts	0x2E14, r23
     d78:	80 93 15 2e 	sts	0x2E15, r24
     d7c:	90 93 16 2e 	sts	0x2E16, r25
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
     d80:	80 91 76 29 	lds	r24, 0x2976
     d84:	80 93 e5 28 	sts	0x28E5, r24
			i = 0;
     d88:	00 e0       	ldi	r16, 0x00	; 0
     d8a:	10 e0       	ldi	r17, 0x00	; 0
			while (i < 1)
			{
				bool byteToBuffer;
				byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
     d8c:	f8 01       	movw	r30, r16
     d8e:	eb 51       	subi	r30, 0x1B	; 27
     d90:	f7 4d       	sbci	r31, 0xD7	; 215
     d92:	60 81       	ld	r22, Z
     d94:	81 e2       	ldi	r24, 0x21	; 33
     d96:	93 e2       	ldi	r25, 0x23	; 35
     d98:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
				if(byteToBuffer)
     d9c:	88 23       	and	r24, r24
     d9e:	11 f0       	breq	.+4      	; 0xda4 <__vector_58+0x382>
				{
					i++;
     da0:	0f 5f       	subi	r16, 0xFF	; 255
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
			Y_cilj = Y_cilj * scale_factor_for_mm;
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
			i = 0;
			while (i < 1)
     da4:	10 16       	cp	r1, r16
     da6:	11 06       	cpc	r1, r17
     da8:	8c f7       	brge	.-30     	; 0xd8c <__vector_58+0x36a>
				if(byteToBuffer)
				{
					i++;
				}
			}
			RX_i_E0 = 0;
     daa:	10 92 63 2e 	sts	0x2E63, r1
     dae:	10 c7       	rjmp	.+3616   	; 0x1bd0 <__vector_58+0x11ae>
		}
	}	
	//ZADAVANJE X,Y KOORDINATA I PARAMETRE KRETANJA - 3
	else if(receiveArray[0] == 3)					//provera funkcijskog bajta >> 3 - X,Y koordinate sa svim parametrima kretanja
     db0:	80 91 76 29 	lds	r24, 0x2976
     db4:	83 30       	cpi	r24, 0x03	; 3
     db6:	09 f0       	breq	.+2      	; 0xdba <__vector_58+0x398>
     db8:	e3 c1       	rjmp	.+966    	; 0x1180 <__vector_58+0x75e>
	{
		if(RX_i_E0 >= 11)							//stigla je cela poruka	(11)
     dba:	80 91 63 2e 	lds	r24, 0x2E63
     dbe:	8b 30       	cpi	r24, 0x0B	; 11
     dc0:	08 f4       	brcc	.+2      	; 0xdc4 <__vector_58+0x3a2>
     dc2:	06 c7       	rjmp	.+3596   	; 0x1bd0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
     dc4:	10 92 03 2e 	sts	0x2E03, r1
// 				CHC ^= receiveArray[i];

			//if(receiveArray[x] == CHC)				//CHC ok
			{
				//x_cilj
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     dc8:	80 91 77 29 	lds	r24, 0x2977
     dcc:	8f 3f       	cpi	r24, 0xFF	; 255
     dce:	29 f4       	brne	.+10     	; 0xdda <__vector_58+0x3b8>
     dd0:	80 91 78 29 	lds	r24, 0x2978
     dd4:	8f 3f       	cpi	r24, 0xFF	; 255
     dd6:	09 f4       	brne	.+2      	; 0xdda <__vector_58+0x3b8>
     dd8:	53 c0       	rjmp	.+166    	; 0xe80 <__vector_58+0x45e>
				{
					//ENABLE
					stop_PID_desni = 0;
     dda:	10 92 fc 29 	sts	0x29FC, r1
					stop_PID_levi = 0;
     dde:	10 92 fa 2d 	sts	0x2DFA, r1
					set_direct_out = 0;
     de2:	10 92 89 32 	sts	0x3289, r1
					
					X_cilj = 0;
     de6:	10 92 b6 24 	sts	0x24B6, r1
     dea:	10 92 b7 24 	sts	0x24B7, r1
     dee:	10 92 b8 24 	sts	0x24B8, r1
     df2:	10 92 b9 24 	sts	0x24B9, r1
					X_cilj |= ((int)receiveArray[1]) << 8;
     df6:	20 91 77 29 	lds	r18, 0x2977
     dfa:	40 91 b6 24 	lds	r20, 0x24B6
     dfe:	50 91 b7 24 	lds	r21, 0x24B7
     e02:	60 91 b8 24 	lds	r22, 0x24B8
     e06:	70 91 b9 24 	lds	r23, 0x24B9
     e0a:	92 2f       	mov	r25, r18
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	aa 27       	eor	r26, r26
     e10:	97 fd       	sbrc	r25, 7
     e12:	a0 95       	com	r26
     e14:	ba 2f       	mov	r27, r26
     e16:	84 2b       	or	r24, r20
     e18:	95 2b       	or	r25, r21
     e1a:	a6 2b       	or	r26, r22
     e1c:	b7 2b       	or	r27, r23
     e1e:	80 93 b6 24 	sts	0x24B6, r24
     e22:	90 93 b7 24 	sts	0x24B7, r25
     e26:	a0 93 b8 24 	sts	0x24B8, r26
     e2a:	b0 93 b9 24 	sts	0x24B9, r27
					X_cilj |= (int)receiveArray[2];
     e2e:	20 91 78 29 	lds	r18, 0x2978
     e32:	80 91 b6 24 	lds	r24, 0x24B6
     e36:	90 91 b7 24 	lds	r25, 0x24B7
     e3a:	a0 91 b8 24 	lds	r26, 0x24B8
     e3e:	b0 91 b9 24 	lds	r27, 0x24B9
     e42:	82 2b       	or	r24, r18
     e44:	80 93 b6 24 	sts	0x24B6, r24
     e48:	90 93 b7 24 	sts	0x24B7, r25
     e4c:	a0 93 b8 24 	sts	0x24B8, r26
     e50:	b0 93 b9 24 	sts	0x24B9, r27
					X_cilj = (X_cilj * scale_factor_for_mm);	
     e54:	a0 91 08 2e 	lds	r26, 0x2E08
     e58:	b0 91 09 2e 	lds	r27, 0x2E09
     e5c:	20 91 b6 24 	lds	r18, 0x24B6
     e60:	30 91 b7 24 	lds	r19, 0x24B7
     e64:	40 91 b8 24 	lds	r20, 0x24B8
     e68:	50 91 b9 24 	lds	r21, 0x24B9
     e6c:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
     e70:	60 93 b6 24 	sts	0x24B6, r22
     e74:	70 93 b7 24 	sts	0x24B7, r23
     e78:	80 93 b8 24 	sts	0x24B8, r24
     e7c:	90 93 b9 24 	sts	0x24B9, r25
				}	
				//Y_cilj
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     e80:	80 91 79 29 	lds	r24, 0x2979
     e84:	8f 3f       	cpi	r24, 0xFF	; 255
     e86:	29 f4       	brne	.+10     	; 0xe92 <__vector_58+0x470>
     e88:	80 91 7a 29 	lds	r24, 0x297A
     e8c:	8f 3f       	cpi	r24, 0xFF	; 255
     e8e:	09 f4       	brne	.+2      	; 0xe92 <__vector_58+0x470>
     e90:	53 c0       	rjmp	.+166    	; 0xf38 <__vector_58+0x516>
				{		
					stop_PID_desni = 0;
     e92:	10 92 fc 29 	sts	0x29FC, r1
					stop_PID_levi = 0;	
     e96:	10 92 fa 2d 	sts	0x2DFA, r1
					set_direct_out = 0;
     e9a:	10 92 89 32 	sts	0x3289, r1
					Y_cilj = 0;
     e9e:	10 92 13 2e 	sts	0x2E13, r1
     ea2:	10 92 14 2e 	sts	0x2E14, r1
     ea6:	10 92 15 2e 	sts	0x2E15, r1
     eaa:	10 92 16 2e 	sts	0x2E16, r1
					Y_cilj |= ((int)receiveArray[3]) << 8;
     eae:	20 91 79 29 	lds	r18, 0x2979
     eb2:	40 91 13 2e 	lds	r20, 0x2E13
     eb6:	50 91 14 2e 	lds	r21, 0x2E14
     eba:	60 91 15 2e 	lds	r22, 0x2E15
     ebe:	70 91 16 2e 	lds	r23, 0x2E16
     ec2:	92 2f       	mov	r25, r18
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	aa 27       	eor	r26, r26
     ec8:	97 fd       	sbrc	r25, 7
     eca:	a0 95       	com	r26
     ecc:	ba 2f       	mov	r27, r26
     ece:	84 2b       	or	r24, r20
     ed0:	95 2b       	or	r25, r21
     ed2:	a6 2b       	or	r26, r22
     ed4:	b7 2b       	or	r27, r23
     ed6:	80 93 13 2e 	sts	0x2E13, r24
     eda:	90 93 14 2e 	sts	0x2E14, r25
     ede:	a0 93 15 2e 	sts	0x2E15, r26
     ee2:	b0 93 16 2e 	sts	0x2E16, r27
					Y_cilj |= (int)receiveArray[4];
     ee6:	20 91 7a 29 	lds	r18, 0x297A
     eea:	80 91 13 2e 	lds	r24, 0x2E13
     eee:	90 91 14 2e 	lds	r25, 0x2E14
     ef2:	a0 91 15 2e 	lds	r26, 0x2E15
     ef6:	b0 91 16 2e 	lds	r27, 0x2E16
     efa:	82 2b       	or	r24, r18
     efc:	80 93 13 2e 	sts	0x2E13, r24
     f00:	90 93 14 2e 	sts	0x2E14, r25
     f04:	a0 93 15 2e 	sts	0x2E15, r26
     f08:	b0 93 16 2e 	sts	0x2E16, r27
					Y_cilj = Y_cilj * scale_factor_for_mm;
     f0c:	a0 91 08 2e 	lds	r26, 0x2E08
     f10:	b0 91 09 2e 	lds	r27, 0x2E09
     f14:	20 91 13 2e 	lds	r18, 0x2E13
     f18:	30 91 14 2e 	lds	r19, 0x2E14
     f1c:	40 91 15 2e 	lds	r20, 0x2E15
     f20:	50 91 16 2e 	lds	r21, 0x2E16
     f24:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
     f28:	60 93 13 2e 	sts	0x2E13, r22
     f2c:	70 93 14 2e 	sts	0x2E14, r23
     f30:	80 93 15 2e 	sts	0x2E15, r24
     f34:	90 93 16 2e 	sts	0x2E16, r25
				}	
				
				//teta_cilj_final_absolute
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     f38:	80 91 7b 29 	lds	r24, 0x297B
     f3c:	8f 3f       	cpi	r24, 0xFF	; 255
     f3e:	29 f4       	brne	.+10     	; 0xf4a <__vector_58+0x528>
     f40:	80 91 7c 29 	lds	r24, 0x297C
     f44:	8f 3f       	cpi	r24, 0xFF	; 255
     f46:	09 f4       	brne	.+2      	; 0xf4a <__vector_58+0x528>
     f48:	58 c0       	rjmp	.+176    	; 0xffa <__vector_58+0x5d8>
				{
					teta_cilj_final = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
     f4a:	10 92 00 20 	sts	0x2000, r1
     f4e:	10 92 01 20 	sts	0x2001, r1
     f52:	10 92 02 20 	sts	0x2002, r1
     f56:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[5]) << 8;
     f5a:	20 91 7b 29 	lds	r18, 0x297B
     f5e:	40 91 00 20 	lds	r20, 0x2000
     f62:	50 91 01 20 	lds	r21, 0x2001
     f66:	60 91 02 20 	lds	r22, 0x2002
     f6a:	70 91 03 20 	lds	r23, 0x2003
     f6e:	92 2f       	mov	r25, r18
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	aa 27       	eor	r26, r26
     f74:	97 fd       	sbrc	r25, 7
     f76:	a0 95       	com	r26
     f78:	ba 2f       	mov	r27, r26
     f7a:	84 2b       	or	r24, r20
     f7c:	95 2b       	or	r25, r21
     f7e:	a6 2b       	or	r26, r22
     f80:	b7 2b       	or	r27, r23
     f82:	80 93 00 20 	sts	0x2000, r24
     f86:	90 93 01 20 	sts	0x2001, r25
     f8a:	a0 93 02 20 	sts	0x2002, r26
     f8e:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[6];
     f92:	20 91 7c 29 	lds	r18, 0x297C
     f96:	80 91 00 20 	lds	r24, 0x2000
     f9a:	90 91 01 20 	lds	r25, 0x2001
     f9e:	a0 91 02 20 	lds	r26, 0x2002
     fa2:	b0 91 03 20 	lds	r27, 0x2003
     fa6:	82 2b       	or	r24, r18
     fa8:	80 93 00 20 	sts	0x2000, r24
     fac:	90 93 01 20 	sts	0x2001, r25
     fb0:	a0 93 02 20 	sts	0x2002, r26
     fb4:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = (teta_cilj_final * krug360) / 360;
     fb8:	20 91 00 20 	lds	r18, 0x2000
     fbc:	30 91 01 20 	lds	r19, 0x2001
     fc0:	40 91 02 20 	lds	r20, 0x2002
     fc4:	50 91 03 20 	lds	r21, 0x2003
     fc8:	60 91 7d 32 	lds	r22, 0x327D
     fcc:	70 91 7e 32 	lds	r23, 0x327E
     fd0:	80 91 7f 32 	lds	r24, 0x327F
     fd4:	90 91 80 32 	lds	r25, 0x3280
     fd8:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__mulsi3>
     fdc:	28 e6       	ldi	r18, 0x68	; 104
     fde:	31 e0       	ldi	r19, 0x01	; 1
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
     fe8:	20 93 00 20 	sts	0x2000, r18
     fec:	30 93 01 20 	sts	0x2001, r19
     ff0:	40 93 02 20 	sts	0x2002, r20
     ff4:	50 93 03 20 	sts	0x2003, r21
     ff8:	78 c0       	rjmp	.+240    	; 0x10ea <__vector_58+0x6c8>
				}	
				//teta_cilj_final_relative
				else if(!(receiveArray[7] == 0xFF && receiveArray[8] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     ffa:	80 91 7d 29 	lds	r24, 0x297D
     ffe:	8f 3f       	cpi	r24, 0xFF	; 255
    1000:	29 f4       	brne	.+10     	; 0x100c <__vector_58+0x5ea>
    1002:	80 91 7e 29 	lds	r24, 0x297E
    1006:	8f 3f       	cpi	r24, 0xFF	; 255
    1008:	09 f4       	brne	.+2      	; 0x100c <__vector_58+0x5ea>
    100a:	64 c0       	rjmp	.+200    	; 0x10d4 <__vector_58+0x6b2>
				{
					teta_cilj_final = 0;
    100c:	10 92 00 20 	sts	0x2000, r1
    1010:	10 92 01 20 	sts	0x2001, r1
    1014:	10 92 02 20 	sts	0x2002, r1
    1018:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[7]) << 8;
    101c:	20 91 7d 29 	lds	r18, 0x297D
    1020:	40 91 00 20 	lds	r20, 0x2000
    1024:	50 91 01 20 	lds	r21, 0x2001
    1028:	60 91 02 20 	lds	r22, 0x2002
    102c:	70 91 03 20 	lds	r23, 0x2003
    1030:	92 2f       	mov	r25, r18
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	aa 27       	eor	r26, r26
    1036:	97 fd       	sbrc	r25, 7
    1038:	a0 95       	com	r26
    103a:	ba 2f       	mov	r27, r26
    103c:	84 2b       	or	r24, r20
    103e:	95 2b       	or	r25, r21
    1040:	a6 2b       	or	r26, r22
    1042:	b7 2b       	or	r27, r23
    1044:	80 93 00 20 	sts	0x2000, r24
    1048:	90 93 01 20 	sts	0x2001, r25
    104c:	a0 93 02 20 	sts	0x2002, r26
    1050:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[8];
    1054:	20 91 7e 29 	lds	r18, 0x297E
    1058:	80 91 00 20 	lds	r24, 0x2000
    105c:	90 91 01 20 	lds	r25, 0x2001
    1060:	a0 91 02 20 	lds	r26, 0x2002
    1064:	b0 91 03 20 	lds	r27, 0x2003
    1068:	82 2b       	or	r24, r18
    106a:	80 93 00 20 	sts	0x2000, r24
    106e:	90 93 01 20 	sts	0x2001, r25
    1072:	a0 93 02 20 	sts	0x2002, r26
    1076:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = teta + (teta_cilj_final * krug360) / 360;
    107a:	20 91 00 20 	lds	r18, 0x2000
    107e:	30 91 01 20 	lds	r19, 0x2001
    1082:	40 91 02 20 	lds	r20, 0x2002
    1086:	50 91 03 20 	lds	r21, 0x2003
    108a:	60 91 7d 32 	lds	r22, 0x327D
    108e:	70 91 7e 32 	lds	r23, 0x327E
    1092:	80 91 7f 32 	lds	r24, 0x327F
    1096:	90 91 80 32 	lds	r25, 0x3280
    109a:	c0 90 8b 32 	lds	r12, 0x328B
    109e:	d0 90 8c 32 	lds	r13, 0x328C
    10a2:	e0 90 8d 32 	lds	r14, 0x328D
    10a6:	f0 90 8e 32 	lds	r15, 0x328E
    10aa:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__mulsi3>
    10ae:	28 e6       	ldi	r18, 0x68	; 104
    10b0:	31 e0       	ldi	r19, 0x01	; 1
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    10ba:	c2 0e       	add	r12, r18
    10bc:	d3 1e       	adc	r13, r19
    10be:	e4 1e       	adc	r14, r20
    10c0:	f5 1e       	adc	r15, r21
    10c2:	c0 92 00 20 	sts	0x2000, r12
    10c6:	d0 92 01 20 	sts	0x2001, r13
    10ca:	e0 92 02 20 	sts	0x2002, r14
    10ce:	f0 92 03 20 	sts	0x2003, r15
    10d2:	0b c0       	rjmp	.+22     	; 0x10ea <__vector_58+0x6c8>
				}
				else
					teta_cilj_final = 0xFFFFFFFF;				
    10d4:	8f ef       	ldi	r24, 0xFF	; 255
    10d6:	9f ef       	ldi	r25, 0xFF	; 255
    10d8:	dc 01       	movw	r26, r24
    10da:	80 93 00 20 	sts	0x2000, r24
    10de:	90 93 01 20 	sts	0x2001, r25
    10e2:	a0 93 02 20 	sts	0x2002, r26
    10e6:	b0 93 03 20 	sts	0x2003, r27
				//bzina
				if(receiveArray[9] != 0xFF)	// ako zadajemo 0xFF ne menja se brzina
    10ea:	80 91 7f 29 	lds	r24, 0x297F
    10ee:	8f 3f       	cpi	r24, 0xFF	; 255
    10f0:	c9 f0       	breq	.+50     	; 0x1124 <__vector_58+0x702>
				{
					zeljena_pravolinijska_brzina = receiveArray[9] * 3;	//podesiti faktor!
    10f2:	80 91 7f 29 	lds	r24, 0x297F
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	9c 01       	movw	r18, r24
    10fa:	22 0f       	add	r18, r18
    10fc:	33 1f       	adc	r19, r19
    10fe:	82 0f       	add	r24, r18
    1100:	93 1f       	adc	r25, r19
    1102:	80 93 87 32 	sts	0x3287, r24
    1106:	90 93 88 32 	sts	0x3288, r25
					zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2;
    110a:	80 91 87 32 	lds	r24, 0x3287
    110e:	90 91 88 32 	lds	r25, 0x3288
    1112:	99 23       	and	r25, r25
    1114:	0c f4       	brge	.+2      	; 0x1118 <__vector_58+0x6f6>
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	95 95       	asr	r25
    111a:	87 95       	ror	r24
    111c:	80 93 69 2e 	sts	0x2E69, r24
    1120:	90 93 6a 2e 	sts	0x2E6A, r25
				}				
				//smer
				if(receiveArray[10] != 0xFF)	// ako zadajemo 0xFF ne menja se smer
    1124:	80 91 80 29 	lds	r24, 0x2980
    1128:	8f 3f       	cpi	r24, 0xFF	; 255
    112a:	21 f0       	breq	.+8      	; 0x1134 <__vector_58+0x712>
					smer_zadati = receiveArray[10];	
    112c:	80 91 80 29 	lds	r24, 0x2980
    1130:	80 93 66 29 	sts	0x2966, r24
				
				//pokretanje snimanja u nizove
				sample_counter_niz_1 = 0;
    1134:	10 92 60 2e 	sts	0x2E60, r1
				niz_counter_niz_1 = 0;	
    1138:	10 92 61 2e 	sts	0x2E61, r1
				sample_counter_niz_2 = 0;
    113c:	10 92 01 2e 	sts	0x2E01, r1
				niz_counter_niz_2 = 0;
    1140:	10 92 02 2e 	sts	0x2E02, r1
				sample_counter_niz_3 = 0;
    1144:	10 92 67 29 	sts	0x2967, r1
				niz_counter_niz_3 = 0;		
    1148:	10 92 ce 24 	sts	0x24CE, r1
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
    114c:	80 91 76 29 	lds	r24, 0x2976
    1150:	80 93 e5 28 	sts	0x28E5, r24
				niz_counter_niz_2 = 0;
				sample_counter_niz_3 = 0;
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
    1154:	00 e0       	ldi	r16, 0x00	; 0
    1156:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];	
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1158:	f8 01       	movw	r30, r16
    115a:	eb 51       	subi	r30, 0x1B	; 27
    115c:	f7 4d       	sbci	r31, 0xD7	; 215
    115e:	60 81       	ld	r22, Z
    1160:	81 e2       	ldi	r24, 0x21	; 33
    1162:	93 e2       	ldi	r25, 0x23	; 35
    1164:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1168:	88 23       	and	r24, r24
    116a:	11 f0       	breq	.+4      	; 0x1170 <__vector_58+0x74e>
					{
						i++;
    116c:	0f 5f       	subi	r16, 0xFF	; 255
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
				while (i < 1)
    1170:	10 16       	cp	r1, r16
    1172:	11 06       	cpc	r1, r17
    1174:	8c f7       	brge	.-30     	; 0x1158 <__vector_58+0x736>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    1176:	10 92 63 2e 	sts	0x2E63, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda	
    117a:	10 92 63 2e 	sts	0x2E63, r1
    117e:	28 c5       	rjmp	.+2640   	; 0x1bd0 <__vector_58+0x11ae>
		}					
	}
	//RELATIVNA DISTANCA I UGAO - 4
	else if(receiveArray[0] == 4)					//provera funkcijskog bajta
    1180:	80 91 76 29 	lds	r24, 0x2976
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	09 f0       	breq	.+2      	; 0x118a <__vector_58+0x768>
    1188:	95 c1       	rjmp	.+810    	; 0x14b4 <__vector_58+0xa92>
	{
		if(RX_i_E0 >= 5)								//stigla je cela poruka
    118a:	80 91 63 2e 	lds	r24, 0x2E63
    118e:	85 30       	cpi	r24, 0x05	; 5
    1190:	08 f4       	brcc	.+2      	; 0x1194 <__vector_58+0x772>
    1192:	1e c5       	rjmp	.+2620   	; 0x1bd0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1194:	10 92 03 2e 	sts	0x2E03, r1
			{
				//ENABLE
				stop_PID_desni = 0;
    1198:	10 92 fc 29 	sts	0x29FC, r1
				stop_PID_levi = 0;
    119c:	10 92 fa 2d 	sts	0x2DFA, r1
				set_direct_out = 0;
    11a0:	10 92 89 32 	sts	0x3289, r1
				
				rel_distanca = 0;
    11a4:	10 92 cd 28 	sts	0x28CD, r1
    11a8:	10 92 ce 28 	sts	0x28CE, r1
    11ac:	10 92 cf 28 	sts	0x28CF, r1
    11b0:	10 92 d0 28 	sts	0x28D0, r1
				rel_distanca |= ((int)receiveArray[1]) << 8;
    11b4:	20 91 77 29 	lds	r18, 0x2977
    11b8:	40 91 cd 28 	lds	r20, 0x28CD
    11bc:	50 91 ce 28 	lds	r21, 0x28CE
    11c0:	60 91 cf 28 	lds	r22, 0x28CF
    11c4:	70 91 d0 28 	lds	r23, 0x28D0
    11c8:	92 2f       	mov	r25, r18
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	aa 27       	eor	r26, r26
    11ce:	97 fd       	sbrc	r25, 7
    11d0:	a0 95       	com	r26
    11d2:	ba 2f       	mov	r27, r26
    11d4:	84 2b       	or	r24, r20
    11d6:	95 2b       	or	r25, r21
    11d8:	a6 2b       	or	r26, r22
    11da:	b7 2b       	or	r27, r23
    11dc:	80 93 cd 28 	sts	0x28CD, r24
    11e0:	90 93 ce 28 	sts	0x28CE, r25
    11e4:	a0 93 cf 28 	sts	0x28CF, r26
    11e8:	b0 93 d0 28 	sts	0x28D0, r27
				rel_distanca |= (int)receiveArray[2];
    11ec:	20 91 78 29 	lds	r18, 0x2978
    11f0:	80 91 cd 28 	lds	r24, 0x28CD
    11f4:	90 91 ce 28 	lds	r25, 0x28CE
    11f8:	a0 91 cf 28 	lds	r26, 0x28CF
    11fc:	b0 91 d0 28 	lds	r27, 0x28D0
    1200:	82 2b       	or	r24, r18
    1202:	80 93 cd 28 	sts	0x28CD, r24
    1206:	90 93 ce 28 	sts	0x28CE, r25
    120a:	a0 93 cf 28 	sts	0x28CF, r26
    120e:	b0 93 d0 28 	sts	0x28D0, r27
				rel_distanca = (rel_distanca * scale_factor_for_mm);
    1212:	a0 91 08 2e 	lds	r26, 0x2E08
    1216:	b0 91 09 2e 	lds	r27, 0x2E09
    121a:	20 91 cd 28 	lds	r18, 0x28CD
    121e:	30 91 ce 28 	lds	r19, 0x28CE
    1222:	40 91 cf 28 	lds	r20, 0x28CF
    1226:	50 91 d0 28 	lds	r21, 0x28D0
    122a:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    122e:	60 93 cd 28 	sts	0x28CD, r22
    1232:	70 93 ce 28 	sts	0x28CE, r23
    1236:	80 93 cf 28 	sts	0x28CF, r24
    123a:	90 93 d0 28 	sts	0x28D0, r25

				rel_ugao = 0;
    123e:	10 92 1e 2e 	sts	0x2E1E, r1
    1242:	10 92 1f 2e 	sts	0x2E1F, r1
    1246:	10 92 20 2e 	sts	0x2E20, r1
    124a:	10 92 21 2e 	sts	0x2E21, r1
				rel_ugao |= ((int)receiveArray[3]) << 8;
    124e:	20 91 79 29 	lds	r18, 0x2979
    1252:	40 91 1e 2e 	lds	r20, 0x2E1E
    1256:	50 91 1f 2e 	lds	r21, 0x2E1F
    125a:	60 91 20 2e 	lds	r22, 0x2E20
    125e:	70 91 21 2e 	lds	r23, 0x2E21
    1262:	92 2f       	mov	r25, r18
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	aa 27       	eor	r26, r26
    1268:	97 fd       	sbrc	r25, 7
    126a:	a0 95       	com	r26
    126c:	ba 2f       	mov	r27, r26
    126e:	84 2b       	or	r24, r20
    1270:	95 2b       	or	r25, r21
    1272:	a6 2b       	or	r26, r22
    1274:	b7 2b       	or	r27, r23
    1276:	80 93 1e 2e 	sts	0x2E1E, r24
    127a:	90 93 1f 2e 	sts	0x2E1F, r25
    127e:	a0 93 20 2e 	sts	0x2E20, r26
    1282:	b0 93 21 2e 	sts	0x2E21, r27
				rel_ugao |= (int)receiveArray[4];
    1286:	20 91 7a 29 	lds	r18, 0x297A
    128a:	80 91 1e 2e 	lds	r24, 0x2E1E
    128e:	90 91 1f 2e 	lds	r25, 0x2E1F
    1292:	a0 91 20 2e 	lds	r26, 0x2E20
    1296:	b0 91 21 2e 	lds	r27, 0x2E21
    129a:	82 2b       	or	r24, r18
    129c:	80 93 1e 2e 	sts	0x2E1E, r24
    12a0:	90 93 1f 2e 	sts	0x2E1F, r25
    12a4:	a0 93 20 2e 	sts	0x2E20, r26
    12a8:	b0 93 21 2e 	sts	0x2E21, r27
				rel_ugao = (rel_ugao * krug360) / 360;
    12ac:	20 91 1e 2e 	lds	r18, 0x2E1E
    12b0:	30 91 1f 2e 	lds	r19, 0x2E1F
    12b4:	40 91 20 2e 	lds	r20, 0x2E20
    12b8:	50 91 21 2e 	lds	r21, 0x2E21
    12bc:	60 91 7d 32 	lds	r22, 0x327D
    12c0:	70 91 7e 32 	lds	r23, 0x327E
    12c4:	80 91 7f 32 	lds	r24, 0x327F
    12c8:	90 91 80 32 	lds	r25, 0x3280
    12cc:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__mulsi3>
    12d0:	28 e6       	ldi	r18, 0x68	; 104
    12d2:	31 e0       	ldi	r19, 0x01	; 1
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    12dc:	20 93 1e 2e 	sts	0x2E1E, r18
    12e0:	30 93 1f 2e 	sts	0x2E1F, r19
    12e4:	40 93 20 2e 	sts	0x2E20, r20
    12e8:	50 93 21 2e 	sts	0x2E21, r21
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    12ec:	40 91 8b 32 	lds	r20, 0x328B
    12f0:	50 91 8c 32 	lds	r21, 0x328C
    12f4:	60 91 8d 32 	lds	r22, 0x328D
    12f8:	70 91 8e 32 	lds	r23, 0x328E
    12fc:	80 91 1e 2e 	lds	r24, 0x2E1E
    1300:	90 91 1f 2e 	lds	r25, 0x2E1F
    1304:	a0 91 20 2e 	lds	r26, 0x2E20
    1308:	b0 91 21 2e 	lds	r27, 0x2E21
    130c:	c0 90 d7 28 	lds	r12, 0x28D7
    1310:	d0 90 d8 28 	lds	r13, 0x28D8
    1314:	e0 90 d9 28 	lds	r14, 0x28D9
    1318:	f0 90 da 28 	lds	r15, 0x28DA
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    131c:	40 90 8b 32 	lds	r4, 0x328B
    1320:	50 90 8c 32 	lds	r5, 0x328C
    1324:	60 90 8d 32 	lds	r6, 0x328D
    1328:	70 90 8e 32 	lds	r7, 0x328E
    132c:	00 91 1e 2e 	lds	r16, 0x2E1E
    1330:	10 91 1f 2e 	lds	r17, 0x2E1F
    1334:	20 91 20 2e 	lds	r18, 0x2E20
    1338:	30 91 21 2e 	lds	r19, 0x2E21
    133c:	09 83       	std	Y+1, r16	; 0x01
    133e:	1a 83       	std	Y+2, r17	; 0x02
    1340:	2b 83       	std	Y+3, r18	; 0x03
    1342:	3c 83       	std	Y+4, r19	; 0x04
    1344:	80 90 d7 28 	lds	r8, 0x28D7
    1348:	90 90 d8 28 	lds	r9, 0x28D8
    134c:	a0 90 d9 28 	lds	r10, 0x28D9
    1350:	b0 90 da 28 	lds	r11, 0x28DA
				rel_ugao |= (int)receiveArray[4];
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    1354:	8a 01       	movw	r16, r20
    1356:	9b 01       	movw	r18, r22
    1358:	08 0f       	add	r16, r24
    135a:	19 1f       	adc	r17, r25
    135c:	2a 1f       	adc	r18, r26
    135e:	3b 1f       	adc	r19, r27
    1360:	c9 01       	movw	r24, r18
    1362:	b8 01       	movw	r22, r16
    1364:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    1368:	6d 83       	std	Y+5, r22	; 0x05
    136a:	7e 83       	std	Y+6, r23	; 0x06
    136c:	8f 83       	std	Y+7, r24	; 0x07
    136e:	98 87       	std	Y+8, r25	; 0x08
    1370:	c7 01       	movw	r24, r14
    1372:	b6 01       	movw	r22, r12
    1374:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    1378:	9b 01       	movw	r18, r22
    137a:	ac 01       	movw	r20, r24
    137c:	6d 81       	ldd	r22, Y+5	; 0x05
    137e:	7e 81       	ldd	r23, Y+6	; 0x06
    1380:	8f 81       	ldd	r24, Y+7	; 0x07
    1382:	98 85       	ldd	r25, Y+8	; 0x08
    1384:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__divsf3>
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
    1388:	2b ed       	ldi	r18, 0xDB	; 219
    138a:	3f e0       	ldi	r19, 0x0F	; 15
    138c:	49 e4       	ldi	r20, 0x49	; 73
    138e:	50 e4       	ldi	r21, 0x40	; 64
    1390:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    1394:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <cos>
    1398:	6b 01       	movw	r12, r22
    139a:	7c 01       	movw	r14, r24
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    139c:	69 81       	ldd	r22, Y+1	; 0x01
    139e:	7a 81       	ldd	r23, Y+2	; 0x02
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	64 0d       	add	r22, r4
    13a6:	75 1d       	adc	r23, r5
    13a8:	86 1d       	adc	r24, r6
    13aa:	97 1d       	adc	r25, r7
    13ac:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    13b0:	2b 01       	movw	r4, r22
    13b2:	3c 01       	movw	r6, r24
    13b4:	c5 01       	movw	r24, r10
    13b6:	b4 01       	movw	r22, r8
    13b8:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    13bc:	9b 01       	movw	r18, r22
    13be:	ac 01       	movw	r20, r24
    13c0:	c3 01       	movw	r24, r6
    13c2:	b2 01       	movw	r22, r4
    13c4:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__divsf3>
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
    13c8:	2b ed       	ldi	r18, 0xDB	; 219
    13ca:	3f e0       	ldi	r19, 0x0F	; 15
    13cc:	49 e4       	ldi	r20, 0x49	; 73
    13ce:	50 e4       	ldi	r21, 0x40	; 64
    13d0:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    13d4:	0e 94 8a 38 	call	0x7114	; 0x7114 <sin>
    13d8:	4b 01       	movw	r8, r22
    13da:	5c 01       	movw	r10, r24
				X_pos_cos = rel_distanca * X_pos_cos;
    13dc:	60 91 cd 28 	lds	r22, 0x28CD
    13e0:	70 91 ce 28 	lds	r23, 0x28CE
    13e4:	80 91 cf 28 	lds	r24, 0x28CF
    13e8:	90 91 d0 28 	lds	r25, 0x28D0
				Y_pos_sin = rel_distanca * Y_pos_sin;
    13ec:	40 90 cd 28 	lds	r4, 0x28CD
    13f0:	50 90 ce 28 	lds	r5, 0x28CE
    13f4:	60 90 cf 28 	lds	r6, 0x28CF
    13f8:	70 90 d0 28 	lds	r7, 0x28D0
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    13fc:	20 91 2b 2e 	lds	r18, 0x2E2B
    1400:	30 91 2c 2e 	lds	r19, 0x2E2C
    1404:	40 91 2d 2e 	lds	r20, 0x2E2D
    1408:	50 91 2e 2e 	lds	r21, 0x2E2E
    140c:	29 83       	std	Y+1, r18	; 0x01
    140e:	3a 83       	std	Y+2, r19	; 0x02
    1410:	4b 83       	std	Y+3, r20	; 0x03
    1412:	5c 83       	std	Y+4, r21	; 0x04
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
    1414:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    1418:	a7 01       	movw	r20, r14
    141a:	96 01       	movw	r18, r12
    141c:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
				Y_pos_sin = rel_distanca * Y_pos_sin;
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    1420:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fixsfsi>
    1424:	09 81       	ldd	r16, Y+1	; 0x01
    1426:	1a 81       	ldd	r17, Y+2	; 0x02
    1428:	2b 81       	ldd	r18, Y+3	; 0x03
    142a:	3c 81       	ldd	r19, Y+4	; 0x04
    142c:	06 0f       	add	r16, r22
    142e:	17 1f       	adc	r17, r23
    1430:	28 1f       	adc	r18, r24
    1432:	39 1f       	adc	r19, r25
    1434:	00 93 b6 24 	sts	0x24B6, r16
    1438:	10 93 b7 24 	sts	0x24B7, r17
    143c:	20 93 b8 24 	sts	0x24B8, r18
    1440:	30 93 b9 24 	sts	0x24B9, r19
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    1444:	c0 90 0a 2a 	lds	r12, 0x2A0A
    1448:	d0 90 0b 2a 	lds	r13, 0x2A0B
    144c:	e0 90 0c 2a 	lds	r14, 0x2A0C
    1450:	f0 90 0d 2a 	lds	r15, 0x2A0D
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
				Y_pos_sin = rel_distanca * Y_pos_sin;
    1454:	c3 01       	movw	r24, r6
    1456:	b2 01       	movw	r22, r4
    1458:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    145c:	a5 01       	movw	r20, r10
    145e:	94 01       	movw	r18, r8
    1460:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    1464:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fixsfsi>
    1468:	c6 0e       	add	r12, r22
    146a:	d7 1e       	adc	r13, r23
    146c:	e8 1e       	adc	r14, r24
    146e:	f9 1e       	adc	r15, r25
    1470:	c0 92 13 2e 	sts	0x2E13, r12
    1474:	d0 92 14 2e 	sts	0x2E14, r13
    1478:	e0 92 15 2e 	sts	0x2E15, r14
    147c:	f0 92 16 2e 	sts	0x2E16, r15
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1480:	80 91 76 29 	lds	r24, 0x2976
    1484:	80 93 e5 28 	sts	0x28E5, r24
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
    1488:	00 e0       	ldi	r16, 0x00	; 0
    148a:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    148c:	f8 01       	movw	r30, r16
    148e:	eb 51       	subi	r30, 0x1B	; 27
    1490:	f7 4d       	sbci	r31, 0xD7	; 215
    1492:	60 81       	ld	r22, Z
    1494:	81 e2       	ldi	r24, 0x21	; 33
    1496:	93 e2       	ldi	r25, 0x23	; 35
    1498:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    149c:	88 23       	and	r24, r24
    149e:	11 f0       	breq	.+4      	; 0x14a4 <__vector_58+0xa82>
					{
						i++;
    14a0:	0f 5f       	subi	r16, 0xFF	; 255
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    14a4:	10 16       	cp	r1, r16
    14a6:	11 06       	cpc	r1, r17
    14a8:	8c f7       	brge	.-30     	; 0x148c <__vector_58+0xa6a>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    14aa:	10 92 63 2e 	sts	0x2E63, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda
    14ae:	10 92 63 2e 	sts	0x2E63, r1
    14b2:	8e c3       	rjmp	.+1820   	; 0x1bd0 <__vector_58+0x11ae>
		}
	}
	//SET DIRECT OUT - 5
	else if(receiveArray[0] == 5)					//provera funkcijskog bajta
    14b4:	80 91 76 29 	lds	r24, 0x2976
    14b8:	85 30       	cpi	r24, 0x05	; 5
    14ba:	09 f0       	breq	.+2      	; 0x14be <__vector_58+0xa9c>
    14bc:	6e c0       	rjmp	.+220    	; 0x159a <__vector_58+0xb78>
	{
		if(RX_i_E0 >= 3)							//stigla je cela poruka
    14be:	80 91 63 2e 	lds	r24, 0x2E63
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	08 f4       	brcc	.+2      	; 0x14c8 <__vector_58+0xaa6>
    14c6:	84 c3       	rjmp	.+1800   	; 0x1bd0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    14c8:	10 92 03 2e 	sts	0x2E03, r1
			{
				//ENABLE
				set_direct_out = 1;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	80 93 89 32 	sts	0x3289, r24
				
				if(receiveArray[1] >= 128)
    14d2:	80 91 77 29 	lds	r24, 0x2977
    14d6:	88 23       	and	r24, r24
    14d8:	8c f4       	brge	.+34     	; 0x14fc <__vector_58+0xada>
					PID_brzina_L = (receiveArray[1] - 128) * 5;	//podesiti faktor!
    14da:	80 91 77 29 	lds	r24, 0x2977
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9c 01       	movw	r18, r24
    14e2:	22 0f       	add	r18, r18
    14e4:	33 1f       	adc	r19, r19
    14e6:	22 0f       	add	r18, r18
    14e8:	33 1f       	adc	r19, r19
    14ea:	82 0f       	add	r24, r18
    14ec:	93 1f       	adc	r25, r19
    14ee:	80 58       	subi	r24, 0x80	; 128
    14f0:	92 40       	sbci	r25, 0x02	; 2
    14f2:	80 93 83 2e 	sts	0x2E83, r24
    14f6:	90 93 84 2e 	sts	0x2E84, r25
    14fa:	10 c0       	rjmp	.+32     	; 0x151c <__vector_58+0xafa>
				else
					PID_brzina_L = (128 - receiveArray[1]) * (-5);
    14fc:	80 91 77 29 	lds	r24, 0x2977
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9c 01       	movw	r18, r24
    1504:	22 0f       	add	r18, r18
    1506:	33 1f       	adc	r19, r19
    1508:	22 0f       	add	r18, r18
    150a:	33 1f       	adc	r19, r19
    150c:	82 0f       	add	r24, r18
    150e:	93 1f       	adc	r25, r19
    1510:	80 58       	subi	r24, 0x80	; 128
    1512:	92 40       	sbci	r25, 0x02	; 2
    1514:	80 93 83 2e 	sts	0x2E83, r24
    1518:	90 93 84 2e 	sts	0x2E84, r25
					
				if(receiveArray[2] >= 128)
    151c:	80 91 78 29 	lds	r24, 0x2978
    1520:	88 23       	and	r24, r24
    1522:	8c f4       	brge	.+34     	; 0x1546 <__vector_58+0xb24>
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
    1524:	80 91 78 29 	lds	r24, 0x2978
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	9c 01       	movw	r18, r24
    152c:	22 0f       	add	r18, r18
    152e:	33 1f       	adc	r19, r19
    1530:	22 0f       	add	r18, r18
    1532:	33 1f       	adc	r19, r19
    1534:	82 0f       	add	r24, r18
    1536:	93 1f       	adc	r25, r19
    1538:	80 58       	subi	r24, 0x80	; 128
    153a:	92 40       	sbci	r25, 0x02	; 2
    153c:	80 93 81 2e 	sts	0x2E81, r24
    1540:	90 93 82 2e 	sts	0x2E82, r25
    1544:	10 c0       	rjmp	.+32     	; 0x1566 <__vector_58+0xb44>
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
    1546:	80 91 78 29 	lds	r24, 0x2978
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	9c 01       	movw	r18, r24
    154e:	22 0f       	add	r18, r18
    1550:	33 1f       	adc	r19, r19
    1552:	22 0f       	add	r18, r18
    1554:	33 1f       	adc	r19, r19
    1556:	82 0f       	add	r24, r18
    1558:	93 1f       	adc	r25, r19
    155a:	80 58       	subi	r24, 0x80	; 128
    155c:	92 40       	sbci	r25, 0x02	; 2
    155e:	80 93 81 2e 	sts	0x2E81, r24
    1562:	90 93 82 2e 	sts	0x2E82, r25
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1566:	80 91 76 29 	lds	r24, 0x2976
    156a:	80 93 e5 28 	sts	0x28E5, r24
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
    156e:	00 e0       	ldi	r16, 0x00	; 0
    1570:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1572:	f8 01       	movw	r30, r16
    1574:	eb 51       	subi	r30, 0x1B	; 27
    1576:	f7 4d       	sbci	r31, 0xD7	; 215
    1578:	60 81       	ld	r22, Z
    157a:	81 e2       	ldi	r24, 0x21	; 33
    157c:	93 e2       	ldi	r25, 0x23	; 35
    157e:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1582:	88 23       	and	r24, r24
    1584:	11 f0       	breq	.+4      	; 0x158a <__vector_58+0xb68>
					{
						i++;
    1586:	0f 5f       	subi	r16, 0xFF	; 255
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    158a:	10 16       	cp	r1, r16
    158c:	11 06       	cpc	r1, r17
    158e:	8c f7       	brge	.-30     	; 0x1572 <__vector_58+0xb50>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    1590:	10 92 63 2e 	sts	0x2E63, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda
    1594:	10 92 63 2e 	sts	0x2E63, r1
    1598:	1b c3       	rjmp	.+1590   	; 0x1bd0 <__vector_58+0x11ae>
		}
	}			
	//PODESAVANJE FET izlaza i servoa - 6
	else if(receiveArray[0] == 6)					//provera funkcijskog bajta 
    159a:	80 91 76 29 	lds	r24, 0x2976
    159e:	86 30       	cpi	r24, 0x06	; 6
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <__vector_58+0xb82>
    15a2:	56 c0       	rjmp	.+172    	; 0x1650 <__vector_58+0xc2e>
	{
		if(RX_i_E0 >= 7)							//stigla je cela poruka	(11)
    15a4:	80 91 63 2e 	lds	r24, 0x2E63
    15a8:	87 30       	cpi	r24, 0x07	; 7
    15aa:	08 f4       	brcc	.+2      	; 0x15ae <__vector_58+0xb8c>
    15ac:	11 c3       	rjmp	.+1570   	; 0x1bd0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    15ae:	10 92 03 2e 	sts	0x2E03, r1
			{
				PORTC.OUT |= receiveArray[1] & receiveArray[2];	//izlazi + maska
    15b2:	e0 e4       	ldi	r30, 0x40	; 64
    15b4:	f6 e0       	ldi	r31, 0x06	; 6
    15b6:	94 81       	ldd	r25, Z+4	; 0x04
    15b8:	47 e7       	ldi	r20, 0x77	; 119
    15ba:	59 e2       	ldi	r21, 0x29	; 41
    15bc:	da 01       	movw	r26, r20
    15be:	8c 91       	ld	r24, X
    15c0:	68 e7       	ldi	r22, 0x78	; 120
    15c2:	79 e2       	ldi	r23, 0x29	; 41
    15c4:	db 01       	movw	r26, r22
    15c6:	2c 91       	ld	r18, X
    15c8:	82 23       	and	r24, r18
    15ca:	89 2b       	or	r24, r25
    15cc:	84 83       	std	Z+4, r24	; 0x04
				PORTC.OUT &= ~(receiveArray[1] ^ receiveArray[2]);	//izlazi + maska
    15ce:	94 81       	ldd	r25, Z+4	; 0x04
    15d0:	da 01       	movw	r26, r20
    15d2:	8c 91       	ld	r24, X
    15d4:	db 01       	movw	r26, r22
    15d6:	2c 91       	ld	r18, X
    15d8:	82 27       	eor	r24, r18
    15da:	80 95       	com	r24
    15dc:	89 23       	and	r24, r25
    15de:	84 83       	std	Z+4, r24	; 0x04
				
				//120 - nulti polozaj, 280 - krajnji polozaj
				TCF0.CCA = receiveArray[3] + 120;
    15e0:	80 91 79 29 	lds	r24, 0x2979
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	88 58       	subi	r24, 0x88	; 136
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	e0 e0       	ldi	r30, 0x00	; 0
    15ec:	fb e0       	ldi	r31, 0x0B	; 11
    15ee:	80 a7       	std	Z+40, r24	; 0x28
    15f0:	91 a7       	std	Z+41, r25	; 0x29
				TCF0.CCB = receiveArray[4] + 120;
    15f2:	80 91 7a 29 	lds	r24, 0x297A
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	88 58       	subi	r24, 0x88	; 136
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	82 a7       	std	Z+42, r24	; 0x2a
    15fe:	93 a7       	std	Z+43, r25	; 0x2b
				TCF0.CCC = receiveArray[5] + 120;
    1600:	80 91 7b 29 	lds	r24, 0x297B
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	88 58       	subi	r24, 0x88	; 136
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	84 a7       	std	Z+44, r24	; 0x2c
    160c:	95 a7       	std	Z+45, r25	; 0x2d
				TCF0.CCD = receiveArray[6] + 120;
    160e:	80 91 7c 29 	lds	r24, 0x297C
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	88 58       	subi	r24, 0x88	; 136
    1616:	9f 4f       	sbci	r25, 0xFF	; 255
    1618:	86 a7       	std	Z+46, r24	; 0x2e
    161a:	97 a7       	std	Z+47, r25	; 0x2f
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    161c:	80 91 76 29 	lds	r24, 0x2976
    1620:	80 93 e5 28 	sts	0x28E5, r24
				TCF0.CCB = receiveArray[4] + 120;
				TCF0.CCC = receiveArray[5] + 120;
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
    1624:	00 e0       	ldi	r16, 0x00	; 0
    1626:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1628:	f8 01       	movw	r30, r16
    162a:	eb 51       	subi	r30, 0x1B	; 27
    162c:	f7 4d       	sbci	r31, 0xD7	; 215
    162e:	60 81       	ld	r22, Z
    1630:	81 e2       	ldi	r24, 0x21	; 33
    1632:	93 e2       	ldi	r25, 0x23	; 35
    1634:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1638:	88 23       	and	r24, r24
    163a:	11 f0       	breq	.+4      	; 0x1640 <__vector_58+0xc1e>
					{
						i++;
    163c:	0f 5f       	subi	r16, 0xFF	; 255
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    1640:	10 16       	cp	r1, r16
    1642:	11 06       	cpc	r1, r17
    1644:	8c f7       	brge	.-30     	; 0x1628 <__vector_58+0xc06>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    1646:	10 92 63 2e 	sts	0x2E63, r1
			}
			RX_i_E0 = 0;	//ako ne valja CHC ponistava se komanda
    164a:	10 92 63 2e 	sts	0x2E63, r1
    164e:	c0 c2       	rjmp	.+1408   	; 0x1bd0 <__vector_58+0x11ae>
		}		
	}		
	//Upis trenutne pozicije - 7
	else if(receiveArray[0] == 7)					//provera funkcijskog bajta
    1650:	80 91 76 29 	lds	r24, 0x2976
    1654:	87 30       	cpi	r24, 0x07	; 7
    1656:	09 f0       	breq	.+2      	; 0x165a <__vector_58+0xc38>
    1658:	7d c1       	rjmp	.+762    	; 0x1954 <__vector_58+0xf32>
	{
		if(RX_i_E0 >= 7)							//stigla je cela poruka	(11)
    165a:	80 91 63 2e 	lds	r24, 0x2E63
    165e:	87 30       	cpi	r24, 0x07	; 7
    1660:	08 f4       	brcc	.+2      	; 0x1664 <__vector_58+0xc42>
    1662:	b6 c2       	rjmp	.+1388   	; 0x1bd0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1664:	10 92 03 2e 	sts	0x2E03, r1
			{
				//x_pos
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    1668:	80 91 77 29 	lds	r24, 0x2977
    166c:	8f 3f       	cpi	r24, 0xFF	; 255
    166e:	29 f4       	brne	.+10     	; 0x167a <__vector_58+0xc58>
    1670:	80 91 78 29 	lds	r24, 0x2978
    1674:	8f 3f       	cpi	r24, 0xFF	; 255
    1676:	09 f4       	brne	.+2      	; 0x167a <__vector_58+0xc58>
    1678:	6d c0       	rjmp	.+218    	; 0x1754 <__vector_58+0xd32>
				{
					X_pos = 0;
    167a:	10 92 2b 2e 	sts	0x2E2B, r1
    167e:	10 92 2c 2e 	sts	0x2E2C, r1
    1682:	10 92 2d 2e 	sts	0x2E2D, r1
    1686:	10 92 2e 2e 	sts	0x2E2E, r1
					X_pos |= ((int)receiveArray[1]) << 8;
    168a:	20 91 77 29 	lds	r18, 0x2977
    168e:	40 91 2b 2e 	lds	r20, 0x2E2B
    1692:	50 91 2c 2e 	lds	r21, 0x2E2C
    1696:	60 91 2d 2e 	lds	r22, 0x2E2D
    169a:	70 91 2e 2e 	lds	r23, 0x2E2E
    169e:	92 2f       	mov	r25, r18
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	aa 27       	eor	r26, r26
    16a4:	97 fd       	sbrc	r25, 7
    16a6:	a0 95       	com	r26
    16a8:	ba 2f       	mov	r27, r26
    16aa:	84 2b       	or	r24, r20
    16ac:	95 2b       	or	r25, r21
    16ae:	a6 2b       	or	r26, r22
    16b0:	b7 2b       	or	r27, r23
    16b2:	80 93 2b 2e 	sts	0x2E2B, r24
    16b6:	90 93 2c 2e 	sts	0x2E2C, r25
    16ba:	a0 93 2d 2e 	sts	0x2E2D, r26
    16be:	b0 93 2e 2e 	sts	0x2E2E, r27
					X_pos |= (int)receiveArray[2];
    16c2:	20 91 78 29 	lds	r18, 0x2978
    16c6:	80 91 2b 2e 	lds	r24, 0x2E2B
    16ca:	90 91 2c 2e 	lds	r25, 0x2E2C
    16ce:	a0 91 2d 2e 	lds	r26, 0x2E2D
    16d2:	b0 91 2e 2e 	lds	r27, 0x2E2E
    16d6:	82 2b       	or	r24, r18
    16d8:	80 93 2b 2e 	sts	0x2E2B, r24
    16dc:	90 93 2c 2e 	sts	0x2E2C, r25
    16e0:	a0 93 2d 2e 	sts	0x2E2D, r26
    16e4:	b0 93 2e 2e 	sts	0x2E2E, r27
					X_pos = (X_pos * scale_factor_for_mm);
    16e8:	a0 91 08 2e 	lds	r26, 0x2E08
    16ec:	b0 91 09 2e 	lds	r27, 0x2E09
    16f0:	20 91 2b 2e 	lds	r18, 0x2E2B
    16f4:	30 91 2c 2e 	lds	r19, 0x2E2C
    16f8:	40 91 2d 2e 	lds	r20, 0x2E2D
    16fc:	50 91 2e 2e 	lds	r21, 0x2E2E
    1700:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    1704:	60 93 2b 2e 	sts	0x2E2B, r22
    1708:	70 93 2c 2e 	sts	0x2E2C, r23
    170c:	80 93 2d 2e 	sts	0x2E2D, r24
    1710:	90 93 2e 2e 	sts	0x2E2E, r25
					X_cilj = X_pos;
    1714:	80 91 2b 2e 	lds	r24, 0x2E2B
    1718:	90 91 2c 2e 	lds	r25, 0x2E2C
    171c:	a0 91 2d 2e 	lds	r26, 0x2E2D
    1720:	b0 91 2e 2e 	lds	r27, 0x2E2E
    1724:	80 93 b6 24 	sts	0x24B6, r24
    1728:	90 93 b7 24 	sts	0x24B7, r25
    172c:	a0 93 b8 24 	sts	0x24B8, r26
    1730:	b0 93 b9 24 	sts	0x24B9, r27
					X_cilj_stari = X_pos;
    1734:	80 91 2b 2e 	lds	r24, 0x2E2B
    1738:	90 91 2c 2e 	lds	r25, 0x2E2C
    173c:	a0 91 2d 2e 	lds	r26, 0x2E2D
    1740:	b0 91 2e 2e 	lds	r27, 0x2E2E
    1744:	80 93 39 2e 	sts	0x2E39, r24
    1748:	90 93 3a 2e 	sts	0x2E3A, r25
    174c:	a0 93 3b 2e 	sts	0x2E3B, r26
    1750:	b0 93 3c 2e 	sts	0x2E3C, r27
				}
				//Y_pos
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    1754:	80 91 79 29 	lds	r24, 0x2979
    1758:	8f 3f       	cpi	r24, 0xFF	; 255
    175a:	29 f4       	brne	.+10     	; 0x1766 <__vector_58+0xd44>
    175c:	80 91 7a 29 	lds	r24, 0x297A
    1760:	8f 3f       	cpi	r24, 0xFF	; 255
    1762:	09 f4       	brne	.+2      	; 0x1766 <__vector_58+0xd44>
    1764:	6d c0       	rjmp	.+218    	; 0x1840 <__vector_58+0xe1e>
				{
					Y_pos = 0;
    1766:	10 92 0a 2a 	sts	0x2A0A, r1
    176a:	10 92 0b 2a 	sts	0x2A0B, r1
    176e:	10 92 0c 2a 	sts	0x2A0C, r1
    1772:	10 92 0d 2a 	sts	0x2A0D, r1
					Y_pos |= ((int)receiveArray[3]) << 8;
    1776:	20 91 79 29 	lds	r18, 0x2979
    177a:	40 91 0a 2a 	lds	r20, 0x2A0A
    177e:	50 91 0b 2a 	lds	r21, 0x2A0B
    1782:	60 91 0c 2a 	lds	r22, 0x2A0C
    1786:	70 91 0d 2a 	lds	r23, 0x2A0D
    178a:	92 2f       	mov	r25, r18
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	aa 27       	eor	r26, r26
    1790:	97 fd       	sbrc	r25, 7
    1792:	a0 95       	com	r26
    1794:	ba 2f       	mov	r27, r26
    1796:	84 2b       	or	r24, r20
    1798:	95 2b       	or	r25, r21
    179a:	a6 2b       	or	r26, r22
    179c:	b7 2b       	or	r27, r23
    179e:	80 93 0a 2a 	sts	0x2A0A, r24
    17a2:	90 93 0b 2a 	sts	0x2A0B, r25
    17a6:	a0 93 0c 2a 	sts	0x2A0C, r26
    17aa:	b0 93 0d 2a 	sts	0x2A0D, r27
					Y_pos |= (int)receiveArray[4];
    17ae:	20 91 7a 29 	lds	r18, 0x297A
    17b2:	80 91 0a 2a 	lds	r24, 0x2A0A
    17b6:	90 91 0b 2a 	lds	r25, 0x2A0B
    17ba:	a0 91 0c 2a 	lds	r26, 0x2A0C
    17be:	b0 91 0d 2a 	lds	r27, 0x2A0D
    17c2:	82 2b       	or	r24, r18
    17c4:	80 93 0a 2a 	sts	0x2A0A, r24
    17c8:	90 93 0b 2a 	sts	0x2A0B, r25
    17cc:	a0 93 0c 2a 	sts	0x2A0C, r26
    17d0:	b0 93 0d 2a 	sts	0x2A0D, r27
					Y_pos = Y_pos * scale_factor_for_mm;
    17d4:	a0 91 08 2e 	lds	r26, 0x2E08
    17d8:	b0 91 09 2e 	lds	r27, 0x2E09
    17dc:	20 91 0a 2a 	lds	r18, 0x2A0A
    17e0:	30 91 0b 2a 	lds	r19, 0x2A0B
    17e4:	40 91 0c 2a 	lds	r20, 0x2A0C
    17e8:	50 91 0d 2a 	lds	r21, 0x2A0D
    17ec:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    17f0:	60 93 0a 2a 	sts	0x2A0A, r22
    17f4:	70 93 0b 2a 	sts	0x2A0B, r23
    17f8:	80 93 0c 2a 	sts	0x2A0C, r24
    17fc:	90 93 0d 2a 	sts	0x2A0D, r25
					Y_cilj = Y_pos;
    1800:	80 91 0a 2a 	lds	r24, 0x2A0A
    1804:	90 91 0b 2a 	lds	r25, 0x2A0B
    1808:	a0 91 0c 2a 	lds	r26, 0x2A0C
    180c:	b0 91 0d 2a 	lds	r27, 0x2A0D
    1810:	80 93 13 2e 	sts	0x2E13, r24
    1814:	90 93 14 2e 	sts	0x2E14, r25
    1818:	a0 93 15 2e 	sts	0x2E15, r26
    181c:	b0 93 16 2e 	sts	0x2E16, r27
					Y_cilj_stari = Y_pos;
    1820:	80 91 0a 2a 	lds	r24, 0x2A0A
    1824:	90 91 0b 2a 	lds	r25, 0x2A0B
    1828:	a0 91 0c 2a 	lds	r26, 0x2A0C
    182c:	b0 91 0d 2a 	lds	r27, 0x2A0D
    1830:	80 93 78 2e 	sts	0x2E78, r24
    1834:	90 93 79 2e 	sts	0x2E79, r25
    1838:	a0 93 7a 2e 	sts	0x2E7A, r26
    183c:	b0 93 7b 2e 	sts	0x2E7B, r27
				}
				
				//teta
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    1840:	80 91 7b 29 	lds	r24, 0x297B
    1844:	8f 3f       	cpi	r24, 0xFF	; 255
    1846:	29 f4       	brne	.+10     	; 0x1852 <__vector_58+0xe30>
    1848:	80 91 7c 29 	lds	r24, 0x297C
    184c:	8f 3f       	cpi	r24, 0xFF	; 255
    184e:	09 f4       	brne	.+2      	; 0x1852 <__vector_58+0xe30>
    1850:	67 c0       	rjmp	.+206    	; 0x1920 <__vector_58+0xefe>
				{
					teta = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    1852:	10 92 8b 32 	sts	0x328B, r1
    1856:	10 92 8c 32 	sts	0x328C, r1
    185a:	10 92 8d 32 	sts	0x328D, r1
    185e:	10 92 8e 32 	sts	0x328E, r1
					teta |= ((int)receiveArray[5]) << 8;
    1862:	20 91 7b 29 	lds	r18, 0x297B
    1866:	40 91 8b 32 	lds	r20, 0x328B
    186a:	50 91 8c 32 	lds	r21, 0x328C
    186e:	60 91 8d 32 	lds	r22, 0x328D
    1872:	70 91 8e 32 	lds	r23, 0x328E
    1876:	92 2f       	mov	r25, r18
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	aa 27       	eor	r26, r26
    187c:	97 fd       	sbrc	r25, 7
    187e:	a0 95       	com	r26
    1880:	ba 2f       	mov	r27, r26
    1882:	84 2b       	or	r24, r20
    1884:	95 2b       	or	r25, r21
    1886:	a6 2b       	or	r26, r22
    1888:	b7 2b       	or	r27, r23
    188a:	80 93 8b 32 	sts	0x328B, r24
    188e:	90 93 8c 32 	sts	0x328C, r25
    1892:	a0 93 8d 32 	sts	0x328D, r26
    1896:	b0 93 8e 32 	sts	0x328E, r27
					teta |= (int)receiveArray[6];
    189a:	20 91 7c 29 	lds	r18, 0x297C
    189e:	80 91 8b 32 	lds	r24, 0x328B
    18a2:	90 91 8c 32 	lds	r25, 0x328C
    18a6:	a0 91 8d 32 	lds	r26, 0x328D
    18aa:	b0 91 8e 32 	lds	r27, 0x328E
    18ae:	82 2b       	or	r24, r18
    18b0:	80 93 8b 32 	sts	0x328B, r24
    18b4:	90 93 8c 32 	sts	0x328C, r25
    18b8:	a0 93 8d 32 	sts	0x328D, r26
    18bc:	b0 93 8e 32 	sts	0x328E, r27
					teta = (teta * krug360) / 360;
    18c0:	20 91 8b 32 	lds	r18, 0x328B
    18c4:	30 91 8c 32 	lds	r19, 0x328C
    18c8:	40 91 8d 32 	lds	r20, 0x328D
    18cc:	50 91 8e 32 	lds	r21, 0x328E
    18d0:	60 91 7d 32 	lds	r22, 0x327D
    18d4:	70 91 7e 32 	lds	r23, 0x327E
    18d8:	80 91 7f 32 	lds	r24, 0x327F
    18dc:	90 91 80 32 	lds	r25, 0x3280
    18e0:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__mulsi3>
    18e4:	28 e6       	ldi	r18, 0x68	; 104
    18e6:	31 e0       	ldi	r19, 0x01	; 1
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    18f0:	20 93 8b 32 	sts	0x328B, r18
    18f4:	30 93 8c 32 	sts	0x328C, r19
    18f8:	40 93 8d 32 	sts	0x328D, r20
    18fc:	50 93 8e 32 	sts	0x328E, r21
					teta_cilj = teta;
    1900:	80 91 8b 32 	lds	r24, 0x328B
    1904:	90 91 8c 32 	lds	r25, 0x328C
    1908:	a0 91 8d 32 	lds	r26, 0x328D
    190c:	b0 91 8e 32 	lds	r27, 0x328E
    1910:	80 93 d4 24 	sts	0x24D4, r24
    1914:	90 93 d5 24 	sts	0x24D5, r25
    1918:	a0 93 d6 24 	sts	0x24D6, r26
    191c:	b0 93 d7 24 	sts	0x24D7, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1920:	80 91 76 29 	lds	r24, 0x2976
    1924:	80 93 e5 28 	sts	0x28E5, r24
					teta = (teta * krug360) / 360;
					teta_cilj = teta;
				}
				
				//slanje odgovora
				i = 0;
    1928:	00 e0       	ldi	r16, 0x00	; 0
    192a:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    192c:	f8 01       	movw	r30, r16
    192e:	eb 51       	subi	r30, 0x1B	; 27
    1930:	f7 4d       	sbci	r31, 0xD7	; 215
    1932:	60 81       	ld	r22, Z
    1934:	81 e2       	ldi	r24, 0x21	; 33
    1936:	93 e2       	ldi	r25, 0x23	; 35
    1938:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    193c:	88 23       	and	r24, r24
    193e:	11 f0       	breq	.+4      	; 0x1944 <__vector_58+0xf22>
					{
						i++;
    1940:	0f 5f       	subi	r16, 0xFF	; 255
    1942:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    1944:	10 16       	cp	r1, r16
    1946:	11 06       	cpc	r1, r17
    1948:	8c f7       	brge	.-30     	; 0x192c <__vector_58+0xf0a>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    194a:	10 92 63 2e 	sts	0x2E63, r1
			}
			RX_i_E0 = 0;	//ako ne valja CHC ponistava se komanda
    194e:	10 92 63 2e 	sts	0x2E63, r1
    1952:	3e c1       	rjmp	.+636    	; 0x1bd0 <__vector_58+0x11ae>
		}
	}
	//Total Stop - 8
	else if(receiveArray[0] == 8)					//provera funkcijskog bajta
    1954:	80 91 76 29 	lds	r24, 0x2976
    1958:	88 30       	cpi	r24, 0x08	; 8
    195a:	d9 f5       	brne	.+118    	; 0x19d2 <__vector_58+0xfb0>
	{
		if(RX_i_E0 >= 3)							//stigla je cela poruka
    195c:	80 91 63 2e 	lds	r24, 0x2E63
    1960:	83 30       	cpi	r24, 0x03	; 3
    1962:	08 f4       	brcc	.+2      	; 0x1966 <__vector_58+0xf44>
    1964:	35 c1       	rjmp	.+618    	; 0x1bd0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1966:	10 92 03 2e 	sts	0x2E03, r1
			{
				
				if(receiveArray[1] == 0x01)
    196a:	80 91 77 29 	lds	r24, 0x2977
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	39 f4       	brne	.+14     	; 0x1980 <__vector_58+0xf5e>
				{
					stop_PID_levi = 1;
    1972:	80 93 fa 2d 	sts	0x2DFA, r24
					PID_brzina_L = 0;
    1976:	10 92 83 2e 	sts	0x2E83, r1
    197a:	10 92 84 2e 	sts	0x2E84, r1
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <__vector_58+0xf62>
				}				
				else
					stop_PID_levi = 0;
    1980:	10 92 fa 2d 	sts	0x2DFA, r1
					
				if(receiveArray[2] == 0x01)
    1984:	80 91 78 29 	lds	r24, 0x2978
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	39 f4       	brne	.+14     	; 0x199a <__vector_58+0xf78>
				{
					stop_PID_desni = 1;
    198c:	80 93 fc 29 	sts	0x29FC, r24
					PID_brzina_R = 0;
    1990:	10 92 81 2e 	sts	0x2E81, r1
    1994:	10 92 82 2e 	sts	0x2E82, r1
    1998:	02 c0       	rjmp	.+4      	; 0x199e <__vector_58+0xf7c>
				}					
				else
					stop_PID_desni = 0;
    199a:	10 92 fc 29 	sts	0x29FC, r1
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    199e:	80 91 76 29 	lds	r24, 0x2976
    19a2:	80 93 e5 28 	sts	0x28E5, r24
				}					
				else
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
    19a6:	00 e0       	ldi	r16, 0x00	; 0
    19a8:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    19aa:	f8 01       	movw	r30, r16
    19ac:	eb 51       	subi	r30, 0x1B	; 27
    19ae:	f7 4d       	sbci	r31, 0xD7	; 215
    19b0:	60 81       	ld	r22, Z
    19b2:	81 e2       	ldi	r24, 0x21	; 33
    19b4:	93 e2       	ldi	r25, 0x23	; 35
    19b6:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    19ba:	88 23       	and	r24, r24
    19bc:	11 f0       	breq	.+4      	; 0x19c2 <__vector_58+0xfa0>
					{
						i++;
    19be:	0f 5f       	subi	r16, 0xFF	; 255
    19c0:	1f 4f       	sbci	r17, 0xFF	; 255
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    19c2:	10 16       	cp	r1, r16
    19c4:	11 06       	cpc	r1, r17
    19c6:	8c f7       	brge	.-30     	; 0x19aa <__vector_58+0xf88>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    19c8:	10 92 63 2e 	sts	0x2E63, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda
    19cc:	10 92 63 2e 	sts	0x2E63, r1
    19d0:	ff c0       	rjmp	.+510    	; 0x1bd0 <__vector_58+0x11ae>
		}
	}
	//citanje X koordinate
	else if(receiveArray[0] == 101)						//provera funkcijskog bajta >> 101-citanje X pozicije
    19d2:	80 91 76 29 	lds	r24, 0x2976
    19d6:	85 36       	cpi	r24, 0x65	; 101
    19d8:	09 f0       	breq	.+2      	; 0x19dc <__vector_58+0xfba>
    19da:	4b c0       	rjmp	.+150    	; 0x1a72 <__vector_58+0x1050>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
    19dc:	80 91 63 2e 	lds	r24, 0x2E63
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <__vector_58+0xfc4>
    19e4:	f5 c0       	rjmp	.+490    	; 0x1bd0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    19e6:	10 92 03 2e 	sts	0x2E03, r1
			
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    19ea:	80 91 76 29 	lds	r24, 0x2976
    19ee:	80 93 e5 28 	sts	0x28E5, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    19f2:	60 91 2b 2e 	lds	r22, 0x2E2B
    19f6:	70 91 2c 2e 	lds	r23, 0x2E2C
    19fa:	80 91 2d 2e 	lds	r24, 0x2E2D
    19fe:	90 91 2e 2e 	lds	r25, 0x2E2E
    1a02:	20 91 08 2e 	lds	r18, 0x2E08
    1a06:	30 91 09 2e 	lds	r19, 0x2E09
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1a12:	bb 27       	eor	r27, r27
    1a14:	57 fd       	sbrc	r21, 7
    1a16:	ba 95       	dec	r27
    1a18:	a5 2f       	mov	r26, r21
    1a1a:	94 2f       	mov	r25, r20
    1a1c:	83 2f       	mov	r24, r19
    1a1e:	80 93 e6 28 	sts	0x28E6, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    1a22:	60 91 2b 2e 	lds	r22, 0x2E2B
    1a26:	70 91 2c 2e 	lds	r23, 0x2E2C
    1a2a:	80 91 2d 2e 	lds	r24, 0x2E2D
    1a2e:	90 91 2e 2e 	lds	r25, 0x2E2E
    1a32:	20 91 08 2e 	lds	r18, 0x2E08
    1a36:	30 91 09 2e 	lds	r19, 0x2E09
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	50 e0       	ldi	r21, 0x00	; 0
    1a3e:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1a42:	20 93 e7 28 	sts	0x28E7, r18
				
				i = 0;
    1a46:	00 e0       	ldi	r16, 0x00	; 0
    1a48:	10 e0       	ldi	r17, 0x00	; 0
				while (i < 3) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	eb 51       	subi	r30, 0x1B	; 27
    1a4e:	f7 4d       	sbci	r31, 0xD7	; 215
    1a50:	60 81       	ld	r22, Z
    1a52:	81 e2       	ldi	r24, 0x21	; 33
    1a54:	93 e2       	ldi	r25, 0x23	; 35
    1a56:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1a5a:	88 23       	and	r24, r24
    1a5c:	11 f0       	breq	.+4      	; 0x1a62 <__vector_58+0x1040>
						i++;
    1a5e:	0f 5f       	subi	r16, 0xFF	; 255
    1a60:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
				
				i = 0;
				while (i < 3) 
    1a62:	03 30       	cpi	r16, 0x03	; 3
    1a64:	11 05       	cpc	r17, r1
    1a66:	8c f3       	brlt	.-30     	; 0x1a4a <__vector_58+0x1028>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
    1a68:	10 92 63 2e 	sts	0x2E63, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
    1a6c:	10 92 63 2e 	sts	0x2E63, r1
    1a70:	af c0       	rjmp	.+350    	; 0x1bd0 <__vector_58+0x11ae>
		}		
	}
	//citanje Y koordinate
	else if(receiveArray[0] == 102)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    1a72:	80 91 76 29 	lds	r24, 0x2976
    1a76:	86 36       	cpi	r24, 0x66	; 102
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <__vector_58+0x105a>
    1a7a:	4b c0       	rjmp	.+150    	; 0x1b12 <__vector_58+0x10f0>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
    1a7c:	80 91 63 2e 	lds	r24, 0x2E63
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <__vector_58+0x1064>
    1a84:	a5 c0       	rjmp	.+330    	; 0x1bd0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1a86:	10 92 03 2e 	sts	0x2E03, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    1a8a:	80 91 76 29 	lds	r24, 0x2976
    1a8e:	80 93 e5 28 	sts	0x28E5, r24
				sendArray[1] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    1a92:	60 91 0a 2a 	lds	r22, 0x2A0A
    1a96:	70 91 0b 2a 	lds	r23, 0x2A0B
    1a9a:	80 91 0c 2a 	lds	r24, 0x2A0C
    1a9e:	90 91 0d 2a 	lds	r25, 0x2A0D
    1aa2:	20 91 08 2e 	lds	r18, 0x2E08
    1aa6:	30 91 09 2e 	lds	r19, 0x2E09
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1ab2:	bb 27       	eor	r27, r27
    1ab4:	57 fd       	sbrc	r21, 7
    1ab6:	ba 95       	dec	r27
    1ab8:	a5 2f       	mov	r26, r21
    1aba:	94 2f       	mov	r25, r20
    1abc:	83 2f       	mov	r24, r19
    1abe:	80 93 e6 28 	sts	0x28E6, r24
				sendArray[2] = Y_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    1ac2:	60 91 0a 2a 	lds	r22, 0x2A0A
    1ac6:	70 91 0b 2a 	lds	r23, 0x2A0B
    1aca:	80 91 0c 2a 	lds	r24, 0x2A0C
    1ace:	90 91 0d 2a 	lds	r25, 0x2A0D
    1ad2:	20 91 08 2e 	lds	r18, 0x2E08
    1ad6:	30 91 09 2e 	lds	r19, 0x2E09
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	50 e0       	ldi	r21, 0x00	; 0
    1ade:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1ae2:	20 93 e7 28 	sts	0x28E7, r18
				
				i = 0;
    1ae6:	00 e0       	ldi	r16, 0x00	; 0
    1ae8:	10 e0       	ldi	r17, 0x00	; 0
				while (i < 3) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1aea:	f8 01       	movw	r30, r16
    1aec:	eb 51       	subi	r30, 0x1B	; 27
    1aee:	f7 4d       	sbci	r31, 0xD7	; 215
    1af0:	60 81       	ld	r22, Z
    1af2:	81 e2       	ldi	r24, 0x21	; 33
    1af4:	93 e2       	ldi	r25, 0x23	; 35
    1af6:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1afa:	88 23       	and	r24, r24
    1afc:	11 f0       	breq	.+4      	; 0x1b02 <__vector_58+0x10e0>
						i++;
    1afe:	0f 5f       	subi	r16, 0xFF	; 255
    1b00:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
				sendArray[1] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
				sendArray[2] = Y_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
				
				i = 0;
				while (i < 3) 
    1b02:	03 30       	cpi	r16, 0x03	; 3
    1b04:	11 05       	cpc	r17, r1
    1b06:	8c f3       	brlt	.-30     	; 0x1aea <__vector_58+0x10c8>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
    1b08:	10 92 63 2e 	sts	0x2E63, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
    1b0c:	10 92 63 2e 	sts	0x2E63, r1
    1b10:	5f c0       	rjmp	.+190    	; 0x1bd0 <__vector_58+0x11ae>
		}		
	}
	//citanje teta abs
	else if(receiveArray[0] == 103)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    1b12:	80 91 76 29 	lds	r24, 0x2976
    1b16:	87 36       	cpi	r24, 0x67	; 103
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <__vector_58+0x10fa>
    1b1a:	5a c0       	rjmp	.+180    	; 0x1bd0 <__vector_58+0x11ae>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
    1b1c:	80 91 63 2e 	lds	r24, 0x2E63
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <__vector_58+0x1104>
    1b24:	55 c0       	rjmp	.+170    	; 0x1bd0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1b26:	10 92 03 2e 	sts	0x2E03, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    1b2a:	80 91 76 29 	lds	r24, 0x2976
    1b2e:	80 93 e5 28 	sts	0x28E5, r24
				sendArray[1] = ((teta * 360) / krug360) >> 8;						//Teta HI
    1b32:	20 91 8b 32 	lds	r18, 0x328B
    1b36:	30 91 8c 32 	lds	r19, 0x328C
    1b3a:	40 91 8d 32 	lds	r20, 0x328D
    1b3e:	50 91 8e 32 	lds	r21, 0x328E
    1b42:	c0 90 7d 32 	lds	r12, 0x327D
    1b46:	d0 90 7e 32 	lds	r13, 0x327E
    1b4a:	e0 90 7f 32 	lds	r14, 0x327F
    1b4e:	f0 90 80 32 	lds	r15, 0x3280
    1b52:	a8 e6       	ldi	r26, 0x68	; 104
    1b54:	b1 e0       	ldi	r27, 0x01	; 1
    1b56:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    1b5a:	a7 01       	movw	r20, r14
    1b5c:	96 01       	movw	r18, r12
    1b5e:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1b62:	bb 27       	eor	r27, r27
    1b64:	57 fd       	sbrc	r21, 7
    1b66:	ba 95       	dec	r27
    1b68:	a5 2f       	mov	r26, r21
    1b6a:	94 2f       	mov	r25, r20
    1b6c:	83 2f       	mov	r24, r19
    1b6e:	80 93 e6 28 	sts	0x28E6, r24
				sendArray[2] = ((teta * 360) / krug360);							//Teta LOW
    1b72:	20 91 8b 32 	lds	r18, 0x328B
    1b76:	30 91 8c 32 	lds	r19, 0x328C
    1b7a:	40 91 8d 32 	lds	r20, 0x328D
    1b7e:	50 91 8e 32 	lds	r21, 0x328E
    1b82:	c0 90 7d 32 	lds	r12, 0x327D
    1b86:	d0 90 7e 32 	lds	r13, 0x327E
    1b8a:	e0 90 7f 32 	lds	r14, 0x327F
    1b8e:	f0 90 80 32 	lds	r15, 0x3280
    1b92:	a8 e6       	ldi	r26, 0x68	; 104
    1b94:	b1 e0       	ldi	r27, 0x01	; 1
    1b96:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    1b9a:	a7 01       	movw	r20, r14
    1b9c:	96 01       	movw	r18, r12
    1b9e:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1ba2:	20 93 e7 28 	sts	0x28E7, r18
				
				i = 0;
    1ba6:	00 e0       	ldi	r16, 0x00	; 0
    1ba8:	10 e0       	ldi	r17, 0x00	; 0
				while (i < 3) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1baa:	f8 01       	movw	r30, r16
    1bac:	eb 51       	subi	r30, 0x1B	; 27
    1bae:	f7 4d       	sbci	r31, 0xD7	; 215
    1bb0:	60 81       	ld	r22, Z
    1bb2:	81 e2       	ldi	r24, 0x21	; 33
    1bb4:	93 e2       	ldi	r25, 0x23	; 35
    1bb6:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1bba:	88 23       	and	r24, r24
    1bbc:	11 f0       	breq	.+4      	; 0x1bc2 <__vector_58+0x11a0>
						i++;
    1bbe:	0f 5f       	subi	r16, 0xFF	; 255
    1bc0:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
				sendArray[1] = ((teta * 360) / krug360) >> 8;						//Teta HI
				sendArray[2] = ((teta * 360) / krug360);							//Teta LOW
				
				i = 0;
				while (i < 3) 
    1bc2:	03 30       	cpi	r16, 0x03	; 3
    1bc4:	11 05       	cpc	r17, r1
    1bc6:	8c f3       	brlt	.-30     	; 0x1baa <__vector_58+0x1188>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
    1bc8:	10 92 63 2e 	sts	0x2E63, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
    1bcc:	10 92 63 2e 	sts	0x2E63, r1
		}		
	}
}
    1bd0:	28 96       	adiw	r28, 0x08	; 8
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	ff 91       	pop	r31
    1bdc:	ef 91       	pop	r30
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	7f 91       	pop	r23
    1be8:	6f 91       	pop	r22
    1bea:	5f 91       	pop	r21
    1bec:	4f 91       	pop	r20
    1bee:	3f 91       	pop	r19
    1bf0:	2f 91       	pop	r18
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	bf 90       	pop	r11
    1c00:	af 90       	pop	r10
    1c02:	9f 90       	pop	r9
    1c04:	8f 90       	pop	r8
    1c06:	7f 90       	pop	r7
    1c08:	6f 90       	pop	r6
    1c0a:	5f 90       	pop	r5
    1c0c:	4f 90       	pop	r4
    1c0e:	0f 90       	pop	r0
    1c10:	0b be       	out	0x3b, r0	; 59
    1c12:	0f 90       	pop	r0
    1c14:	0a be       	out	0x3a, r0	; 58
    1c16:	0f 90       	pop	r0
    1c18:	09 be       	out	0x39, r0	; 57
    1c1a:	0f 90       	pop	r0
    1c1c:	08 be       	out	0x38, r0	; 56
    1c1e:	0f 90       	pop	r0
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	0f 90       	pop	r0
    1c24:	1f 90       	pop	r1
    1c26:	18 95       	reti

00001c28 <__vector_61>:
//Serijska komunikacija USART_E1 - BT - bluetooth
ISR(USARTE1_RXC_vect)
{	
    1c28:	1f 92       	push	r1
    1c2a:	0f 92       	push	r0
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	0f 92       	push	r0
    1c30:	11 24       	eor	r1, r1
    1c32:	08 b6       	in	r0, 0x38	; 56
    1c34:	0f 92       	push	r0
    1c36:	18 be       	out	0x38, r1	; 56
    1c38:	09 b6       	in	r0, 0x39	; 57
    1c3a:	0f 92       	push	r0
    1c3c:	19 be       	out	0x39, r1	; 57
    1c3e:	0a b6       	in	r0, 0x3a	; 58
    1c40:	0f 92       	push	r0
    1c42:	1a be       	out	0x3a, r1	; 58
    1c44:	0b b6       	in	r0, 0x3b	; 59
    1c46:	0f 92       	push	r0
    1c48:	1b be       	out	0x3b, r1	; 59
    1c4a:	4f 92       	push	r4
    1c4c:	5f 92       	push	r5
    1c4e:	6f 92       	push	r6
    1c50:	7f 92       	push	r7
    1c52:	8f 92       	push	r8
    1c54:	9f 92       	push	r9
    1c56:	af 92       	push	r10
    1c58:	bf 92       	push	r11
    1c5a:	cf 92       	push	r12
    1c5c:	df 92       	push	r13
    1c5e:	ef 92       	push	r14
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	2f 93       	push	r18
    1c68:	3f 93       	push	r19
    1c6a:	4f 93       	push	r20
    1c6c:	5f 93       	push	r21
    1c6e:	6f 93       	push	r22
    1c70:	7f 93       	push	r23
    1c72:	8f 93       	push	r24
    1c74:	9f 93       	push	r25
    1c76:	af 93       	push	r26
    1c78:	bf 93       	push	r27
    1c7a:	ef 93       	push	r30
    1c7c:	ff 93       	push	r31
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	28 97       	sbiw	r28, 0x08	; 8
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	de bf       	out	0x3e, r29	; 62
	int i;
	USART_RXComplete(&USART_E1_data);
    1c8c:	83 e1       	ldi	r24, 0x13	; 19
    1c8e:	90 e2       	ldi	r25, 0x20	; 32
    1c90:	0e 94 12 35 	call	0x6a24	; 0x6a24 <USART_RXComplete>
	receiveArray[RX_i_E1] = USART_RXBuffer_GetByte(&USART_E1_data);
    1c94:	80 91 65 29 	lds	r24, 0x2965
    1c98:	08 2f       	mov	r16, r24
    1c9a:	10 e0       	ldi	r17, 0x00	; 0
    1c9c:	83 e1       	ldi	r24, 0x13	; 19
    1c9e:	90 e2       	ldi	r25, 0x20	; 32
    1ca0:	0e 94 04 35 	call	0x6a08	; 0x6a08 <USART_RXBuffer_GetByte>
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	ea 58       	subi	r30, 0x8A	; 138
    1ca8:	f6 4d       	sbci	r31, 0xD6	; 214
    1caa:	80 83       	st	Z, r24
	//USART_TXBuffer_PutByte(&USART_E1_data, receiveArray[RX_i_E1]);	//echo
	RX_i_E1++;
    1cac:	80 91 65 29 	lds	r24, 0x2965
    1cb0:	8f 5f       	subi	r24, 0xFF	; 255
    1cb2:	80 93 65 29 	sts	0x2965, r24
	
	//vremenska zastita
	if (RX_i_E1 >= 1)
    1cb6:	80 91 65 29 	lds	r24, 0x2965
    1cba:	88 23       	and	r24, r24
    1cbc:	19 f0       	breq	.+6      	; 0x1cc4 <__vector_61+0x9c>
 		proveri_vreme_primanja = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	80 93 03 2e 	sts	0x2E03, r24
	 
	//CITANJE PARAMETARA - 1
	if(receiveArray[0] == 1)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    1cc4:	80 91 76 29 	lds	r24, 0x2976
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	09 f0       	breq	.+2      	; 0x1cce <__vector_61+0xa6>
    1ccc:	00 c1       	rjmp	.+512    	; 0x1ece <__vector_61+0x2a6>
	{
		if(RX_i_E1 == 1)								//stigla je cela poruka (2)
    1cce:	80 91 65 29 	lds	r24, 0x2965
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	11 f0       	breq	.+4      	; 0x1cda <__vector_61+0xb2>
    1cd6:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1cda:	10 92 03 2e 	sts	0x2E03, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    1cde:	80 91 76 29 	lds	r24, 0x2976
    1ce2:	80 93 e5 28 	sts	0x28E5, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    1ce6:	60 91 2b 2e 	lds	r22, 0x2E2B
    1cea:	70 91 2c 2e 	lds	r23, 0x2E2C
    1cee:	80 91 2d 2e 	lds	r24, 0x2E2D
    1cf2:	90 91 2e 2e 	lds	r25, 0x2E2E
    1cf6:	20 91 08 2e 	lds	r18, 0x2E08
    1cfa:	30 91 09 2e 	lds	r19, 0x2E09
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1d06:	bb 27       	eor	r27, r27
    1d08:	57 fd       	sbrc	r21, 7
    1d0a:	ba 95       	dec	r27
    1d0c:	a5 2f       	mov	r26, r21
    1d0e:	94 2f       	mov	r25, r20
    1d10:	83 2f       	mov	r24, r19
    1d12:	80 93 e6 28 	sts	0x28E6, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    1d16:	60 91 2b 2e 	lds	r22, 0x2E2B
    1d1a:	70 91 2c 2e 	lds	r23, 0x2E2C
    1d1e:	80 91 2d 2e 	lds	r24, 0x2E2D
    1d22:	90 91 2e 2e 	lds	r25, 0x2E2E
    1d26:	20 91 08 2e 	lds	r18, 0x2E08
    1d2a:	30 91 09 2e 	lds	r19, 0x2E09
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1d36:	20 93 e7 28 	sts	0x28E7, r18
				sendArray[3] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna Y pozicija HI
    1d3a:	60 91 0a 2a 	lds	r22, 0x2A0A
    1d3e:	70 91 0b 2a 	lds	r23, 0x2A0B
    1d42:	80 91 0c 2a 	lds	r24, 0x2A0C
    1d46:	90 91 0d 2a 	lds	r25, 0x2A0D
    1d4a:	20 91 08 2e 	lds	r18, 0x2E08
    1d4e:	30 91 09 2e 	lds	r19, 0x2E09
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1d5a:	bb 27       	eor	r27, r27
    1d5c:	57 fd       	sbrc	r21, 7
    1d5e:	ba 95       	dec	r27
    1d60:	a5 2f       	mov	r26, r21
    1d62:	94 2f       	mov	r25, r20
    1d64:	83 2f       	mov	r24, r19
    1d66:	80 93 e8 28 	sts	0x28E8, r24
				sendArray[4] = Y_pos / scale_factor_for_mm;							//Absolutna Y pozicija LO
    1d6a:	60 91 0a 2a 	lds	r22, 0x2A0A
    1d6e:	70 91 0b 2a 	lds	r23, 0x2A0B
    1d72:	80 91 0c 2a 	lds	r24, 0x2A0C
    1d76:	90 91 0d 2a 	lds	r25, 0x2A0D
    1d7a:	20 91 08 2e 	lds	r18, 0x2E08
    1d7e:	30 91 09 2e 	lds	r19, 0x2E09
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1d8a:	20 93 e9 28 	sts	0x28E9, r18
				sendArray[5] = ((teta * 360) / krug360) >> 8;						//Teta HI
    1d8e:	20 91 8b 32 	lds	r18, 0x328B
    1d92:	30 91 8c 32 	lds	r19, 0x328C
    1d96:	40 91 8d 32 	lds	r20, 0x328D
    1d9a:	50 91 8e 32 	lds	r21, 0x328E
    1d9e:	c0 90 7d 32 	lds	r12, 0x327D
    1da2:	d0 90 7e 32 	lds	r13, 0x327E
    1da6:	e0 90 7f 32 	lds	r14, 0x327F
    1daa:	f0 90 80 32 	lds	r15, 0x3280
    1dae:	a8 e6       	ldi	r26, 0x68	; 104
    1db0:	b1 e0       	ldi	r27, 0x01	; 1
    1db2:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    1db6:	a7 01       	movw	r20, r14
    1db8:	96 01       	movw	r18, r12
    1dba:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1dbe:	bb 27       	eor	r27, r27
    1dc0:	57 fd       	sbrc	r21, 7
    1dc2:	ba 95       	dec	r27
    1dc4:	a5 2f       	mov	r26, r21
    1dc6:	94 2f       	mov	r25, r20
    1dc8:	83 2f       	mov	r24, r19
    1dca:	80 93 ea 28 	sts	0x28EA, r24
				sendArray[6] = ((teta * 360) / krug360);							//Teta LO	
    1dce:	20 91 8b 32 	lds	r18, 0x328B
    1dd2:	30 91 8c 32 	lds	r19, 0x328C
    1dd6:	40 91 8d 32 	lds	r20, 0x328D
    1dda:	50 91 8e 32 	lds	r21, 0x328E
    1dde:	c0 90 7d 32 	lds	r12, 0x327D
    1de2:	d0 90 7e 32 	lds	r13, 0x327E
    1de6:	e0 90 7f 32 	lds	r14, 0x327F
    1dea:	f0 90 80 32 	lds	r15, 0x3280
    1dee:	a8 e6       	ldi	r26, 0x68	; 104
    1df0:	b1 e0       	ldi	r27, 0x01	; 1
    1df2:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    1df6:	a7 01       	movw	r20, r14
    1df8:	96 01       	movw	r18, r12
    1dfa:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1dfe:	20 93 eb 28 	sts	0x28EB, r18
				sendArray[7] = (rastojanje_cilj_temp / scale_factor_for_mm) >> 8;	//Rastojanje od zadate tacke HI
    1e02:	60 91 1a 2e 	lds	r22, 0x2E1A
    1e06:	70 91 1b 2e 	lds	r23, 0x2E1B
    1e0a:	80 91 1c 2e 	lds	r24, 0x2E1C
    1e0e:	90 91 1d 2e 	lds	r25, 0x2E1D
    1e12:	20 91 08 2e 	lds	r18, 0x2E08
    1e16:	30 91 09 2e 	lds	r19, 0x2E09
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1e22:	bb 27       	eor	r27, r27
    1e24:	57 fd       	sbrc	r21, 7
    1e26:	ba 95       	dec	r27
    1e28:	a5 2f       	mov	r26, r21
    1e2a:	94 2f       	mov	r25, r20
    1e2c:	83 2f       	mov	r24, r19
    1e2e:	80 93 ec 28 	sts	0x28EC, r24
				sendArray[8] = (rastojanje_cilj_temp / scale_factor_for_mm);		//Rastojanje od zadate tacke LO
    1e32:	60 91 1a 2e 	lds	r22, 0x2E1A
    1e36:	70 91 1b 2e 	lds	r23, 0x2E1B
    1e3a:	80 91 1c 2e 	lds	r24, 0x2E1C
    1e3e:	90 91 1d 2e 	lds	r25, 0x2E1D
    1e42:	20 91 08 2e 	lds	r18, 0x2E08
    1e46:	30 91 09 2e 	lds	r19, 0x2E09
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	50 e0       	ldi	r21, 0x00	; 0
    1e4e:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    1e52:	20 93 ed 28 	sts	0x28ED, r18
				sendArray[9] = stigao_flag;											//stigao flag
    1e56:	80 91 06 20 	lds	r24, 0x2006
    1e5a:	80 93 ee 28 	sts	0x28EE, r24
				sendArray[10] = sample_L16;											//trenutna brzina leva
    1e5e:	80 91 a8 24 	lds	r24, 0x24A8
    1e62:	90 91 a9 24 	lds	r25, 0x24A9
    1e66:	80 93 ef 28 	sts	0x28EF, r24
				sendArray[11] = sample_R16;											//trenutna brzina desna
    1e6a:	80 91 c8 24 	lds	r24, 0x24C8
    1e6e:	90 91 c9 24 	lds	r25, 0x24C9
    1e72:	80 93 f0 28 	sts	0x28F0, r24
				sendArray[12] =	ADC_ResultCh_GetWord(&ADCA.CH0, offset);			//struja motora 1
    1e76:	60 91 62 2e 	lds	r22, 0x2E62
    1e7a:	80 e2       	ldi	r24, 0x20	; 32
    1e7c:	92 e0       	ldi	r25, 0x02	; 2
    1e7e:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    1e82:	80 93 f1 28 	sts	0x28F1, r24
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
    1e86:	60 91 62 2e 	lds	r22, 0x2E62
    1e8a:	88 e2       	ldi	r24, 0x28	; 40
    1e8c:	92 e0       	ldi	r25, 0x02	; 2
    1e8e:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    1e92:	80 93 f2 28 	sts	0x28F2, r24
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
    1e96:	e0 e2       	ldi	r30, 0x20	; 32
    1e98:	f6 e0       	ldi	r31, 0x06	; 6
    1e9a:	80 85       	ldd	r24, Z+8	; 0x08
    1e9c:	80 93 f3 28 	sts	0x28F3, r24
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
    1ea0:	00 e0       	ldi	r16, 0x00	; 0
    1ea2:	10 e0       	ldi	r17, 0x00	; 0
				while (i <= 14) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    1ea4:	f8 01       	movw	r30, r16
    1ea6:	eb 51       	subi	r30, 0x1B	; 27
    1ea8:	f7 4d       	sbci	r31, 0xD7	; 215
    1eaa:	60 81       	ld	r22, Z
    1eac:	83 e1       	ldi	r24, 0x13	; 19
    1eae:	90 e2       	ldi	r25, 0x20	; 32
    1eb0:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1eb4:	88 23       	and	r24, r24
    1eb6:	11 f0       	breq	.+4      	; 0x1ebc <__vector_61+0x294>
						i++;
    1eb8:	0f 5f       	subi	r16, 0xFF	; 255
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
				while (i <= 14) 
    1ebc:	0f 30       	cpi	r16, 0x0F	; 15
    1ebe:	11 05       	cpc	r17, r1
    1ec0:	8c f3       	brlt	.-30     	; 0x1ea4 <__vector_61+0x27c>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E1 = 0;
    1ec2:	10 92 65 29 	sts	0x2965, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda				
    1ec6:	10 92 65 29 	sts	0x2965, r1
    1eca:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__vector_61+0x193a>
		}		
	}
	//ZADAVANJE X,Y KOORDINATA - 2
	else if(receiveArray[0] == 2)					//provera funkcijskog bajta >> 2-upis x,y koordinate
    1ece:	80 91 76 29 	lds	r24, 0x2976
    1ed2:	82 30       	cpi	r24, 0x02	; 2
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <__vector_61+0x2b0>
    1ed6:	c1 c0       	rjmp	.+386    	; 0x205a <__vector_61+0x432>
	{
		if(RX_i_E1 >= 5)							//stigla je cela poruka	(5 bajtova)
    1ed8:	80 91 65 29 	lds	r24, 0x2965
    1edc:	85 30       	cpi	r24, 0x05	; 5
    1ede:	10 f4       	brcc	.+4      	; 0x1ee4 <__vector_61+0x2bc>
    1ee0:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1ee4:	10 92 03 2e 	sts	0x2E03, r1
			//ENABLE
			stop_PID_desni = 0;
    1ee8:	10 92 fc 29 	sts	0x29FC, r1
			stop_PID_levi = 0;
    1eec:	10 92 fa 2d 	sts	0x2DFA, r1
			set_direct_out = 0;
    1ef0:	10 92 89 32 	sts	0x3289, r1
			
			X_cilj = 0;
    1ef4:	10 92 b6 24 	sts	0x24B6, r1
    1ef8:	10 92 b7 24 	sts	0x24B7, r1
    1efc:	10 92 b8 24 	sts	0x24B8, r1
    1f00:	10 92 b9 24 	sts	0x24B9, r1
			X_cilj |= (int)receiveArray[1] << 8;
    1f04:	20 91 77 29 	lds	r18, 0x2977
    1f08:	40 91 b6 24 	lds	r20, 0x24B6
    1f0c:	50 91 b7 24 	lds	r21, 0x24B7
    1f10:	60 91 b8 24 	lds	r22, 0x24B8
    1f14:	70 91 b9 24 	lds	r23, 0x24B9
    1f18:	92 2f       	mov	r25, r18
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	aa 27       	eor	r26, r26
    1f1e:	97 fd       	sbrc	r25, 7
    1f20:	a0 95       	com	r26
    1f22:	ba 2f       	mov	r27, r26
    1f24:	84 2b       	or	r24, r20
    1f26:	95 2b       	or	r25, r21
    1f28:	a6 2b       	or	r26, r22
    1f2a:	b7 2b       	or	r27, r23
    1f2c:	80 93 b6 24 	sts	0x24B6, r24
    1f30:	90 93 b7 24 	sts	0x24B7, r25
    1f34:	a0 93 b8 24 	sts	0x24B8, r26
    1f38:	b0 93 b9 24 	sts	0x24B9, r27
			X_cilj |= (int)receiveArray[2];
    1f3c:	20 91 78 29 	lds	r18, 0x2978
    1f40:	80 91 b6 24 	lds	r24, 0x24B6
    1f44:	90 91 b7 24 	lds	r25, 0x24B7
    1f48:	a0 91 b8 24 	lds	r26, 0x24B8
    1f4c:	b0 91 b9 24 	lds	r27, 0x24B9
    1f50:	82 2b       	or	r24, r18
    1f52:	80 93 b6 24 	sts	0x24B6, r24
    1f56:	90 93 b7 24 	sts	0x24B7, r25
    1f5a:	a0 93 b8 24 	sts	0x24B8, r26
    1f5e:	b0 93 b9 24 	sts	0x24B9, r27
			X_cilj = (X_cilj * scale_factor_for_mm);
    1f62:	a0 91 08 2e 	lds	r26, 0x2E08
    1f66:	b0 91 09 2e 	lds	r27, 0x2E09
    1f6a:	20 91 b6 24 	lds	r18, 0x24B6
    1f6e:	30 91 b7 24 	lds	r19, 0x24B7
    1f72:	40 91 b8 24 	lds	r20, 0x24B8
    1f76:	50 91 b9 24 	lds	r21, 0x24B9
    1f7a:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    1f7e:	60 93 b6 24 	sts	0x24B6, r22
    1f82:	70 93 b7 24 	sts	0x24B7, r23
    1f86:	80 93 b8 24 	sts	0x24B8, r24
    1f8a:	90 93 b9 24 	sts	0x24B9, r25
			//Y_cilj
			Y_cilj = 0;
    1f8e:	10 92 13 2e 	sts	0x2E13, r1
    1f92:	10 92 14 2e 	sts	0x2E14, r1
    1f96:	10 92 15 2e 	sts	0x2E15, r1
    1f9a:	10 92 16 2e 	sts	0x2E16, r1
			Y_cilj |= (int)receiveArray[3] << 8;
    1f9e:	20 91 79 29 	lds	r18, 0x2979
    1fa2:	40 91 13 2e 	lds	r20, 0x2E13
    1fa6:	50 91 14 2e 	lds	r21, 0x2E14
    1faa:	60 91 15 2e 	lds	r22, 0x2E15
    1fae:	70 91 16 2e 	lds	r23, 0x2E16
    1fb2:	92 2f       	mov	r25, r18
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	aa 27       	eor	r26, r26
    1fb8:	97 fd       	sbrc	r25, 7
    1fba:	a0 95       	com	r26
    1fbc:	ba 2f       	mov	r27, r26
    1fbe:	84 2b       	or	r24, r20
    1fc0:	95 2b       	or	r25, r21
    1fc2:	a6 2b       	or	r26, r22
    1fc4:	b7 2b       	or	r27, r23
    1fc6:	80 93 13 2e 	sts	0x2E13, r24
    1fca:	90 93 14 2e 	sts	0x2E14, r25
    1fce:	a0 93 15 2e 	sts	0x2E15, r26
    1fd2:	b0 93 16 2e 	sts	0x2E16, r27
			Y_cilj |= (int)receiveArray[4];
    1fd6:	20 91 7a 29 	lds	r18, 0x297A
    1fda:	80 91 13 2e 	lds	r24, 0x2E13
    1fde:	90 91 14 2e 	lds	r25, 0x2E14
    1fe2:	a0 91 15 2e 	lds	r26, 0x2E15
    1fe6:	b0 91 16 2e 	lds	r27, 0x2E16
    1fea:	82 2b       	or	r24, r18
    1fec:	80 93 13 2e 	sts	0x2E13, r24
    1ff0:	90 93 14 2e 	sts	0x2E14, r25
    1ff4:	a0 93 15 2e 	sts	0x2E15, r26
    1ff8:	b0 93 16 2e 	sts	0x2E16, r27
			Y_cilj = Y_cilj * scale_factor_for_mm;
    1ffc:	a0 91 08 2e 	lds	r26, 0x2E08
    2000:	b0 91 09 2e 	lds	r27, 0x2E09
    2004:	20 91 13 2e 	lds	r18, 0x2E13
    2008:	30 91 14 2e 	lds	r19, 0x2E14
    200c:	40 91 15 2e 	lds	r20, 0x2E15
    2010:	50 91 16 2e 	lds	r21, 0x2E16
    2014:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    2018:	60 93 13 2e 	sts	0x2E13, r22
    201c:	70 93 14 2e 	sts	0x2E14, r23
    2020:	80 93 15 2e 	sts	0x2E15, r24
    2024:	90 93 16 2e 	sts	0x2E16, r25
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
    2028:	80 91 76 29 	lds	r24, 0x2976
    202c:	80 93 e5 28 	sts	0x28E5, r24
			i = 0;
    2030:	00 e0       	ldi	r16, 0x00	; 0
    2032:	10 e0       	ldi	r17, 0x00	; 0
			while (i < 1)
			{
				bool byteToBuffer;
				byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2034:	f8 01       	movw	r30, r16
    2036:	eb 51       	subi	r30, 0x1B	; 27
    2038:	f7 4d       	sbci	r31, 0xD7	; 215
    203a:	60 81       	ld	r22, Z
    203c:	83 e1       	ldi	r24, 0x13	; 19
    203e:	90 e2       	ldi	r25, 0x20	; 32
    2040:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
				if(byteToBuffer)
    2044:	88 23       	and	r24, r24
    2046:	11 f0       	breq	.+4      	; 0x204c <__vector_61+0x424>
				{
					i++;
    2048:	0f 5f       	subi	r16, 0xFF	; 255
    204a:	1f 4f       	sbci	r17, 0xFF	; 255
			Y_cilj = Y_cilj * scale_factor_for_mm;
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
			i = 0;
			while (i < 1)
    204c:	10 16       	cp	r1, r16
    204e:	11 06       	cpc	r1, r17
    2050:	8c f7       	brge	.-30     	; 0x2034 <__vector_61+0x40c>
				if(byteToBuffer)
				{
					i++;
				}
			}
			RX_i_E1 = 0;
    2052:	10 92 65 29 	sts	0x2965, r1
    2056:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__vector_61+0x193a>
		}
	}	
	//ZADAVANJE X,Y KOORDINATA I PARAMETRE KRETANJA - 3
	else if(receiveArray[0] == 3)					//provera funkcijskog bajta >> 3 - X,Y koordinate sa svim parametrima kretanja
    205a:	80 91 76 29 	lds	r24, 0x2976
    205e:	83 30       	cpi	r24, 0x03	; 3
    2060:	09 f0       	breq	.+2      	; 0x2064 <__vector_61+0x43c>
    2062:	e5 c1       	rjmp	.+970    	; 0x242e <__vector_61+0x806>
	{
		if(RX_i_E1 >= 11)							//stigla je cela poruka	(11)
    2064:	80 91 65 29 	lds	r24, 0x2965
    2068:	8b 30       	cpi	r24, 0x0B	; 11
    206a:	10 f4       	brcc	.+4      	; 0x2070 <__vector_61+0x448>
    206c:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2070:	10 92 03 2e 	sts	0x2E03, r1
			{
				//x_cilj
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2074:	80 91 77 29 	lds	r24, 0x2977
    2078:	8f 3f       	cpi	r24, 0xFF	; 255
    207a:	29 f4       	brne	.+10     	; 0x2086 <__vector_61+0x45e>
    207c:	80 91 78 29 	lds	r24, 0x2978
    2080:	8f 3f       	cpi	r24, 0xFF	; 255
    2082:	09 f4       	brne	.+2      	; 0x2086 <__vector_61+0x45e>
    2084:	53 c0       	rjmp	.+166    	; 0x212c <__vector_61+0x504>
				{
					//ENABLE
					stop_PID_desni = 0;
    2086:	10 92 fc 29 	sts	0x29FC, r1
					stop_PID_levi = 0;
    208a:	10 92 fa 2d 	sts	0x2DFA, r1
					set_direct_out = 0;
    208e:	10 92 89 32 	sts	0x3289, r1
					
					X_cilj = 0;
    2092:	10 92 b6 24 	sts	0x24B6, r1
    2096:	10 92 b7 24 	sts	0x24B7, r1
    209a:	10 92 b8 24 	sts	0x24B8, r1
    209e:	10 92 b9 24 	sts	0x24B9, r1
					X_cilj |= (int)receiveArray[1] << 8;
    20a2:	20 91 77 29 	lds	r18, 0x2977
    20a6:	40 91 b6 24 	lds	r20, 0x24B6
    20aa:	50 91 b7 24 	lds	r21, 0x24B7
    20ae:	60 91 b8 24 	lds	r22, 0x24B8
    20b2:	70 91 b9 24 	lds	r23, 0x24B9
    20b6:	92 2f       	mov	r25, r18
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	aa 27       	eor	r26, r26
    20bc:	97 fd       	sbrc	r25, 7
    20be:	a0 95       	com	r26
    20c0:	ba 2f       	mov	r27, r26
    20c2:	84 2b       	or	r24, r20
    20c4:	95 2b       	or	r25, r21
    20c6:	a6 2b       	or	r26, r22
    20c8:	b7 2b       	or	r27, r23
    20ca:	80 93 b6 24 	sts	0x24B6, r24
    20ce:	90 93 b7 24 	sts	0x24B7, r25
    20d2:	a0 93 b8 24 	sts	0x24B8, r26
    20d6:	b0 93 b9 24 	sts	0x24B9, r27
					X_cilj |= (int)receiveArray[2];
    20da:	20 91 78 29 	lds	r18, 0x2978
    20de:	80 91 b6 24 	lds	r24, 0x24B6
    20e2:	90 91 b7 24 	lds	r25, 0x24B7
    20e6:	a0 91 b8 24 	lds	r26, 0x24B8
    20ea:	b0 91 b9 24 	lds	r27, 0x24B9
    20ee:	82 2b       	or	r24, r18
    20f0:	80 93 b6 24 	sts	0x24B6, r24
    20f4:	90 93 b7 24 	sts	0x24B7, r25
    20f8:	a0 93 b8 24 	sts	0x24B8, r26
    20fc:	b0 93 b9 24 	sts	0x24B9, r27
					X_cilj = (X_cilj * scale_factor_for_mm);	
    2100:	a0 91 08 2e 	lds	r26, 0x2E08
    2104:	b0 91 09 2e 	lds	r27, 0x2E09
    2108:	20 91 b6 24 	lds	r18, 0x24B6
    210c:	30 91 b7 24 	lds	r19, 0x24B7
    2110:	40 91 b8 24 	lds	r20, 0x24B8
    2114:	50 91 b9 24 	lds	r21, 0x24B9
    2118:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    211c:	60 93 b6 24 	sts	0x24B6, r22
    2120:	70 93 b7 24 	sts	0x24B7, r23
    2124:	80 93 b8 24 	sts	0x24B8, r24
    2128:	90 93 b9 24 	sts	0x24B9, r25
				}	
				//Y_cilj
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    212c:	80 91 79 29 	lds	r24, 0x2979
    2130:	8f 3f       	cpi	r24, 0xFF	; 255
    2132:	29 f4       	brne	.+10     	; 0x213e <__vector_61+0x516>
    2134:	80 91 7a 29 	lds	r24, 0x297A
    2138:	8f 3f       	cpi	r24, 0xFF	; 255
    213a:	09 f4       	brne	.+2      	; 0x213e <__vector_61+0x516>
    213c:	53 c0       	rjmp	.+166    	; 0x21e4 <__vector_61+0x5bc>
				{		
					stop_PID_desni = 0;
    213e:	10 92 fc 29 	sts	0x29FC, r1
					stop_PID_levi = 0;	
    2142:	10 92 fa 2d 	sts	0x2DFA, r1
					set_direct_out = 0;
    2146:	10 92 89 32 	sts	0x3289, r1
					Y_cilj = 0;
    214a:	10 92 13 2e 	sts	0x2E13, r1
    214e:	10 92 14 2e 	sts	0x2E14, r1
    2152:	10 92 15 2e 	sts	0x2E15, r1
    2156:	10 92 16 2e 	sts	0x2E16, r1
					Y_cilj |= (int)receiveArray[3] << 8;
    215a:	20 91 79 29 	lds	r18, 0x2979
    215e:	40 91 13 2e 	lds	r20, 0x2E13
    2162:	50 91 14 2e 	lds	r21, 0x2E14
    2166:	60 91 15 2e 	lds	r22, 0x2E15
    216a:	70 91 16 2e 	lds	r23, 0x2E16
    216e:	92 2f       	mov	r25, r18
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	aa 27       	eor	r26, r26
    2174:	97 fd       	sbrc	r25, 7
    2176:	a0 95       	com	r26
    2178:	ba 2f       	mov	r27, r26
    217a:	84 2b       	or	r24, r20
    217c:	95 2b       	or	r25, r21
    217e:	a6 2b       	or	r26, r22
    2180:	b7 2b       	or	r27, r23
    2182:	80 93 13 2e 	sts	0x2E13, r24
    2186:	90 93 14 2e 	sts	0x2E14, r25
    218a:	a0 93 15 2e 	sts	0x2E15, r26
    218e:	b0 93 16 2e 	sts	0x2E16, r27
					Y_cilj |= (int)receiveArray[4];
    2192:	20 91 7a 29 	lds	r18, 0x297A
    2196:	80 91 13 2e 	lds	r24, 0x2E13
    219a:	90 91 14 2e 	lds	r25, 0x2E14
    219e:	a0 91 15 2e 	lds	r26, 0x2E15
    21a2:	b0 91 16 2e 	lds	r27, 0x2E16
    21a6:	82 2b       	or	r24, r18
    21a8:	80 93 13 2e 	sts	0x2E13, r24
    21ac:	90 93 14 2e 	sts	0x2E14, r25
    21b0:	a0 93 15 2e 	sts	0x2E15, r26
    21b4:	b0 93 16 2e 	sts	0x2E16, r27
					Y_cilj = Y_cilj * scale_factor_for_mm;
    21b8:	a0 91 08 2e 	lds	r26, 0x2E08
    21bc:	b0 91 09 2e 	lds	r27, 0x2E09
    21c0:	20 91 13 2e 	lds	r18, 0x2E13
    21c4:	30 91 14 2e 	lds	r19, 0x2E14
    21c8:	40 91 15 2e 	lds	r20, 0x2E15
    21cc:	50 91 16 2e 	lds	r21, 0x2E16
    21d0:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    21d4:	60 93 13 2e 	sts	0x2E13, r22
    21d8:	70 93 14 2e 	sts	0x2E14, r23
    21dc:	80 93 15 2e 	sts	0x2E15, r24
    21e0:	90 93 16 2e 	sts	0x2E16, r25
				}	
				
				//teta_cilj_final_absolute
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    21e4:	80 91 7b 29 	lds	r24, 0x297B
    21e8:	8f 3f       	cpi	r24, 0xFF	; 255
    21ea:	29 f4       	brne	.+10     	; 0x21f6 <__vector_61+0x5ce>
    21ec:	80 91 7c 29 	lds	r24, 0x297C
    21f0:	8f 3f       	cpi	r24, 0xFF	; 255
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <__vector_61+0x5ce>
    21f4:	58 c0       	rjmp	.+176    	; 0x22a6 <__vector_61+0x67e>
				{
					teta_cilj_final = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    21f6:	10 92 00 20 	sts	0x2000, r1
    21fa:	10 92 01 20 	sts	0x2001, r1
    21fe:	10 92 02 20 	sts	0x2002, r1
    2202:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= (int)receiveArray[5] << 8;
    2206:	20 91 7b 29 	lds	r18, 0x297B
    220a:	40 91 00 20 	lds	r20, 0x2000
    220e:	50 91 01 20 	lds	r21, 0x2001
    2212:	60 91 02 20 	lds	r22, 0x2002
    2216:	70 91 03 20 	lds	r23, 0x2003
    221a:	92 2f       	mov	r25, r18
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	aa 27       	eor	r26, r26
    2220:	97 fd       	sbrc	r25, 7
    2222:	a0 95       	com	r26
    2224:	ba 2f       	mov	r27, r26
    2226:	84 2b       	or	r24, r20
    2228:	95 2b       	or	r25, r21
    222a:	a6 2b       	or	r26, r22
    222c:	b7 2b       	or	r27, r23
    222e:	80 93 00 20 	sts	0x2000, r24
    2232:	90 93 01 20 	sts	0x2001, r25
    2236:	a0 93 02 20 	sts	0x2002, r26
    223a:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[6];
    223e:	20 91 7c 29 	lds	r18, 0x297C
    2242:	80 91 00 20 	lds	r24, 0x2000
    2246:	90 91 01 20 	lds	r25, 0x2001
    224a:	a0 91 02 20 	lds	r26, 0x2002
    224e:	b0 91 03 20 	lds	r27, 0x2003
    2252:	82 2b       	or	r24, r18
    2254:	80 93 00 20 	sts	0x2000, r24
    2258:	90 93 01 20 	sts	0x2001, r25
    225c:	a0 93 02 20 	sts	0x2002, r26
    2260:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = (teta_cilj_final * krug360) / 360;
    2264:	20 91 00 20 	lds	r18, 0x2000
    2268:	30 91 01 20 	lds	r19, 0x2001
    226c:	40 91 02 20 	lds	r20, 0x2002
    2270:	50 91 03 20 	lds	r21, 0x2003
    2274:	60 91 7d 32 	lds	r22, 0x327D
    2278:	70 91 7e 32 	lds	r23, 0x327E
    227c:	80 91 7f 32 	lds	r24, 0x327F
    2280:	90 91 80 32 	lds	r25, 0x3280
    2284:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__mulsi3>
    2288:	28 e6       	ldi	r18, 0x68	; 104
    228a:	31 e0       	ldi	r19, 0x01	; 1
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    2294:	20 93 00 20 	sts	0x2000, r18
    2298:	30 93 01 20 	sts	0x2001, r19
    229c:	40 93 02 20 	sts	0x2002, r20
    22a0:	50 93 03 20 	sts	0x2003, r21
    22a4:	78 c0       	rjmp	.+240    	; 0x2396 <__vector_61+0x76e>
				}	
				//teta_cilj_final_relative
				else if(!(receiveArray[7] == 0xFF && receiveArray[8] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    22a6:	80 91 7d 29 	lds	r24, 0x297D
    22aa:	8f 3f       	cpi	r24, 0xFF	; 255
    22ac:	29 f4       	brne	.+10     	; 0x22b8 <__vector_61+0x690>
    22ae:	80 91 7e 29 	lds	r24, 0x297E
    22b2:	8f 3f       	cpi	r24, 0xFF	; 255
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <__vector_61+0x690>
    22b6:	64 c0       	rjmp	.+200    	; 0x2380 <__vector_61+0x758>
				{
					teta_cilj_final = 0;
    22b8:	10 92 00 20 	sts	0x2000, r1
    22bc:	10 92 01 20 	sts	0x2001, r1
    22c0:	10 92 02 20 	sts	0x2002, r1
    22c4:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= (int)receiveArray[7] << 8;
    22c8:	20 91 7d 29 	lds	r18, 0x297D
    22cc:	40 91 00 20 	lds	r20, 0x2000
    22d0:	50 91 01 20 	lds	r21, 0x2001
    22d4:	60 91 02 20 	lds	r22, 0x2002
    22d8:	70 91 03 20 	lds	r23, 0x2003
    22dc:	92 2f       	mov	r25, r18
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	aa 27       	eor	r26, r26
    22e2:	97 fd       	sbrc	r25, 7
    22e4:	a0 95       	com	r26
    22e6:	ba 2f       	mov	r27, r26
    22e8:	84 2b       	or	r24, r20
    22ea:	95 2b       	or	r25, r21
    22ec:	a6 2b       	or	r26, r22
    22ee:	b7 2b       	or	r27, r23
    22f0:	80 93 00 20 	sts	0x2000, r24
    22f4:	90 93 01 20 	sts	0x2001, r25
    22f8:	a0 93 02 20 	sts	0x2002, r26
    22fc:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[8];
    2300:	20 91 7e 29 	lds	r18, 0x297E
    2304:	80 91 00 20 	lds	r24, 0x2000
    2308:	90 91 01 20 	lds	r25, 0x2001
    230c:	a0 91 02 20 	lds	r26, 0x2002
    2310:	b0 91 03 20 	lds	r27, 0x2003
    2314:	82 2b       	or	r24, r18
    2316:	80 93 00 20 	sts	0x2000, r24
    231a:	90 93 01 20 	sts	0x2001, r25
    231e:	a0 93 02 20 	sts	0x2002, r26
    2322:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = teta + (teta_cilj_final * krug360) / 360;
    2326:	20 91 00 20 	lds	r18, 0x2000
    232a:	30 91 01 20 	lds	r19, 0x2001
    232e:	40 91 02 20 	lds	r20, 0x2002
    2332:	50 91 03 20 	lds	r21, 0x2003
    2336:	60 91 7d 32 	lds	r22, 0x327D
    233a:	70 91 7e 32 	lds	r23, 0x327E
    233e:	80 91 7f 32 	lds	r24, 0x327F
    2342:	90 91 80 32 	lds	r25, 0x3280
    2346:	c0 90 8b 32 	lds	r12, 0x328B
    234a:	d0 90 8c 32 	lds	r13, 0x328C
    234e:	e0 90 8d 32 	lds	r14, 0x328D
    2352:	f0 90 8e 32 	lds	r15, 0x328E
    2356:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__mulsi3>
    235a:	28 e6       	ldi	r18, 0x68	; 104
    235c:	31 e0       	ldi	r19, 0x01	; 1
    235e:	40 e0       	ldi	r20, 0x00	; 0
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    2366:	c2 0e       	add	r12, r18
    2368:	d3 1e       	adc	r13, r19
    236a:	e4 1e       	adc	r14, r20
    236c:	f5 1e       	adc	r15, r21
    236e:	c0 92 00 20 	sts	0x2000, r12
    2372:	d0 92 01 20 	sts	0x2001, r13
    2376:	e0 92 02 20 	sts	0x2002, r14
    237a:	f0 92 03 20 	sts	0x2003, r15
    237e:	0b c0       	rjmp	.+22     	; 0x2396 <__vector_61+0x76e>
				}
				else
					teta_cilj_final = 0xFFFFFFFF;				
    2380:	8f ef       	ldi	r24, 0xFF	; 255
    2382:	9f ef       	ldi	r25, 0xFF	; 255
    2384:	dc 01       	movw	r26, r24
    2386:	80 93 00 20 	sts	0x2000, r24
    238a:	90 93 01 20 	sts	0x2001, r25
    238e:	a0 93 02 20 	sts	0x2002, r26
    2392:	b0 93 03 20 	sts	0x2003, r27
				//bzina
				if(receiveArray[9] != 0xFF)	// ako zadajemo 0xFF ne menja se brzina
    2396:	80 91 7f 29 	lds	r24, 0x297F
    239a:	8f 3f       	cpi	r24, 0xFF	; 255
    239c:	c9 f0       	breq	.+50     	; 0x23d0 <__vector_61+0x7a8>
				{
					zeljena_pravolinijska_brzina = receiveArray[9] * 3;	//podesiti faktor!
    239e:	80 91 7f 29 	lds	r24, 0x297F
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9c 01       	movw	r18, r24
    23a6:	22 0f       	add	r18, r18
    23a8:	33 1f       	adc	r19, r19
    23aa:	82 0f       	add	r24, r18
    23ac:	93 1f       	adc	r25, r19
    23ae:	80 93 87 32 	sts	0x3287, r24
    23b2:	90 93 88 32 	sts	0x3288, r25
					zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2;
    23b6:	80 91 87 32 	lds	r24, 0x3287
    23ba:	90 91 88 32 	lds	r25, 0x3288
    23be:	99 23       	and	r25, r25
    23c0:	0c f4       	brge	.+2      	; 0x23c4 <__vector_61+0x79c>
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	95 95       	asr	r25
    23c6:	87 95       	ror	r24
    23c8:	80 93 69 2e 	sts	0x2E69, r24
    23cc:	90 93 6a 2e 	sts	0x2E6A, r25
				}				
				//smer
				if(receiveArray[10] != 0xFF)	// ako zadajemo 0xFF ne menja se smer
    23d0:	80 91 80 29 	lds	r24, 0x2980
    23d4:	8f 3f       	cpi	r24, 0xFF	; 255
    23d6:	21 f0       	breq	.+8      	; 0x23e0 <__vector_61+0x7b8>
					smer_zadati = receiveArray[10];	
    23d8:	80 91 80 29 	lds	r24, 0x2980
    23dc:	80 93 66 29 	sts	0x2966, r24
				
				//pokretanje snimanja u nizove
				sample_counter_niz_1 = 0;
    23e0:	10 92 60 2e 	sts	0x2E60, r1
				niz_counter_niz_1 = 0;	
    23e4:	10 92 61 2e 	sts	0x2E61, r1
				sample_counter_niz_2 = 0;
    23e8:	10 92 01 2e 	sts	0x2E01, r1
				niz_counter_niz_2 = 0;
    23ec:	10 92 02 2e 	sts	0x2E02, r1
				sample_counter_niz_3 = 0;
    23f0:	10 92 67 29 	sts	0x2967, r1
				niz_counter_niz_3 = 0;		
    23f4:	10 92 ce 24 	sts	0x24CE, r1
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
    23f8:	80 91 76 29 	lds	r24, 0x2976
    23fc:	80 93 e5 28 	sts	0x28E5, r24
				niz_counter_niz_2 = 0;
				sample_counter_niz_3 = 0;
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
    2400:	00 e0       	ldi	r16, 0x00	; 0
    2402:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];	
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2404:	f8 01       	movw	r30, r16
    2406:	eb 51       	subi	r30, 0x1B	; 27
    2408:	f7 4d       	sbci	r31, 0xD7	; 215
    240a:	60 81       	ld	r22, Z
    240c:	83 e1       	ldi	r24, 0x13	; 19
    240e:	90 e2       	ldi	r25, 0x20	; 32
    2410:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2414:	88 23       	and	r24, r24
    2416:	11 f0       	breq	.+4      	; 0x241c <__vector_61+0x7f4>
					{
						i++;
    2418:	0f 5f       	subi	r16, 0xFF	; 255
    241a:	1f 4f       	sbci	r17, 0xFF	; 255
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
				while (i < 1)
    241c:	10 16       	cp	r1, r16
    241e:	11 06       	cpc	r1, r17
    2420:	8c f7       	brge	.-30     	; 0x2404 <__vector_61+0x7dc>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2422:	10 92 65 29 	sts	0x2965, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    2426:	10 92 65 29 	sts	0x2965, r1
    242a:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__vector_61+0x193a>
		}					
	}
	//RELATIVNA DISTANCA I UGAO - 4
	else if(receiveArray[0] == 4)					//provera funkcijskog bajta
    242e:	80 91 76 29 	lds	r24, 0x2976
    2432:	84 30       	cpi	r24, 0x04	; 4
    2434:	09 f0       	breq	.+2      	; 0x2438 <__vector_61+0x810>
    2436:	96 c1       	rjmp	.+812    	; 0x2764 <__vector_61+0xb3c>
	{
		if(RX_i_E1 >= 5)								//stigla je cela poruka
    2438:	80 91 65 29 	lds	r24, 0x2965
    243c:	85 30       	cpi	r24, 0x05	; 5
    243e:	10 f4       	brcc	.+4      	; 0x2444 <__vector_61+0x81c>
    2440:	0c 94 b1 1a 	jmp	0x3562	; 0x3562 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2444:	10 92 03 2e 	sts	0x2E03, r1
			{
				//ENABLE
				stop_PID_desni = 0;
    2448:	10 92 fc 29 	sts	0x29FC, r1
				stop_PID_levi = 0;
    244c:	10 92 fa 2d 	sts	0x2DFA, r1
				set_direct_out = 0;
    2450:	10 92 89 32 	sts	0x3289, r1
				
				rel_distanca = 0;
    2454:	10 92 cd 28 	sts	0x28CD, r1
    2458:	10 92 ce 28 	sts	0x28CE, r1
    245c:	10 92 cf 28 	sts	0x28CF, r1
    2460:	10 92 d0 28 	sts	0x28D0, r1
				rel_distanca |= (int)receiveArray[1] << 8;
    2464:	20 91 77 29 	lds	r18, 0x2977
    2468:	40 91 cd 28 	lds	r20, 0x28CD
    246c:	50 91 ce 28 	lds	r21, 0x28CE
    2470:	60 91 cf 28 	lds	r22, 0x28CF
    2474:	70 91 d0 28 	lds	r23, 0x28D0
    2478:	92 2f       	mov	r25, r18
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	aa 27       	eor	r26, r26
    247e:	97 fd       	sbrc	r25, 7
    2480:	a0 95       	com	r26
    2482:	ba 2f       	mov	r27, r26
    2484:	84 2b       	or	r24, r20
    2486:	95 2b       	or	r25, r21
    2488:	a6 2b       	or	r26, r22
    248a:	b7 2b       	or	r27, r23
    248c:	80 93 cd 28 	sts	0x28CD, r24
    2490:	90 93 ce 28 	sts	0x28CE, r25
    2494:	a0 93 cf 28 	sts	0x28CF, r26
    2498:	b0 93 d0 28 	sts	0x28D0, r27
				rel_distanca |= (int)receiveArray[2];
    249c:	20 91 78 29 	lds	r18, 0x2978
    24a0:	80 91 cd 28 	lds	r24, 0x28CD
    24a4:	90 91 ce 28 	lds	r25, 0x28CE
    24a8:	a0 91 cf 28 	lds	r26, 0x28CF
    24ac:	b0 91 d0 28 	lds	r27, 0x28D0
    24b0:	82 2b       	or	r24, r18
    24b2:	80 93 cd 28 	sts	0x28CD, r24
    24b6:	90 93 ce 28 	sts	0x28CE, r25
    24ba:	a0 93 cf 28 	sts	0x28CF, r26
    24be:	b0 93 d0 28 	sts	0x28D0, r27
				rel_distanca = (rel_distanca * scale_factor_for_mm);
    24c2:	a0 91 08 2e 	lds	r26, 0x2E08
    24c6:	b0 91 09 2e 	lds	r27, 0x2E09
    24ca:	20 91 cd 28 	lds	r18, 0x28CD
    24ce:	30 91 ce 28 	lds	r19, 0x28CE
    24d2:	40 91 cf 28 	lds	r20, 0x28CF
    24d6:	50 91 d0 28 	lds	r21, 0x28D0
    24da:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    24de:	60 93 cd 28 	sts	0x28CD, r22
    24e2:	70 93 ce 28 	sts	0x28CE, r23
    24e6:	80 93 cf 28 	sts	0x28CF, r24
    24ea:	90 93 d0 28 	sts	0x28D0, r25

				rel_ugao = 0;
    24ee:	10 92 1e 2e 	sts	0x2E1E, r1
    24f2:	10 92 1f 2e 	sts	0x2E1F, r1
    24f6:	10 92 20 2e 	sts	0x2E20, r1
    24fa:	10 92 21 2e 	sts	0x2E21, r1
				rel_ugao |= (int)receiveArray[3] << 8;
    24fe:	20 91 79 29 	lds	r18, 0x2979
    2502:	40 91 1e 2e 	lds	r20, 0x2E1E
    2506:	50 91 1f 2e 	lds	r21, 0x2E1F
    250a:	60 91 20 2e 	lds	r22, 0x2E20
    250e:	70 91 21 2e 	lds	r23, 0x2E21
    2512:	92 2f       	mov	r25, r18
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	aa 27       	eor	r26, r26
    2518:	97 fd       	sbrc	r25, 7
    251a:	a0 95       	com	r26
    251c:	ba 2f       	mov	r27, r26
    251e:	84 2b       	or	r24, r20
    2520:	95 2b       	or	r25, r21
    2522:	a6 2b       	or	r26, r22
    2524:	b7 2b       	or	r27, r23
    2526:	80 93 1e 2e 	sts	0x2E1E, r24
    252a:	90 93 1f 2e 	sts	0x2E1F, r25
    252e:	a0 93 20 2e 	sts	0x2E20, r26
    2532:	b0 93 21 2e 	sts	0x2E21, r27
				rel_ugao |= (int)receiveArray[4];
    2536:	20 91 7a 29 	lds	r18, 0x297A
    253a:	80 91 1e 2e 	lds	r24, 0x2E1E
    253e:	90 91 1f 2e 	lds	r25, 0x2E1F
    2542:	a0 91 20 2e 	lds	r26, 0x2E20
    2546:	b0 91 21 2e 	lds	r27, 0x2E21
    254a:	82 2b       	or	r24, r18
    254c:	80 93 1e 2e 	sts	0x2E1E, r24
    2550:	90 93 1f 2e 	sts	0x2E1F, r25
    2554:	a0 93 20 2e 	sts	0x2E20, r26
    2558:	b0 93 21 2e 	sts	0x2E21, r27
				rel_ugao = (rel_ugao * krug360) / 360;
    255c:	20 91 1e 2e 	lds	r18, 0x2E1E
    2560:	30 91 1f 2e 	lds	r19, 0x2E1F
    2564:	40 91 20 2e 	lds	r20, 0x2E20
    2568:	50 91 21 2e 	lds	r21, 0x2E21
    256c:	60 91 7d 32 	lds	r22, 0x327D
    2570:	70 91 7e 32 	lds	r23, 0x327E
    2574:	80 91 7f 32 	lds	r24, 0x327F
    2578:	90 91 80 32 	lds	r25, 0x3280
    257c:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__mulsi3>
    2580:	28 e6       	ldi	r18, 0x68	; 104
    2582:	31 e0       	ldi	r19, 0x01	; 1
    2584:	40 e0       	ldi	r20, 0x00	; 0
    2586:	50 e0       	ldi	r21, 0x00	; 0
    2588:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    258c:	20 93 1e 2e 	sts	0x2E1E, r18
    2590:	30 93 1f 2e 	sts	0x2E1F, r19
    2594:	40 93 20 2e 	sts	0x2E20, r20
    2598:	50 93 21 2e 	sts	0x2E21, r21
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    259c:	40 91 8b 32 	lds	r20, 0x328B
    25a0:	50 91 8c 32 	lds	r21, 0x328C
    25a4:	60 91 8d 32 	lds	r22, 0x328D
    25a8:	70 91 8e 32 	lds	r23, 0x328E
    25ac:	80 91 1e 2e 	lds	r24, 0x2E1E
    25b0:	90 91 1f 2e 	lds	r25, 0x2E1F
    25b4:	a0 91 20 2e 	lds	r26, 0x2E20
    25b8:	b0 91 21 2e 	lds	r27, 0x2E21
    25bc:	c0 90 d7 28 	lds	r12, 0x28D7
    25c0:	d0 90 d8 28 	lds	r13, 0x28D8
    25c4:	e0 90 d9 28 	lds	r14, 0x28D9
    25c8:	f0 90 da 28 	lds	r15, 0x28DA
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    25cc:	40 90 8b 32 	lds	r4, 0x328B
    25d0:	50 90 8c 32 	lds	r5, 0x328C
    25d4:	60 90 8d 32 	lds	r6, 0x328D
    25d8:	70 90 8e 32 	lds	r7, 0x328E
    25dc:	00 91 1e 2e 	lds	r16, 0x2E1E
    25e0:	10 91 1f 2e 	lds	r17, 0x2E1F
    25e4:	20 91 20 2e 	lds	r18, 0x2E20
    25e8:	30 91 21 2e 	lds	r19, 0x2E21
    25ec:	09 83       	std	Y+1, r16	; 0x01
    25ee:	1a 83       	std	Y+2, r17	; 0x02
    25f0:	2b 83       	std	Y+3, r18	; 0x03
    25f2:	3c 83       	std	Y+4, r19	; 0x04
    25f4:	80 90 d7 28 	lds	r8, 0x28D7
    25f8:	90 90 d8 28 	lds	r9, 0x28D8
    25fc:	a0 90 d9 28 	lds	r10, 0x28D9
    2600:	b0 90 da 28 	lds	r11, 0x28DA
				rel_ugao |= (int)receiveArray[4];
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    2604:	8a 01       	movw	r16, r20
    2606:	9b 01       	movw	r18, r22
    2608:	08 0f       	add	r16, r24
    260a:	19 1f       	adc	r17, r25
    260c:	2a 1f       	adc	r18, r26
    260e:	3b 1f       	adc	r19, r27
    2610:	c9 01       	movw	r24, r18
    2612:	b8 01       	movw	r22, r16
    2614:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    2618:	6d 83       	std	Y+5, r22	; 0x05
    261a:	7e 83       	std	Y+6, r23	; 0x06
    261c:	8f 83       	std	Y+7, r24	; 0x07
    261e:	98 87       	std	Y+8, r25	; 0x08
    2620:	c7 01       	movw	r24, r14
    2622:	b6 01       	movw	r22, r12
    2624:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    2628:	9b 01       	movw	r18, r22
    262a:	ac 01       	movw	r20, r24
    262c:	6d 81       	ldd	r22, Y+5	; 0x05
    262e:	7e 81       	ldd	r23, Y+6	; 0x06
    2630:	8f 81       	ldd	r24, Y+7	; 0x07
    2632:	98 85       	ldd	r25, Y+8	; 0x08
    2634:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__divsf3>
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
    2638:	2b ed       	ldi	r18, 0xDB	; 219
    263a:	3f e0       	ldi	r19, 0x0F	; 15
    263c:	49 e4       	ldi	r20, 0x49	; 73
    263e:	50 e4       	ldi	r21, 0x40	; 64
    2640:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    2644:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <cos>
    2648:	6b 01       	movw	r12, r22
    264a:	7c 01       	movw	r14, r24
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    264c:	69 81       	ldd	r22, Y+1	; 0x01
    264e:	7a 81       	ldd	r23, Y+2	; 0x02
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	9c 81       	ldd	r25, Y+4	; 0x04
    2654:	64 0d       	add	r22, r4
    2656:	75 1d       	adc	r23, r5
    2658:	86 1d       	adc	r24, r6
    265a:	97 1d       	adc	r25, r7
    265c:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    2660:	2b 01       	movw	r4, r22
    2662:	3c 01       	movw	r6, r24
    2664:	c5 01       	movw	r24, r10
    2666:	b4 01       	movw	r22, r8
    2668:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    266c:	9b 01       	movw	r18, r22
    266e:	ac 01       	movw	r20, r24
    2670:	c3 01       	movw	r24, r6
    2672:	b2 01       	movw	r22, r4
    2674:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__divsf3>
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
    2678:	2b ed       	ldi	r18, 0xDB	; 219
    267a:	3f e0       	ldi	r19, 0x0F	; 15
    267c:	49 e4       	ldi	r20, 0x49	; 73
    267e:	50 e4       	ldi	r21, 0x40	; 64
    2680:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    2684:	0e 94 8a 38 	call	0x7114	; 0x7114 <sin>
    2688:	4b 01       	movw	r8, r22
    268a:	5c 01       	movw	r10, r24
				X_pos_cos = rel_distanca * X_pos_cos;
    268c:	60 91 cd 28 	lds	r22, 0x28CD
    2690:	70 91 ce 28 	lds	r23, 0x28CE
    2694:	80 91 cf 28 	lds	r24, 0x28CF
    2698:	90 91 d0 28 	lds	r25, 0x28D0
				Y_pos_sin = rel_distanca * Y_pos_sin;
    269c:	40 90 cd 28 	lds	r4, 0x28CD
    26a0:	50 90 ce 28 	lds	r5, 0x28CE
    26a4:	60 90 cf 28 	lds	r6, 0x28CF
    26a8:	70 90 d0 28 	lds	r7, 0x28D0
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    26ac:	20 91 2b 2e 	lds	r18, 0x2E2B
    26b0:	30 91 2c 2e 	lds	r19, 0x2E2C
    26b4:	40 91 2d 2e 	lds	r20, 0x2E2D
    26b8:	50 91 2e 2e 	lds	r21, 0x2E2E
    26bc:	29 83       	std	Y+1, r18	; 0x01
    26be:	3a 83       	std	Y+2, r19	; 0x02
    26c0:	4b 83       	std	Y+3, r20	; 0x03
    26c2:	5c 83       	std	Y+4, r21	; 0x04
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
    26c4:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    26c8:	a7 01       	movw	r20, r14
    26ca:	96 01       	movw	r18, r12
    26cc:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
				Y_pos_sin = rel_distanca * Y_pos_sin;
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    26d0:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fixsfsi>
    26d4:	09 81       	ldd	r16, Y+1	; 0x01
    26d6:	1a 81       	ldd	r17, Y+2	; 0x02
    26d8:	2b 81       	ldd	r18, Y+3	; 0x03
    26da:	3c 81       	ldd	r19, Y+4	; 0x04
    26dc:	06 0f       	add	r16, r22
    26de:	17 1f       	adc	r17, r23
    26e0:	28 1f       	adc	r18, r24
    26e2:	39 1f       	adc	r19, r25
    26e4:	00 93 b6 24 	sts	0x24B6, r16
    26e8:	10 93 b7 24 	sts	0x24B7, r17
    26ec:	20 93 b8 24 	sts	0x24B8, r18
    26f0:	30 93 b9 24 	sts	0x24B9, r19
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    26f4:	c0 90 0a 2a 	lds	r12, 0x2A0A
    26f8:	d0 90 0b 2a 	lds	r13, 0x2A0B
    26fc:	e0 90 0c 2a 	lds	r14, 0x2A0C
    2700:	f0 90 0d 2a 	lds	r15, 0x2A0D
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
				Y_pos_sin = rel_distanca * Y_pos_sin;
    2704:	c3 01       	movw	r24, r6
    2706:	b2 01       	movw	r22, r4
    2708:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    270c:	a5 01       	movw	r20, r10
    270e:	94 01       	movw	r18, r8
    2710:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    2714:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fixsfsi>
    2718:	c6 0e       	add	r12, r22
    271a:	d7 1e       	adc	r13, r23
    271c:	e8 1e       	adc	r14, r24
    271e:	f9 1e       	adc	r15, r25
    2720:	c0 92 13 2e 	sts	0x2E13, r12
    2724:	d0 92 14 2e 	sts	0x2E14, r13
    2728:	e0 92 15 2e 	sts	0x2E15, r14
    272c:	f0 92 16 2e 	sts	0x2E16, r15
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2730:	80 91 76 29 	lds	r24, 0x2976
    2734:	80 93 e5 28 	sts	0x28E5, r24
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
    2738:	00 e0       	ldi	r16, 0x00	; 0
    273a:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    273c:	f8 01       	movw	r30, r16
    273e:	eb 51       	subi	r30, 0x1B	; 27
    2740:	f7 4d       	sbci	r31, 0xD7	; 215
    2742:	60 81       	ld	r22, Z
    2744:	83 e1       	ldi	r24, 0x13	; 19
    2746:	90 e2       	ldi	r25, 0x20	; 32
    2748:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    274c:	88 23       	and	r24, r24
    274e:	11 f0       	breq	.+4      	; 0x2754 <__vector_61+0xb2c>
					{
						i++;
    2750:	0f 5f       	subi	r16, 0xFF	; 255
    2752:	1f 4f       	sbci	r17, 0xFF	; 255
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2754:	10 16       	cp	r1, r16
    2756:	11 06       	cpc	r1, r17
    2758:	8c f7       	brge	.-30     	; 0x273c <__vector_61+0xb14>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    275a:	10 92 65 29 	sts	0x2965, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda
    275e:	10 92 65 29 	sts	0x2965, r1
    2762:	ff c6       	rjmp	.+3582   	; 0x3562 <__vector_61+0x193a>
		}
	}
	//SET DIRECT OUT - 5
	else if(receiveArray[0] == 5)					//provera funkcijskog bajta
    2764:	80 91 76 29 	lds	r24, 0x2976
    2768:	85 30       	cpi	r24, 0x05	; 5
    276a:	09 f0       	breq	.+2      	; 0x276e <__vector_61+0xb46>
    276c:	6e c0       	rjmp	.+220    	; 0x284a <__vector_61+0xc22>
	{
		if(RX_i_E1 >= 3)							//stigla je cela poruka
    276e:	80 91 65 29 	lds	r24, 0x2965
    2772:	83 30       	cpi	r24, 0x03	; 3
    2774:	08 f4       	brcc	.+2      	; 0x2778 <__vector_61+0xb50>
    2776:	f5 c6       	rjmp	.+3562   	; 0x3562 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2778:	10 92 03 2e 	sts	0x2E03, r1
			{
				//ENABLE
				set_direct_out = 1;
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	80 93 89 32 	sts	0x3289, r24
				
				if(receiveArray[1] >= 128)
    2782:	80 91 77 29 	lds	r24, 0x2977
    2786:	88 23       	and	r24, r24
    2788:	8c f4       	brge	.+34     	; 0x27ac <__vector_61+0xb84>
					PID_brzina_L = (receiveArray[1] - 128) * 5;	//podesiti faktor!
    278a:	80 91 77 29 	lds	r24, 0x2977
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9c 01       	movw	r18, r24
    2792:	22 0f       	add	r18, r18
    2794:	33 1f       	adc	r19, r19
    2796:	22 0f       	add	r18, r18
    2798:	33 1f       	adc	r19, r19
    279a:	82 0f       	add	r24, r18
    279c:	93 1f       	adc	r25, r19
    279e:	80 58       	subi	r24, 0x80	; 128
    27a0:	92 40       	sbci	r25, 0x02	; 2
    27a2:	80 93 83 2e 	sts	0x2E83, r24
    27a6:	90 93 84 2e 	sts	0x2E84, r25
    27aa:	10 c0       	rjmp	.+32     	; 0x27cc <__vector_61+0xba4>
				else
					PID_brzina_L = (128 - receiveArray[1]) * (-5);
    27ac:	80 91 77 29 	lds	r24, 0x2977
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	9c 01       	movw	r18, r24
    27b4:	22 0f       	add	r18, r18
    27b6:	33 1f       	adc	r19, r19
    27b8:	22 0f       	add	r18, r18
    27ba:	33 1f       	adc	r19, r19
    27bc:	82 0f       	add	r24, r18
    27be:	93 1f       	adc	r25, r19
    27c0:	80 58       	subi	r24, 0x80	; 128
    27c2:	92 40       	sbci	r25, 0x02	; 2
    27c4:	80 93 83 2e 	sts	0x2E83, r24
    27c8:	90 93 84 2e 	sts	0x2E84, r25
					
				if(receiveArray[2] >= 128)
    27cc:	80 91 78 29 	lds	r24, 0x2978
    27d0:	88 23       	and	r24, r24
    27d2:	8c f4       	brge	.+34     	; 0x27f6 <__vector_61+0xbce>
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
    27d4:	80 91 78 29 	lds	r24, 0x2978
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9c 01       	movw	r18, r24
    27dc:	22 0f       	add	r18, r18
    27de:	33 1f       	adc	r19, r19
    27e0:	22 0f       	add	r18, r18
    27e2:	33 1f       	adc	r19, r19
    27e4:	82 0f       	add	r24, r18
    27e6:	93 1f       	adc	r25, r19
    27e8:	80 58       	subi	r24, 0x80	; 128
    27ea:	92 40       	sbci	r25, 0x02	; 2
    27ec:	80 93 81 2e 	sts	0x2E81, r24
    27f0:	90 93 82 2e 	sts	0x2E82, r25
    27f4:	10 c0       	rjmp	.+32     	; 0x2816 <__vector_61+0xbee>
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
    27f6:	80 91 78 29 	lds	r24, 0x2978
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9c 01       	movw	r18, r24
    27fe:	22 0f       	add	r18, r18
    2800:	33 1f       	adc	r19, r19
    2802:	22 0f       	add	r18, r18
    2804:	33 1f       	adc	r19, r19
    2806:	82 0f       	add	r24, r18
    2808:	93 1f       	adc	r25, r19
    280a:	80 58       	subi	r24, 0x80	; 128
    280c:	92 40       	sbci	r25, 0x02	; 2
    280e:	80 93 81 2e 	sts	0x2E81, r24
    2812:	90 93 82 2e 	sts	0x2E82, r25
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2816:	80 91 76 29 	lds	r24, 0x2976
    281a:	80 93 e5 28 	sts	0x28E5, r24
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
    281e:	00 e0       	ldi	r16, 0x00	; 0
    2820:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2822:	f8 01       	movw	r30, r16
    2824:	eb 51       	subi	r30, 0x1B	; 27
    2826:	f7 4d       	sbci	r31, 0xD7	; 215
    2828:	60 81       	ld	r22, Z
    282a:	83 e1       	ldi	r24, 0x13	; 19
    282c:	90 e2       	ldi	r25, 0x20	; 32
    282e:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2832:	88 23       	and	r24, r24
    2834:	11 f0       	breq	.+4      	; 0x283a <__vector_61+0xc12>
					{
						i++;
    2836:	0f 5f       	subi	r16, 0xFF	; 255
    2838:	1f 4f       	sbci	r17, 0xFF	; 255
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    283a:	10 16       	cp	r1, r16
    283c:	11 06       	cpc	r1, r17
    283e:	8c f7       	brge	.-30     	; 0x2822 <__vector_61+0xbfa>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2840:	10 92 65 29 	sts	0x2965, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda
    2844:	10 92 65 29 	sts	0x2965, r1
    2848:	8c c6       	rjmp	.+3352   	; 0x3562 <__vector_61+0x193a>
		}
	}			
	//PODESAVANJE FET izlaza i servoa - 6
	else if(receiveArray[0] == 6)					//provera funkcijskog bajta 
    284a:	80 91 76 29 	lds	r24, 0x2976
    284e:	86 30       	cpi	r24, 0x06	; 6
    2850:	09 f0       	breq	.+2      	; 0x2854 <__vector_61+0xc2c>
    2852:	56 c0       	rjmp	.+172    	; 0x2900 <__vector_61+0xcd8>
	{
		if(RX_i_E1 >= 7)							//stigla je cela poruka	(11)
    2854:	80 91 65 29 	lds	r24, 0x2965
    2858:	87 30       	cpi	r24, 0x07	; 7
    285a:	08 f4       	brcc	.+2      	; 0x285e <__vector_61+0xc36>
    285c:	82 c6       	rjmp	.+3332   	; 0x3562 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    285e:	10 92 03 2e 	sts	0x2E03, r1
			{
				PORTC.OUT |= receiveArray[1] & receiveArray[2];	//izlazi + maska
    2862:	e0 e4       	ldi	r30, 0x40	; 64
    2864:	f6 e0       	ldi	r31, 0x06	; 6
    2866:	94 81       	ldd	r25, Z+4	; 0x04
    2868:	47 e7       	ldi	r20, 0x77	; 119
    286a:	59 e2       	ldi	r21, 0x29	; 41
    286c:	da 01       	movw	r26, r20
    286e:	8c 91       	ld	r24, X
    2870:	68 e7       	ldi	r22, 0x78	; 120
    2872:	79 e2       	ldi	r23, 0x29	; 41
    2874:	db 01       	movw	r26, r22
    2876:	2c 91       	ld	r18, X
    2878:	82 23       	and	r24, r18
    287a:	89 2b       	or	r24, r25
    287c:	84 83       	std	Z+4, r24	; 0x04
				PORTC.OUT &= ~(receiveArray[1] ^ receiveArray[2]);	//izlazi + maska
    287e:	94 81       	ldd	r25, Z+4	; 0x04
    2880:	da 01       	movw	r26, r20
    2882:	8c 91       	ld	r24, X
    2884:	db 01       	movw	r26, r22
    2886:	2c 91       	ld	r18, X
    2888:	82 27       	eor	r24, r18
    288a:	80 95       	com	r24
    288c:	89 23       	and	r24, r25
    288e:	84 83       	std	Z+4, r24	; 0x04
				
				//120 - nulti polozaj, 280 - krajnji polozaj
				TCF0.CCA = receiveArray[3] + 120;
    2890:	80 91 79 29 	lds	r24, 0x2979
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	88 58       	subi	r24, 0x88	; 136
    2898:	9f 4f       	sbci	r25, 0xFF	; 255
    289a:	e0 e0       	ldi	r30, 0x00	; 0
    289c:	fb e0       	ldi	r31, 0x0B	; 11
    289e:	80 a7       	std	Z+40, r24	; 0x28
    28a0:	91 a7       	std	Z+41, r25	; 0x29
				TCF0.CCB = receiveArray[4] + 120;
    28a2:	80 91 7a 29 	lds	r24, 0x297A
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	88 58       	subi	r24, 0x88	; 136
    28aa:	9f 4f       	sbci	r25, 0xFF	; 255
    28ac:	82 a7       	std	Z+42, r24	; 0x2a
    28ae:	93 a7       	std	Z+43, r25	; 0x2b
				TCF0.CCC = receiveArray[5] + 120;
    28b0:	80 91 7b 29 	lds	r24, 0x297B
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	88 58       	subi	r24, 0x88	; 136
    28b8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ba:	84 a7       	std	Z+44, r24	; 0x2c
    28bc:	95 a7       	std	Z+45, r25	; 0x2d
				TCF0.CCD = receiveArray[6] + 120;
    28be:	80 91 7c 29 	lds	r24, 0x297C
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	88 58       	subi	r24, 0x88	; 136
    28c6:	9f 4f       	sbci	r25, 0xFF	; 255
    28c8:	86 a7       	std	Z+46, r24	; 0x2e
    28ca:	97 a7       	std	Z+47, r25	; 0x2f
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    28cc:	80 91 76 29 	lds	r24, 0x2976
    28d0:	80 93 e5 28 	sts	0x28E5, r24
				TCF0.CCB = receiveArray[4] + 120;
				TCF0.CCC = receiveArray[5] + 120;
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
    28d4:	00 e0       	ldi	r16, 0x00	; 0
    28d6:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    28d8:	f8 01       	movw	r30, r16
    28da:	eb 51       	subi	r30, 0x1B	; 27
    28dc:	f7 4d       	sbci	r31, 0xD7	; 215
    28de:	60 81       	ld	r22, Z
    28e0:	83 e1       	ldi	r24, 0x13	; 19
    28e2:	90 e2       	ldi	r25, 0x20	; 32
    28e4:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    28e8:	88 23       	and	r24, r24
    28ea:	11 f0       	breq	.+4      	; 0x28f0 <__vector_61+0xcc8>
					{
						i++;
    28ec:	0f 5f       	subi	r16, 0xFF	; 255
    28ee:	1f 4f       	sbci	r17, 0xFF	; 255
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    28f0:	10 16       	cp	r1, r16
    28f2:	11 06       	cpc	r1, r17
    28f4:	8c f7       	brge	.-30     	; 0x28d8 <__vector_61+0xcb0>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    28f6:	10 92 65 29 	sts	0x2965, r1
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
    28fa:	10 92 65 29 	sts	0x2965, r1
    28fe:	31 c6       	rjmp	.+3170   	; 0x3562 <__vector_61+0x193a>
		}		
	}		
	//Upis trenutne pozicije - 7
	else if(receiveArray[0] == 7)					//provera funkcijskog bajta
    2900:	80 91 76 29 	lds	r24, 0x2976
    2904:	87 30       	cpi	r24, 0x07	; 7
    2906:	09 f0       	breq	.+2      	; 0x290a <__vector_61+0xce2>
    2908:	7d c1       	rjmp	.+762    	; 0x2c04 <__vector_61+0xfdc>
	{
		if(RX_i_E1 >= 7)							//stigla je cela poruka	(11)
    290a:	80 91 65 29 	lds	r24, 0x2965
    290e:	87 30       	cpi	r24, 0x07	; 7
    2910:	08 f4       	brcc	.+2      	; 0x2914 <__vector_61+0xcec>
    2912:	27 c6       	rjmp	.+3150   	; 0x3562 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2914:	10 92 03 2e 	sts	0x2E03, r1
			{
				//x_pos
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2918:	80 91 77 29 	lds	r24, 0x2977
    291c:	8f 3f       	cpi	r24, 0xFF	; 255
    291e:	29 f4       	brne	.+10     	; 0x292a <__vector_61+0xd02>
    2920:	80 91 78 29 	lds	r24, 0x2978
    2924:	8f 3f       	cpi	r24, 0xFF	; 255
    2926:	09 f4       	brne	.+2      	; 0x292a <__vector_61+0xd02>
    2928:	6d c0       	rjmp	.+218    	; 0x2a04 <__vector_61+0xddc>
				{
					X_pos = 0;
    292a:	10 92 2b 2e 	sts	0x2E2B, r1
    292e:	10 92 2c 2e 	sts	0x2E2C, r1
    2932:	10 92 2d 2e 	sts	0x2E2D, r1
    2936:	10 92 2e 2e 	sts	0x2E2E, r1
					X_pos |= (int)receiveArray[1] << 8;
    293a:	20 91 77 29 	lds	r18, 0x2977
    293e:	40 91 2b 2e 	lds	r20, 0x2E2B
    2942:	50 91 2c 2e 	lds	r21, 0x2E2C
    2946:	60 91 2d 2e 	lds	r22, 0x2E2D
    294a:	70 91 2e 2e 	lds	r23, 0x2E2E
    294e:	92 2f       	mov	r25, r18
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	aa 27       	eor	r26, r26
    2954:	97 fd       	sbrc	r25, 7
    2956:	a0 95       	com	r26
    2958:	ba 2f       	mov	r27, r26
    295a:	84 2b       	or	r24, r20
    295c:	95 2b       	or	r25, r21
    295e:	a6 2b       	or	r26, r22
    2960:	b7 2b       	or	r27, r23
    2962:	80 93 2b 2e 	sts	0x2E2B, r24
    2966:	90 93 2c 2e 	sts	0x2E2C, r25
    296a:	a0 93 2d 2e 	sts	0x2E2D, r26
    296e:	b0 93 2e 2e 	sts	0x2E2E, r27
					X_pos |= (int)receiveArray[2];
    2972:	20 91 78 29 	lds	r18, 0x2978
    2976:	80 91 2b 2e 	lds	r24, 0x2E2B
    297a:	90 91 2c 2e 	lds	r25, 0x2E2C
    297e:	a0 91 2d 2e 	lds	r26, 0x2E2D
    2982:	b0 91 2e 2e 	lds	r27, 0x2E2E
    2986:	82 2b       	or	r24, r18
    2988:	80 93 2b 2e 	sts	0x2E2B, r24
    298c:	90 93 2c 2e 	sts	0x2E2C, r25
    2990:	a0 93 2d 2e 	sts	0x2E2D, r26
    2994:	b0 93 2e 2e 	sts	0x2E2E, r27
					X_pos = (X_pos * scale_factor_for_mm);
    2998:	a0 91 08 2e 	lds	r26, 0x2E08
    299c:	b0 91 09 2e 	lds	r27, 0x2E09
    29a0:	20 91 2b 2e 	lds	r18, 0x2E2B
    29a4:	30 91 2c 2e 	lds	r19, 0x2E2C
    29a8:	40 91 2d 2e 	lds	r20, 0x2E2D
    29ac:	50 91 2e 2e 	lds	r21, 0x2E2E
    29b0:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    29b4:	60 93 2b 2e 	sts	0x2E2B, r22
    29b8:	70 93 2c 2e 	sts	0x2E2C, r23
    29bc:	80 93 2d 2e 	sts	0x2E2D, r24
    29c0:	90 93 2e 2e 	sts	0x2E2E, r25
					X_cilj = X_pos;
    29c4:	80 91 2b 2e 	lds	r24, 0x2E2B
    29c8:	90 91 2c 2e 	lds	r25, 0x2E2C
    29cc:	a0 91 2d 2e 	lds	r26, 0x2E2D
    29d0:	b0 91 2e 2e 	lds	r27, 0x2E2E
    29d4:	80 93 b6 24 	sts	0x24B6, r24
    29d8:	90 93 b7 24 	sts	0x24B7, r25
    29dc:	a0 93 b8 24 	sts	0x24B8, r26
    29e0:	b0 93 b9 24 	sts	0x24B9, r27
					X_cilj_stari = X_pos;
    29e4:	80 91 2b 2e 	lds	r24, 0x2E2B
    29e8:	90 91 2c 2e 	lds	r25, 0x2E2C
    29ec:	a0 91 2d 2e 	lds	r26, 0x2E2D
    29f0:	b0 91 2e 2e 	lds	r27, 0x2E2E
    29f4:	80 93 39 2e 	sts	0x2E39, r24
    29f8:	90 93 3a 2e 	sts	0x2E3A, r25
    29fc:	a0 93 3b 2e 	sts	0x2E3B, r26
    2a00:	b0 93 3c 2e 	sts	0x2E3C, r27
				}
				//Y_pos
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2a04:	80 91 79 29 	lds	r24, 0x2979
    2a08:	8f 3f       	cpi	r24, 0xFF	; 255
    2a0a:	29 f4       	brne	.+10     	; 0x2a16 <__vector_61+0xdee>
    2a0c:	80 91 7a 29 	lds	r24, 0x297A
    2a10:	8f 3f       	cpi	r24, 0xFF	; 255
    2a12:	09 f4       	brne	.+2      	; 0x2a16 <__vector_61+0xdee>
    2a14:	6d c0       	rjmp	.+218    	; 0x2af0 <__vector_61+0xec8>
				{
					Y_pos = 0;
    2a16:	10 92 0a 2a 	sts	0x2A0A, r1
    2a1a:	10 92 0b 2a 	sts	0x2A0B, r1
    2a1e:	10 92 0c 2a 	sts	0x2A0C, r1
    2a22:	10 92 0d 2a 	sts	0x2A0D, r1
					Y_pos |= (int)receiveArray[3] << 8;
    2a26:	20 91 79 29 	lds	r18, 0x2979
    2a2a:	40 91 0a 2a 	lds	r20, 0x2A0A
    2a2e:	50 91 0b 2a 	lds	r21, 0x2A0B
    2a32:	60 91 0c 2a 	lds	r22, 0x2A0C
    2a36:	70 91 0d 2a 	lds	r23, 0x2A0D
    2a3a:	92 2f       	mov	r25, r18
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	aa 27       	eor	r26, r26
    2a40:	97 fd       	sbrc	r25, 7
    2a42:	a0 95       	com	r26
    2a44:	ba 2f       	mov	r27, r26
    2a46:	84 2b       	or	r24, r20
    2a48:	95 2b       	or	r25, r21
    2a4a:	a6 2b       	or	r26, r22
    2a4c:	b7 2b       	or	r27, r23
    2a4e:	80 93 0a 2a 	sts	0x2A0A, r24
    2a52:	90 93 0b 2a 	sts	0x2A0B, r25
    2a56:	a0 93 0c 2a 	sts	0x2A0C, r26
    2a5a:	b0 93 0d 2a 	sts	0x2A0D, r27
					Y_pos |= (int)receiveArray[4];
    2a5e:	20 91 7a 29 	lds	r18, 0x297A
    2a62:	80 91 0a 2a 	lds	r24, 0x2A0A
    2a66:	90 91 0b 2a 	lds	r25, 0x2A0B
    2a6a:	a0 91 0c 2a 	lds	r26, 0x2A0C
    2a6e:	b0 91 0d 2a 	lds	r27, 0x2A0D
    2a72:	82 2b       	or	r24, r18
    2a74:	80 93 0a 2a 	sts	0x2A0A, r24
    2a78:	90 93 0b 2a 	sts	0x2A0B, r25
    2a7c:	a0 93 0c 2a 	sts	0x2A0C, r26
    2a80:	b0 93 0d 2a 	sts	0x2A0D, r27
					Y_pos = Y_cilj * scale_factor_for_mm;
    2a84:	a0 91 08 2e 	lds	r26, 0x2E08
    2a88:	b0 91 09 2e 	lds	r27, 0x2E09
    2a8c:	20 91 13 2e 	lds	r18, 0x2E13
    2a90:	30 91 14 2e 	lds	r19, 0x2E14
    2a94:	40 91 15 2e 	lds	r20, 0x2E15
    2a98:	50 91 16 2e 	lds	r21, 0x2E16
    2a9c:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    2aa0:	60 93 0a 2a 	sts	0x2A0A, r22
    2aa4:	70 93 0b 2a 	sts	0x2A0B, r23
    2aa8:	80 93 0c 2a 	sts	0x2A0C, r24
    2aac:	90 93 0d 2a 	sts	0x2A0D, r25
					Y_cilj = Y_pos;
    2ab0:	80 91 0a 2a 	lds	r24, 0x2A0A
    2ab4:	90 91 0b 2a 	lds	r25, 0x2A0B
    2ab8:	a0 91 0c 2a 	lds	r26, 0x2A0C
    2abc:	b0 91 0d 2a 	lds	r27, 0x2A0D
    2ac0:	80 93 13 2e 	sts	0x2E13, r24
    2ac4:	90 93 14 2e 	sts	0x2E14, r25
    2ac8:	a0 93 15 2e 	sts	0x2E15, r26
    2acc:	b0 93 16 2e 	sts	0x2E16, r27
					Y_cilj_stari = Y_pos;
    2ad0:	80 91 0a 2a 	lds	r24, 0x2A0A
    2ad4:	90 91 0b 2a 	lds	r25, 0x2A0B
    2ad8:	a0 91 0c 2a 	lds	r26, 0x2A0C
    2adc:	b0 91 0d 2a 	lds	r27, 0x2A0D
    2ae0:	80 93 78 2e 	sts	0x2E78, r24
    2ae4:	90 93 79 2e 	sts	0x2E79, r25
    2ae8:	a0 93 7a 2e 	sts	0x2E7A, r26
    2aec:	b0 93 7b 2e 	sts	0x2E7B, r27
				}
				
				//teta
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2af0:	80 91 7b 29 	lds	r24, 0x297B
    2af4:	8f 3f       	cpi	r24, 0xFF	; 255
    2af6:	29 f4       	brne	.+10     	; 0x2b02 <__vector_61+0xeda>
    2af8:	80 91 7c 29 	lds	r24, 0x297C
    2afc:	8f 3f       	cpi	r24, 0xFF	; 255
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <__vector_61+0xeda>
    2b00:	67 c0       	rjmp	.+206    	; 0x2bd0 <__vector_61+0xfa8>
				{
					teta = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    2b02:	10 92 8b 32 	sts	0x328B, r1
    2b06:	10 92 8c 32 	sts	0x328C, r1
    2b0a:	10 92 8d 32 	sts	0x328D, r1
    2b0e:	10 92 8e 32 	sts	0x328E, r1
					teta |= (int)receiveArray[5] << 8;
    2b12:	20 91 7b 29 	lds	r18, 0x297B
    2b16:	40 91 8b 32 	lds	r20, 0x328B
    2b1a:	50 91 8c 32 	lds	r21, 0x328C
    2b1e:	60 91 8d 32 	lds	r22, 0x328D
    2b22:	70 91 8e 32 	lds	r23, 0x328E
    2b26:	92 2f       	mov	r25, r18
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	aa 27       	eor	r26, r26
    2b2c:	97 fd       	sbrc	r25, 7
    2b2e:	a0 95       	com	r26
    2b30:	ba 2f       	mov	r27, r26
    2b32:	84 2b       	or	r24, r20
    2b34:	95 2b       	or	r25, r21
    2b36:	a6 2b       	or	r26, r22
    2b38:	b7 2b       	or	r27, r23
    2b3a:	80 93 8b 32 	sts	0x328B, r24
    2b3e:	90 93 8c 32 	sts	0x328C, r25
    2b42:	a0 93 8d 32 	sts	0x328D, r26
    2b46:	b0 93 8e 32 	sts	0x328E, r27
					teta |= (int)receiveArray[6];
    2b4a:	20 91 7c 29 	lds	r18, 0x297C
    2b4e:	80 91 8b 32 	lds	r24, 0x328B
    2b52:	90 91 8c 32 	lds	r25, 0x328C
    2b56:	a0 91 8d 32 	lds	r26, 0x328D
    2b5a:	b0 91 8e 32 	lds	r27, 0x328E
    2b5e:	82 2b       	or	r24, r18
    2b60:	80 93 8b 32 	sts	0x328B, r24
    2b64:	90 93 8c 32 	sts	0x328C, r25
    2b68:	a0 93 8d 32 	sts	0x328D, r26
    2b6c:	b0 93 8e 32 	sts	0x328E, r27
					teta = (teta * krug360) / 360;
    2b70:	20 91 8b 32 	lds	r18, 0x328B
    2b74:	30 91 8c 32 	lds	r19, 0x328C
    2b78:	40 91 8d 32 	lds	r20, 0x328D
    2b7c:	50 91 8e 32 	lds	r21, 0x328E
    2b80:	60 91 7d 32 	lds	r22, 0x327D
    2b84:	70 91 7e 32 	lds	r23, 0x327E
    2b88:	80 91 7f 32 	lds	r24, 0x327F
    2b8c:	90 91 80 32 	lds	r25, 0x3280
    2b90:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__mulsi3>
    2b94:	28 e6       	ldi	r18, 0x68	; 104
    2b96:	31 e0       	ldi	r19, 0x01	; 1
    2b98:	40 e0       	ldi	r20, 0x00	; 0
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    2ba0:	20 93 8b 32 	sts	0x328B, r18
    2ba4:	30 93 8c 32 	sts	0x328C, r19
    2ba8:	40 93 8d 32 	sts	0x328D, r20
    2bac:	50 93 8e 32 	sts	0x328E, r21
					teta_cilj = teta;
    2bb0:	80 91 8b 32 	lds	r24, 0x328B
    2bb4:	90 91 8c 32 	lds	r25, 0x328C
    2bb8:	a0 91 8d 32 	lds	r26, 0x328D
    2bbc:	b0 91 8e 32 	lds	r27, 0x328E
    2bc0:	80 93 d4 24 	sts	0x24D4, r24
    2bc4:	90 93 d5 24 	sts	0x24D5, r25
    2bc8:	a0 93 d6 24 	sts	0x24D6, r26
    2bcc:	b0 93 d7 24 	sts	0x24D7, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2bd0:	80 91 76 29 	lds	r24, 0x2976
    2bd4:	80 93 e5 28 	sts	0x28E5, r24
					teta = (teta * krug360) / 360;
					teta_cilj = teta;
				}
				
				//slanje odgovora
				i = 0;
    2bd8:	00 e0       	ldi	r16, 0x00	; 0
    2bda:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2bdc:	f8 01       	movw	r30, r16
    2bde:	eb 51       	subi	r30, 0x1B	; 27
    2be0:	f7 4d       	sbci	r31, 0xD7	; 215
    2be2:	60 81       	ld	r22, Z
    2be4:	83 e1       	ldi	r24, 0x13	; 19
    2be6:	90 e2       	ldi	r25, 0x20	; 32
    2be8:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2bec:	88 23       	and	r24, r24
    2bee:	11 f0       	breq	.+4      	; 0x2bf4 <__vector_61+0xfcc>
					{
						i++;
    2bf0:	0f 5f       	subi	r16, 0xFF	; 255
    2bf2:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2bf4:	10 16       	cp	r1, r16
    2bf6:	11 06       	cpc	r1, r17
    2bf8:	8c f7       	brge	.-30     	; 0x2bdc <__vector_61+0xfb4>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2bfa:	10 92 65 29 	sts	0x2965, r1
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
    2bfe:	10 92 65 29 	sts	0x2965, r1
    2c02:	af c4       	rjmp	.+2398   	; 0x3562 <__vector_61+0x193a>
		}
	}
	//Total Stop - 8
	else if(receiveArray[0] == 8)					//provera funkcijskog bajta
    2c04:	80 91 76 29 	lds	r24, 0x2976
    2c08:	88 30       	cpi	r24, 0x08	; 8
    2c0a:	d9 f5       	brne	.+118    	; 0x2c82 <__vector_61+0x105a>
	{
		if(RX_i_E1 >= 3)							//stigla je cela poruka
    2c0c:	80 91 65 29 	lds	r24, 0x2965
    2c10:	83 30       	cpi	r24, 0x03	; 3
    2c12:	08 f4       	brcc	.+2      	; 0x2c16 <__vector_61+0xfee>
    2c14:	a6 c4       	rjmp	.+2380   	; 0x3562 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2c16:	10 92 03 2e 	sts	0x2E03, r1
			{
				
				if(receiveArray[1] == 0x01)
    2c1a:	80 91 77 29 	lds	r24, 0x2977
    2c1e:	81 30       	cpi	r24, 0x01	; 1
    2c20:	39 f4       	brne	.+14     	; 0x2c30 <__vector_61+0x1008>
				{
					stop_PID_levi = 1;
    2c22:	80 93 fa 2d 	sts	0x2DFA, r24
					PID_brzina_L = 0;
    2c26:	10 92 83 2e 	sts	0x2E83, r1
    2c2a:	10 92 84 2e 	sts	0x2E84, r1
    2c2e:	02 c0       	rjmp	.+4      	; 0x2c34 <__vector_61+0x100c>
				}				
				else
					stop_PID_levi = 0;
    2c30:	10 92 fa 2d 	sts	0x2DFA, r1
					
				if(receiveArray[2] == 0x01)
    2c34:	80 91 78 29 	lds	r24, 0x2978
    2c38:	81 30       	cpi	r24, 0x01	; 1
    2c3a:	39 f4       	brne	.+14     	; 0x2c4a <__vector_61+0x1022>
				{
					stop_PID_desni = 1;
    2c3c:	80 93 fc 29 	sts	0x29FC, r24
					PID_brzina_R = 0;
    2c40:	10 92 81 2e 	sts	0x2E81, r1
    2c44:	10 92 82 2e 	sts	0x2E82, r1
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <__vector_61+0x1026>
				}					
				else
					stop_PID_desni = 0;
    2c4a:	10 92 fc 29 	sts	0x29FC, r1
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2c4e:	80 91 76 29 	lds	r24, 0x2976
    2c52:	80 93 e5 28 	sts	0x28E5, r24
				}					
				else
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
    2c56:	00 e0       	ldi	r16, 0x00	; 0
    2c58:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2c5a:	f8 01       	movw	r30, r16
    2c5c:	eb 51       	subi	r30, 0x1B	; 27
    2c5e:	f7 4d       	sbci	r31, 0xD7	; 215
    2c60:	60 81       	ld	r22, Z
    2c62:	83 e1       	ldi	r24, 0x13	; 19
    2c64:	90 e2       	ldi	r25, 0x20	; 32
    2c66:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2c6a:	88 23       	and	r24, r24
    2c6c:	11 f0       	breq	.+4      	; 0x2c72 <__vector_61+0x104a>
					{
						i++;
    2c6e:	0f 5f       	subi	r16, 0xFF	; 255
    2c70:	1f 4f       	sbci	r17, 0xFF	; 255
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2c72:	10 16       	cp	r1, r16
    2c74:	11 06       	cpc	r1, r17
    2c76:	8c f7       	brge	.-30     	; 0x2c5a <__vector_61+0x1032>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2c78:	10 92 65 29 	sts	0x2965, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda
    2c7c:	10 92 65 29 	sts	0x2965, r1
    2c80:	70 c4       	rjmp	.+2272   	; 0x3562 <__vector_61+0x193a>
		}
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//CIATNJE ADRESIRANOG PARAMETRA - 9
	else if(receiveArray[0] == 9)					//provera funkcijskog bajta
    2c82:	80 91 76 29 	lds	r24, 0x2976
    2c86:	89 30       	cpi	r24, 0x09	; 9
    2c88:	09 f0       	breq	.+2      	; 0x2c8c <__vector_61+0x1064>
    2c8a:	03 c1       	rjmp	.+518    	; 0x2e92 <__vector_61+0x126a>
	{
		if(RX_i_E1 >= 6)								//stigla je cela poruka (7)
    2c8c:	80 91 65 29 	lds	r24, 0x2965
    2c90:	86 30       	cpi	r24, 0x06	; 6
    2c92:	08 f4       	brcc	.+2      	; 0x2c96 <__vector_61+0x106e>
    2c94:	66 c4       	rjmp	.+2252   	; 0x3562 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena		
    2c96:	10 92 03 2e 	sts	0x2E03, r1
// 			for(i=0; i<=4; i++)						//racunanje CHC
// 				CHC ^= receiveArray[i];

			//if(receiveArray[x] == CHC)			//CHC ok
			{
				adresa_long = 0;
    2c9a:	10 92 6e 29 	sts	0x296E, r1
    2c9e:	10 92 6f 29 	sts	0x296F, r1
    2ca2:	10 92 70 29 	sts	0x2970, r1
    2ca6:	10 92 71 29 	sts	0x2971, r1
				adresa_long |= (long)receiveArray[2] << 24;
    2caa:	20 91 78 29 	lds	r18, 0x2978
    2cae:	80 91 6e 29 	lds	r24, 0x296E
    2cb2:	90 91 6f 29 	lds	r25, 0x296F
    2cb6:	a0 91 70 29 	lds	r26, 0x2970
    2cba:	b0 91 71 29 	lds	r27, 0x2971
    2cbe:	b2 2b       	or	r27, r18
    2cc0:	80 93 6e 29 	sts	0x296E, r24
    2cc4:	90 93 6f 29 	sts	0x296F, r25
    2cc8:	a0 93 70 29 	sts	0x2970, r26
    2ccc:	b0 93 71 29 	sts	0x2971, r27
				adresa_long |= (long)receiveArray[3] << 16;
    2cd0:	20 91 79 29 	lds	r18, 0x2979
    2cd4:	80 91 6e 29 	lds	r24, 0x296E
    2cd8:	90 91 6f 29 	lds	r25, 0x296F
    2cdc:	a0 91 70 29 	lds	r26, 0x2970
    2ce0:	b0 91 71 29 	lds	r27, 0x2971
    2ce4:	a2 2b       	or	r26, r18
    2ce6:	80 93 6e 29 	sts	0x296E, r24
    2cea:	90 93 6f 29 	sts	0x296F, r25
    2cee:	a0 93 70 29 	sts	0x2970, r26
    2cf2:	b0 93 71 29 	sts	0x2971, r27
				adresa_long |= (long)receiveArray[4] << 8;
    2cf6:	20 91 7a 29 	lds	r18, 0x297A
    2cfa:	80 91 6e 29 	lds	r24, 0x296E
    2cfe:	90 91 6f 29 	lds	r25, 0x296F
    2d02:	a0 91 70 29 	lds	r26, 0x2970
    2d06:	b0 91 71 29 	lds	r27, 0x2971
    2d0a:	92 2b       	or	r25, r18
    2d0c:	80 93 6e 29 	sts	0x296E, r24
    2d10:	90 93 6f 29 	sts	0x296F, r25
    2d14:	a0 93 70 29 	sts	0x2970, r26
    2d18:	b0 93 71 29 	sts	0x2971, r27
				adresa_long |= (long)receiveArray[5];
    2d1c:	20 91 7b 29 	lds	r18, 0x297B
    2d20:	80 91 6e 29 	lds	r24, 0x296E
    2d24:	90 91 6f 29 	lds	r25, 0x296F
    2d28:	a0 91 70 29 	lds	r26, 0x2970
    2d2c:	b0 91 71 29 	lds	r27, 0x2971
    2d30:	82 2b       	or	r24, r18
    2d32:	80 93 6e 29 	sts	0x296E, r24
    2d36:	90 93 6f 29 	sts	0x296F, r25
    2d3a:	a0 93 70 29 	sts	0x2970, r26
    2d3e:	b0 93 71 29 	sts	0x2971, r27
	
				//unsigned long registerValue = mmio32(adresa_long);		// read
					
				if (receiveArray[1] == 1)	//jednobajtna promenljiva
    2d42:	80 91 77 29 	lds	r24, 0x2977
    2d46:	81 30       	cpi	r24, 0x01	; 1
    2d48:	b1 f4       	brne	.+44     	; 0x2d76 <__vector_61+0x114e>
				{
					sendArray[4] = mmio32(adresa_long);
    2d4a:	80 91 6e 29 	lds	r24, 0x296E
    2d4e:	90 91 6f 29 	lds	r25, 0x296F
    2d52:	a0 91 70 29 	lds	r26, 0x2970
    2d56:	b0 91 71 29 	lds	r27, 0x2971
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	80 81       	ld	r24, Z
    2d5e:	91 81       	ldd	r25, Z+1	; 0x01
    2d60:	a2 81       	ldd	r26, Z+2	; 0x02
    2d62:	b3 81       	ldd	r27, Z+3	; 0x03
    2d64:	80 93 e9 28 	sts	0x28E9, r24
					sendArray[3] = 0;
    2d68:	10 92 e8 28 	sts	0x28E8, r1
					sendArray[2] = 0;
    2d6c:	10 92 e7 28 	sts	0x28E7, r1
					sendArray[1] = 0;
    2d70:	10 92 e6 28 	sts	0x28E6, r1
    2d74:	74 c0       	rjmp	.+232    	; 0x2e5e <__vector_61+0x1236>
				}
				else if (receiveArray[1] == 2) //dvobajtna promenljiva
    2d76:	80 91 77 29 	lds	r24, 0x2977
    2d7a:	82 30       	cpi	r24, 0x02	; 2
    2d7c:	31 f5       	brne	.+76     	; 0x2dca <__vector_61+0x11a2>
				{
					sendArray[4] = mmio32(adresa_long);
    2d7e:	80 91 6e 29 	lds	r24, 0x296E
    2d82:	90 91 6f 29 	lds	r25, 0x296F
    2d86:	a0 91 70 29 	lds	r26, 0x2970
    2d8a:	b0 91 71 29 	lds	r27, 0x2971
    2d8e:	fc 01       	movw	r30, r24
    2d90:	80 81       	ld	r24, Z
    2d92:	91 81       	ldd	r25, Z+1	; 0x01
    2d94:	a2 81       	ldd	r26, Z+2	; 0x02
    2d96:	b3 81       	ldd	r27, Z+3	; 0x03
    2d98:	80 93 e9 28 	sts	0x28E9, r24
					sendArray[3] = mmio32(adresa_long+1);
    2d9c:	80 91 6e 29 	lds	r24, 0x296E
    2da0:	90 91 6f 29 	lds	r25, 0x296F
    2da4:	a0 91 70 29 	lds	r26, 0x2970
    2da8:	b0 91 71 29 	lds	r27, 0x2971
    2dac:	01 96       	adiw	r24, 0x01	; 1
    2dae:	a1 1d       	adc	r26, r1
    2db0:	b1 1d       	adc	r27, r1
    2db2:	fc 01       	movw	r30, r24
    2db4:	80 81       	ld	r24, Z
    2db6:	91 81       	ldd	r25, Z+1	; 0x01
    2db8:	a2 81       	ldd	r26, Z+2	; 0x02
    2dba:	b3 81       	ldd	r27, Z+3	; 0x03
    2dbc:	80 93 e8 28 	sts	0x28E8, r24
					sendArray[2] = 0;
    2dc0:	10 92 e7 28 	sts	0x28E7, r1
					sendArray[1] = 0;
    2dc4:	10 92 e6 28 	sts	0x28E6, r1
    2dc8:	4a c0       	rjmp	.+148    	; 0x2e5e <__vector_61+0x1236>
				}
				else if (receiveArray[1] == 4)	//cetvorobajtna promenljiva
    2dca:	80 91 77 29 	lds	r24, 0x2977
    2dce:	84 30       	cpi	r24, 0x04	; 4
    2dd0:	09 f0       	breq	.+2      	; 0x2dd4 <__vector_61+0x11ac>
    2dd2:	45 c0       	rjmp	.+138    	; 0x2e5e <__vector_61+0x1236>
				{
					sendArray[4] = mmio32(adresa_long);
    2dd4:	80 91 6e 29 	lds	r24, 0x296E
    2dd8:	90 91 6f 29 	lds	r25, 0x296F
    2ddc:	a0 91 70 29 	lds	r26, 0x2970
    2de0:	b0 91 71 29 	lds	r27, 0x2971
    2de4:	fc 01       	movw	r30, r24
    2de6:	80 81       	ld	r24, Z
    2de8:	91 81       	ldd	r25, Z+1	; 0x01
    2dea:	a2 81       	ldd	r26, Z+2	; 0x02
    2dec:	b3 81       	ldd	r27, Z+3	; 0x03
    2dee:	80 93 e9 28 	sts	0x28E9, r24
					sendArray[3] = mmio32(adresa_long+1);
    2df2:	80 91 6e 29 	lds	r24, 0x296E
    2df6:	90 91 6f 29 	lds	r25, 0x296F
    2dfa:	a0 91 70 29 	lds	r26, 0x2970
    2dfe:	b0 91 71 29 	lds	r27, 0x2971
    2e02:	01 96       	adiw	r24, 0x01	; 1
    2e04:	a1 1d       	adc	r26, r1
    2e06:	b1 1d       	adc	r27, r1
    2e08:	fc 01       	movw	r30, r24
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e10:	b3 81       	ldd	r27, Z+3	; 0x03
    2e12:	80 93 e8 28 	sts	0x28E8, r24
					sendArray[2] = mmio32(adresa_long+2);
    2e16:	80 91 6e 29 	lds	r24, 0x296E
    2e1a:	90 91 6f 29 	lds	r25, 0x296F
    2e1e:	a0 91 70 29 	lds	r26, 0x2970
    2e22:	b0 91 71 29 	lds	r27, 0x2971
    2e26:	02 96       	adiw	r24, 0x02	; 2
    2e28:	a1 1d       	adc	r26, r1
    2e2a:	b1 1d       	adc	r27, r1
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	80 81       	ld	r24, Z
    2e30:	91 81       	ldd	r25, Z+1	; 0x01
    2e32:	a2 81       	ldd	r26, Z+2	; 0x02
    2e34:	b3 81       	ldd	r27, Z+3	; 0x03
    2e36:	80 93 e7 28 	sts	0x28E7, r24
					sendArray[1] = mmio32(adresa_long+3);
    2e3a:	80 91 6e 29 	lds	r24, 0x296E
    2e3e:	90 91 6f 29 	lds	r25, 0x296F
    2e42:	a0 91 70 29 	lds	r26, 0x2970
    2e46:	b0 91 71 29 	lds	r27, 0x2971
    2e4a:	03 96       	adiw	r24, 0x03	; 3
    2e4c:	a1 1d       	adc	r26, r1
    2e4e:	b1 1d       	adc	r27, r1
    2e50:	fc 01       	movw	r30, r24
    2e52:	80 81       	ld	r24, Z
    2e54:	91 81       	ldd	r25, Z+1	; 0x01
    2e56:	a2 81       	ldd	r26, Z+2	; 0x02
    2e58:	b3 81       	ldd	r27, Z+3	; 0x03
    2e5a:	80 93 e6 28 	sts	0x28E6, r24
				}
								
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2e5e:	80 91 76 29 	lds	r24, 0x2976
    2e62:	80 93 e5 28 	sts	0x28E5, r24
					sendArray[2] = mmio32(adresa_long+2);
					sendArray[1] = mmio32(adresa_long+3);
				}
								
				//slanje odgovora
				i = 0;
    2e66:	00 e0       	ldi	r16, 0x00	; 0
    2e68:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i <= 4)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2e6a:	f8 01       	movw	r30, r16
    2e6c:	eb 51       	subi	r30, 0x1B	; 27
    2e6e:	f7 4d       	sbci	r31, 0xD7	; 215
    2e70:	60 81       	ld	r22, Z
    2e72:	83 e1       	ldi	r24, 0x13	; 19
    2e74:	90 e2       	ldi	r25, 0x20	; 32
    2e76:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[5] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2e7a:	88 23       	and	r24, r24
    2e7c:	11 f0       	breq	.+4      	; 0x2e82 <__vector_61+0x125a>
					{
						i++;
    2e7e:	0f 5f       	subi	r16, 0xFF	; 255
    2e80:	1f 4f       	sbci	r17, 0xFF	; 255
				}
								
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i <= 4)
    2e82:	05 30       	cpi	r16, 0x05	; 5
    2e84:	11 05       	cpc	r17, r1
    2e86:	8c f3       	brlt	.-30     	; 0x2e6a <__vector_61+0x1242>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2e88:	10 92 65 29 	sts	0x2965, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    2e8c:	10 92 65 29 	sts	0x2965, r1
    2e90:	68 c3       	rjmp	.+1744   	; 0x3562 <__vector_61+0x193a>
		}					
	}
	//UPIS U ADRESIRANU PROMENLJIVU - 10
	else if(receiveArray[0] == 10)					//provera funkcijskog bajta
    2e92:	80 91 76 29 	lds	r24, 0x2976
    2e96:	8a 30       	cpi	r24, 0x0A	; 10
    2e98:	09 f0       	breq	.+2      	; 0x2e9c <__vector_61+0x1274>
    2e9a:	8e c1       	rjmp	.+796    	; 0x31b8 <__vector_61+0x1590>
	{
		if(RX_i_E1 >= 10)								//stigla je cela poruka (1+1+4+4+1)
    2e9c:	80 91 65 29 	lds	r24, 0x2965
    2ea0:	8a 30       	cpi	r24, 0x0A	; 10
    2ea2:	08 f4       	brcc	.+2      	; 0x2ea6 <__vector_61+0x127e>
    2ea4:	5e c3       	rjmp	.+1724   	; 0x3562 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2ea6:	10 92 03 2e 	sts	0x2E03, r1
			{
				adresa_long = 0;
    2eaa:	10 92 6e 29 	sts	0x296E, r1
    2eae:	10 92 6f 29 	sts	0x296F, r1
    2eb2:	10 92 70 29 	sts	0x2970, r1
    2eb6:	10 92 71 29 	sts	0x2971, r1
				adresa_long |= (long)receiveArray[2] << 24;
    2eba:	20 91 78 29 	lds	r18, 0x2978
    2ebe:	80 91 6e 29 	lds	r24, 0x296E
    2ec2:	90 91 6f 29 	lds	r25, 0x296F
    2ec6:	a0 91 70 29 	lds	r26, 0x2970
    2eca:	b0 91 71 29 	lds	r27, 0x2971
    2ece:	b2 2b       	or	r27, r18
    2ed0:	80 93 6e 29 	sts	0x296E, r24
    2ed4:	90 93 6f 29 	sts	0x296F, r25
    2ed8:	a0 93 70 29 	sts	0x2970, r26
    2edc:	b0 93 71 29 	sts	0x2971, r27
				adresa_long |= (long)receiveArray[3] << 16;
    2ee0:	20 91 79 29 	lds	r18, 0x2979
    2ee4:	80 91 6e 29 	lds	r24, 0x296E
    2ee8:	90 91 6f 29 	lds	r25, 0x296F
    2eec:	a0 91 70 29 	lds	r26, 0x2970
    2ef0:	b0 91 71 29 	lds	r27, 0x2971
    2ef4:	a2 2b       	or	r26, r18
    2ef6:	80 93 6e 29 	sts	0x296E, r24
    2efa:	90 93 6f 29 	sts	0x296F, r25
    2efe:	a0 93 70 29 	sts	0x2970, r26
    2f02:	b0 93 71 29 	sts	0x2971, r27
				adresa_long |= (long)receiveArray[4] << 8;
    2f06:	20 91 7a 29 	lds	r18, 0x297A
    2f0a:	80 91 6e 29 	lds	r24, 0x296E
    2f0e:	90 91 6f 29 	lds	r25, 0x296F
    2f12:	a0 91 70 29 	lds	r26, 0x2970
    2f16:	b0 91 71 29 	lds	r27, 0x2971
    2f1a:	92 2b       	or	r25, r18
    2f1c:	80 93 6e 29 	sts	0x296E, r24
    2f20:	90 93 6f 29 	sts	0x296F, r25
    2f24:	a0 93 70 29 	sts	0x2970, r26
    2f28:	b0 93 71 29 	sts	0x2971, r27
				adresa_long |= (long)receiveArray[5];
    2f2c:	20 91 7b 29 	lds	r18, 0x297B
    2f30:	80 91 6e 29 	lds	r24, 0x296E
    2f34:	90 91 6f 29 	lds	r25, 0x296F
    2f38:	a0 91 70 29 	lds	r26, 0x2970
    2f3c:	b0 91 71 29 	lds	r27, 0x2971
    2f40:	82 2b       	or	r24, r18
    2f42:	80 93 6e 29 	sts	0x296E, r24
    2f46:	90 93 6f 29 	sts	0x296F, r25
    2f4a:	a0 93 70 29 	sts	0x2970, r26
    2f4e:	b0 93 71 29 	sts	0x2971, r27

				// write
				if (receiveArray[1] == 4)	//cetvorobajtna promenljiva
    2f52:	80 91 77 29 	lds	r24, 0x2977
    2f56:	84 30       	cpi	r24, 0x04	; 4
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <__vector_61+0x1334>
    2f5a:	97 c0       	rjmp	.+302    	; 0x308a <__vector_61+0x1462>
				{
					mmio32(adresa_long) = receiveArray[9];                     
    2f5c:	80 91 6e 29 	lds	r24, 0x296E
    2f60:	90 91 6f 29 	lds	r25, 0x296F
    2f64:	a0 91 70 29 	lds	r26, 0x2970
    2f68:	b0 91 71 29 	lds	r27, 0x2971
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	80 91 7f 29 	lds	r24, 0x297F
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	a0 e0       	ldi	r26, 0x00	; 0
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	80 83       	st	Z, r24
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	a2 83       	std	Z+2, r26	; 0x02
    2f7e:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+1) = receiveArray[8];					
    2f80:	80 91 6e 29 	lds	r24, 0x296E
    2f84:	90 91 6f 29 	lds	r25, 0x296F
    2f88:	a0 91 70 29 	lds	r26, 0x2970
    2f8c:	b0 91 71 29 	lds	r27, 0x2971
    2f90:	01 96       	adiw	r24, 0x01	; 1
    2f92:	a1 1d       	adc	r26, r1
    2f94:	b1 1d       	adc	r27, r1
    2f96:	fc 01       	movw	r30, r24
    2f98:	80 91 7e 29 	lds	r24, 0x297E
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	a0 e0       	ldi	r26, 0x00	; 0
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	80 83       	st	Z, r24
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	a2 83       	std	Z+2, r26	; 0x02
    2fa8:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+2) = receiveArray[7];
    2faa:	80 91 6e 29 	lds	r24, 0x296E
    2fae:	90 91 6f 29 	lds	r25, 0x296F
    2fb2:	a0 91 70 29 	lds	r26, 0x2970
    2fb6:	b0 91 71 29 	lds	r27, 0x2971
    2fba:	02 96       	adiw	r24, 0x02	; 2
    2fbc:	a1 1d       	adc	r26, r1
    2fbe:	b1 1d       	adc	r27, r1
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	80 91 7d 29 	lds	r24, 0x297D
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	a0 e0       	ldi	r26, 0x00	; 0
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	80 83       	st	Z, r24
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	a2 83       	std	Z+2, r26	; 0x02
    2fd2:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+3) = receiveArray[6];   
    2fd4:	80 91 6e 29 	lds	r24, 0x296E
    2fd8:	90 91 6f 29 	lds	r25, 0x296F
    2fdc:	a0 91 70 29 	lds	r26, 0x2970
    2fe0:	b0 91 71 29 	lds	r27, 0x2971
    2fe4:	03 96       	adiw	r24, 0x03	; 3
    2fe6:	a1 1d       	adc	r26, r1
    2fe8:	b1 1d       	adc	r27, r1
    2fea:	fc 01       	movw	r30, r24
    2fec:	80 91 7c 29 	lds	r24, 0x297C
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	a0 e0       	ldi	r26, 0x00	; 0
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	80 83       	st	Z, r24
    2ff8:	91 83       	std	Z+1, r25	; 0x01
    2ffa:	a2 83       	std	Z+2, r26	; 0x02
    2ffc:	b3 83       	std	Z+3, r27	; 0x03
					
					sendArray[1] = mmio32(adresa_long+3);
    2ffe:	80 91 6e 29 	lds	r24, 0x296E
    3002:	90 91 6f 29 	lds	r25, 0x296F
    3006:	a0 91 70 29 	lds	r26, 0x2970
    300a:	b0 91 71 29 	lds	r27, 0x2971
    300e:	03 96       	adiw	r24, 0x03	; 3
    3010:	a1 1d       	adc	r26, r1
    3012:	b1 1d       	adc	r27, r1
    3014:	fc 01       	movw	r30, r24
    3016:	80 81       	ld	r24, Z
    3018:	91 81       	ldd	r25, Z+1	; 0x01
    301a:	a2 81       	ldd	r26, Z+2	; 0x02
    301c:	b3 81       	ldd	r27, Z+3	; 0x03
    301e:	80 93 e6 28 	sts	0x28E6, r24
					sendArray[2] = mmio32(adresa_long+2);
    3022:	80 91 6e 29 	lds	r24, 0x296E
    3026:	90 91 6f 29 	lds	r25, 0x296F
    302a:	a0 91 70 29 	lds	r26, 0x2970
    302e:	b0 91 71 29 	lds	r27, 0x2971
    3032:	02 96       	adiw	r24, 0x02	; 2
    3034:	a1 1d       	adc	r26, r1
    3036:	b1 1d       	adc	r27, r1
    3038:	fc 01       	movw	r30, r24
    303a:	80 81       	ld	r24, Z
    303c:	91 81       	ldd	r25, Z+1	; 0x01
    303e:	a2 81       	ldd	r26, Z+2	; 0x02
    3040:	b3 81       	ldd	r27, Z+3	; 0x03
    3042:	80 93 e7 28 	sts	0x28E7, r24
					sendArray[3] = mmio32(adresa_long+1);
    3046:	80 91 6e 29 	lds	r24, 0x296E
    304a:	90 91 6f 29 	lds	r25, 0x296F
    304e:	a0 91 70 29 	lds	r26, 0x2970
    3052:	b0 91 71 29 	lds	r27, 0x2971
    3056:	01 96       	adiw	r24, 0x01	; 1
    3058:	a1 1d       	adc	r26, r1
    305a:	b1 1d       	adc	r27, r1
    305c:	fc 01       	movw	r30, r24
    305e:	80 81       	ld	r24, Z
    3060:	91 81       	ldd	r25, Z+1	; 0x01
    3062:	a2 81       	ldd	r26, Z+2	; 0x02
    3064:	b3 81       	ldd	r27, Z+3	; 0x03
    3066:	80 93 e8 28 	sts	0x28E8, r24
					sendArray[4] = mmio32(adresa_long);  
    306a:	80 91 6e 29 	lds	r24, 0x296E
    306e:	90 91 6f 29 	lds	r25, 0x296F
    3072:	a0 91 70 29 	lds	r26, 0x2970
    3076:	b0 91 71 29 	lds	r27, 0x2971
    307a:	fc 01       	movw	r30, r24
    307c:	80 81       	ld	r24, Z
    307e:	91 81       	ldd	r25, Z+1	; 0x01
    3080:	a2 81       	ldd	r26, Z+2	; 0x02
    3082:	b3 81       	ldd	r27, Z+3	; 0x03
    3084:	80 93 e9 28 	sts	0x28E9, r24
    3088:	7d c0       	rjmp	.+250    	; 0x3184 <__vector_61+0x155c>
				}	
				else if (receiveArray[1] == 2)	//dvobajtna promenljiva
    308a:	80 91 77 29 	lds	r24, 0x2977
    308e:	82 30       	cpi	r24, 0x02	; 2
    3090:	09 f0       	breq	.+2      	; 0x3094 <__vector_61+0x146c>
    3092:	4d c0       	rjmp	.+154    	; 0x312e <__vector_61+0x1506>
				{
					mmio32(adresa_long) = receiveArray[9];                     
    3094:	80 91 6e 29 	lds	r24, 0x296E
    3098:	90 91 6f 29 	lds	r25, 0x296F
    309c:	a0 91 70 29 	lds	r26, 0x2970
    30a0:	b0 91 71 29 	lds	r27, 0x2971
    30a4:	fc 01       	movw	r30, r24
    30a6:	80 91 7f 29 	lds	r24, 0x297F
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a0 e0       	ldi	r26, 0x00	; 0
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	80 83       	st	Z, r24
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	a2 83       	std	Z+2, r26	; 0x02
    30b6:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+1) = receiveArray[8];					
    30b8:	80 91 6e 29 	lds	r24, 0x296E
    30bc:	90 91 6f 29 	lds	r25, 0x296F
    30c0:	a0 91 70 29 	lds	r26, 0x2970
    30c4:	b0 91 71 29 	lds	r27, 0x2971
    30c8:	01 96       	adiw	r24, 0x01	; 1
    30ca:	a1 1d       	adc	r26, r1
    30cc:	b1 1d       	adc	r27, r1
    30ce:	fc 01       	movw	r30, r24
    30d0:	80 91 7e 29 	lds	r24, 0x297E
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	a0 e0       	ldi	r26, 0x00	; 0
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	80 83       	st	Z, r24
    30dc:	91 83       	std	Z+1, r25	; 0x01
    30de:	a2 83       	std	Z+2, r26	; 0x02
    30e0:	b3 83       	std	Z+3, r27	; 0x03
					
					sendArray[1] = 0;
    30e2:	10 92 e6 28 	sts	0x28E6, r1
					sendArray[2] = 0;
    30e6:	10 92 e7 28 	sts	0x28E7, r1
					sendArray[3] = mmio32(adresa_long+1);
    30ea:	80 91 6e 29 	lds	r24, 0x296E
    30ee:	90 91 6f 29 	lds	r25, 0x296F
    30f2:	a0 91 70 29 	lds	r26, 0x2970
    30f6:	b0 91 71 29 	lds	r27, 0x2971
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	a1 1d       	adc	r26, r1
    30fe:	b1 1d       	adc	r27, r1
    3100:	fc 01       	movw	r30, r24
    3102:	80 81       	ld	r24, Z
    3104:	91 81       	ldd	r25, Z+1	; 0x01
    3106:	a2 81       	ldd	r26, Z+2	; 0x02
    3108:	b3 81       	ldd	r27, Z+3	; 0x03
    310a:	80 93 e8 28 	sts	0x28E8, r24
					sendArray[4] = mmio32(adresa_long);  
    310e:	80 91 6e 29 	lds	r24, 0x296E
    3112:	90 91 6f 29 	lds	r25, 0x296F
    3116:	a0 91 70 29 	lds	r26, 0x2970
    311a:	b0 91 71 29 	lds	r27, 0x2971
    311e:	fc 01       	movw	r30, r24
    3120:	80 81       	ld	r24, Z
    3122:	91 81       	ldd	r25, Z+1	; 0x01
    3124:	a2 81       	ldd	r26, Z+2	; 0x02
    3126:	b3 81       	ldd	r27, Z+3	; 0x03
    3128:	80 93 e9 28 	sts	0x28E9, r24
    312c:	2b c0       	rjmp	.+86     	; 0x3184 <__vector_61+0x155c>
				}	
				else if (receiveArray[1] == 1)	//jednobajtna promenljiva
    312e:	80 91 77 29 	lds	r24, 0x2977
    3132:	81 30       	cpi	r24, 0x01	; 1
    3134:	39 f5       	brne	.+78     	; 0x3184 <__vector_61+0x155c>
				{
					mmio32(adresa_long) = receiveArray[9];                        
    3136:	80 91 6e 29 	lds	r24, 0x296E
    313a:	90 91 6f 29 	lds	r25, 0x296F
    313e:	a0 91 70 29 	lds	r26, 0x2970
    3142:	b0 91 71 29 	lds	r27, 0x2971
    3146:	fc 01       	movw	r30, r24
    3148:	80 91 7f 29 	lds	r24, 0x297F
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	a0 e0       	ldi	r26, 0x00	; 0
    3150:	b0 e0       	ldi	r27, 0x00	; 0
    3152:	80 83       	st	Z, r24
    3154:	91 83       	std	Z+1, r25	; 0x01
    3156:	a2 83       	std	Z+2, r26	; 0x02
    3158:	b3 83       	std	Z+3, r27	; 0x03
					
					sendArray[1] = 0;
    315a:	10 92 e6 28 	sts	0x28E6, r1
					sendArray[2] = 0;
    315e:	10 92 e7 28 	sts	0x28E7, r1
					sendArray[3] = 0;
    3162:	10 92 e8 28 	sts	0x28E8, r1
					sendArray[4] = mmio32(adresa_long);  
    3166:	80 91 6e 29 	lds	r24, 0x296E
    316a:	90 91 6f 29 	lds	r25, 0x296F
    316e:	a0 91 70 29 	lds	r26, 0x2970
    3172:	b0 91 71 29 	lds	r27, 0x2971
    3176:	fc 01       	movw	r30, r24
    3178:	80 81       	ld	r24, Z
    317a:	91 81       	ldd	r25, Z+1	; 0x01
    317c:	a2 81       	ldd	r26, Z+2	; 0x02
    317e:	b3 81       	ldd	r27, Z+3	; 0x03
    3180:	80 93 e9 28 	sts	0x28E9, r24
				}						               
									
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    3184:	80 91 76 29 	lds	r24, 0x2976
    3188:	80 93 e5 28 	sts	0x28E5, r24
					sendArray[3] = 0;
					sendArray[4] = mmio32(adresa_long);  
				}						               
									
				//slanje odgovora
				i = 0;
    318c:	00 e0       	ldi	r16, 0x00	; 0
    318e:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i <= 4)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    3190:	f8 01       	movw	r30, r16
    3192:	eb 51       	subi	r30, 0x1B	; 27
    3194:	f7 4d       	sbci	r31, 0xD7	; 215
    3196:	60 81       	ld	r22, Z
    3198:	83 e1       	ldi	r24, 0x13	; 19
    319a:	90 e2       	ldi	r25, 0x20	; 32
    319c:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[5] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    31a0:	88 23       	and	r24, r24
    31a2:	11 f0       	breq	.+4      	; 0x31a8 <__vector_61+0x1580>
					{
						i++;
    31a4:	0f 5f       	subi	r16, 0xFF	; 255
    31a6:	1f 4f       	sbci	r17, 0xFF	; 255
				}						               
									
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i <= 4)
    31a8:	05 30       	cpi	r16, 0x05	; 5
    31aa:	11 05       	cpc	r17, r1
    31ac:	8c f3       	brlt	.-30     	; 0x3190 <__vector_61+0x1568>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    31ae:	10 92 65 29 	sts	0x2965, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    31b2:	10 92 65 29 	sts	0x2965, r1
    31b6:	d5 c1       	rjmp	.+938    	; 0x3562 <__vector_61+0x193a>
		}					
	}
	//PODESAVANJE NIZA ZA SNIMANJE - 11
	else if(receiveArray[0] == 11)					//provera funkcijskog bajta
    31b8:	80 91 76 29 	lds	r24, 0x2976
    31bc:	8b 30       	cpi	r24, 0x0B	; 11
    31be:	09 f0       	breq	.+2      	; 0x31c2 <__vector_61+0x159a>
    31c0:	44 c1       	rjmp	.+648    	; 0x344a <__vector_61+0x1822>
	{
		if(RX_i_E1 >= 7)							//stigla je cela poruka (3)
    31c2:	80 91 65 29 	lds	r24, 0x2965
    31c6:	87 30       	cpi	r24, 0x07	; 7
    31c8:	08 f4       	brcc	.+2      	; 0x31cc <__vector_61+0x15a4>
    31ca:	cb c1       	rjmp	.+918    	; 0x3562 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    31cc:	10 92 03 2e 	sts	0x2E03, r1
			{
				if (receiveArray[1] == 1)	//niz_1
    31d0:	80 91 77 29 	lds	r24, 0x2977
    31d4:	81 30       	cpi	r24, 0x01	; 1
    31d6:	09 f0       	breq	.+2      	; 0x31da <__vector_61+0x15b2>
    31d8:	5c c0       	rjmp	.+184    	; 0x3292 <__vector_61+0x166a>
				{
					sample_time_niz_1 = receiveArray[2];
    31da:	80 91 78 29 	lds	r24, 0x2978
    31de:	80 93 7a 32 	sts	0x327A, r24
					velicina_niz_1 = receiveArray[3];
    31e2:	80 91 79 29 	lds	r24, 0x2979
    31e6:	80 93 8a 32 	sts	0x328A, r24
					adresa_niz_1 = 0;
    31ea:	10 92 02 2a 	sts	0x2A02, r1
    31ee:	10 92 03 2a 	sts	0x2A03, r1
    31f2:	10 92 04 2a 	sts	0x2A04, r1
    31f6:	10 92 05 2a 	sts	0x2A05, r1
					adresa_niz_1 |= (long)receiveArray[4] << 24;
    31fa:	20 91 7a 29 	lds	r18, 0x297A
    31fe:	80 91 02 2a 	lds	r24, 0x2A02
    3202:	90 91 03 2a 	lds	r25, 0x2A03
    3206:	a0 91 04 2a 	lds	r26, 0x2A04
    320a:	b0 91 05 2a 	lds	r27, 0x2A05
    320e:	b2 2b       	or	r27, r18
    3210:	80 93 02 2a 	sts	0x2A02, r24
    3214:	90 93 03 2a 	sts	0x2A03, r25
    3218:	a0 93 04 2a 	sts	0x2A04, r26
    321c:	b0 93 05 2a 	sts	0x2A05, r27
					adresa_niz_1 |= (long)receiveArray[5] << 16;
    3220:	20 91 7b 29 	lds	r18, 0x297B
    3224:	80 91 02 2a 	lds	r24, 0x2A02
    3228:	90 91 03 2a 	lds	r25, 0x2A03
    322c:	a0 91 04 2a 	lds	r26, 0x2A04
    3230:	b0 91 05 2a 	lds	r27, 0x2A05
    3234:	a2 2b       	or	r26, r18
    3236:	80 93 02 2a 	sts	0x2A02, r24
    323a:	90 93 03 2a 	sts	0x2A03, r25
    323e:	a0 93 04 2a 	sts	0x2A04, r26
    3242:	b0 93 05 2a 	sts	0x2A05, r27
					adresa_niz_1 |= (long)receiveArray[6] << 8;
    3246:	20 91 7c 29 	lds	r18, 0x297C
    324a:	80 91 02 2a 	lds	r24, 0x2A02
    324e:	90 91 03 2a 	lds	r25, 0x2A03
    3252:	a0 91 04 2a 	lds	r26, 0x2A04
    3256:	b0 91 05 2a 	lds	r27, 0x2A05
    325a:	92 2b       	or	r25, r18
    325c:	80 93 02 2a 	sts	0x2A02, r24
    3260:	90 93 03 2a 	sts	0x2A03, r25
    3264:	a0 93 04 2a 	sts	0x2A04, r26
    3268:	b0 93 05 2a 	sts	0x2A05, r27
					adresa_niz_1 |= (long)receiveArray[7];  
    326c:	20 91 7d 29 	lds	r18, 0x297D
    3270:	80 91 02 2a 	lds	r24, 0x2A02
    3274:	90 91 03 2a 	lds	r25, 0x2A03
    3278:	a0 91 04 2a 	lds	r26, 0x2A04
    327c:	b0 91 05 2a 	lds	r27, 0x2A05
    3280:	82 2b       	or	r24, r18
    3282:	80 93 02 2a 	sts	0x2A02, r24
    3286:	90 93 03 2a 	sts	0x2A03, r25
    328a:	a0 93 04 2a 	sts	0x2A04, r26
    328e:	b0 93 05 2a 	sts	0x2A05, r27
				}
				if (receiveArray[1] == 2)	//niz_2
    3292:	80 91 77 29 	lds	r24, 0x2977
    3296:	82 30       	cpi	r24, 0x02	; 2
    3298:	09 f0       	breq	.+2      	; 0x329c <__vector_61+0x1674>
    329a:	5c c0       	rjmp	.+184    	; 0x3354 <__vector_61+0x172c>
				{
					sample_time_niz_2 = receiveArray[2];
    329c:	80 91 78 29 	lds	r24, 0x2978
    32a0:	80 93 85 2e 	sts	0x2E85, r24
					velicina_niz_2 = receiveArray[3];
    32a4:	80 91 79 29 	lds	r24, 0x2979
    32a8:	80 93 68 2e 	sts	0x2E68, r24
					adresa_niz_2 = 0;
    32ac:	10 92 c4 24 	sts	0x24C4, r1
    32b0:	10 92 c5 24 	sts	0x24C5, r1
    32b4:	10 92 c6 24 	sts	0x24C6, r1
    32b8:	10 92 c7 24 	sts	0x24C7, r1
					adresa_niz_2 |= (long)receiveArray[4] << 24;
    32bc:	20 91 7a 29 	lds	r18, 0x297A
    32c0:	80 91 c4 24 	lds	r24, 0x24C4
    32c4:	90 91 c5 24 	lds	r25, 0x24C5
    32c8:	a0 91 c6 24 	lds	r26, 0x24C6
    32cc:	b0 91 c7 24 	lds	r27, 0x24C7
    32d0:	b2 2b       	or	r27, r18
    32d2:	80 93 c4 24 	sts	0x24C4, r24
    32d6:	90 93 c5 24 	sts	0x24C5, r25
    32da:	a0 93 c6 24 	sts	0x24C6, r26
    32de:	b0 93 c7 24 	sts	0x24C7, r27
					adresa_niz_2 |= (long)receiveArray[5] << 16;
    32e2:	20 91 7b 29 	lds	r18, 0x297B
    32e6:	80 91 c4 24 	lds	r24, 0x24C4
    32ea:	90 91 c5 24 	lds	r25, 0x24C5
    32ee:	a0 91 c6 24 	lds	r26, 0x24C6
    32f2:	b0 91 c7 24 	lds	r27, 0x24C7
    32f6:	a2 2b       	or	r26, r18
    32f8:	80 93 c4 24 	sts	0x24C4, r24
    32fc:	90 93 c5 24 	sts	0x24C5, r25
    3300:	a0 93 c6 24 	sts	0x24C6, r26
    3304:	b0 93 c7 24 	sts	0x24C7, r27
					adresa_niz_2 |= (long)receiveArray[6] << 8;
    3308:	20 91 7c 29 	lds	r18, 0x297C
    330c:	80 91 c4 24 	lds	r24, 0x24C4
    3310:	90 91 c5 24 	lds	r25, 0x24C5
    3314:	a0 91 c6 24 	lds	r26, 0x24C6
    3318:	b0 91 c7 24 	lds	r27, 0x24C7
    331c:	92 2b       	or	r25, r18
    331e:	80 93 c4 24 	sts	0x24C4, r24
    3322:	90 93 c5 24 	sts	0x24C5, r25
    3326:	a0 93 c6 24 	sts	0x24C6, r26
    332a:	b0 93 c7 24 	sts	0x24C7, r27
					adresa_niz_2 |= (long)receiveArray[7];
    332e:	20 91 7d 29 	lds	r18, 0x297D
    3332:	80 91 c4 24 	lds	r24, 0x24C4
    3336:	90 91 c5 24 	lds	r25, 0x24C5
    333a:	a0 91 c6 24 	lds	r26, 0x24C6
    333e:	b0 91 c7 24 	lds	r27, 0x24C7
    3342:	82 2b       	or	r24, r18
    3344:	80 93 c4 24 	sts	0x24C4, r24
    3348:	90 93 c5 24 	sts	0x24C5, r25
    334c:	a0 93 c6 24 	sts	0x24C6, r26
    3350:	b0 93 c7 24 	sts	0x24C7, r27
				}
				
				if (receiveArray[1] == 3)	//niz_3
    3354:	80 91 77 29 	lds	r24, 0x2977
    3358:	83 30       	cpi	r24, 0x03	; 3
    335a:	09 f0       	breq	.+2      	; 0x335e <__vector_61+0x1736>
    335c:	5c c0       	rjmp	.+184    	; 0x3416 <__vector_61+0x17ee>
				{
					sample_time_niz_3 = receiveArray[2];
    335e:	80 91 78 29 	lds	r24, 0x2978
    3362:	80 93 19 2e 	sts	0x2E19, r24
					velicina_niz_3 = receiveArray[3];
    3366:	80 91 79 29 	lds	r24, 0x2979
    336a:	80 93 da 24 	sts	0x24DA, r24
					adresa_niz_3 = 0;
    336e:	10 92 48 2e 	sts	0x2E48, r1
    3372:	10 92 49 2e 	sts	0x2E49, r1
    3376:	10 92 4a 2e 	sts	0x2E4A, r1
    337a:	10 92 4b 2e 	sts	0x2E4B, r1
					adresa_niz_3 |= (long)receiveArray[4] << 24;
    337e:	20 91 7a 29 	lds	r18, 0x297A
    3382:	80 91 48 2e 	lds	r24, 0x2E48
    3386:	90 91 49 2e 	lds	r25, 0x2E49
    338a:	a0 91 4a 2e 	lds	r26, 0x2E4A
    338e:	b0 91 4b 2e 	lds	r27, 0x2E4B
    3392:	b2 2b       	or	r27, r18
    3394:	80 93 48 2e 	sts	0x2E48, r24
    3398:	90 93 49 2e 	sts	0x2E49, r25
    339c:	a0 93 4a 2e 	sts	0x2E4A, r26
    33a0:	b0 93 4b 2e 	sts	0x2E4B, r27
					adresa_niz_3 |= (long)receiveArray[5] << 16;
    33a4:	20 91 7b 29 	lds	r18, 0x297B
    33a8:	80 91 48 2e 	lds	r24, 0x2E48
    33ac:	90 91 49 2e 	lds	r25, 0x2E49
    33b0:	a0 91 4a 2e 	lds	r26, 0x2E4A
    33b4:	b0 91 4b 2e 	lds	r27, 0x2E4B
    33b8:	a2 2b       	or	r26, r18
    33ba:	80 93 48 2e 	sts	0x2E48, r24
    33be:	90 93 49 2e 	sts	0x2E49, r25
    33c2:	a0 93 4a 2e 	sts	0x2E4A, r26
    33c6:	b0 93 4b 2e 	sts	0x2E4B, r27
					adresa_niz_3 |= (long)receiveArray[6] << 8;
    33ca:	20 91 7c 29 	lds	r18, 0x297C
    33ce:	80 91 48 2e 	lds	r24, 0x2E48
    33d2:	90 91 49 2e 	lds	r25, 0x2E49
    33d6:	a0 91 4a 2e 	lds	r26, 0x2E4A
    33da:	b0 91 4b 2e 	lds	r27, 0x2E4B
    33de:	92 2b       	or	r25, r18
    33e0:	80 93 48 2e 	sts	0x2E48, r24
    33e4:	90 93 49 2e 	sts	0x2E49, r25
    33e8:	a0 93 4a 2e 	sts	0x2E4A, r26
    33ec:	b0 93 4b 2e 	sts	0x2E4B, r27
					adresa_niz_3 |= (long)receiveArray[7];
    33f0:	20 91 7d 29 	lds	r18, 0x297D
    33f4:	80 91 48 2e 	lds	r24, 0x2E48
    33f8:	90 91 49 2e 	lds	r25, 0x2E49
    33fc:	a0 91 4a 2e 	lds	r26, 0x2E4A
    3400:	b0 91 4b 2e 	lds	r27, 0x2E4B
    3404:	82 2b       	or	r24, r18
    3406:	80 93 48 2e 	sts	0x2E48, r24
    340a:	90 93 49 2e 	sts	0x2E49, r25
    340e:	a0 93 4a 2e 	sts	0x2E4A, r26
    3412:	b0 93 4b 2e 	sts	0x2E4B, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    3416:	80 91 76 29 	lds	r24, 0x2976
    341a:	80 93 e5 28 	sts	0x28E5, r24
					adresa_niz_3 |= (long)receiveArray[6] << 8;
					adresa_niz_3 |= (long)receiveArray[7];
				}
				
				//slanje odgovora
				i = 0;
    341e:	00 e0       	ldi	r16, 0x00	; 0
    3420:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    3422:	f8 01       	movw	r30, r16
    3424:	eb 51       	subi	r30, 0x1B	; 27
    3426:	f7 4d       	sbci	r31, 0xD7	; 215
    3428:	60 81       	ld	r22, Z
    342a:	83 e1       	ldi	r24, 0x13	; 19
    342c:	90 e2       	ldi	r25, 0x20	; 32
    342e:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    3432:	88 23       	and	r24, r24
    3434:	11 f0       	breq	.+4      	; 0x343a <__vector_61+0x1812>
					{
						i++;
    3436:	0f 5f       	subi	r16, 0xFF	; 255
    3438:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    343a:	10 16       	cp	r1, r16
    343c:	11 06       	cpc	r1, r17
    343e:	8c f7       	brge	.-30     	; 0x3422 <__vector_61+0x17fa>
					if(byteToBuffer)
					{
						i++;
					}
				}			
				RX_i_E1 = 0;
    3440:	10 92 65 29 	sts	0x2965, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    3444:	10 92 65 29 	sts	0x2965, r1
    3448:	8c c0       	rjmp	.+280    	; 0x3562 <__vector_61+0x193a>
		}					
	}
	//CITANJE SNIMLJENOG NIZA - 12
	else if(receiveArray[0] == 12)					//provera funkcijskog bajta
    344a:	80 91 76 29 	lds	r24, 0x2976
    344e:	8c 30       	cpi	r24, 0x0C	; 12
    3450:	09 f0       	breq	.+2      	; 0x3454 <__vector_61+0x182c>
    3452:	87 c0       	rjmp	.+270    	; 0x3562 <__vector_61+0x193a>
	{
		if(RX_i_E1 >= 2)							//stigla je cela poruka (3)
    3454:	80 91 65 29 	lds	r24, 0x2965
    3458:	82 30       	cpi	r24, 0x02	; 2
    345a:	08 f4       	brcc	.+2      	; 0x345e <__vector_61+0x1836>
    345c:	82 c0       	rjmp	.+260    	; 0x3562 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    345e:	10 92 03 2e 	sts	0x2E03, r1
			{
				if (receiveArray[1] == 1)			//niz_1
    3462:	80 91 77 29 	lds	r24, 0x2977
    3466:	81 30       	cpi	r24, 0x01	; 1
    3468:	f9 f4       	brne	.+62     	; 0x34a8 <__vector_61+0x1880>
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	90 e0       	ldi	r25, 0x00	; 0
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
					{
						sendArray[j] = niz_1[k]>>8;
    3472:	fc 01       	movw	r30, r24
    3474:	ee 0f       	add	r30, r30
    3476:	ff 1f       	adc	r31, r31
    3478:	e2 5f       	subi	r30, 0xF2	; 242
    347a:	f5 4d       	sbci	r31, 0xD5	; 213
    347c:	40 81       	ld	r20, Z
    347e:	51 81       	ldd	r21, Z+1	; 0x01
    3480:	45 2f       	mov	r20, r21
    3482:	55 0f       	add	r21, r21
    3484:	55 0b       	sbc	r21, r21
    3486:	d9 01       	movw	r26, r18
    3488:	ab 51       	subi	r26, 0x1B	; 27
    348a:	b7 4d       	sbci	r27, 0xD7	; 215
    348c:	4c 93       	st	X, r20
						j++;
						sendArray[j] = niz_1[k];
    348e:	40 81       	ld	r20, Z
    3490:	51 81       	ldd	r21, Z+1	; 0x01
    3492:	f9 01       	movw	r30, r18
    3494:	ea 51       	subi	r30, 0x1A	; 26
    3496:	f7 4d       	sbci	r31, 0xD7	; 215
    3498:	40 83       	st	Z, r20
						j++;
    349a:	2e 5f       	subi	r18, 0xFE	; 254
    349c:	3f 4f       	sbci	r19, 0xFF	; 255
			proveri_vreme_primanja = 0;				//zastita iskljucena
			{
				if (receiveArray[1] == 1)			//niz_1
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
    349e:	01 96       	adiw	r24, 0x01	; 1
    34a0:	8f 37       	cpi	r24, 0x7F	; 127
    34a2:	91 05       	cpc	r25, r1
    34a4:	31 f7       	brne	.-52     	; 0x3472 <__vector_61+0x184a>
    34a6:	5a c0       	rjmp	.+180    	; 0x355c <__vector_61+0x1934>
						j++;
						sendArray[j] = niz_1[k];
						j++;
					}
				}
				else if (receiveArray[1] == 2)			//niz_2
    34a8:	80 91 77 29 	lds	r24, 0x2977
    34ac:	82 30       	cpi	r24, 0x02	; 2
    34ae:	f9 f4       	brne	.+62     	; 0x34ee <__vector_61+0x18c6>
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	90 e0       	ldi	r25, 0x00	; 0
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
					{
						sendArray[j] = niz_2[k]>>8;
    34b8:	fc 01       	movw	r30, r24
    34ba:	ee 0f       	add	r30, r30
    34bc:	ff 1f       	adc	r31, r31
    34be:	ee 56       	subi	r30, 0x6E	; 110
    34c0:	f1 4d       	sbci	r31, 0xD1	; 209
    34c2:	40 81       	ld	r20, Z
    34c4:	51 81       	ldd	r21, Z+1	; 0x01
    34c6:	45 2f       	mov	r20, r21
    34c8:	55 0f       	add	r21, r21
    34ca:	55 0b       	sbc	r21, r21
    34cc:	d9 01       	movw	r26, r18
    34ce:	ab 51       	subi	r26, 0x1B	; 27
    34d0:	b7 4d       	sbci	r27, 0xD7	; 215
    34d2:	4c 93       	st	X, r20
						j++;
						sendArray[j] = niz_2[k];
    34d4:	40 81       	ld	r20, Z
    34d6:	51 81       	ldd	r21, Z+1	; 0x01
    34d8:	f9 01       	movw	r30, r18
    34da:	ea 51       	subi	r30, 0x1A	; 26
    34dc:	f7 4d       	sbci	r31, 0xD7	; 215
    34de:	40 83       	st	Z, r20
						j++;
    34e0:	2e 5f       	subi	r18, 0xFE	; 254
    34e2:	3f 4f       	sbci	r19, 0xFF	; 255
					}
				}
				else if (receiveArray[1] == 2)			//niz_2
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
    34e4:	01 96       	adiw	r24, 0x01	; 1
    34e6:	8f 37       	cpi	r24, 0x7F	; 127
    34e8:	91 05       	cpc	r25, r1
    34ea:	31 f7       	brne	.-52     	; 0x34b8 <__vector_61+0x1890>
    34ec:	37 c0       	rjmp	.+110    	; 0x355c <__vector_61+0x1934>
						j++;
						sendArray[j] = niz_2[k];
						j++;
					}
				}
				else if (receiveArray[1] == 3)			//niz_3
    34ee:	80 91 77 29 	lds	r24, 0x2977
    34f2:	83 30       	cpi	r24, 0x03	; 3
    34f4:	99 f5       	brne	.+102    	; 0x355c <__vector_61+0x1934>
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	90 e0       	ldi	r25, 0x00	; 0
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
					{
						sendArray[j] = niz_3[k]>>8;
    34fe:	fc 01       	movw	r30, r24
    3500:	ee 0f       	add	r30, r30
    3502:	ff 1f       	adc	r31, r31
    3504:	e1 52       	subi	r30, 0x21	; 33
    3506:	fb 4d       	sbci	r31, 0xDB	; 219
    3508:	40 81       	ld	r20, Z
    350a:	51 81       	ldd	r21, Z+1	; 0x01
    350c:	45 2f       	mov	r20, r21
    350e:	55 0f       	add	r21, r21
    3510:	55 0b       	sbc	r21, r21
    3512:	d9 01       	movw	r26, r18
    3514:	ab 51       	subi	r26, 0x1B	; 27
    3516:	b7 4d       	sbci	r27, 0xD7	; 215
    3518:	4c 93       	st	X, r20
						j++;
						sendArray[j] = niz_3[k];
    351a:	40 81       	ld	r20, Z
    351c:	51 81       	ldd	r21, Z+1	; 0x01
    351e:	f9 01       	movw	r30, r18
    3520:	ea 51       	subi	r30, 0x1A	; 26
    3522:	f7 4d       	sbci	r31, 0xD7	; 215
    3524:	40 83       	st	Z, r20
						j++;
    3526:	2e 5f       	subi	r18, 0xFE	; 254
    3528:	3f 4f       	sbci	r19, 0xFF	; 255
					}
				}
				else if (receiveArray[1] == 3)			//niz_3
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
    352a:	01 96       	adiw	r24, 0x01	; 1
    352c:	8f 37       	cpi	r24, 0x7F	; 127
    352e:	91 05       	cpc	r25, r1
    3530:	31 f7       	brne	.-52     	; 0x34fe <__vector_61+0x18d6>
    3532:	14 c0       	rjmp	.+40     	; 0x355c <__vector_61+0x1934>
				//slanje odgovora
				i = 0;
				while (i < 254)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    3534:	f8 01       	movw	r30, r16
    3536:	eb 51       	subi	r30, 0x1B	; 27
    3538:	f7 4d       	sbci	r31, 0xD7	; 215
    353a:	60 81       	ld	r22, Z
    353c:	83 e1       	ldi	r24, 0x13	; 19
    353e:	90 e2       	ldi	r25, 0x20	; 32
    3540:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					if(byteToBuffer)
    3544:	88 23       	and	r24, r24
    3546:	11 f0       	breq	.+4      	; 0x354c <__vector_61+0x1924>
					{
						i++;
    3548:	0f 5f       	subi	r16, 0xFF	; 255
    354a:	1f 4f       	sbci	r17, 0xFF	; 255
					}
				}
				
				//slanje odgovora
				i = 0;
				while (i < 254)
    354c:	0e 3f       	cpi	r16, 0xFE	; 254
    354e:	11 05       	cpc	r17, r1
    3550:	8c f3       	brlt	.-30     	; 0x3534 <__vector_61+0x190c>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    3552:	10 92 65 29 	sts	0x2965, r1
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
    3556:	10 92 65 29 	sts	0x2965, r1
    355a:	03 c0       	rjmp	.+6      	; 0x3562 <__vector_61+0x193a>
						j++;
						sendArray[j] = niz_2[k];
						j++;
					}
				}
				else if (receiveArray[1] == 3)			//niz_3
    355c:	00 e0       	ldi	r16, 0x00	; 0
    355e:	10 e0       	ldi	r17, 0x00	; 0
    3560:	e9 cf       	rjmp	.-46     	; 0x3534 <__vector_61+0x190c>
				RX_i_E1 = 0;
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
		}
	}	
}
    3562:	28 96       	adiw	r28, 0x08	; 8
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	de bf       	out	0x3e, r29	; 62
    3568:	df 91       	pop	r29
    356a:	cf 91       	pop	r28
    356c:	ff 91       	pop	r31
    356e:	ef 91       	pop	r30
    3570:	bf 91       	pop	r27
    3572:	af 91       	pop	r26
    3574:	9f 91       	pop	r25
    3576:	8f 91       	pop	r24
    3578:	7f 91       	pop	r23
    357a:	6f 91       	pop	r22
    357c:	5f 91       	pop	r21
    357e:	4f 91       	pop	r20
    3580:	3f 91       	pop	r19
    3582:	2f 91       	pop	r18
    3584:	1f 91       	pop	r17
    3586:	0f 91       	pop	r16
    3588:	ff 90       	pop	r15
    358a:	ef 90       	pop	r14
    358c:	df 90       	pop	r13
    358e:	cf 90       	pop	r12
    3590:	bf 90       	pop	r11
    3592:	af 90       	pop	r10
    3594:	9f 90       	pop	r9
    3596:	8f 90       	pop	r8
    3598:	7f 90       	pop	r7
    359a:	6f 90       	pop	r6
    359c:	5f 90       	pop	r5
    359e:	4f 90       	pop	r4
    35a0:	0f 90       	pop	r0
    35a2:	0b be       	out	0x3b, r0	; 59
    35a4:	0f 90       	pop	r0
    35a6:	0a be       	out	0x3a, r0	; 58
    35a8:	0f 90       	pop	r0
    35aa:	09 be       	out	0x39, r0	; 57
    35ac:	0f 90       	pop	r0
    35ae:	08 be       	out	0x38, r0	; 56
    35b0:	0f 90       	pop	r0
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	0f 90       	pop	r0
    35b6:	1f 90       	pop	r1
    35b8:	18 95       	reti

000035ba <__vector_25>:
//Serijska komunikacija USART_C0 - BT - XmegaUSB		
ISR(USARTC0_RXC_vect)
{
    35ba:	1f 92       	push	r1
    35bc:	0f 92       	push	r0
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	0f 92       	push	r0
    35c2:	11 24       	eor	r1, r1
    35c4:	08 b6       	in	r0, 0x38	; 56
    35c6:	0f 92       	push	r0
    35c8:	18 be       	out	0x38, r1	; 56
    35ca:	09 b6       	in	r0, 0x39	; 57
    35cc:	0f 92       	push	r0
    35ce:	19 be       	out	0x39, r1	; 57
    35d0:	0a b6       	in	r0, 0x3a	; 58
    35d2:	0f 92       	push	r0
    35d4:	1a be       	out	0x3a, r1	; 58
    35d6:	0b b6       	in	r0, 0x3b	; 59
    35d8:	0f 92       	push	r0
    35da:	1b be       	out	0x3b, r1	; 59
    35dc:	4f 92       	push	r4
    35de:	5f 92       	push	r5
    35e0:	6f 92       	push	r6
    35e2:	7f 92       	push	r7
    35e4:	8f 92       	push	r8
    35e6:	9f 92       	push	r9
    35e8:	af 92       	push	r10
    35ea:	bf 92       	push	r11
    35ec:	cf 92       	push	r12
    35ee:	df 92       	push	r13
    35f0:	ef 92       	push	r14
    35f2:	ff 92       	push	r15
    35f4:	0f 93       	push	r16
    35f6:	1f 93       	push	r17
    35f8:	2f 93       	push	r18
    35fa:	3f 93       	push	r19
    35fc:	4f 93       	push	r20
    35fe:	5f 93       	push	r21
    3600:	6f 93       	push	r22
    3602:	7f 93       	push	r23
    3604:	8f 93       	push	r24
    3606:	9f 93       	push	r25
    3608:	af 93       	push	r26
    360a:	bf 93       	push	r27
    360c:	ef 93       	push	r30
    360e:	ff 93       	push	r31
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	00 d0       	rcall	.+0      	; 0x3616 <__vector_25+0x5c>
    3616:	1f 92       	push	r1
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
	int i;
	USART_RXComplete(&USART_C0_data);
    361c:	8a e9       	ldi	r24, 0x9A	; 154
    361e:	91 e2       	ldi	r25, 0x21	; 33
    3620:	0e 94 12 35 	call	0x6a24	; 0x6a24 <USART_RXComplete>
	receiveArray[RX_i_C0] = USART_RXBuffer_GetByte(&USART_C0_data);
    3624:	80 91 47 2e 	lds	r24, 0x2E47
    3628:	08 2f       	mov	r16, r24
    362a:	10 e0       	ldi	r17, 0x00	; 0
    362c:	8a e9       	ldi	r24, 0x9A	; 154
    362e:	91 e2       	ldi	r25, 0x21	; 33
    3630:	0e 94 04 35 	call	0x6a08	; 0x6a08 <USART_RXBuffer_GetByte>
    3634:	f8 01       	movw	r30, r16
    3636:	ea 58       	subi	r30, 0x8A	; 138
    3638:	f6 4d       	sbci	r31, 0xD6	; 214
    363a:	80 83       	st	Z, r24
	//USART_TXBuffer_PutByte(&USART_C0_data, receiveArray[RX_i_C0]);	//echo
	RX_i_C0++;
    363c:	80 91 47 2e 	lds	r24, 0x2E47
    3640:	8f 5f       	subi	r24, 0xFF	; 255
    3642:	80 93 47 2e 	sts	0x2E47, r24
	
	//vremenska zastita
	if (RX_i_C0 >= 1)
    3646:	80 91 47 2e 	lds	r24, 0x2E47
    364a:	88 23       	and	r24, r24
    364c:	19 f0       	breq	.+6      	; 0x3654 <__vector_25+0x9a>
 		proveri_vreme_primanja = 1;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	80 93 03 2e 	sts	0x2E03, r24
	 
	//CITANJE PARAMETARA - 1
	if(receiveArray[0] == 1)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    3654:	80 91 76 29 	lds	r24, 0x2976
    3658:	81 30       	cpi	r24, 0x01	; 1
    365a:	09 f0       	breq	.+2      	; 0x365e <__vector_25+0xa4>
    365c:	fe c0       	rjmp	.+508    	; 0x385a <__vector_25+0x2a0>
	{
		if(RX_i_C0 == 1)								//stigla je cela poruka (2)
    365e:	80 91 47 2e 	lds	r24, 0x2E47
    3662:	81 30       	cpi	r24, 0x01	; 1
    3664:	09 f0       	breq	.+2      	; 0x3668 <__vector_25+0xae>
    3666:	ac c7       	rjmp	.+3928   	; 0x45c0 <__stack+0x5c1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    3668:	10 92 03 2e 	sts	0x2E03, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    366c:	80 91 76 29 	lds	r24, 0x2976
    3670:	80 93 e5 28 	sts	0x28E5, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    3674:	60 91 2b 2e 	lds	r22, 0x2E2B
    3678:	70 91 2c 2e 	lds	r23, 0x2E2C
    367c:	80 91 2d 2e 	lds	r24, 0x2E2D
    3680:	90 91 2e 2e 	lds	r25, 0x2E2E
    3684:	20 91 08 2e 	lds	r18, 0x2E08
    3688:	30 91 09 2e 	lds	r19, 0x2E09
    368c:	40 e0       	ldi	r20, 0x00	; 0
    368e:	50 e0       	ldi	r21, 0x00	; 0
    3690:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    3694:	bb 27       	eor	r27, r27
    3696:	57 fd       	sbrc	r21, 7
    3698:	ba 95       	dec	r27
    369a:	a5 2f       	mov	r26, r21
    369c:	94 2f       	mov	r25, r20
    369e:	83 2f       	mov	r24, r19
    36a0:	80 93 e6 28 	sts	0x28E6, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    36a4:	60 91 2b 2e 	lds	r22, 0x2E2B
    36a8:	70 91 2c 2e 	lds	r23, 0x2E2C
    36ac:	80 91 2d 2e 	lds	r24, 0x2E2D
    36b0:	90 91 2e 2e 	lds	r25, 0x2E2E
    36b4:	20 91 08 2e 	lds	r18, 0x2E08
    36b8:	30 91 09 2e 	lds	r19, 0x2E09
    36bc:	40 e0       	ldi	r20, 0x00	; 0
    36be:	50 e0       	ldi	r21, 0x00	; 0
    36c0:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    36c4:	20 93 e7 28 	sts	0x28E7, r18
				sendArray[3] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna Y pozicija HI
    36c8:	60 91 0a 2a 	lds	r22, 0x2A0A
    36cc:	70 91 0b 2a 	lds	r23, 0x2A0B
    36d0:	80 91 0c 2a 	lds	r24, 0x2A0C
    36d4:	90 91 0d 2a 	lds	r25, 0x2A0D
    36d8:	20 91 08 2e 	lds	r18, 0x2E08
    36dc:	30 91 09 2e 	lds	r19, 0x2E09
    36e0:	40 e0       	ldi	r20, 0x00	; 0
    36e2:	50 e0       	ldi	r21, 0x00	; 0
    36e4:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    36e8:	bb 27       	eor	r27, r27
    36ea:	57 fd       	sbrc	r21, 7
    36ec:	ba 95       	dec	r27
    36ee:	a5 2f       	mov	r26, r21
    36f0:	94 2f       	mov	r25, r20
    36f2:	83 2f       	mov	r24, r19
    36f4:	80 93 e8 28 	sts	0x28E8, r24
				sendArray[4] = Y_pos / scale_factor_for_mm;							//Absolutna Y pozicija LO
    36f8:	60 91 0a 2a 	lds	r22, 0x2A0A
    36fc:	70 91 0b 2a 	lds	r23, 0x2A0B
    3700:	80 91 0c 2a 	lds	r24, 0x2A0C
    3704:	90 91 0d 2a 	lds	r25, 0x2A0D
    3708:	20 91 08 2e 	lds	r18, 0x2E08
    370c:	30 91 09 2e 	lds	r19, 0x2E09
    3710:	40 e0       	ldi	r20, 0x00	; 0
    3712:	50 e0       	ldi	r21, 0x00	; 0
    3714:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    3718:	20 93 e9 28 	sts	0x28E9, r18
				sendArray[5] = ((teta * 360) / krug360) >> 8;						//Teta HI
    371c:	20 91 8b 32 	lds	r18, 0x328B
    3720:	30 91 8c 32 	lds	r19, 0x328C
    3724:	40 91 8d 32 	lds	r20, 0x328D
    3728:	50 91 8e 32 	lds	r21, 0x328E
    372c:	c0 90 7d 32 	lds	r12, 0x327D
    3730:	d0 90 7e 32 	lds	r13, 0x327E
    3734:	e0 90 7f 32 	lds	r14, 0x327F
    3738:	f0 90 80 32 	lds	r15, 0x3280
    373c:	a8 e6       	ldi	r26, 0x68	; 104
    373e:	b1 e0       	ldi	r27, 0x01	; 1
    3740:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    3744:	a7 01       	movw	r20, r14
    3746:	96 01       	movw	r18, r12
    3748:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    374c:	bb 27       	eor	r27, r27
    374e:	57 fd       	sbrc	r21, 7
    3750:	ba 95       	dec	r27
    3752:	a5 2f       	mov	r26, r21
    3754:	94 2f       	mov	r25, r20
    3756:	83 2f       	mov	r24, r19
    3758:	80 93 ea 28 	sts	0x28EA, r24
				sendArray[6] = ((teta * 360) / krug360);							//Teta LO	
    375c:	20 91 8b 32 	lds	r18, 0x328B
    3760:	30 91 8c 32 	lds	r19, 0x328C
    3764:	40 91 8d 32 	lds	r20, 0x328D
    3768:	50 91 8e 32 	lds	r21, 0x328E
    376c:	c0 90 7d 32 	lds	r12, 0x327D
    3770:	d0 90 7e 32 	lds	r13, 0x327E
    3774:	e0 90 7f 32 	lds	r14, 0x327F
    3778:	f0 90 80 32 	lds	r15, 0x3280
    377c:	a8 e6       	ldi	r26, 0x68	; 104
    377e:	b1 e0       	ldi	r27, 0x01	; 1
    3780:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    3784:	a7 01       	movw	r20, r14
    3786:	96 01       	movw	r18, r12
    3788:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    378c:	20 93 eb 28 	sts	0x28EB, r18
				sendArray[7] = (rastojanje_cilj_temp / scale_factor_for_mm) >> 8;	//Rastojanje od zadate tacke HI
    3790:	60 91 1a 2e 	lds	r22, 0x2E1A
    3794:	70 91 1b 2e 	lds	r23, 0x2E1B
    3798:	80 91 1c 2e 	lds	r24, 0x2E1C
    379c:	90 91 1d 2e 	lds	r25, 0x2E1D
    37a0:	20 91 08 2e 	lds	r18, 0x2E08
    37a4:	30 91 09 2e 	lds	r19, 0x2E09
    37a8:	40 e0       	ldi	r20, 0x00	; 0
    37aa:	50 e0       	ldi	r21, 0x00	; 0
    37ac:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    37b0:	bb 27       	eor	r27, r27
    37b2:	57 fd       	sbrc	r21, 7
    37b4:	ba 95       	dec	r27
    37b6:	a5 2f       	mov	r26, r21
    37b8:	94 2f       	mov	r25, r20
    37ba:	83 2f       	mov	r24, r19
    37bc:	80 93 ec 28 	sts	0x28EC, r24
				sendArray[8] = (rastojanje_cilj_temp / scale_factor_for_mm);		//Rastojanje od zadate tacke LO
    37c0:	60 91 1a 2e 	lds	r22, 0x2E1A
    37c4:	70 91 1b 2e 	lds	r23, 0x2E1B
    37c8:	80 91 1c 2e 	lds	r24, 0x2E1C
    37cc:	90 91 1d 2e 	lds	r25, 0x2E1D
    37d0:	20 91 08 2e 	lds	r18, 0x2E08
    37d4:	30 91 09 2e 	lds	r19, 0x2E09
    37d8:	40 e0       	ldi	r20, 0x00	; 0
    37da:	50 e0       	ldi	r21, 0x00	; 0
    37dc:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    37e0:	20 93 ed 28 	sts	0x28ED, r18
				sendArray[9] = stigao_flag;											//stigao flag
    37e4:	80 91 06 20 	lds	r24, 0x2006
    37e8:	80 93 ee 28 	sts	0x28EE, r24
				sendArray[10] = sample_L16;											//trenutna brzina leva
    37ec:	80 91 a8 24 	lds	r24, 0x24A8
    37f0:	90 91 a9 24 	lds	r25, 0x24A9
    37f4:	80 93 ef 28 	sts	0x28EF, r24
				sendArray[11] = sample_R16;											//trenutna brzina desna
    37f8:	80 91 c8 24 	lds	r24, 0x24C8
    37fc:	90 91 c9 24 	lds	r25, 0x24C9
    3800:	80 93 f0 28 	sts	0x28F0, r24
				sendArray[12] =	ADC_ResultCh_GetWord(&ADCA.CH0, offset);			//struja motora 1
    3804:	60 91 62 2e 	lds	r22, 0x2E62
    3808:	80 e2       	ldi	r24, 0x20	; 32
    380a:	92 e0       	ldi	r25, 0x02	; 2
    380c:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    3810:	80 93 f1 28 	sts	0x28F1, r24
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
    3814:	60 91 62 2e 	lds	r22, 0x2E62
    3818:	88 e2       	ldi	r24, 0x28	; 40
    381a:	92 e0       	ldi	r25, 0x02	; 2
    381c:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    3820:	80 93 f2 28 	sts	0x28F2, r24
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
    3824:	e0 e2       	ldi	r30, 0x20	; 32
    3826:	f6 e0       	ldi	r31, 0x06	; 6
    3828:	80 85       	ldd	r24, Z+8	; 0x08
    382a:	80 93 f3 28 	sts	0x28F3, r24
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
    382e:	00 e0       	ldi	r16, 0x00	; 0
    3830:	10 e0       	ldi	r17, 0x00	; 0
				while (i <= 14) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    3832:	f8 01       	movw	r30, r16
    3834:	eb 51       	subi	r30, 0x1B	; 27
    3836:	f7 4d       	sbci	r31, 0xD7	; 215
    3838:	60 81       	ld	r22, Z
    383a:	8a e9       	ldi	r24, 0x9A	; 154
    383c:	91 e2       	ldi	r25, 0x21	; 33
    383e:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    3842:	88 23       	and	r24, r24
    3844:	11 f0       	breq	.+4      	; 0x384a <__vector_25+0x290>
						i++;
    3846:	0f 5f       	subi	r16, 0xFF	; 255
    3848:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
				while (i <= 14) 
    384a:	0f 30       	cpi	r16, 0x0F	; 15
    384c:	11 05       	cpc	r17, r1
    384e:	8c f3       	brlt	.-30     	; 0x3832 <__vector_25+0x278>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_C0 = 0;
    3850:	10 92 47 2e 	sts	0x2E47, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda				
    3854:	10 92 47 2e 	sts	0x2E47, r1
    3858:	b3 c6       	rjmp	.+3430   	; 0x45c0 <__stack+0x5c1>
		}		
	}
	//ZADAVANJE X,Y KOORDINATA - 2
	else if(receiveArray[0] == 2)					//provera funkcijskog bajta >> 2-upis x,y koordinate
    385a:	80 91 76 29 	lds	r24, 0x2976
    385e:	82 30       	cpi	r24, 0x02	; 2
    3860:	09 f0       	breq	.+2      	; 0x3864 <__vector_25+0x2aa>
    3862:	bf c0       	rjmp	.+382    	; 0x39e2 <__vector_25+0x428>
	{
		if(RX_i_C0 >= 5)							//stigla je cela poruka	(5 bajtova)
    3864:	80 91 47 2e 	lds	r24, 0x2E47
    3868:	85 30       	cpi	r24, 0x05	; 5
    386a:	08 f4       	brcc	.+2      	; 0x386e <__vector_25+0x2b4>
    386c:	a9 c6       	rjmp	.+3410   	; 0x45c0 <__stack+0x5c1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    386e:	10 92 03 2e 	sts	0x2E03, r1
			//ENABLE
			stop_PID_desni = 0;
    3872:	10 92 fc 29 	sts	0x29FC, r1
			stop_PID_levi = 0;
    3876:	10 92 fa 2d 	sts	0x2DFA, r1
			set_direct_out = 0;
    387a:	10 92 89 32 	sts	0x3289, r1
			
			X_cilj = 0;
    387e:	10 92 b6 24 	sts	0x24B6, r1
    3882:	10 92 b7 24 	sts	0x24B7, r1
    3886:	10 92 b8 24 	sts	0x24B8, r1
    388a:	10 92 b9 24 	sts	0x24B9, r1
			X_cilj |= ((int)receiveArray[1]) << 8;
    388e:	20 91 77 29 	lds	r18, 0x2977
    3892:	40 91 b6 24 	lds	r20, 0x24B6
    3896:	50 91 b7 24 	lds	r21, 0x24B7
    389a:	60 91 b8 24 	lds	r22, 0x24B8
    389e:	70 91 b9 24 	lds	r23, 0x24B9
    38a2:	92 2f       	mov	r25, r18
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	aa 27       	eor	r26, r26
    38a8:	97 fd       	sbrc	r25, 7
    38aa:	a0 95       	com	r26
    38ac:	ba 2f       	mov	r27, r26
    38ae:	84 2b       	or	r24, r20
    38b0:	95 2b       	or	r25, r21
    38b2:	a6 2b       	or	r26, r22
    38b4:	b7 2b       	or	r27, r23
    38b6:	80 93 b6 24 	sts	0x24B6, r24
    38ba:	90 93 b7 24 	sts	0x24B7, r25
    38be:	a0 93 b8 24 	sts	0x24B8, r26
    38c2:	b0 93 b9 24 	sts	0x24B9, r27
			X_cilj |= (int)receiveArray[2];
    38c6:	20 91 78 29 	lds	r18, 0x2978
    38ca:	80 91 b6 24 	lds	r24, 0x24B6
    38ce:	90 91 b7 24 	lds	r25, 0x24B7
    38d2:	a0 91 b8 24 	lds	r26, 0x24B8
    38d6:	b0 91 b9 24 	lds	r27, 0x24B9
    38da:	82 2b       	or	r24, r18
    38dc:	80 93 b6 24 	sts	0x24B6, r24
    38e0:	90 93 b7 24 	sts	0x24B7, r25
    38e4:	a0 93 b8 24 	sts	0x24B8, r26
    38e8:	b0 93 b9 24 	sts	0x24B9, r27
			X_cilj = (X_cilj * scale_factor_for_mm);
    38ec:	a0 91 08 2e 	lds	r26, 0x2E08
    38f0:	b0 91 09 2e 	lds	r27, 0x2E09
    38f4:	20 91 b6 24 	lds	r18, 0x24B6
    38f8:	30 91 b7 24 	lds	r19, 0x24B7
    38fc:	40 91 b8 24 	lds	r20, 0x24B8
    3900:	50 91 b9 24 	lds	r21, 0x24B9
    3904:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    3908:	60 93 b6 24 	sts	0x24B6, r22
    390c:	70 93 b7 24 	sts	0x24B7, r23
    3910:	80 93 b8 24 	sts	0x24B8, r24
    3914:	90 93 b9 24 	sts	0x24B9, r25
			//Y_cilj
			Y_cilj = 0;
    3918:	10 92 13 2e 	sts	0x2E13, r1
    391c:	10 92 14 2e 	sts	0x2E14, r1
    3920:	10 92 15 2e 	sts	0x2E15, r1
    3924:	10 92 16 2e 	sts	0x2E16, r1
			Y_cilj |= ((int)receiveArray[3]) << 8;
    3928:	20 91 79 29 	lds	r18, 0x2979
    392c:	40 91 13 2e 	lds	r20, 0x2E13
    3930:	50 91 14 2e 	lds	r21, 0x2E14
    3934:	60 91 15 2e 	lds	r22, 0x2E15
    3938:	70 91 16 2e 	lds	r23, 0x2E16
    393c:	92 2f       	mov	r25, r18
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	aa 27       	eor	r26, r26
    3942:	97 fd       	sbrc	r25, 7
    3944:	a0 95       	com	r26
    3946:	ba 2f       	mov	r27, r26
    3948:	84 2b       	or	r24, r20
    394a:	95 2b       	or	r25, r21
    394c:	a6 2b       	or	r26, r22
    394e:	b7 2b       	or	r27, r23
    3950:	80 93 13 2e 	sts	0x2E13, r24
    3954:	90 93 14 2e 	sts	0x2E14, r25
    3958:	a0 93 15 2e 	sts	0x2E15, r26
    395c:	b0 93 16 2e 	sts	0x2E16, r27
			Y_cilj |= (int)receiveArray[4];
    3960:	20 91 7a 29 	lds	r18, 0x297A
    3964:	80 91 13 2e 	lds	r24, 0x2E13
    3968:	90 91 14 2e 	lds	r25, 0x2E14
    396c:	a0 91 15 2e 	lds	r26, 0x2E15
    3970:	b0 91 16 2e 	lds	r27, 0x2E16
    3974:	82 2b       	or	r24, r18
    3976:	80 93 13 2e 	sts	0x2E13, r24
    397a:	90 93 14 2e 	sts	0x2E14, r25
    397e:	a0 93 15 2e 	sts	0x2E15, r26
    3982:	b0 93 16 2e 	sts	0x2E16, r27
			Y_cilj = Y_cilj * scale_factor_for_mm;
    3986:	a0 91 08 2e 	lds	r26, 0x2E08
    398a:	b0 91 09 2e 	lds	r27, 0x2E09
    398e:	20 91 13 2e 	lds	r18, 0x2E13
    3992:	30 91 14 2e 	lds	r19, 0x2E14
    3996:	40 91 15 2e 	lds	r20, 0x2E15
    399a:	50 91 16 2e 	lds	r21, 0x2E16
    399e:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    39a2:	60 93 13 2e 	sts	0x2E13, r22
    39a6:	70 93 14 2e 	sts	0x2E14, r23
    39aa:	80 93 15 2e 	sts	0x2E15, r24
    39ae:	90 93 16 2e 	sts	0x2E16, r25
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
    39b2:	80 91 76 29 	lds	r24, 0x2976
    39b6:	80 93 e5 28 	sts	0x28E5, r24
			i = 0;
    39ba:	00 e0       	ldi	r16, 0x00	; 0
    39bc:	10 e0       	ldi	r17, 0x00	; 0
			while (i < 1)
			{
				bool byteToBuffer;
				byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    39be:	f8 01       	movw	r30, r16
    39c0:	eb 51       	subi	r30, 0x1B	; 27
    39c2:	f7 4d       	sbci	r31, 0xD7	; 215
    39c4:	60 81       	ld	r22, Z
    39c6:	8a e9       	ldi	r24, 0x9A	; 154
    39c8:	91 e2       	ldi	r25, 0x21	; 33
    39ca:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
				if(byteToBuffer)
    39ce:	88 23       	and	r24, r24
    39d0:	11 f0       	breq	.+4      	; 0x39d6 <__vector_25+0x41c>
				{
					i++;
    39d2:	0f 5f       	subi	r16, 0xFF	; 255
    39d4:	1f 4f       	sbci	r17, 0xFF	; 255
			Y_cilj = Y_cilj * scale_factor_for_mm;
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
			i = 0;
			while (i < 1)
    39d6:	10 16       	cp	r1, r16
    39d8:	11 06       	cpc	r1, r17
    39da:	8c f7       	brge	.-30     	; 0x39be <__vector_25+0x404>
				if(byteToBuffer)
				{
					i++;
				}
			}
			RX_i_C0 = 0;
    39dc:	10 92 47 2e 	sts	0x2E47, r1
    39e0:	ef c5       	rjmp	.+3038   	; 0x45c0 <__stack+0x5c1>
		}
	}	
	//ZADAVANJE X,Y KOORDINATA I PARAMETRE KRETANJA - 3
	else if(receiveArray[0] == 3)					//provera funkcijskog bajta >> 3 - X,Y koordinate sa svim parametrima kretanja
    39e2:	80 91 76 29 	lds	r24, 0x2976
    39e6:	83 30       	cpi	r24, 0x03	; 3
    39e8:	09 f0       	breq	.+2      	; 0x39ec <__vector_25+0x432>
    39ea:	e3 c1       	rjmp	.+966    	; 0x3db2 <__vector_25+0x7f8>
	{
		if(RX_i_C0 >= 11)							//stigla je cela poruka	(11)
    39ec:	80 91 47 2e 	lds	r24, 0x2E47
    39f0:	8b 30       	cpi	r24, 0x0B	; 11
    39f2:	08 f4       	brcc	.+2      	; 0x39f6 <__vector_25+0x43c>
    39f4:	e5 c5       	rjmp	.+3018   	; 0x45c0 <__stack+0x5c1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    39f6:	10 92 03 2e 	sts	0x2E03, r1
			{
				//x_cilj
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    39fa:	80 91 77 29 	lds	r24, 0x2977
    39fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3a00:	29 f4       	brne	.+10     	; 0x3a0c <__vector_25+0x452>
    3a02:	80 91 78 29 	lds	r24, 0x2978
    3a06:	8f 3f       	cpi	r24, 0xFF	; 255
    3a08:	09 f4       	brne	.+2      	; 0x3a0c <__vector_25+0x452>
    3a0a:	53 c0       	rjmp	.+166    	; 0x3ab2 <__vector_25+0x4f8>
				{
					//ENABLE
					stop_PID_desni = 0;
    3a0c:	10 92 fc 29 	sts	0x29FC, r1
					stop_PID_levi = 0;
    3a10:	10 92 fa 2d 	sts	0x2DFA, r1
					set_direct_out = 0;
    3a14:	10 92 89 32 	sts	0x3289, r1
					
					X_cilj = 0;
    3a18:	10 92 b6 24 	sts	0x24B6, r1
    3a1c:	10 92 b7 24 	sts	0x24B7, r1
    3a20:	10 92 b8 24 	sts	0x24B8, r1
    3a24:	10 92 b9 24 	sts	0x24B9, r1
					X_cilj |= ((int)receiveArray[1]) << 8;
    3a28:	20 91 77 29 	lds	r18, 0x2977
    3a2c:	40 91 b6 24 	lds	r20, 0x24B6
    3a30:	50 91 b7 24 	lds	r21, 0x24B7
    3a34:	60 91 b8 24 	lds	r22, 0x24B8
    3a38:	70 91 b9 24 	lds	r23, 0x24B9
    3a3c:	92 2f       	mov	r25, r18
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	aa 27       	eor	r26, r26
    3a42:	97 fd       	sbrc	r25, 7
    3a44:	a0 95       	com	r26
    3a46:	ba 2f       	mov	r27, r26
    3a48:	84 2b       	or	r24, r20
    3a4a:	95 2b       	or	r25, r21
    3a4c:	a6 2b       	or	r26, r22
    3a4e:	b7 2b       	or	r27, r23
    3a50:	80 93 b6 24 	sts	0x24B6, r24
    3a54:	90 93 b7 24 	sts	0x24B7, r25
    3a58:	a0 93 b8 24 	sts	0x24B8, r26
    3a5c:	b0 93 b9 24 	sts	0x24B9, r27
					X_cilj |= (int)receiveArray[2];
    3a60:	20 91 78 29 	lds	r18, 0x2978
    3a64:	80 91 b6 24 	lds	r24, 0x24B6
    3a68:	90 91 b7 24 	lds	r25, 0x24B7
    3a6c:	a0 91 b8 24 	lds	r26, 0x24B8
    3a70:	b0 91 b9 24 	lds	r27, 0x24B9
    3a74:	82 2b       	or	r24, r18
    3a76:	80 93 b6 24 	sts	0x24B6, r24
    3a7a:	90 93 b7 24 	sts	0x24B7, r25
    3a7e:	a0 93 b8 24 	sts	0x24B8, r26
    3a82:	b0 93 b9 24 	sts	0x24B9, r27
					X_cilj = (X_cilj * scale_factor_for_mm);	
    3a86:	a0 91 08 2e 	lds	r26, 0x2E08
    3a8a:	b0 91 09 2e 	lds	r27, 0x2E09
    3a8e:	20 91 b6 24 	lds	r18, 0x24B6
    3a92:	30 91 b7 24 	lds	r19, 0x24B7
    3a96:	40 91 b8 24 	lds	r20, 0x24B8
    3a9a:	50 91 b9 24 	lds	r21, 0x24B9
    3a9e:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    3aa2:	60 93 b6 24 	sts	0x24B6, r22
    3aa6:	70 93 b7 24 	sts	0x24B7, r23
    3aaa:	80 93 b8 24 	sts	0x24B8, r24
    3aae:	90 93 b9 24 	sts	0x24B9, r25
				}	
				//Y_cilj
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3ab2:	80 91 79 29 	lds	r24, 0x2979
    3ab6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ab8:	29 f4       	brne	.+10     	; 0x3ac4 <__vector_25+0x50a>
    3aba:	80 91 7a 29 	lds	r24, 0x297A
    3abe:	8f 3f       	cpi	r24, 0xFF	; 255
    3ac0:	09 f4       	brne	.+2      	; 0x3ac4 <__vector_25+0x50a>
    3ac2:	53 c0       	rjmp	.+166    	; 0x3b6a <__vector_25+0x5b0>
				{		
					stop_PID_desni = 0;
    3ac4:	10 92 fc 29 	sts	0x29FC, r1
					stop_PID_levi = 0;	
    3ac8:	10 92 fa 2d 	sts	0x2DFA, r1
					set_direct_out = 0;
    3acc:	10 92 89 32 	sts	0x3289, r1
					Y_cilj = 0;
    3ad0:	10 92 13 2e 	sts	0x2E13, r1
    3ad4:	10 92 14 2e 	sts	0x2E14, r1
    3ad8:	10 92 15 2e 	sts	0x2E15, r1
    3adc:	10 92 16 2e 	sts	0x2E16, r1
					Y_cilj |= ((int)receiveArray[3]) << 8;
    3ae0:	20 91 79 29 	lds	r18, 0x2979
    3ae4:	40 91 13 2e 	lds	r20, 0x2E13
    3ae8:	50 91 14 2e 	lds	r21, 0x2E14
    3aec:	60 91 15 2e 	lds	r22, 0x2E15
    3af0:	70 91 16 2e 	lds	r23, 0x2E16
    3af4:	92 2f       	mov	r25, r18
    3af6:	80 e0       	ldi	r24, 0x00	; 0
    3af8:	aa 27       	eor	r26, r26
    3afa:	97 fd       	sbrc	r25, 7
    3afc:	a0 95       	com	r26
    3afe:	ba 2f       	mov	r27, r26
    3b00:	84 2b       	or	r24, r20
    3b02:	95 2b       	or	r25, r21
    3b04:	a6 2b       	or	r26, r22
    3b06:	b7 2b       	or	r27, r23
    3b08:	80 93 13 2e 	sts	0x2E13, r24
    3b0c:	90 93 14 2e 	sts	0x2E14, r25
    3b10:	a0 93 15 2e 	sts	0x2E15, r26
    3b14:	b0 93 16 2e 	sts	0x2E16, r27
					Y_cilj |= (int)receiveArray[4];
    3b18:	20 91 7a 29 	lds	r18, 0x297A
    3b1c:	80 91 13 2e 	lds	r24, 0x2E13
    3b20:	90 91 14 2e 	lds	r25, 0x2E14
    3b24:	a0 91 15 2e 	lds	r26, 0x2E15
    3b28:	b0 91 16 2e 	lds	r27, 0x2E16
    3b2c:	82 2b       	or	r24, r18
    3b2e:	80 93 13 2e 	sts	0x2E13, r24
    3b32:	90 93 14 2e 	sts	0x2E14, r25
    3b36:	a0 93 15 2e 	sts	0x2E15, r26
    3b3a:	b0 93 16 2e 	sts	0x2E16, r27
					Y_cilj = Y_cilj * scale_factor_for_mm;
    3b3e:	a0 91 08 2e 	lds	r26, 0x2E08
    3b42:	b0 91 09 2e 	lds	r27, 0x2E09
    3b46:	20 91 13 2e 	lds	r18, 0x2E13
    3b4a:	30 91 14 2e 	lds	r19, 0x2E14
    3b4e:	40 91 15 2e 	lds	r20, 0x2E15
    3b52:	50 91 16 2e 	lds	r21, 0x2E16
    3b56:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    3b5a:	60 93 13 2e 	sts	0x2E13, r22
    3b5e:	70 93 14 2e 	sts	0x2E14, r23
    3b62:	80 93 15 2e 	sts	0x2E15, r24
    3b66:	90 93 16 2e 	sts	0x2E16, r25
				}	
				
				//teta_cilj_final_absolute
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3b6a:	80 91 7b 29 	lds	r24, 0x297B
    3b6e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b70:	29 f4       	brne	.+10     	; 0x3b7c <__vector_25+0x5c2>
    3b72:	80 91 7c 29 	lds	r24, 0x297C
    3b76:	8f 3f       	cpi	r24, 0xFF	; 255
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <__vector_25+0x5c2>
    3b7a:	58 c0       	rjmp	.+176    	; 0x3c2c <__vector_25+0x672>
				{
					teta_cilj_final = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    3b7c:	10 92 00 20 	sts	0x2000, r1
    3b80:	10 92 01 20 	sts	0x2001, r1
    3b84:	10 92 02 20 	sts	0x2002, r1
    3b88:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[5]) << 8;
    3b8c:	20 91 7b 29 	lds	r18, 0x297B
    3b90:	40 91 00 20 	lds	r20, 0x2000
    3b94:	50 91 01 20 	lds	r21, 0x2001
    3b98:	60 91 02 20 	lds	r22, 0x2002
    3b9c:	70 91 03 20 	lds	r23, 0x2003
    3ba0:	92 2f       	mov	r25, r18
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	aa 27       	eor	r26, r26
    3ba6:	97 fd       	sbrc	r25, 7
    3ba8:	a0 95       	com	r26
    3baa:	ba 2f       	mov	r27, r26
    3bac:	84 2b       	or	r24, r20
    3bae:	95 2b       	or	r25, r21
    3bb0:	a6 2b       	or	r26, r22
    3bb2:	b7 2b       	or	r27, r23
    3bb4:	80 93 00 20 	sts	0x2000, r24
    3bb8:	90 93 01 20 	sts	0x2001, r25
    3bbc:	a0 93 02 20 	sts	0x2002, r26
    3bc0:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[6];
    3bc4:	20 91 7c 29 	lds	r18, 0x297C
    3bc8:	80 91 00 20 	lds	r24, 0x2000
    3bcc:	90 91 01 20 	lds	r25, 0x2001
    3bd0:	a0 91 02 20 	lds	r26, 0x2002
    3bd4:	b0 91 03 20 	lds	r27, 0x2003
    3bd8:	82 2b       	or	r24, r18
    3bda:	80 93 00 20 	sts	0x2000, r24
    3bde:	90 93 01 20 	sts	0x2001, r25
    3be2:	a0 93 02 20 	sts	0x2002, r26
    3be6:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = (teta_cilj_final * krug360) / 360;
    3bea:	20 91 00 20 	lds	r18, 0x2000
    3bee:	30 91 01 20 	lds	r19, 0x2001
    3bf2:	40 91 02 20 	lds	r20, 0x2002
    3bf6:	50 91 03 20 	lds	r21, 0x2003
    3bfa:	60 91 7d 32 	lds	r22, 0x327D
    3bfe:	70 91 7e 32 	lds	r23, 0x327E
    3c02:	80 91 7f 32 	lds	r24, 0x327F
    3c06:	90 91 80 32 	lds	r25, 0x3280
    3c0a:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__mulsi3>
    3c0e:	28 e6       	ldi	r18, 0x68	; 104
    3c10:	31 e0       	ldi	r19, 0x01	; 1
    3c12:	40 e0       	ldi	r20, 0x00	; 0
    3c14:	50 e0       	ldi	r21, 0x00	; 0
    3c16:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    3c1a:	20 93 00 20 	sts	0x2000, r18
    3c1e:	30 93 01 20 	sts	0x2001, r19
    3c22:	40 93 02 20 	sts	0x2002, r20
    3c26:	50 93 03 20 	sts	0x2003, r21
    3c2a:	78 c0       	rjmp	.+240    	; 0x3d1c <__vector_25+0x762>
				}	
				//teta_cilj_final_relative
				else if(!(receiveArray[7] == 0xFF && receiveArray[8] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3c2c:	80 91 7d 29 	lds	r24, 0x297D
    3c30:	8f 3f       	cpi	r24, 0xFF	; 255
    3c32:	29 f4       	brne	.+10     	; 0x3c3e <__vector_25+0x684>
    3c34:	80 91 7e 29 	lds	r24, 0x297E
    3c38:	8f 3f       	cpi	r24, 0xFF	; 255
    3c3a:	09 f4       	brne	.+2      	; 0x3c3e <__vector_25+0x684>
    3c3c:	64 c0       	rjmp	.+200    	; 0x3d06 <__vector_25+0x74c>
				{
					teta_cilj_final = 0;
    3c3e:	10 92 00 20 	sts	0x2000, r1
    3c42:	10 92 01 20 	sts	0x2001, r1
    3c46:	10 92 02 20 	sts	0x2002, r1
    3c4a:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[7]) << 8;
    3c4e:	20 91 7d 29 	lds	r18, 0x297D
    3c52:	40 91 00 20 	lds	r20, 0x2000
    3c56:	50 91 01 20 	lds	r21, 0x2001
    3c5a:	60 91 02 20 	lds	r22, 0x2002
    3c5e:	70 91 03 20 	lds	r23, 0x2003
    3c62:	92 2f       	mov	r25, r18
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	aa 27       	eor	r26, r26
    3c68:	97 fd       	sbrc	r25, 7
    3c6a:	a0 95       	com	r26
    3c6c:	ba 2f       	mov	r27, r26
    3c6e:	84 2b       	or	r24, r20
    3c70:	95 2b       	or	r25, r21
    3c72:	a6 2b       	or	r26, r22
    3c74:	b7 2b       	or	r27, r23
    3c76:	80 93 00 20 	sts	0x2000, r24
    3c7a:	90 93 01 20 	sts	0x2001, r25
    3c7e:	a0 93 02 20 	sts	0x2002, r26
    3c82:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[8];
    3c86:	20 91 7e 29 	lds	r18, 0x297E
    3c8a:	80 91 00 20 	lds	r24, 0x2000
    3c8e:	90 91 01 20 	lds	r25, 0x2001
    3c92:	a0 91 02 20 	lds	r26, 0x2002
    3c96:	b0 91 03 20 	lds	r27, 0x2003
    3c9a:	82 2b       	or	r24, r18
    3c9c:	80 93 00 20 	sts	0x2000, r24
    3ca0:	90 93 01 20 	sts	0x2001, r25
    3ca4:	a0 93 02 20 	sts	0x2002, r26
    3ca8:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = teta + (teta_cilj_final * krug360) / 360;
    3cac:	20 91 00 20 	lds	r18, 0x2000
    3cb0:	30 91 01 20 	lds	r19, 0x2001
    3cb4:	40 91 02 20 	lds	r20, 0x2002
    3cb8:	50 91 03 20 	lds	r21, 0x2003
    3cbc:	60 91 7d 32 	lds	r22, 0x327D
    3cc0:	70 91 7e 32 	lds	r23, 0x327E
    3cc4:	80 91 7f 32 	lds	r24, 0x327F
    3cc8:	90 91 80 32 	lds	r25, 0x3280
    3ccc:	c0 90 8b 32 	lds	r12, 0x328B
    3cd0:	d0 90 8c 32 	lds	r13, 0x328C
    3cd4:	e0 90 8d 32 	lds	r14, 0x328D
    3cd8:	f0 90 8e 32 	lds	r15, 0x328E
    3cdc:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__mulsi3>
    3ce0:	28 e6       	ldi	r18, 0x68	; 104
    3ce2:	31 e0       	ldi	r19, 0x01	; 1
    3ce4:	40 e0       	ldi	r20, 0x00	; 0
    3ce6:	50 e0       	ldi	r21, 0x00	; 0
    3ce8:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    3cec:	c2 0e       	add	r12, r18
    3cee:	d3 1e       	adc	r13, r19
    3cf0:	e4 1e       	adc	r14, r20
    3cf2:	f5 1e       	adc	r15, r21
    3cf4:	c0 92 00 20 	sts	0x2000, r12
    3cf8:	d0 92 01 20 	sts	0x2001, r13
    3cfc:	e0 92 02 20 	sts	0x2002, r14
    3d00:	f0 92 03 20 	sts	0x2003, r15
    3d04:	0b c0       	rjmp	.+22     	; 0x3d1c <__vector_25+0x762>
				}
				else
					teta_cilj_final = 0xFFFFFFFF;				
    3d06:	8f ef       	ldi	r24, 0xFF	; 255
    3d08:	9f ef       	ldi	r25, 0xFF	; 255
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	80 93 00 20 	sts	0x2000, r24
    3d10:	90 93 01 20 	sts	0x2001, r25
    3d14:	a0 93 02 20 	sts	0x2002, r26
    3d18:	b0 93 03 20 	sts	0x2003, r27
				//bzina
				if(receiveArray[9] != 0xFF)	// ako zadajemo 0xFF ne menja se brzina
    3d1c:	80 91 7f 29 	lds	r24, 0x297F
    3d20:	8f 3f       	cpi	r24, 0xFF	; 255
    3d22:	c9 f0       	breq	.+50     	; 0x3d56 <__vector_25+0x79c>
				{
					zeljena_pravolinijska_brzina = receiveArray[9] * 3;	//podesiti faktor!
    3d24:	80 91 7f 29 	lds	r24, 0x297F
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	9c 01       	movw	r18, r24
    3d2c:	22 0f       	add	r18, r18
    3d2e:	33 1f       	adc	r19, r19
    3d30:	82 0f       	add	r24, r18
    3d32:	93 1f       	adc	r25, r19
    3d34:	80 93 87 32 	sts	0x3287, r24
    3d38:	90 93 88 32 	sts	0x3288, r25
					zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2;
    3d3c:	80 91 87 32 	lds	r24, 0x3287
    3d40:	90 91 88 32 	lds	r25, 0x3288
    3d44:	99 23       	and	r25, r25
    3d46:	0c f4       	brge	.+2      	; 0x3d4a <__vector_25+0x790>
    3d48:	01 96       	adiw	r24, 0x01	; 1
    3d4a:	95 95       	asr	r25
    3d4c:	87 95       	ror	r24
    3d4e:	80 93 69 2e 	sts	0x2E69, r24
    3d52:	90 93 6a 2e 	sts	0x2E6A, r25
				}				
				//smer
				if(receiveArray[10] != 0xFF)	// ako zadajemo 0xFF ne menja se smer
    3d56:	80 91 80 29 	lds	r24, 0x2980
    3d5a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d5c:	21 f0       	breq	.+8      	; 0x3d66 <__vector_25+0x7ac>
					smer_zadati = receiveArray[10];	
    3d5e:	80 91 80 29 	lds	r24, 0x2980
    3d62:	80 93 66 29 	sts	0x2966, r24
				
				//pokretanje snimanja u nizove
				sample_counter_niz_1 = 0;
    3d66:	10 92 60 2e 	sts	0x2E60, r1
				niz_counter_niz_1 = 0;	
    3d6a:	10 92 61 2e 	sts	0x2E61, r1
				sample_counter_niz_2 = 0;
    3d6e:	10 92 01 2e 	sts	0x2E01, r1
				niz_counter_niz_2 = 0;
    3d72:	10 92 02 2e 	sts	0x2E02, r1
				sample_counter_niz_3 = 0;
    3d76:	10 92 67 29 	sts	0x2967, r1
				niz_counter_niz_3 = 0;		
    3d7a:	10 92 ce 24 	sts	0x24CE, r1
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
    3d7e:	80 91 76 29 	lds	r24, 0x2976
    3d82:	80 93 e5 28 	sts	0x28E5, r24
				niz_counter_niz_2 = 0;
				sample_counter_niz_3 = 0;
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
    3d86:	00 e0       	ldi	r16, 0x00	; 0
    3d88:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];	
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    3d8a:	f8 01       	movw	r30, r16
    3d8c:	eb 51       	subi	r30, 0x1B	; 27
    3d8e:	f7 4d       	sbci	r31, 0xD7	; 215
    3d90:	60 81       	ld	r22, Z
    3d92:	8a e9       	ldi	r24, 0x9A	; 154
    3d94:	91 e2       	ldi	r25, 0x21	; 33
    3d96:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    3d9a:	88 23       	and	r24, r24
    3d9c:	11 f0       	breq	.+4      	; 0x3da2 <__vector_25+0x7e8>
					{
						i++;
    3d9e:	0f 5f       	subi	r16, 0xFF	; 255
    3da0:	1f 4f       	sbci	r17, 0xFF	; 255
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
				while (i < 1)
    3da2:	10 16       	cp	r1, r16
    3da4:	11 06       	cpc	r1, r17
    3da6:	8c f7       	brge	.-30     	; 0x3d8a <__vector_25+0x7d0>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    3da8:	10 92 47 2e 	sts	0x2E47, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda	
    3dac:	10 92 47 2e 	sts	0x2E47, r1
    3db0:	07 c4       	rjmp	.+2062   	; 0x45c0 <__stack+0x5c1>
		}					
	}
	//RELATIVNA DISTANCA I UGAO - 4
	else if(receiveArray[0] == 4)					//provera funkcijskog bajta
    3db2:	80 91 76 29 	lds	r24, 0x2976
    3db6:	84 30       	cpi	r24, 0x04	; 4
    3db8:	09 f0       	breq	.+2      	; 0x3dbc <__vector_25+0x802>
    3dba:	75 c1       	rjmp	.+746    	; 0x40a6 <__stack+0xa7>
	{
		if(RX_i_C0 >= 5)								//stigla je cela poruka
    3dbc:	80 91 47 2e 	lds	r24, 0x2E47
    3dc0:	85 30       	cpi	r24, 0x05	; 5
    3dc2:	08 f4       	brcc	.+2      	; 0x3dc6 <__vector_25+0x80c>
    3dc4:	fd c3       	rjmp	.+2042   	; 0x45c0 <__stack+0x5c1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    3dc6:	10 92 03 2e 	sts	0x2E03, r1
			{
				//ENABLE
				stop_PID_desni = 0;
    3dca:	10 92 fc 29 	sts	0x29FC, r1
				stop_PID_levi = 0;
    3dce:	10 92 fa 2d 	sts	0x2DFA, r1
				set_direct_out = 0;
    3dd2:	10 92 89 32 	sts	0x3289, r1
				
				rel_distanca = 0;
    3dd6:	10 92 cd 28 	sts	0x28CD, r1
    3dda:	10 92 ce 28 	sts	0x28CE, r1
    3dde:	10 92 cf 28 	sts	0x28CF, r1
    3de2:	10 92 d0 28 	sts	0x28D0, r1
				rel_distanca |= ((int)receiveArray[1]) << 8;
    3de6:	20 91 77 29 	lds	r18, 0x2977
    3dea:	40 91 cd 28 	lds	r20, 0x28CD
    3dee:	50 91 ce 28 	lds	r21, 0x28CE
    3df2:	60 91 cf 28 	lds	r22, 0x28CF
    3df6:	70 91 d0 28 	lds	r23, 0x28D0
    3dfa:	92 2f       	mov	r25, r18
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	aa 27       	eor	r26, r26
    3e00:	97 fd       	sbrc	r25, 7
    3e02:	a0 95       	com	r26
    3e04:	ba 2f       	mov	r27, r26
    3e06:	84 2b       	or	r24, r20
    3e08:	95 2b       	or	r25, r21
    3e0a:	a6 2b       	or	r26, r22
    3e0c:	b7 2b       	or	r27, r23
    3e0e:	80 93 cd 28 	sts	0x28CD, r24
    3e12:	90 93 ce 28 	sts	0x28CE, r25
    3e16:	a0 93 cf 28 	sts	0x28CF, r26
    3e1a:	b0 93 d0 28 	sts	0x28D0, r27
				rel_distanca |= (int)receiveArray[2];
    3e1e:	20 91 78 29 	lds	r18, 0x2978
    3e22:	80 91 cd 28 	lds	r24, 0x28CD
    3e26:	90 91 ce 28 	lds	r25, 0x28CE
    3e2a:	a0 91 cf 28 	lds	r26, 0x28CF
    3e2e:	b0 91 d0 28 	lds	r27, 0x28D0
    3e32:	82 2b       	or	r24, r18
    3e34:	80 93 cd 28 	sts	0x28CD, r24
    3e38:	90 93 ce 28 	sts	0x28CE, r25
    3e3c:	a0 93 cf 28 	sts	0x28CF, r26
    3e40:	b0 93 d0 28 	sts	0x28D0, r27
				rel_distanca = (rel_distanca * scale_factor_for_mm);
    3e44:	a0 91 08 2e 	lds	r26, 0x2E08
    3e48:	b0 91 09 2e 	lds	r27, 0x2E09
    3e4c:	20 91 cd 28 	lds	r18, 0x28CD
    3e50:	30 91 ce 28 	lds	r19, 0x28CE
    3e54:	40 91 cf 28 	lds	r20, 0x28CF
    3e58:	50 91 d0 28 	lds	r21, 0x28D0
    3e5c:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    3e60:	60 93 cd 28 	sts	0x28CD, r22
    3e64:	70 93 ce 28 	sts	0x28CE, r23
    3e68:	80 93 cf 28 	sts	0x28CF, r24
    3e6c:	90 93 d0 28 	sts	0x28D0, r25

				rel_ugao = 0;
    3e70:	10 92 1e 2e 	sts	0x2E1E, r1
    3e74:	10 92 1f 2e 	sts	0x2E1F, r1
    3e78:	10 92 20 2e 	sts	0x2E20, r1
    3e7c:	10 92 21 2e 	sts	0x2E21, r1
				rel_ugao |= ((int)receiveArray[3]) << 8;
    3e80:	20 91 79 29 	lds	r18, 0x2979
    3e84:	40 91 1e 2e 	lds	r20, 0x2E1E
    3e88:	50 91 1f 2e 	lds	r21, 0x2E1F
    3e8c:	60 91 20 2e 	lds	r22, 0x2E20
    3e90:	70 91 21 2e 	lds	r23, 0x2E21
    3e94:	92 2f       	mov	r25, r18
    3e96:	80 e0       	ldi	r24, 0x00	; 0
    3e98:	aa 27       	eor	r26, r26
    3e9a:	97 fd       	sbrc	r25, 7
    3e9c:	a0 95       	com	r26
    3e9e:	ba 2f       	mov	r27, r26
    3ea0:	84 2b       	or	r24, r20
    3ea2:	95 2b       	or	r25, r21
    3ea4:	a6 2b       	or	r26, r22
    3ea6:	b7 2b       	or	r27, r23
    3ea8:	80 93 1e 2e 	sts	0x2E1E, r24
    3eac:	90 93 1f 2e 	sts	0x2E1F, r25
    3eb0:	a0 93 20 2e 	sts	0x2E20, r26
    3eb4:	b0 93 21 2e 	sts	0x2E21, r27
				rel_ugao |= (int)receiveArray[4];
    3eb8:	20 91 7a 29 	lds	r18, 0x297A
    3ebc:	80 91 1e 2e 	lds	r24, 0x2E1E
    3ec0:	90 91 1f 2e 	lds	r25, 0x2E1F
    3ec4:	a0 91 20 2e 	lds	r26, 0x2E20
    3ec8:	b0 91 21 2e 	lds	r27, 0x2E21
    3ecc:	82 2b       	or	r24, r18
    3ece:	80 93 1e 2e 	sts	0x2E1E, r24
    3ed2:	90 93 1f 2e 	sts	0x2E1F, r25
    3ed6:	a0 93 20 2e 	sts	0x2E20, r26
    3eda:	b0 93 21 2e 	sts	0x2E21, r27
				rel_ugao = (rel_ugao * krug360) / 360;
    3ede:	20 91 1e 2e 	lds	r18, 0x2E1E
    3ee2:	30 91 1f 2e 	lds	r19, 0x2E1F
    3ee6:	40 91 20 2e 	lds	r20, 0x2E20
    3eea:	50 91 21 2e 	lds	r21, 0x2E21
    3eee:	60 91 7d 32 	lds	r22, 0x327D
    3ef2:	70 91 7e 32 	lds	r23, 0x327E
    3ef6:	80 91 7f 32 	lds	r24, 0x327F
    3efa:	90 91 80 32 	lds	r25, 0x3280
    3efe:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__mulsi3>
    3f02:	28 e6       	ldi	r18, 0x68	; 104
    3f04:	31 e0       	ldi	r19, 0x01	; 1
    3f06:	40 e0       	ldi	r20, 0x00	; 0
    3f08:	50 e0       	ldi	r21, 0x00	; 0
    3f0a:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    3f0e:	20 93 1e 2e 	sts	0x2E1E, r18
    3f12:	30 93 1f 2e 	sts	0x2E1F, r19
    3f16:	40 93 20 2e 	sts	0x2E20, r20
    3f1a:	50 93 21 2e 	sts	0x2E21, r21
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				//X_pos_cos = (double)(teta + rel_ugao) / krug180;
				//Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(((teta + rel_ugao) / krug180) * M_PI);
    3f1e:	c0 90 8b 32 	lds	r12, 0x328B
    3f22:	d0 90 8c 32 	lds	r13, 0x328C
    3f26:	e0 90 8d 32 	lds	r14, 0x328D
    3f2a:	f0 90 8e 32 	lds	r15, 0x328E
    3f2e:	80 91 1e 2e 	lds	r24, 0x2E1E
    3f32:	90 91 1f 2e 	lds	r25, 0x2E1F
    3f36:	a0 91 20 2e 	lds	r26, 0x2E20
    3f3a:	b0 91 21 2e 	lds	r27, 0x2E21
    3f3e:	20 91 d7 28 	lds	r18, 0x28D7
    3f42:	30 91 d8 28 	lds	r19, 0x28D8
    3f46:	40 91 d9 28 	lds	r20, 0x28D9
    3f4a:	50 91 da 28 	lds	r21, 0x28DA
    3f4e:	bc 01       	movw	r22, r24
    3f50:	cd 01       	movw	r24, r26
    3f52:	6c 0d       	add	r22, r12
    3f54:	7d 1d       	adc	r23, r13
    3f56:	8e 1d       	adc	r24, r14
    3f58:	9f 1d       	adc	r25, r15
    3f5a:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    3f5e:	ca 01       	movw	r24, r20
    3f60:	b9 01       	movw	r22, r18
    3f62:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    3f66:	2b ed       	ldi	r18, 0xDB	; 219
    3f68:	3f e0       	ldi	r19, 0x0F	; 15
    3f6a:	49 e4       	ldi	r20, 0x49	; 73
    3f6c:	50 e4       	ldi	r21, 0x40	; 64
    3f6e:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    3f72:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <cos>
    3f76:	69 83       	std	Y+1, r22	; 0x01
    3f78:	7a 83       	std	Y+2, r23	; 0x02
    3f7a:	8b 83       	std	Y+3, r24	; 0x03
    3f7c:	9c 83       	std	Y+4, r25	; 0x04
				Y_pos_sin = sin(((teta + rel_ugao) / krug180) * M_PI);
    3f7e:	c0 90 8b 32 	lds	r12, 0x328B
    3f82:	d0 90 8c 32 	lds	r13, 0x328C
    3f86:	e0 90 8d 32 	lds	r14, 0x328D
    3f8a:	f0 90 8e 32 	lds	r15, 0x328E
    3f8e:	80 91 1e 2e 	lds	r24, 0x2E1E
    3f92:	90 91 1f 2e 	lds	r25, 0x2E1F
    3f96:	a0 91 20 2e 	lds	r26, 0x2E20
    3f9a:	b0 91 21 2e 	lds	r27, 0x2E21
    3f9e:	20 91 d7 28 	lds	r18, 0x28D7
    3fa2:	30 91 d8 28 	lds	r19, 0x28D8
    3fa6:	40 91 d9 28 	lds	r20, 0x28D9
    3faa:	50 91 da 28 	lds	r21, 0x28DA
    3fae:	bc 01       	movw	r22, r24
    3fb0:	cd 01       	movw	r24, r26
    3fb2:	6c 0d       	add	r22, r12
    3fb4:	7d 1d       	adc	r23, r13
    3fb6:	8e 1d       	adc	r24, r14
    3fb8:	9f 1d       	adc	r25, r15
    3fba:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    3fbe:	ca 01       	movw	r24, r20
    3fc0:	b9 01       	movw	r22, r18
    3fc2:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    3fc6:	2b ed       	ldi	r18, 0xDB	; 219
    3fc8:	3f e0       	ldi	r19, 0x0F	; 15
    3fca:	49 e4       	ldi	r20, 0x49	; 73
    3fcc:	50 e4       	ldi	r21, 0x40	; 64
    3fce:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    3fd2:	0e 94 8a 38 	call	0x7114	; 0x7114 <sin>
    3fd6:	4b 01       	movw	r8, r22
    3fd8:	5c 01       	movw	r10, r24
				X_pos_cos = rel_distanca * X_pos_cos;
    3fda:	60 91 cd 28 	lds	r22, 0x28CD
    3fde:	70 91 ce 28 	lds	r23, 0x28CE
    3fe2:	80 91 cf 28 	lds	r24, 0x28CF
    3fe6:	90 91 d0 28 	lds	r25, 0x28D0
				Y_pos_sin = rel_distanca * Y_pos_sin;
    3fea:	40 90 cd 28 	lds	r4, 0x28CD
    3fee:	50 90 ce 28 	lds	r5, 0x28CE
    3ff2:	60 90 cf 28 	lds	r6, 0x28CF
    3ff6:	70 90 d0 28 	lds	r7, 0x28D0
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    3ffa:	c0 90 2b 2e 	lds	r12, 0x2E2B
    3ffe:	d0 90 2c 2e 	lds	r13, 0x2E2C
    4002:	e0 90 2d 2e 	lds	r14, 0x2E2D
    4006:	f0 90 2e 2e 	lds	r15, 0x2E2E
				double X_pos_cos, Y_pos_sin;
				//X_pos_cos = (double)(teta + rel_ugao) / krug180;
				//Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(((teta + rel_ugao) / krug180) * M_PI);
				Y_pos_sin = sin(((teta + rel_ugao) / krug180) * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
    400a:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    400e:	29 81       	ldd	r18, Y+1	; 0x01
    4010:	3a 81       	ldd	r19, Y+2	; 0x02
    4012:	4b 81       	ldd	r20, Y+3	; 0x03
    4014:	5c 81       	ldd	r21, Y+4	; 0x04
    4016:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
				Y_pos_sin = rel_distanca * Y_pos_sin;
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    401a:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fixsfsi>
    401e:	c6 0e       	add	r12, r22
    4020:	d7 1e       	adc	r13, r23
    4022:	e8 1e       	adc	r14, r24
    4024:	f9 1e       	adc	r15, r25
    4026:	c0 92 b6 24 	sts	0x24B6, r12
    402a:	d0 92 b7 24 	sts	0x24B7, r13
    402e:	e0 92 b8 24 	sts	0x24B8, r14
    4032:	f0 92 b9 24 	sts	0x24B9, r15
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    4036:	c0 90 0a 2a 	lds	r12, 0x2A0A
    403a:	d0 90 0b 2a 	lds	r13, 0x2A0B
    403e:	e0 90 0c 2a 	lds	r14, 0x2A0C
    4042:	f0 90 0d 2a 	lds	r15, 0x2A0D
				//X_pos_cos = (double)(teta + rel_ugao) / krug180;
				//Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(((teta + rel_ugao) / krug180) * M_PI);
				Y_pos_sin = sin(((teta + rel_ugao) / krug180) * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
				Y_pos_sin = rel_distanca * Y_pos_sin;
    4046:	c3 01       	movw	r24, r6
    4048:	b2 01       	movw	r22, r4
    404a:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    404e:	a5 01       	movw	r20, r10
    4050:	94 01       	movw	r18, r8
    4052:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    4056:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fixsfsi>
    405a:	c6 0e       	add	r12, r22
    405c:	d7 1e       	adc	r13, r23
    405e:	e8 1e       	adc	r14, r24
    4060:	f9 1e       	adc	r15, r25
    4062:	c0 92 13 2e 	sts	0x2E13, r12
    4066:	d0 92 14 2e 	sts	0x2E14, r13
    406a:	e0 92 15 2e 	sts	0x2E15, r14
    406e:	f0 92 16 2e 	sts	0x2E16, r15
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4072:	80 91 76 29 	lds	r24, 0x2976
    4076:	80 93 e5 28 	sts	0x28E5, r24
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
    407a:	00 e0       	ldi	r16, 0x00	; 0
    407c:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    407e:	f8 01       	movw	r30, r16
    4080:	eb 51       	subi	r30, 0x1B	; 27
    4082:	f7 4d       	sbci	r31, 0xD7	; 215
    4084:	60 81       	ld	r22, Z
    4086:	8a e9       	ldi	r24, 0x9A	; 154
    4088:	91 e2       	ldi	r25, 0x21	; 33
    408a:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    408e:	88 23       	and	r24, r24
    4090:	11 f0       	breq	.+4      	; 0x4096 <__stack+0x97>
					{
						i++;
    4092:	0f 5f       	subi	r16, 0xFF	; 255
    4094:	1f 4f       	sbci	r17, 0xFF	; 255
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    4096:	10 16       	cp	r1, r16
    4098:	11 06       	cpc	r1, r17
    409a:	8c f7       	brge	.-30     	; 0x407e <__stack+0x7f>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    409c:	10 92 47 2e 	sts	0x2E47, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda
    40a0:	10 92 47 2e 	sts	0x2E47, r1
    40a4:	8d c2       	rjmp	.+1306   	; 0x45c0 <__stack+0x5c1>
		}
	}
	//SET DIRECT OUT - 5
	else if(receiveArray[0] == 5)					//provera funkcijskog bajta
    40a6:	80 91 76 29 	lds	r24, 0x2976
    40aa:	85 30       	cpi	r24, 0x05	; 5
    40ac:	09 f0       	breq	.+2      	; 0x40b0 <__stack+0xb1>
    40ae:	6e c0       	rjmp	.+220    	; 0x418c <__stack+0x18d>
	{
		if(RX_i_C0 >= 3)							//stigla je cela poruka
    40b0:	80 91 47 2e 	lds	r24, 0x2E47
    40b4:	83 30       	cpi	r24, 0x03	; 3
    40b6:	08 f4       	brcc	.+2      	; 0x40ba <__stack+0xbb>
    40b8:	83 c2       	rjmp	.+1286   	; 0x45c0 <__stack+0x5c1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    40ba:	10 92 03 2e 	sts	0x2E03, r1
			{
				//ENABLE
				set_direct_out = 1;
    40be:	81 e0       	ldi	r24, 0x01	; 1
    40c0:	80 93 89 32 	sts	0x3289, r24
				
				if(receiveArray[1] >= 128)
    40c4:	80 91 77 29 	lds	r24, 0x2977
    40c8:	88 23       	and	r24, r24
    40ca:	8c f4       	brge	.+34     	; 0x40ee <__stack+0xef>
					PID_brzina_L = (receiveArray[1] - 128) * 5;	//podesiti faktor!
    40cc:	80 91 77 29 	lds	r24, 0x2977
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	9c 01       	movw	r18, r24
    40d4:	22 0f       	add	r18, r18
    40d6:	33 1f       	adc	r19, r19
    40d8:	22 0f       	add	r18, r18
    40da:	33 1f       	adc	r19, r19
    40dc:	82 0f       	add	r24, r18
    40de:	93 1f       	adc	r25, r19
    40e0:	80 58       	subi	r24, 0x80	; 128
    40e2:	92 40       	sbci	r25, 0x02	; 2
    40e4:	80 93 83 2e 	sts	0x2E83, r24
    40e8:	90 93 84 2e 	sts	0x2E84, r25
    40ec:	10 c0       	rjmp	.+32     	; 0x410e <__stack+0x10f>
				else
					PID_brzina_L = (128 - receiveArray[1]) * (-5);
    40ee:	80 91 77 29 	lds	r24, 0x2977
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	9c 01       	movw	r18, r24
    40f6:	22 0f       	add	r18, r18
    40f8:	33 1f       	adc	r19, r19
    40fa:	22 0f       	add	r18, r18
    40fc:	33 1f       	adc	r19, r19
    40fe:	82 0f       	add	r24, r18
    4100:	93 1f       	adc	r25, r19
    4102:	80 58       	subi	r24, 0x80	; 128
    4104:	92 40       	sbci	r25, 0x02	; 2
    4106:	80 93 83 2e 	sts	0x2E83, r24
    410a:	90 93 84 2e 	sts	0x2E84, r25
					
				if(receiveArray[2] >= 128)
    410e:	80 91 78 29 	lds	r24, 0x2978
    4112:	88 23       	and	r24, r24
    4114:	8c f4       	brge	.+34     	; 0x4138 <__stack+0x139>
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
    4116:	80 91 78 29 	lds	r24, 0x2978
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	9c 01       	movw	r18, r24
    411e:	22 0f       	add	r18, r18
    4120:	33 1f       	adc	r19, r19
    4122:	22 0f       	add	r18, r18
    4124:	33 1f       	adc	r19, r19
    4126:	82 0f       	add	r24, r18
    4128:	93 1f       	adc	r25, r19
    412a:	80 58       	subi	r24, 0x80	; 128
    412c:	92 40       	sbci	r25, 0x02	; 2
    412e:	80 93 81 2e 	sts	0x2E81, r24
    4132:	90 93 82 2e 	sts	0x2E82, r25
    4136:	10 c0       	rjmp	.+32     	; 0x4158 <__stack+0x159>
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
    4138:	80 91 78 29 	lds	r24, 0x2978
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	9c 01       	movw	r18, r24
    4140:	22 0f       	add	r18, r18
    4142:	33 1f       	adc	r19, r19
    4144:	22 0f       	add	r18, r18
    4146:	33 1f       	adc	r19, r19
    4148:	82 0f       	add	r24, r18
    414a:	93 1f       	adc	r25, r19
    414c:	80 58       	subi	r24, 0x80	; 128
    414e:	92 40       	sbci	r25, 0x02	; 2
    4150:	80 93 81 2e 	sts	0x2E81, r24
    4154:	90 93 82 2e 	sts	0x2E82, r25
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4158:	80 91 76 29 	lds	r24, 0x2976
    415c:	80 93 e5 28 	sts	0x28E5, r24
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
    4160:	00 e0       	ldi	r16, 0x00	; 0
    4162:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    4164:	f8 01       	movw	r30, r16
    4166:	eb 51       	subi	r30, 0x1B	; 27
    4168:	f7 4d       	sbci	r31, 0xD7	; 215
    416a:	60 81       	ld	r22, Z
    416c:	8a e9       	ldi	r24, 0x9A	; 154
    416e:	91 e2       	ldi	r25, 0x21	; 33
    4170:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    4174:	88 23       	and	r24, r24
    4176:	11 f0       	breq	.+4      	; 0x417c <__stack+0x17d>
					{
						i++;
    4178:	0f 5f       	subi	r16, 0xFF	; 255
    417a:	1f 4f       	sbci	r17, 0xFF	; 255
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    417c:	10 16       	cp	r1, r16
    417e:	11 06       	cpc	r1, r17
    4180:	8c f7       	brge	.-30     	; 0x4164 <__stack+0x165>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    4182:	10 92 47 2e 	sts	0x2E47, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda
    4186:	10 92 47 2e 	sts	0x2E47, r1
    418a:	1a c2       	rjmp	.+1076   	; 0x45c0 <__stack+0x5c1>
		}
	}			
	//PODESAVANJE FET izlaza i servoa - 6
	else if(receiveArray[0] == 6)					//provera funkcijskog bajta 
    418c:	80 91 76 29 	lds	r24, 0x2976
    4190:	86 30       	cpi	r24, 0x06	; 6
    4192:	09 f0       	breq	.+2      	; 0x4196 <__stack+0x197>
    4194:	56 c0       	rjmp	.+172    	; 0x4242 <__stack+0x243>
	{
		if(RX_i_C0 >= 7)							//stigla je cela poruka	(11)
    4196:	80 91 47 2e 	lds	r24, 0x2E47
    419a:	87 30       	cpi	r24, 0x07	; 7
    419c:	08 f4       	brcc	.+2      	; 0x41a0 <__stack+0x1a1>
    419e:	10 c2       	rjmp	.+1056   	; 0x45c0 <__stack+0x5c1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    41a0:	10 92 03 2e 	sts	0x2E03, r1
// 			for(i=0; i<= 4; i++)					//racunanje CHC
// 			CHC ^= receiveArray[i];

			//if(receiveArray[x] == CHC)				//CHC ok
			{
				PORTC.OUT |= receiveArray[1] & receiveArray[2];	//izlazi + maska
    41a4:	e0 e4       	ldi	r30, 0x40	; 64
    41a6:	f6 e0       	ldi	r31, 0x06	; 6
    41a8:	94 81       	ldd	r25, Z+4	; 0x04
    41aa:	47 e7       	ldi	r20, 0x77	; 119
    41ac:	59 e2       	ldi	r21, 0x29	; 41
    41ae:	da 01       	movw	r26, r20
    41b0:	8c 91       	ld	r24, X
    41b2:	68 e7       	ldi	r22, 0x78	; 120
    41b4:	79 e2       	ldi	r23, 0x29	; 41
    41b6:	db 01       	movw	r26, r22
    41b8:	2c 91       	ld	r18, X
    41ba:	82 23       	and	r24, r18
    41bc:	89 2b       	or	r24, r25
    41be:	84 83       	std	Z+4, r24	; 0x04
				PORTC.OUT &= ~(receiveArray[1] ^ receiveArray[2]);	//izlazi + maska
    41c0:	94 81       	ldd	r25, Z+4	; 0x04
    41c2:	da 01       	movw	r26, r20
    41c4:	8c 91       	ld	r24, X
    41c6:	db 01       	movw	r26, r22
    41c8:	2c 91       	ld	r18, X
    41ca:	82 27       	eor	r24, r18
    41cc:	80 95       	com	r24
    41ce:	89 23       	and	r24, r25
    41d0:	84 83       	std	Z+4, r24	; 0x04
				
				//120 - nulti polozaj, 280 - krajnji polozaj
				TCF0.CCA = receiveArray[3] + 120;
    41d2:	80 91 79 29 	lds	r24, 0x2979
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	88 58       	subi	r24, 0x88	; 136
    41da:	9f 4f       	sbci	r25, 0xFF	; 255
    41dc:	e0 e0       	ldi	r30, 0x00	; 0
    41de:	fb e0       	ldi	r31, 0x0B	; 11
    41e0:	80 a7       	std	Z+40, r24	; 0x28
    41e2:	91 a7       	std	Z+41, r25	; 0x29
				TCF0.CCB = receiveArray[4] + 120;
    41e4:	80 91 7a 29 	lds	r24, 0x297A
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	88 58       	subi	r24, 0x88	; 136
    41ec:	9f 4f       	sbci	r25, 0xFF	; 255
    41ee:	82 a7       	std	Z+42, r24	; 0x2a
    41f0:	93 a7       	std	Z+43, r25	; 0x2b
				TCF0.CCC = receiveArray[5] + 120;
    41f2:	80 91 7b 29 	lds	r24, 0x297B
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	88 58       	subi	r24, 0x88	; 136
    41fa:	9f 4f       	sbci	r25, 0xFF	; 255
    41fc:	84 a7       	std	Z+44, r24	; 0x2c
    41fe:	95 a7       	std	Z+45, r25	; 0x2d
				TCF0.CCD = receiveArray[6] + 120;
    4200:	80 91 7c 29 	lds	r24, 0x297C
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	88 58       	subi	r24, 0x88	; 136
    4208:	9f 4f       	sbci	r25, 0xFF	; 255
    420a:	86 a7       	std	Z+46, r24	; 0x2e
    420c:	97 a7       	std	Z+47, r25	; 0x2f
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    420e:	80 91 76 29 	lds	r24, 0x2976
    4212:	80 93 e5 28 	sts	0x28E5, r24
				TCF0.CCB = receiveArray[4] + 120;
				TCF0.CCC = receiveArray[5] + 120;
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
    4216:	00 e0       	ldi	r16, 0x00	; 0
    4218:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    421a:	f8 01       	movw	r30, r16
    421c:	eb 51       	subi	r30, 0x1B	; 27
    421e:	f7 4d       	sbci	r31, 0xD7	; 215
    4220:	60 81       	ld	r22, Z
    4222:	8a e9       	ldi	r24, 0x9A	; 154
    4224:	91 e2       	ldi	r25, 0x21	; 33
    4226:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    422a:	88 23       	and	r24, r24
    422c:	11 f0       	breq	.+4      	; 0x4232 <__stack+0x233>
					{
						i++;
    422e:	0f 5f       	subi	r16, 0xFF	; 255
    4230:	1f 4f       	sbci	r17, 0xFF	; 255
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    4232:	10 16       	cp	r1, r16
    4234:	11 06       	cpc	r1, r17
    4236:	8c f7       	brge	.-30     	; 0x421a <__stack+0x21b>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    4238:	10 92 47 2e 	sts	0x2E47, r1
			}
			RX_i_C0 = 0;	//ako ne valja CHC ponistava se komanda
    423c:	10 92 47 2e 	sts	0x2E47, r1
    4240:	bf c1       	rjmp	.+894    	; 0x45c0 <__stack+0x5c1>
		}		
	}		
	//Upis trenutne pozicije - 7
	else if(receiveArray[0] == 7)					//provera funkcijskog bajta
    4242:	80 91 76 29 	lds	r24, 0x2976
    4246:	87 30       	cpi	r24, 0x07	; 7
    4248:	09 f0       	breq	.+2      	; 0x424c <__stack+0x24d>
    424a:	7d c1       	rjmp	.+762    	; 0x4546 <__stack+0x547>
	{
		if(RX_i_C0 >= 7)							//stigla je cela poruka	(11)
    424c:	80 91 47 2e 	lds	r24, 0x2E47
    4250:	87 30       	cpi	r24, 0x07	; 7
    4252:	08 f4       	brcc	.+2      	; 0x4256 <__stack+0x257>
    4254:	b5 c1       	rjmp	.+874    	; 0x45c0 <__stack+0x5c1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    4256:	10 92 03 2e 	sts	0x2E03, r1
			{
				//x_pos
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    425a:	80 91 77 29 	lds	r24, 0x2977
    425e:	8f 3f       	cpi	r24, 0xFF	; 255
    4260:	29 f4       	brne	.+10     	; 0x426c <__stack+0x26d>
    4262:	80 91 78 29 	lds	r24, 0x2978
    4266:	8f 3f       	cpi	r24, 0xFF	; 255
    4268:	09 f4       	brne	.+2      	; 0x426c <__stack+0x26d>
    426a:	6d c0       	rjmp	.+218    	; 0x4346 <__stack+0x347>
				{
					X_pos = 0;
    426c:	10 92 2b 2e 	sts	0x2E2B, r1
    4270:	10 92 2c 2e 	sts	0x2E2C, r1
    4274:	10 92 2d 2e 	sts	0x2E2D, r1
    4278:	10 92 2e 2e 	sts	0x2E2E, r1
					X_pos |= ((int)receiveArray[1]) << 8;
    427c:	20 91 77 29 	lds	r18, 0x2977
    4280:	40 91 2b 2e 	lds	r20, 0x2E2B
    4284:	50 91 2c 2e 	lds	r21, 0x2E2C
    4288:	60 91 2d 2e 	lds	r22, 0x2E2D
    428c:	70 91 2e 2e 	lds	r23, 0x2E2E
    4290:	92 2f       	mov	r25, r18
    4292:	80 e0       	ldi	r24, 0x00	; 0
    4294:	aa 27       	eor	r26, r26
    4296:	97 fd       	sbrc	r25, 7
    4298:	a0 95       	com	r26
    429a:	ba 2f       	mov	r27, r26
    429c:	84 2b       	or	r24, r20
    429e:	95 2b       	or	r25, r21
    42a0:	a6 2b       	or	r26, r22
    42a2:	b7 2b       	or	r27, r23
    42a4:	80 93 2b 2e 	sts	0x2E2B, r24
    42a8:	90 93 2c 2e 	sts	0x2E2C, r25
    42ac:	a0 93 2d 2e 	sts	0x2E2D, r26
    42b0:	b0 93 2e 2e 	sts	0x2E2E, r27
					X_pos |= (int)receiveArray[2];
    42b4:	20 91 78 29 	lds	r18, 0x2978
    42b8:	80 91 2b 2e 	lds	r24, 0x2E2B
    42bc:	90 91 2c 2e 	lds	r25, 0x2E2C
    42c0:	a0 91 2d 2e 	lds	r26, 0x2E2D
    42c4:	b0 91 2e 2e 	lds	r27, 0x2E2E
    42c8:	82 2b       	or	r24, r18
    42ca:	80 93 2b 2e 	sts	0x2E2B, r24
    42ce:	90 93 2c 2e 	sts	0x2E2C, r25
    42d2:	a0 93 2d 2e 	sts	0x2E2D, r26
    42d6:	b0 93 2e 2e 	sts	0x2E2E, r27
					X_pos = (X_pos * scale_factor_for_mm);
    42da:	a0 91 08 2e 	lds	r26, 0x2E08
    42de:	b0 91 09 2e 	lds	r27, 0x2E09
    42e2:	20 91 2b 2e 	lds	r18, 0x2E2B
    42e6:	30 91 2c 2e 	lds	r19, 0x2E2C
    42ea:	40 91 2d 2e 	lds	r20, 0x2E2D
    42ee:	50 91 2e 2e 	lds	r21, 0x2E2E
    42f2:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    42f6:	60 93 2b 2e 	sts	0x2E2B, r22
    42fa:	70 93 2c 2e 	sts	0x2E2C, r23
    42fe:	80 93 2d 2e 	sts	0x2E2D, r24
    4302:	90 93 2e 2e 	sts	0x2E2E, r25
					X_cilj = X_pos;
    4306:	80 91 2b 2e 	lds	r24, 0x2E2B
    430a:	90 91 2c 2e 	lds	r25, 0x2E2C
    430e:	a0 91 2d 2e 	lds	r26, 0x2E2D
    4312:	b0 91 2e 2e 	lds	r27, 0x2E2E
    4316:	80 93 b6 24 	sts	0x24B6, r24
    431a:	90 93 b7 24 	sts	0x24B7, r25
    431e:	a0 93 b8 24 	sts	0x24B8, r26
    4322:	b0 93 b9 24 	sts	0x24B9, r27
					X_cilj_stari = X_pos;
    4326:	80 91 2b 2e 	lds	r24, 0x2E2B
    432a:	90 91 2c 2e 	lds	r25, 0x2E2C
    432e:	a0 91 2d 2e 	lds	r26, 0x2E2D
    4332:	b0 91 2e 2e 	lds	r27, 0x2E2E
    4336:	80 93 39 2e 	sts	0x2E39, r24
    433a:	90 93 3a 2e 	sts	0x2E3A, r25
    433e:	a0 93 3b 2e 	sts	0x2E3B, r26
    4342:	b0 93 3c 2e 	sts	0x2E3C, r27
				}
				//Y_pos
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    4346:	80 91 79 29 	lds	r24, 0x2979
    434a:	8f 3f       	cpi	r24, 0xFF	; 255
    434c:	29 f4       	brne	.+10     	; 0x4358 <__stack+0x359>
    434e:	80 91 7a 29 	lds	r24, 0x297A
    4352:	8f 3f       	cpi	r24, 0xFF	; 255
    4354:	09 f4       	brne	.+2      	; 0x4358 <__stack+0x359>
    4356:	6d c0       	rjmp	.+218    	; 0x4432 <__stack+0x433>
				{
					Y_pos = 0;
    4358:	10 92 0a 2a 	sts	0x2A0A, r1
    435c:	10 92 0b 2a 	sts	0x2A0B, r1
    4360:	10 92 0c 2a 	sts	0x2A0C, r1
    4364:	10 92 0d 2a 	sts	0x2A0D, r1
					Y_pos |= ((int)receiveArray[3]) << 8;
    4368:	20 91 79 29 	lds	r18, 0x2979
    436c:	40 91 0a 2a 	lds	r20, 0x2A0A
    4370:	50 91 0b 2a 	lds	r21, 0x2A0B
    4374:	60 91 0c 2a 	lds	r22, 0x2A0C
    4378:	70 91 0d 2a 	lds	r23, 0x2A0D
    437c:	92 2f       	mov	r25, r18
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	aa 27       	eor	r26, r26
    4382:	97 fd       	sbrc	r25, 7
    4384:	a0 95       	com	r26
    4386:	ba 2f       	mov	r27, r26
    4388:	84 2b       	or	r24, r20
    438a:	95 2b       	or	r25, r21
    438c:	a6 2b       	or	r26, r22
    438e:	b7 2b       	or	r27, r23
    4390:	80 93 0a 2a 	sts	0x2A0A, r24
    4394:	90 93 0b 2a 	sts	0x2A0B, r25
    4398:	a0 93 0c 2a 	sts	0x2A0C, r26
    439c:	b0 93 0d 2a 	sts	0x2A0D, r27
					Y_pos |= (int)receiveArray[4];
    43a0:	20 91 7a 29 	lds	r18, 0x297A
    43a4:	80 91 0a 2a 	lds	r24, 0x2A0A
    43a8:	90 91 0b 2a 	lds	r25, 0x2A0B
    43ac:	a0 91 0c 2a 	lds	r26, 0x2A0C
    43b0:	b0 91 0d 2a 	lds	r27, 0x2A0D
    43b4:	82 2b       	or	r24, r18
    43b6:	80 93 0a 2a 	sts	0x2A0A, r24
    43ba:	90 93 0b 2a 	sts	0x2A0B, r25
    43be:	a0 93 0c 2a 	sts	0x2A0C, r26
    43c2:	b0 93 0d 2a 	sts	0x2A0D, r27
					Y_pos = Y_cilj * scale_factor_for_mm;
    43c6:	a0 91 08 2e 	lds	r26, 0x2E08
    43ca:	b0 91 09 2e 	lds	r27, 0x2E09
    43ce:	20 91 13 2e 	lds	r18, 0x2E13
    43d2:	30 91 14 2e 	lds	r19, 0x2E14
    43d6:	40 91 15 2e 	lds	r20, 0x2E15
    43da:	50 91 16 2e 	lds	r21, 0x2E16
    43de:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__muluhisi3>
    43e2:	60 93 0a 2a 	sts	0x2A0A, r22
    43e6:	70 93 0b 2a 	sts	0x2A0B, r23
    43ea:	80 93 0c 2a 	sts	0x2A0C, r24
    43ee:	90 93 0d 2a 	sts	0x2A0D, r25
					Y_cilj = Y_pos;
    43f2:	80 91 0a 2a 	lds	r24, 0x2A0A
    43f6:	90 91 0b 2a 	lds	r25, 0x2A0B
    43fa:	a0 91 0c 2a 	lds	r26, 0x2A0C
    43fe:	b0 91 0d 2a 	lds	r27, 0x2A0D
    4402:	80 93 13 2e 	sts	0x2E13, r24
    4406:	90 93 14 2e 	sts	0x2E14, r25
    440a:	a0 93 15 2e 	sts	0x2E15, r26
    440e:	b0 93 16 2e 	sts	0x2E16, r27
					Y_cilj_stari = Y_pos;
    4412:	80 91 0a 2a 	lds	r24, 0x2A0A
    4416:	90 91 0b 2a 	lds	r25, 0x2A0B
    441a:	a0 91 0c 2a 	lds	r26, 0x2A0C
    441e:	b0 91 0d 2a 	lds	r27, 0x2A0D
    4422:	80 93 78 2e 	sts	0x2E78, r24
    4426:	90 93 79 2e 	sts	0x2E79, r25
    442a:	a0 93 7a 2e 	sts	0x2E7A, r26
    442e:	b0 93 7b 2e 	sts	0x2E7B, r27
				}
				
				//teta
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    4432:	80 91 7b 29 	lds	r24, 0x297B
    4436:	8f 3f       	cpi	r24, 0xFF	; 255
    4438:	29 f4       	brne	.+10     	; 0x4444 <__stack+0x445>
    443a:	80 91 7c 29 	lds	r24, 0x297C
    443e:	8f 3f       	cpi	r24, 0xFF	; 255
    4440:	09 f4       	brne	.+2      	; 0x4444 <__stack+0x445>
    4442:	67 c0       	rjmp	.+206    	; 0x4512 <__stack+0x513>
				{
					teta = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    4444:	10 92 8b 32 	sts	0x328B, r1
    4448:	10 92 8c 32 	sts	0x328C, r1
    444c:	10 92 8d 32 	sts	0x328D, r1
    4450:	10 92 8e 32 	sts	0x328E, r1
					teta |= ((int)receiveArray[5]) << 8;
    4454:	20 91 7b 29 	lds	r18, 0x297B
    4458:	40 91 8b 32 	lds	r20, 0x328B
    445c:	50 91 8c 32 	lds	r21, 0x328C
    4460:	60 91 8d 32 	lds	r22, 0x328D
    4464:	70 91 8e 32 	lds	r23, 0x328E
    4468:	92 2f       	mov	r25, r18
    446a:	80 e0       	ldi	r24, 0x00	; 0
    446c:	aa 27       	eor	r26, r26
    446e:	97 fd       	sbrc	r25, 7
    4470:	a0 95       	com	r26
    4472:	ba 2f       	mov	r27, r26
    4474:	84 2b       	or	r24, r20
    4476:	95 2b       	or	r25, r21
    4478:	a6 2b       	or	r26, r22
    447a:	b7 2b       	or	r27, r23
    447c:	80 93 8b 32 	sts	0x328B, r24
    4480:	90 93 8c 32 	sts	0x328C, r25
    4484:	a0 93 8d 32 	sts	0x328D, r26
    4488:	b0 93 8e 32 	sts	0x328E, r27
					teta |= (int)receiveArray[6];
    448c:	20 91 7c 29 	lds	r18, 0x297C
    4490:	80 91 8b 32 	lds	r24, 0x328B
    4494:	90 91 8c 32 	lds	r25, 0x328C
    4498:	a0 91 8d 32 	lds	r26, 0x328D
    449c:	b0 91 8e 32 	lds	r27, 0x328E
    44a0:	82 2b       	or	r24, r18
    44a2:	80 93 8b 32 	sts	0x328B, r24
    44a6:	90 93 8c 32 	sts	0x328C, r25
    44aa:	a0 93 8d 32 	sts	0x328D, r26
    44ae:	b0 93 8e 32 	sts	0x328E, r27
					teta = (teta * krug360) / 360;
    44b2:	20 91 8b 32 	lds	r18, 0x328B
    44b6:	30 91 8c 32 	lds	r19, 0x328C
    44ba:	40 91 8d 32 	lds	r20, 0x328D
    44be:	50 91 8e 32 	lds	r21, 0x328E
    44c2:	60 91 7d 32 	lds	r22, 0x327D
    44c6:	70 91 7e 32 	lds	r23, 0x327E
    44ca:	80 91 7f 32 	lds	r24, 0x327F
    44ce:	90 91 80 32 	lds	r25, 0x3280
    44d2:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__mulsi3>
    44d6:	28 e6       	ldi	r18, 0x68	; 104
    44d8:	31 e0       	ldi	r19, 0x01	; 1
    44da:	40 e0       	ldi	r20, 0x00	; 0
    44dc:	50 e0       	ldi	r21, 0x00	; 0
    44de:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    44e2:	20 93 8b 32 	sts	0x328B, r18
    44e6:	30 93 8c 32 	sts	0x328C, r19
    44ea:	40 93 8d 32 	sts	0x328D, r20
    44ee:	50 93 8e 32 	sts	0x328E, r21
					teta_cilj = teta;
    44f2:	80 91 8b 32 	lds	r24, 0x328B
    44f6:	90 91 8c 32 	lds	r25, 0x328C
    44fa:	a0 91 8d 32 	lds	r26, 0x328D
    44fe:	b0 91 8e 32 	lds	r27, 0x328E
    4502:	80 93 d4 24 	sts	0x24D4, r24
    4506:	90 93 d5 24 	sts	0x24D5, r25
    450a:	a0 93 d6 24 	sts	0x24D6, r26
    450e:	b0 93 d7 24 	sts	0x24D7, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4512:	80 91 76 29 	lds	r24, 0x2976
    4516:	80 93 e5 28 	sts	0x28E5, r24
					teta = (teta * krug360) / 360;
					teta_cilj = teta;
				}
				
				//slanje odgovora
				i = 0;
    451a:	00 e0       	ldi	r16, 0x00	; 0
    451c:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    451e:	f8 01       	movw	r30, r16
    4520:	eb 51       	subi	r30, 0x1B	; 27
    4522:	f7 4d       	sbci	r31, 0xD7	; 215
    4524:	60 81       	ld	r22, Z
    4526:	8a e9       	ldi	r24, 0x9A	; 154
    4528:	91 e2       	ldi	r25, 0x21	; 33
    452a:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    452e:	88 23       	and	r24, r24
    4530:	11 f0       	breq	.+4      	; 0x4536 <__stack+0x537>
					{
						i++;
    4532:	0f 5f       	subi	r16, 0xFF	; 255
    4534:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    4536:	10 16       	cp	r1, r16
    4538:	11 06       	cpc	r1, r17
    453a:	8c f7       	brge	.-30     	; 0x451e <__stack+0x51f>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    453c:	10 92 47 2e 	sts	0x2E47, r1
			}
			RX_i_C0 = 0;	//ako ne valja CHC ponistava se komanda
    4540:	10 92 47 2e 	sts	0x2E47, r1
    4544:	3d c0       	rjmp	.+122    	; 0x45c0 <__stack+0x5c1>
		}
	}
	//Total Stop - 8
	else if(receiveArray[0] == 8)					//provera funkcijskog bajta
    4546:	80 91 76 29 	lds	r24, 0x2976
    454a:	88 30       	cpi	r24, 0x08	; 8
    454c:	c9 f5       	brne	.+114    	; 0x45c0 <__stack+0x5c1>
	{
		if(RX_i_C0 >= 3)							//stigla je cela poruka
    454e:	80 91 47 2e 	lds	r24, 0x2E47
    4552:	83 30       	cpi	r24, 0x03	; 3
    4554:	a8 f1       	brcs	.+106    	; 0x45c0 <__stack+0x5c1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    4556:	10 92 03 2e 	sts	0x2E03, r1
			{
				
				if(receiveArray[1] == 0x01)
    455a:	80 91 77 29 	lds	r24, 0x2977
    455e:	81 30       	cpi	r24, 0x01	; 1
    4560:	39 f4       	brne	.+14     	; 0x4570 <__stack+0x571>
				{
					stop_PID_levi = 1;
    4562:	80 93 fa 2d 	sts	0x2DFA, r24
					PID_brzina_L = 0;
    4566:	10 92 83 2e 	sts	0x2E83, r1
    456a:	10 92 84 2e 	sts	0x2E84, r1
    456e:	02 c0       	rjmp	.+4      	; 0x4574 <__stack+0x575>
				}				
				else
					stop_PID_levi = 0;
    4570:	10 92 fa 2d 	sts	0x2DFA, r1
					
				if(receiveArray[2] == 0x01)
    4574:	80 91 78 29 	lds	r24, 0x2978
    4578:	81 30       	cpi	r24, 0x01	; 1
    457a:	39 f4       	brne	.+14     	; 0x458a <__stack+0x58b>
				{
					stop_PID_desni = 1;
    457c:	80 93 fc 29 	sts	0x29FC, r24
					PID_brzina_R = 0;
    4580:	10 92 81 2e 	sts	0x2E81, r1
    4584:	10 92 82 2e 	sts	0x2E82, r1
    4588:	02 c0       	rjmp	.+4      	; 0x458e <__stack+0x58f>
				}					
				else
					stop_PID_desni = 0;
    458a:	10 92 fc 29 	sts	0x29FC, r1
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    458e:	80 91 76 29 	lds	r24, 0x2976
    4592:	80 93 e5 28 	sts	0x28E5, r24
				}					
				else
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
    4596:	00 e0       	ldi	r16, 0x00	; 0
    4598:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    459a:	f8 01       	movw	r30, r16
    459c:	eb 51       	subi	r30, 0x1B	; 27
    459e:	f7 4d       	sbci	r31, 0xD7	; 215
    45a0:	60 81       	ld	r22, Z
    45a2:	8a e9       	ldi	r24, 0x9A	; 154
    45a4:	91 e2       	ldi	r25, 0x21	; 33
    45a6:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    45aa:	88 23       	and	r24, r24
    45ac:	11 f0       	breq	.+4      	; 0x45b2 <__stack+0x5b3>
					{
						i++;
    45ae:	0f 5f       	subi	r16, 0xFF	; 255
    45b0:	1f 4f       	sbci	r17, 0xFF	; 255
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    45b2:	10 16       	cp	r1, r16
    45b4:	11 06       	cpc	r1, r17
    45b6:	8c f7       	brge	.-30     	; 0x459a <__stack+0x59b>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    45b8:	10 92 47 2e 	sts	0x2E47, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda
    45bc:	10 92 47 2e 	sts	0x2E47, r1
		}
	}
}
    45c0:	24 96       	adiw	r28, 0x04	; 4
    45c2:	cd bf       	out	0x3d, r28	; 61
    45c4:	de bf       	out	0x3e, r29	; 62
    45c6:	df 91       	pop	r29
    45c8:	cf 91       	pop	r28
    45ca:	ff 91       	pop	r31
    45cc:	ef 91       	pop	r30
    45ce:	bf 91       	pop	r27
    45d0:	af 91       	pop	r26
    45d2:	9f 91       	pop	r25
    45d4:	8f 91       	pop	r24
    45d6:	7f 91       	pop	r23
    45d8:	6f 91       	pop	r22
    45da:	5f 91       	pop	r21
    45dc:	4f 91       	pop	r20
    45de:	3f 91       	pop	r19
    45e0:	2f 91       	pop	r18
    45e2:	1f 91       	pop	r17
    45e4:	0f 91       	pop	r16
    45e6:	ff 90       	pop	r15
    45e8:	ef 90       	pop	r14
    45ea:	df 90       	pop	r13
    45ec:	cf 90       	pop	r12
    45ee:	bf 90       	pop	r11
    45f0:	af 90       	pop	r10
    45f2:	9f 90       	pop	r9
    45f4:	8f 90       	pop	r8
    45f6:	7f 90       	pop	r7
    45f8:	6f 90       	pop	r6
    45fa:	5f 90       	pop	r5
    45fc:	4f 90       	pop	r4
    45fe:	0f 90       	pop	r0
    4600:	0b be       	out	0x3b, r0	; 59
    4602:	0f 90       	pop	r0
    4604:	0a be       	out	0x3a, r0	; 58
    4606:	0f 90       	pop	r0
    4608:	09 be       	out	0x39, r0	; 57
    460a:	0f 90       	pop	r0
    460c:	08 be       	out	0x38, r0	; 56
    460e:	0f 90       	pop	r0
    4610:	0f be       	out	0x3f, r0	; 63
    4612:	0f 90       	pop	r0
    4614:	1f 90       	pop	r1
    4616:	18 95       	reti

00004618 <__vector_77>:

//DESNI PASIVNi QDEC
ISR(TCD0_OVF_vect)
{
    4618:	1f 92       	push	r1
    461a:	0f 92       	push	r0
    461c:	0f b6       	in	r0, 0x3f	; 63
    461e:	0f 92       	push	r0
    4620:	11 24       	eor	r1, r1
    4622:	08 b6       	in	r0, 0x38	; 56
    4624:	0f 92       	push	r0
    4626:	18 be       	out	0x38, r1	; 56
    4628:	0b b6       	in	r0, 0x3b	; 59
    462a:	0f 92       	push	r0
    462c:	1b be       	out	0x3b, r1	; 59
    462e:	8f 93       	push	r24
    4630:	ef 93       	push	r30
    4632:	ff 93       	push	r31
	if((TCD0.CTRLFSET & TC0_DIR_bm) == 0)
    4634:	e0 e0       	ldi	r30, 0x00	; 0
    4636:	f9 e0       	ldi	r31, 0x09	; 9
    4638:	81 85       	ldd	r24, Z+9	; 0x09
    463a:	80 fd       	sbrc	r24, 0
    463c:	03 c0       	rjmp	.+6      	; 0x4644 <__vector_77+0x2c>
		PASIVNI_QDEC_OWF_R = 1;
    463e:	81 e0       	ldi	r24, 0x01	; 1
    4640:	80 93 ff 2d 	sts	0x2DFF, r24
	
	if((TCD0.CTRLFSET & TC0_DIR_bm) == 1)
    4644:	e0 e0       	ldi	r30, 0x00	; 0
    4646:	f9 e0       	ldi	r31, 0x09	; 9
    4648:	81 85       	ldd	r24, Z+9	; 0x09
    464a:	80 ff       	sbrs	r24, 0
    464c:	03 c0       	rjmp	.+6      	; 0x4654 <__vector_77+0x3c>
		PASIVNI_QDEC_OWF_R = 2;
    464e:	82 e0       	ldi	r24, 0x02	; 2
    4650:	80 93 ff 2d 	sts	0x2DFF, r24
}
    4654:	ff 91       	pop	r31
    4656:	ef 91       	pop	r30
    4658:	8f 91       	pop	r24
    465a:	0f 90       	pop	r0
    465c:	0b be       	out	0x3b, r0	; 59
    465e:	0f 90       	pop	r0
    4660:	08 be       	out	0x38, r0	; 56
    4662:	0f 90       	pop	r0
    4664:	0f be       	out	0x3f, r0	; 63
    4666:	0f 90       	pop	r0
    4668:	1f 90       	pop	r1
    466a:	18 95       	reti

0000466c <__vector_83>:
//LEVI PASIVNI QDEC
ISR(TCD1_OVF_vect)
{
    466c:	1f 92       	push	r1
    466e:	0f 92       	push	r0
    4670:	0f b6       	in	r0, 0x3f	; 63
    4672:	0f 92       	push	r0
    4674:	11 24       	eor	r1, r1
    4676:	08 b6       	in	r0, 0x38	; 56
    4678:	0f 92       	push	r0
    467a:	18 be       	out	0x38, r1	; 56
    467c:	0b b6       	in	r0, 0x3b	; 59
    467e:	0f 92       	push	r0
    4680:	1b be       	out	0x3b, r1	; 59
    4682:	8f 93       	push	r24
    4684:	ef 93       	push	r30
    4686:	ff 93       	push	r31
	if((TCD1.CTRLFSET & TC1_DIR_bm) == 0)
    4688:	e0 e4       	ldi	r30, 0x40	; 64
    468a:	f9 e0       	ldi	r31, 0x09	; 9
    468c:	81 85       	ldd	r24, Z+9	; 0x09
    468e:	80 fd       	sbrc	r24, 0
    4690:	03 c0       	rjmp	.+6      	; 0x4698 <__vector_83+0x2c>
		PASIVNI_QDEC_OWF_L = 1;
    4692:	81 e0       	ldi	r24, 0x01	; 1
    4694:	80 93 2a 2e 	sts	0x2E2A, r24
	
	if((TCD1.CTRLFSET & TC1_DIR_bm) == 1)
    4698:	e0 e4       	ldi	r30, 0x40	; 64
    469a:	f9 e0       	ldi	r31, 0x09	; 9
    469c:	81 85       	ldd	r24, Z+9	; 0x09
    469e:	80 ff       	sbrs	r24, 0
    46a0:	03 c0       	rjmp	.+6      	; 0x46a8 <__vector_83+0x3c>
		PASIVNI_QDEC_OWF_L = 2;
    46a2:	82 e0       	ldi	r24, 0x02	; 2
    46a4:	80 93 2a 2e 	sts	0x2E2A, r24
}
    46a8:	ff 91       	pop	r31
    46aa:	ef 91       	pop	r30
    46ac:	8f 91       	pop	r24
    46ae:	0f 90       	pop	r0
    46b0:	0b be       	out	0x3b, r0	; 59
    46b2:	0f 90       	pop	r0
    46b4:	08 be       	out	0x38, r0	; 56
    46b6:	0f 90       	pop	r0
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	0f 90       	pop	r0
    46bc:	1f 90       	pop	r1
    46be:	18 95       	reti

000046c0 <__vector_59>:
	//return;
//}


ISR(USARTE0_DRE_vect)
{
    46c0:	1f 92       	push	r1
    46c2:	0f 92       	push	r0
    46c4:	0f b6       	in	r0, 0x3f	; 63
    46c6:	0f 92       	push	r0
    46c8:	11 24       	eor	r1, r1
    46ca:	08 b6       	in	r0, 0x38	; 56
    46cc:	0f 92       	push	r0
    46ce:	18 be       	out	0x38, r1	; 56
    46d0:	09 b6       	in	r0, 0x39	; 57
    46d2:	0f 92       	push	r0
    46d4:	19 be       	out	0x39, r1	; 57
    46d6:	0b b6       	in	r0, 0x3b	; 59
    46d8:	0f 92       	push	r0
    46da:	1b be       	out	0x3b, r1	; 59
    46dc:	2f 93       	push	r18
    46de:	3f 93       	push	r19
    46e0:	4f 93       	push	r20
    46e2:	5f 93       	push	r21
    46e4:	6f 93       	push	r22
    46e6:	7f 93       	push	r23
    46e8:	8f 93       	push	r24
    46ea:	9f 93       	push	r25
    46ec:	af 93       	push	r26
    46ee:	bf 93       	push	r27
    46f0:	ef 93       	push	r30
    46f2:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_E0_data);
    46f4:	81 e2       	ldi	r24, 0x21	; 33
    46f6:	93 e2       	ldi	r25, 0x23	; 35
    46f8:	0e 94 30 35 	call	0x6a60	; 0x6a60 <USART_DataRegEmpty>
}
    46fc:	ff 91       	pop	r31
    46fe:	ef 91       	pop	r30
    4700:	bf 91       	pop	r27
    4702:	af 91       	pop	r26
    4704:	9f 91       	pop	r25
    4706:	8f 91       	pop	r24
    4708:	7f 91       	pop	r23
    470a:	6f 91       	pop	r22
    470c:	5f 91       	pop	r21
    470e:	4f 91       	pop	r20
    4710:	3f 91       	pop	r19
    4712:	2f 91       	pop	r18
    4714:	0f 90       	pop	r0
    4716:	0b be       	out	0x3b, r0	; 59
    4718:	0f 90       	pop	r0
    471a:	09 be       	out	0x39, r0	; 57
    471c:	0f 90       	pop	r0
    471e:	08 be       	out	0x38, r0	; 56
    4720:	0f 90       	pop	r0
    4722:	0f be       	out	0x3f, r0	; 63
    4724:	0f 90       	pop	r0
    4726:	1f 90       	pop	r1
    4728:	18 95       	reti

0000472a <__vector_62>:
ISR(USARTE1_DRE_vect)
{
    472a:	1f 92       	push	r1
    472c:	0f 92       	push	r0
    472e:	0f b6       	in	r0, 0x3f	; 63
    4730:	0f 92       	push	r0
    4732:	11 24       	eor	r1, r1
    4734:	08 b6       	in	r0, 0x38	; 56
    4736:	0f 92       	push	r0
    4738:	18 be       	out	0x38, r1	; 56
    473a:	09 b6       	in	r0, 0x39	; 57
    473c:	0f 92       	push	r0
    473e:	19 be       	out	0x39, r1	; 57
    4740:	0b b6       	in	r0, 0x3b	; 59
    4742:	0f 92       	push	r0
    4744:	1b be       	out	0x3b, r1	; 59
    4746:	2f 93       	push	r18
    4748:	3f 93       	push	r19
    474a:	4f 93       	push	r20
    474c:	5f 93       	push	r21
    474e:	6f 93       	push	r22
    4750:	7f 93       	push	r23
    4752:	8f 93       	push	r24
    4754:	9f 93       	push	r25
    4756:	af 93       	push	r26
    4758:	bf 93       	push	r27
    475a:	ef 93       	push	r30
    475c:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_E1_data);
    475e:	83 e1       	ldi	r24, 0x13	; 19
    4760:	90 e2       	ldi	r25, 0x20	; 32
    4762:	0e 94 30 35 	call	0x6a60	; 0x6a60 <USART_DataRegEmpty>
}
    4766:	ff 91       	pop	r31
    4768:	ef 91       	pop	r30
    476a:	bf 91       	pop	r27
    476c:	af 91       	pop	r26
    476e:	9f 91       	pop	r25
    4770:	8f 91       	pop	r24
    4772:	7f 91       	pop	r23
    4774:	6f 91       	pop	r22
    4776:	5f 91       	pop	r21
    4778:	4f 91       	pop	r20
    477a:	3f 91       	pop	r19
    477c:	2f 91       	pop	r18
    477e:	0f 90       	pop	r0
    4780:	0b be       	out	0x3b, r0	; 59
    4782:	0f 90       	pop	r0
    4784:	09 be       	out	0x39, r0	; 57
    4786:	0f 90       	pop	r0
    4788:	08 be       	out	0x38, r0	; 56
    478a:	0f 90       	pop	r0
    478c:	0f be       	out	0x3f, r0	; 63
    478e:	0f 90       	pop	r0
    4790:	1f 90       	pop	r1
    4792:	18 95       	reti

00004794 <__vector_26>:
ISR(USARTC0_DRE_vect)
{
    4794:	1f 92       	push	r1
    4796:	0f 92       	push	r0
    4798:	0f b6       	in	r0, 0x3f	; 63
    479a:	0f 92       	push	r0
    479c:	11 24       	eor	r1, r1
    479e:	08 b6       	in	r0, 0x38	; 56
    47a0:	0f 92       	push	r0
    47a2:	18 be       	out	0x38, r1	; 56
    47a4:	09 b6       	in	r0, 0x39	; 57
    47a6:	0f 92       	push	r0
    47a8:	19 be       	out	0x39, r1	; 57
    47aa:	0b b6       	in	r0, 0x3b	; 59
    47ac:	0f 92       	push	r0
    47ae:	1b be       	out	0x3b, r1	; 59
    47b0:	2f 93       	push	r18
    47b2:	3f 93       	push	r19
    47b4:	4f 93       	push	r20
    47b6:	5f 93       	push	r21
    47b8:	6f 93       	push	r22
    47ba:	7f 93       	push	r23
    47bc:	8f 93       	push	r24
    47be:	9f 93       	push	r25
    47c0:	af 93       	push	r26
    47c2:	bf 93       	push	r27
    47c4:	ef 93       	push	r30
    47c6:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_C0_data);
    47c8:	8a e9       	ldi	r24, 0x9A	; 154
    47ca:	91 e2       	ldi	r25, 0x21	; 33
    47cc:	0e 94 30 35 	call	0x6a60	; 0x6a60 <USART_DataRegEmpty>
}
    47d0:	ff 91       	pop	r31
    47d2:	ef 91       	pop	r30
    47d4:	bf 91       	pop	r27
    47d6:	af 91       	pop	r26
    47d8:	9f 91       	pop	r25
    47da:	8f 91       	pop	r24
    47dc:	7f 91       	pop	r23
    47de:	6f 91       	pop	r22
    47e0:	5f 91       	pop	r21
    47e2:	4f 91       	pop	r20
    47e4:	3f 91       	pop	r19
    47e6:	2f 91       	pop	r18
    47e8:	0f 90       	pop	r0
    47ea:	0b be       	out	0x3b, r0	; 59
    47ec:	0f 90       	pop	r0
    47ee:	09 be       	out	0x39, r0	; 57
    47f0:	0f 90       	pop	r0
    47f2:	08 be       	out	0x38, r0	; 56
    47f4:	0f 90       	pop	r0
    47f6:	0f be       	out	0x3f, r0	; 63
    47f8:	0f 90       	pop	r0
    47fa:	1f 90       	pop	r1
    47fc:	18 95       	reti

000047fe <__vector_34>:

//Interrupt na taster
ISR(PORTB_INT0_vect)
{
    47fe:	1f 92       	push	r1
    4800:	0f 92       	push	r0
    4802:	0f b6       	in	r0, 0x3f	; 63
    4804:	0f 92       	push	r0
    4806:	11 24       	eor	r1, r1
    4808:	08 b6       	in	r0, 0x38	; 56
    480a:	0f 92       	push	r0
    480c:	18 be       	out	0x38, r1	; 56
    480e:	09 b6       	in	r0, 0x39	; 57
    4810:	0f 92       	push	r0
    4812:	19 be       	out	0x39, r1	; 57
    4814:	0b b6       	in	r0, 0x3b	; 59
    4816:	0f 92       	push	r0
    4818:	1b be       	out	0x3b, r1	; 59
    481a:	2f 93       	push	r18
    481c:	3f 93       	push	r19
    481e:	4f 93       	push	r20
    4820:	5f 93       	push	r21
    4822:	6f 93       	push	r22
    4824:	7f 93       	push	r23
    4826:	8f 93       	push	r24
    4828:	9f 93       	push	r25
    482a:	af 93       	push	r26
    482c:	bf 93       	push	r27
    482e:	ef 93       	push	r30
    4830:	ff 93       	push	r31
	PORT_TogglePins(&PORTC, 0xFF);
    4832:	8f ef       	ldi	r24, 0xFF	; 255
    4834:	e0 e4       	ldi	r30, 0x40	; 64
    4836:	f6 e0       	ldi	r31, 0x06	; 6
    4838:	87 83       	std	Z+7, r24	; 0x07
	//PORT_TogglePins(&PORTF, 0x08);
	//USART_TXBuffer_PutByte(&USART_C0_data, 43);	//+
	
	broj = motor_sample_L16; //ispis zeljene promenljive
    483a:	80 91 52 2e 	lds	r24, 0x2E52
    483e:	90 91 53 2e 	lds	r25, 0x2E53
    4842:	80 93 10 2e 	sts	0x2E10, r24
    4846:	90 93 11 2e 	sts	0x2E11, r25
	
	if(broj	> 0)	
    484a:	80 91 10 2e 	lds	r24, 0x2E10
    484e:	90 91 11 2e 	lds	r25, 0x2E11
    4852:	18 16       	cp	r1, r24
    4854:	19 06       	cpc	r1, r25
    4856:	34 f4       	brge	.+12     	; 0x4864 <__vector_34+0x66>
		USART_TXBuffer_PutByte(&USART_E1_data, 43);	//+
    4858:	6b e2       	ldi	r22, 0x2B	; 43
    485a:	83 e1       	ldi	r24, 0x13	; 19
    485c:	90 e2       	ldi	r25, 0x20	; 32
    485e:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
    4862:	11 c0       	rjmp	.+34     	; 0x4886 <__vector_34+0x88>
	else if(broj < 0)	
    4864:	80 91 10 2e 	lds	r24, 0x2E10
    4868:	90 91 11 2e 	lds	r25, 0x2E11
    486c:	99 23       	and	r25, r25
    486e:	34 f4       	brge	.+12     	; 0x487c <__vector_34+0x7e>
		USART_TXBuffer_PutByte(&USART_E1_data, 45);	//-
    4870:	6d e2       	ldi	r22, 0x2D	; 45
    4872:	83 e1       	ldi	r24, 0x13	; 19
    4874:	90 e2       	ldi	r25, 0x20	; 32
    4876:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
    487a:	05 c0       	rjmp	.+10     	; 0x4886 <__vector_34+0x88>
	else
		USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space		
    487c:	60 e2       	ldi	r22, 0x20	; 32
    487e:	83 e1       	ldi	r24, 0x13	; 19
    4880:	90 e2       	ldi	r25, 0x20	; 32
    4882:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	if(broj < 0)	//pozitiviziramo broj
    4886:	80 91 10 2e 	lds	r24, 0x2E10
    488a:	90 91 11 2e 	lds	r25, 0x2E11
    488e:	99 23       	and	r25, r25
    4890:	5c f4       	brge	.+22     	; 0x48a8 <__vector_34+0xaa>
		broj = broj * (-1);	
    4892:	80 91 10 2e 	lds	r24, 0x2E10
    4896:	90 91 11 2e 	lds	r25, 0x2E11
    489a:	91 95       	neg	r25
    489c:	81 95       	neg	r24
    489e:	91 09       	sbc	r25, r1
    48a0:	80 93 10 2e 	sts	0x2E10, r24
    48a4:	90 93 11 2e 	sts	0x2E11, r25
	broj1 = broj % 10 | 0x30;	
    48a8:	80 91 10 2e 	lds	r24, 0x2E10
    48ac:	90 91 11 2e 	lds	r25, 0x2E11
    48b0:	2a e0       	ldi	r18, 0x0A	; 10
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	b9 01       	movw	r22, r18
    48b6:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    48ba:	80 63       	ori	r24, 0x30	; 48
    48bc:	80 93 4c 2e 	sts	0x2E4C, r24
    48c0:	90 93 4d 2e 	sts	0x2E4D, r25
	broj = broj / 10;
    48c4:	80 91 10 2e 	lds	r24, 0x2E10
    48c8:	90 91 11 2e 	lds	r25, 0x2E11
    48cc:	b9 01       	movw	r22, r18
    48ce:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    48d2:	60 93 10 2e 	sts	0x2E10, r22
    48d6:	70 93 11 2e 	sts	0x2E11, r23
	broj10 = broj % 10 | 0x30;
    48da:	80 91 10 2e 	lds	r24, 0x2E10
    48de:	90 91 11 2e 	lds	r25, 0x2E11
    48e2:	b9 01       	movw	r22, r18
    48e4:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    48e8:	80 63       	ori	r24, 0x30	; 48
    48ea:	80 93 7b 32 	sts	0x327B, r24
    48ee:	90 93 7c 32 	sts	0x327C, r25
	broj = broj / 10;
    48f2:	80 91 10 2e 	lds	r24, 0x2E10
    48f6:	90 91 11 2e 	lds	r25, 0x2E11
    48fa:	b9 01       	movw	r22, r18
    48fc:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4900:	60 93 10 2e 	sts	0x2E10, r22
    4904:	70 93 11 2e 	sts	0x2E11, r23
	broj100 = broj % 10 | 0x30;
    4908:	80 91 10 2e 	lds	r24, 0x2E10
    490c:	90 91 11 2e 	lds	r25, 0x2E11
    4910:	b9 01       	movw	r22, r18
    4912:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4916:	80 63       	ori	r24, 0x30	; 48
    4918:	80 93 3f 2e 	sts	0x2E3F, r24
    491c:	90 93 40 2e 	sts	0x2E40, r25
	broj = broj / 10;
    4920:	80 91 10 2e 	lds	r24, 0x2E10
    4924:	90 91 11 2e 	lds	r25, 0x2E11
    4928:	b9 01       	movw	r22, r18
    492a:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    492e:	60 93 10 2e 	sts	0x2E10, r22
    4932:	70 93 11 2e 	sts	0x2E11, r23
	broj1000 = broj % 10 | 0x30;
    4936:	80 91 10 2e 	lds	r24, 0x2E10
    493a:	90 91 11 2e 	lds	r25, 0x2E11
    493e:	b9 01       	movw	r22, r18
    4940:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4944:	80 63       	ori	r24, 0x30	; 48
    4946:	80 93 df 28 	sts	0x28DF, r24
    494a:	90 93 e0 28 	sts	0x28E0, r25
	broj = broj / 10;
    494e:	80 91 10 2e 	lds	r24, 0x2E10
    4952:	90 91 11 2e 	lds	r25, 0x2E11
    4956:	b9 01       	movw	r22, r18
    4958:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    495c:	60 93 10 2e 	sts	0x2E10, r22
    4960:	70 93 11 2e 	sts	0x2E11, r23
	broj10000 = broj % 10 | 0x30;
    4964:	80 91 10 2e 	lds	r24, 0x2E10
    4968:	90 91 11 2e 	lds	r25, 0x2E11
    496c:	b9 01       	movw	r22, r18
    496e:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4972:	80 63       	ori	r24, 0x30	; 48
    4974:	80 93 cb 28 	sts	0x28CB, r24
    4978:	90 93 cc 28 	sts	0x28CC, r25
	USART_TXBuffer_PutByte(&USART_E1_data, broj10000);
    497c:	60 91 cb 28 	lds	r22, 0x28CB
    4980:	70 91 cc 28 	lds	r23, 0x28CC
    4984:	83 e1       	ldi	r24, 0x13	; 19
    4986:	90 e2       	ldi	r25, 0x20	; 32
    4988:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1000);
    498c:	60 91 df 28 	lds	r22, 0x28DF
    4990:	70 91 e0 28 	lds	r23, 0x28E0
    4994:	83 e1       	ldi	r24, 0x13	; 19
    4996:	90 e2       	ldi	r25, 0x20	; 32
    4998:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj100);
    499c:	60 91 3f 2e 	lds	r22, 0x2E3F
    49a0:	70 91 40 2e 	lds	r23, 0x2E40
    49a4:	83 e1       	ldi	r24, 0x13	; 19
    49a6:	90 e2       	ldi	r25, 0x20	; 32
    49a8:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj10);
    49ac:	60 91 7b 32 	lds	r22, 0x327B
    49b0:	70 91 7c 32 	lds	r23, 0x327C
    49b4:	83 e1       	ldi	r24, 0x13	; 19
    49b6:	90 e2       	ldi	r25, 0x20	; 32
    49b8:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1);
    49bc:	60 91 4c 2e 	lds	r22, 0x2E4C
    49c0:	70 91 4d 2e 	lds	r23, 0x2E4D
    49c4:	83 e1       	ldi	r24, 0x13	; 19
    49c6:	90 e2       	ldi	r25, 0x20	; 32
    49c8:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space		
    49cc:	60 e2       	ldi	r22, 0x20	; 32
    49ce:	83 e1       	ldi	r24, 0x13	; 19
    49d0:	90 e2       	ldi	r25, 0x20	; 32
    49d2:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 0x3A);	//:
    49d6:	6a e3       	ldi	r22, 0x3A	; 58
    49d8:	83 e1       	ldi	r24, 0x13	; 19
    49da:	90 e2       	ldi	r25, 0x20	; 32
    49dc:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space		
    49e0:	60 e2       	ldi	r22, 0x20	; 32
    49e2:	83 e1       	ldi	r24, 0x13	; 19
    49e4:	90 e2       	ldi	r25, 0x20	; 32
    49e6:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	
	
	broj = motor_sample_R16;	//ispis zeljene promenljive
    49ea:	80 91 6b 2e 	lds	r24, 0x2E6B
    49ee:	90 91 6c 2e 	lds	r25, 0x2E6C
    49f2:	80 93 10 2e 	sts	0x2E10, r24
    49f6:	90 93 11 2e 	sts	0x2E11, r25
	
	if(broj	> 0)	
    49fa:	80 91 10 2e 	lds	r24, 0x2E10
    49fe:	90 91 11 2e 	lds	r25, 0x2E11
    4a02:	18 16       	cp	r1, r24
    4a04:	19 06       	cpc	r1, r25
    4a06:	34 f4       	brge	.+12     	; 0x4a14 <__vector_34+0x216>
		USART_TXBuffer_PutByte(&USART_E1_data, 43);	//+
    4a08:	6b e2       	ldi	r22, 0x2B	; 43
    4a0a:	83 e1       	ldi	r24, 0x13	; 19
    4a0c:	90 e2       	ldi	r25, 0x20	; 32
    4a0e:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
    4a12:	11 c0       	rjmp	.+34     	; 0x4a36 <__vector_34+0x238>
	else if(broj < 0)	
    4a14:	80 91 10 2e 	lds	r24, 0x2E10
    4a18:	90 91 11 2e 	lds	r25, 0x2E11
    4a1c:	99 23       	and	r25, r25
    4a1e:	34 f4       	brge	.+12     	; 0x4a2c <__vector_34+0x22e>
		USART_TXBuffer_PutByte(&USART_E1_data, 45);	//-
    4a20:	6d e2       	ldi	r22, 0x2D	; 45
    4a22:	83 e1       	ldi	r24, 0x13	; 19
    4a24:	90 e2       	ldi	r25, 0x20	; 32
    4a26:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
    4a2a:	05 c0       	rjmp	.+10     	; 0x4a36 <__vector_34+0x238>
	else
		USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space	
    4a2c:	60 e2       	ldi	r22, 0x20	; 32
    4a2e:	83 e1       	ldi	r24, 0x13	; 19
    4a30:	90 e2       	ldi	r25, 0x20	; 32
    4a32:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	if(broj < 0)	//pozitiviramo broj
    4a36:	80 91 10 2e 	lds	r24, 0x2E10
    4a3a:	90 91 11 2e 	lds	r25, 0x2E11
    4a3e:	99 23       	and	r25, r25
    4a40:	5c f4       	brge	.+22     	; 0x4a58 <__vector_34+0x25a>
		broj = broj * (-1);
    4a42:	80 91 10 2e 	lds	r24, 0x2E10
    4a46:	90 91 11 2e 	lds	r25, 0x2E11
    4a4a:	91 95       	neg	r25
    4a4c:	81 95       	neg	r24
    4a4e:	91 09       	sbc	r25, r1
    4a50:	80 93 10 2e 	sts	0x2E10, r24
    4a54:	90 93 11 2e 	sts	0x2E11, r25
	broj1 = broj % 10 | 0x30;	
    4a58:	80 91 10 2e 	lds	r24, 0x2E10
    4a5c:	90 91 11 2e 	lds	r25, 0x2E11
    4a60:	2a e0       	ldi	r18, 0x0A	; 10
    4a62:	30 e0       	ldi	r19, 0x00	; 0
    4a64:	b9 01       	movw	r22, r18
    4a66:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4a6a:	80 63       	ori	r24, 0x30	; 48
    4a6c:	80 93 4c 2e 	sts	0x2E4C, r24
    4a70:	90 93 4d 2e 	sts	0x2E4D, r25
	broj = broj / 10;
    4a74:	80 91 10 2e 	lds	r24, 0x2E10
    4a78:	90 91 11 2e 	lds	r25, 0x2E11
    4a7c:	b9 01       	movw	r22, r18
    4a7e:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4a82:	60 93 10 2e 	sts	0x2E10, r22
    4a86:	70 93 11 2e 	sts	0x2E11, r23
	broj10 = broj % 10 | 0x30;
    4a8a:	80 91 10 2e 	lds	r24, 0x2E10
    4a8e:	90 91 11 2e 	lds	r25, 0x2E11
    4a92:	b9 01       	movw	r22, r18
    4a94:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4a98:	80 63       	ori	r24, 0x30	; 48
    4a9a:	80 93 7b 32 	sts	0x327B, r24
    4a9e:	90 93 7c 32 	sts	0x327C, r25
	broj = broj / 10;	
    4aa2:	80 91 10 2e 	lds	r24, 0x2E10
    4aa6:	90 91 11 2e 	lds	r25, 0x2E11
    4aaa:	b9 01       	movw	r22, r18
    4aac:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4ab0:	60 93 10 2e 	sts	0x2E10, r22
    4ab4:	70 93 11 2e 	sts	0x2E11, r23
	broj100 = broj % 10 | 0x30;
    4ab8:	80 91 10 2e 	lds	r24, 0x2E10
    4abc:	90 91 11 2e 	lds	r25, 0x2E11
    4ac0:	b9 01       	movw	r22, r18
    4ac2:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4ac6:	80 63       	ori	r24, 0x30	; 48
    4ac8:	80 93 3f 2e 	sts	0x2E3F, r24
    4acc:	90 93 40 2e 	sts	0x2E40, r25
	broj = broj / 10;
    4ad0:	80 91 10 2e 	lds	r24, 0x2E10
    4ad4:	90 91 11 2e 	lds	r25, 0x2E11
    4ad8:	b9 01       	movw	r22, r18
    4ada:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4ade:	60 93 10 2e 	sts	0x2E10, r22
    4ae2:	70 93 11 2e 	sts	0x2E11, r23
	broj1000 = broj % 10 | 0x30;
    4ae6:	80 91 10 2e 	lds	r24, 0x2E10
    4aea:	90 91 11 2e 	lds	r25, 0x2E11
    4aee:	b9 01       	movw	r22, r18
    4af0:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4af4:	80 63       	ori	r24, 0x30	; 48
    4af6:	80 93 df 28 	sts	0x28DF, r24
    4afa:	90 93 e0 28 	sts	0x28E0, r25
	broj = broj / 10;
    4afe:	80 91 10 2e 	lds	r24, 0x2E10
    4b02:	90 91 11 2e 	lds	r25, 0x2E11
    4b06:	b9 01       	movw	r22, r18
    4b08:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4b0c:	60 93 10 2e 	sts	0x2E10, r22
    4b10:	70 93 11 2e 	sts	0x2E11, r23
	broj10000 = broj % 10 | 0x30;
    4b14:	80 91 10 2e 	lds	r24, 0x2E10
    4b18:	90 91 11 2e 	lds	r25, 0x2E11
    4b1c:	b9 01       	movw	r22, r18
    4b1e:	0e 94 0a 39 	call	0x7214	; 0x7214 <__divmodhi4>
    4b22:	80 63       	ori	r24, 0x30	; 48
    4b24:	80 93 cb 28 	sts	0x28CB, r24
    4b28:	90 93 cc 28 	sts	0x28CC, r25
	USART_TXBuffer_PutByte(&USART_E1_data, broj10000);
    4b2c:	60 91 cb 28 	lds	r22, 0x28CB
    4b30:	70 91 cc 28 	lds	r23, 0x28CC
    4b34:	83 e1       	ldi	r24, 0x13	; 19
    4b36:	90 e2       	ldi	r25, 0x20	; 32
    4b38:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1000);
    4b3c:	60 91 df 28 	lds	r22, 0x28DF
    4b40:	70 91 e0 28 	lds	r23, 0x28E0
    4b44:	83 e1       	ldi	r24, 0x13	; 19
    4b46:	90 e2       	ldi	r25, 0x20	; 32
    4b48:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj100);
    4b4c:	60 91 3f 2e 	lds	r22, 0x2E3F
    4b50:	70 91 40 2e 	lds	r23, 0x2E40
    4b54:	83 e1       	ldi	r24, 0x13	; 19
    4b56:	90 e2       	ldi	r25, 0x20	; 32
    4b58:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj10);
    4b5c:	60 91 7b 32 	lds	r22, 0x327B
    4b60:	70 91 7c 32 	lds	r23, 0x327C
    4b64:	83 e1       	ldi	r24, 0x13	; 19
    4b66:	90 e2       	ldi	r25, 0x20	; 32
    4b68:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1);
    4b6c:	60 91 4c 2e 	lds	r22, 0x2E4C
    4b70:	70 91 4d 2e 	lds	r23, 0x2E4D
    4b74:	83 e1       	ldi	r24, 0x13	; 19
    4b76:	90 e2       	ldi	r25, 0x20	; 32
    4b78:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 13);	//CR
    4b7c:	6d e0       	ldi	r22, 0x0D	; 13
    4b7e:	83 e1       	ldi	r24, 0x13	; 19
    4b80:	90 e2       	ldi	r25, 0x20	; 32
    4b82:	0e 94 e5 34 	call	0x69ca	; 0x69ca <USART_TXBuffer_PutByte>
}
    4b86:	ff 91       	pop	r31
    4b88:	ef 91       	pop	r30
    4b8a:	bf 91       	pop	r27
    4b8c:	af 91       	pop	r26
    4b8e:	9f 91       	pop	r25
    4b90:	8f 91       	pop	r24
    4b92:	7f 91       	pop	r23
    4b94:	6f 91       	pop	r22
    4b96:	5f 91       	pop	r21
    4b98:	4f 91       	pop	r20
    4b9a:	3f 91       	pop	r19
    4b9c:	2f 91       	pop	r18
    4b9e:	0f 90       	pop	r0
    4ba0:	0b be       	out	0x3b, r0	; 59
    4ba2:	0f 90       	pop	r0
    4ba4:	09 be       	out	0x39, r0	; 57
    4ba6:	0f 90       	pop	r0
    4ba8:	08 be       	out	0x38, r0	; 56
    4baa:	0f 90       	pop	r0
    4bac:	0f be       	out	0x3f, r0	; 63
    4bae:	0f 90       	pop	r0
    4bb0:	1f 90       	pop	r1
    4bb2:	18 95       	reti

00004bb4 <Racunanje_trenutne_pozicije>:
krug180,
krug360;


void Racunanje_trenutne_pozicije(void)
{
    4bb4:	4f 92       	push	r4
    4bb6:	5f 92       	push	r5
    4bb8:	6f 92       	push	r6
    4bba:	7f 92       	push	r7
    4bbc:	8f 92       	push	r8
    4bbe:	9f 92       	push	r9
    4bc0:	af 92       	push	r10
    4bc2:	bf 92       	push	r11
    4bc4:	cf 92       	push	r12
    4bc6:	df 92       	push	r13
    4bc8:	ef 92       	push	r14
    4bca:	ff 92       	push	r15
	//uzimanje stanja enkodera
	count_L = TCD1.CNT;
    4bcc:	e0 e4       	ldi	r30, 0x40	; 64
    4bce:	f9 e0       	ldi	r31, 0x09	; 9
    4bd0:	80 a1       	ldd	r24, Z+32	; 0x20
    4bd2:	91 a1       	ldd	r25, Z+33	; 0x21
    4bd4:	80 93 85 32 	sts	0x3285, r24
    4bd8:	90 93 86 32 	sts	0x3286, r25
	count_R = TCD0.CNT;
    4bdc:	e0 e0       	ldi	r30, 0x00	; 0
    4bde:	f9 e0       	ldi	r31, 0x09	; 9
    4be0:	80 a1       	ldd	r24, Z+32	; 0x20
    4be2:	91 a1       	ldd	r25, Z+33	; 0x21
    4be4:	a0 e0       	ldi	r26, 0x00	; 0
    4be6:	b0 e0       	ldi	r27, 0x00	; 0
    4be8:	80 93 26 2e 	sts	0x2E26, r24
    4bec:	90 93 27 2e 	sts	0x2E27, r25
    4bf0:	a0 93 28 2e 	sts	0x2E28, r26
    4bf4:	b0 93 29 2e 	sts	0x2E29, r27
	
	//desni enkoder
	if(PASIVNI_QDEC_OWF_R == 0)
    4bf8:	80 91 ff 2d 	lds	r24, 0x2DFF
    4bfc:	81 11       	cpse	r24, r1
    4bfe:	17 c0       	rjmp	.+46     	; 0x4c2e <Racunanje_trenutne_pozicije+0x7a>
	{
		sample_R16 = (count_R - last_count_R);
    4c00:	40 91 26 2e 	lds	r20, 0x2E26
    4c04:	50 91 27 2e 	lds	r21, 0x2E27
    4c08:	60 91 28 2e 	lds	r22, 0x2E28
    4c0c:	70 91 29 2e 	lds	r23, 0x2E29
    4c10:	80 91 f6 29 	lds	r24, 0x29F6
    4c14:	90 91 f7 29 	lds	r25, 0x29F7
    4c18:	a0 91 f8 29 	lds	r26, 0x29F8
    4c1c:	b0 91 f9 29 	lds	r27, 0x29F9
    4c20:	48 1b       	sub	r20, r24
    4c22:	59 0b       	sbc	r21, r25
    4c24:	40 93 c8 24 	sts	0x24C8, r20
    4c28:	50 93 c9 24 	sts	0x24C9, r21
    4c2c:	3b c0       	rjmp	.+118    	; 0x4ca4 <Racunanje_trenutne_pozicije+0xf0>
	}
	else
	{
		if(PASIVNI_QDEC_OWF_R == 1)
    4c2e:	80 91 ff 2d 	lds	r24, 0x2DFF
    4c32:	81 30       	cpi	r24, 0x01	; 1
    4c34:	c9 f4       	brne	.+50     	; 0x4c68 <Racunanje_trenutne_pozicije+0xb4>
		{
			sample_R16 = count_R + ~(last_count_R);
    4c36:	40 91 f6 29 	lds	r20, 0x29F6
    4c3a:	50 91 f7 29 	lds	r21, 0x29F7
    4c3e:	60 91 f8 29 	lds	r22, 0x29F8
    4c42:	70 91 f9 29 	lds	r23, 0x29F9
    4c46:	80 91 26 2e 	lds	r24, 0x2E26
    4c4a:	90 91 27 2e 	lds	r25, 0x2E27
    4c4e:	a0 91 28 2e 	lds	r26, 0x2E28
    4c52:	b0 91 29 2e 	lds	r27, 0x2E29
    4c56:	40 95       	com	r20
    4c58:	50 95       	com	r21
    4c5a:	84 0f       	add	r24, r20
    4c5c:	95 1f       	adc	r25, r21
    4c5e:	80 93 c8 24 	sts	0x24C8, r24
    4c62:	90 93 c9 24 	sts	0x24C9, r25
    4c66:	1c c0       	rjmp	.+56     	; 0x4ca0 <Racunanje_trenutne_pozicije+0xec>
		}
		else if(PASIVNI_QDEC_OWF_R == 2)
    4c68:	80 91 ff 2d 	lds	r24, 0x2DFF
    4c6c:	82 30       	cpi	r24, 0x02	; 2
    4c6e:	c1 f4       	brne	.+48     	; 0x4ca0 <Racunanje_trenutne_pozicije+0xec>
		{
			sample_R16 = -(last_count_R + ~(count_R));
    4c70:	40 91 26 2e 	lds	r20, 0x2E26
    4c74:	50 91 27 2e 	lds	r21, 0x2E27
    4c78:	60 91 28 2e 	lds	r22, 0x2E28
    4c7c:	70 91 29 2e 	lds	r23, 0x2E29
    4c80:	80 91 f6 29 	lds	r24, 0x29F6
    4c84:	90 91 f7 29 	lds	r25, 0x29F7
    4c88:	a0 91 f8 29 	lds	r26, 0x29F8
    4c8c:	b0 91 f9 29 	lds	r27, 0x29F9
    4c90:	4f 5f       	subi	r20, 0xFF	; 255
    4c92:	5f 4f       	sbci	r21, 0xFF	; 255
    4c94:	48 1b       	sub	r20, r24
    4c96:	59 0b       	sbc	r21, r25
    4c98:	40 93 c8 24 	sts	0x24C8, r20
    4c9c:	50 93 c9 24 	sts	0x24C9, r21
		}
		
		PASIVNI_QDEC_OWF_R = 0;
    4ca0:	10 92 ff 2d 	sts	0x2DFF, r1
	}
	
	//levi enkoder
	if(PASIVNI_QDEC_OWF_L == 0)
    4ca4:	80 91 2a 2e 	lds	r24, 0x2E2A
    4ca8:	81 11       	cpse	r24, r1
    4caa:	0f c0       	rjmp	.+30     	; 0x4cca <Racunanje_trenutne_pozicije+0x116>
	{
		sample_L16 = (count_L - last_count_L);
    4cac:	80 91 85 32 	lds	r24, 0x3285
    4cb0:	90 91 86 32 	lds	r25, 0x3286
    4cb4:	20 91 35 2e 	lds	r18, 0x2E35
    4cb8:	30 91 36 2e 	lds	r19, 0x2E36
    4cbc:	82 1b       	sub	r24, r18
    4cbe:	93 0b       	sbc	r25, r19
    4cc0:	80 93 a8 24 	sts	0x24A8, r24
    4cc4:	90 93 a9 24 	sts	0x24A9, r25
    4cc8:	2a c0       	rjmp	.+84     	; 0x4d1e <Racunanje_trenutne_pozicije+0x16a>
	}
	else
	{
		if(PASIVNI_QDEC_OWF_L == 1)
    4cca:	80 91 2a 2e 	lds	r24, 0x2E2A
    4cce:	81 30       	cpi	r24, 0x01	; 1
    4cd0:	89 f4       	brne	.+34     	; 0x4cf4 <Racunanje_trenutne_pozicije+0x140>
		{
			sample_L16 = count_L + ~(last_count_L);
    4cd2:	80 91 35 2e 	lds	r24, 0x2E35
    4cd6:	90 91 36 2e 	lds	r25, 0x2E36
    4cda:	20 91 85 32 	lds	r18, 0x3285
    4cde:	30 91 86 32 	lds	r19, 0x3286
    4ce2:	80 95       	com	r24
    4ce4:	90 95       	com	r25
    4ce6:	82 0f       	add	r24, r18
    4ce8:	93 1f       	adc	r25, r19
    4cea:	80 93 a8 24 	sts	0x24A8, r24
    4cee:	90 93 a9 24 	sts	0x24A9, r25
    4cf2:	13 c0       	rjmp	.+38     	; 0x4d1a <Racunanje_trenutne_pozicije+0x166>
		} 
		else if(PASIVNI_QDEC_OWF_L == 2)
    4cf4:	80 91 2a 2e 	lds	r24, 0x2E2A
    4cf8:	82 30       	cpi	r24, 0x02	; 2
    4cfa:	79 f4       	brne	.+30     	; 0x4d1a <Racunanje_trenutne_pozicije+0x166>
		{
			sample_L16 = -(last_count_L + ~(count_L));
    4cfc:	80 91 85 32 	lds	r24, 0x3285
    4d00:	90 91 86 32 	lds	r25, 0x3286
    4d04:	20 91 35 2e 	lds	r18, 0x2E35
    4d08:	30 91 36 2e 	lds	r19, 0x2E36
    4d0c:	01 96       	adiw	r24, 0x01	; 1
    4d0e:	82 1b       	sub	r24, r18
    4d10:	93 0b       	sbc	r25, r19
    4d12:	80 93 a8 24 	sts	0x24A8, r24
    4d16:	90 93 a9 24 	sts	0x24A9, r25
		}
		
		PASIVNI_QDEC_OWF_L = 0;
    4d1a:	10 92 2a 2e 	sts	0x2E2A, r1
	}
	
	
	//osvezavanje last_ promenjive
	last_count_R = count_R;
    4d1e:	80 91 26 2e 	lds	r24, 0x2E26
    4d22:	90 91 27 2e 	lds	r25, 0x2E27
    4d26:	a0 91 28 2e 	lds	r26, 0x2E28
    4d2a:	b0 91 29 2e 	lds	r27, 0x2E29
    4d2e:	80 93 f6 29 	sts	0x29F6, r24
    4d32:	90 93 f7 29 	sts	0x29F7, r25
    4d36:	a0 93 f8 29 	sts	0x29F8, r26
    4d3a:	b0 93 f9 29 	sts	0x29F9, r27
	last_count_L = count_L;
    4d3e:	80 91 85 32 	lds	r24, 0x3285
    4d42:	90 91 86 32 	lds	r25, 0x3286
    4d46:	80 93 35 2e 	sts	0x2E35, r24
    4d4a:	90 93 36 2e 	sts	0x2E36, r25
	
	//potrebne vrednosti za trigonometriju
	translacija_10ms = (sample_R16 + sample_L16);
    4d4e:	20 91 c8 24 	lds	r18, 0x24C8
    4d52:	30 91 c9 24 	lds	r19, 0x24C9
    4d56:	80 91 a8 24 	lds	r24, 0x24A8
    4d5a:	90 91 a9 24 	lds	r25, 0x24A9
    4d5e:	82 0f       	add	r24, r18
    4d60:	93 1f       	adc	r25, r19
    4d62:	80 93 fa 29 	sts	0x29FA, r24
    4d66:	90 93 fb 29 	sts	0x29FB, r25
	rotacija_10ms = (sample_R16 - sample_L16);
    4d6a:	80 91 c8 24 	lds	r24, 0x24C8
    4d6e:	90 91 c9 24 	lds	r25, 0x24C9
    4d72:	20 91 a8 24 	lds	r18, 0x24A8
    4d76:	30 91 a9 24 	lds	r19, 0x24A9
    4d7a:	82 1b       	sub	r24, r18
    4d7c:	93 0b       	sbc	r25, r19
    4d7e:	80 93 8f 32 	sts	0x328F, r24
    4d82:	90 93 90 32 	sts	0x3290, r25
	teta += rotacija_10ms;
    4d86:	80 91 8f 32 	lds	r24, 0x328F
    4d8a:	90 91 90 32 	lds	r25, 0x3290
    4d8e:	40 91 8b 32 	lds	r20, 0x328B
    4d92:	50 91 8c 32 	lds	r21, 0x328C
    4d96:	60 91 8d 32 	lds	r22, 0x328D
    4d9a:	70 91 8e 32 	lds	r23, 0x328E
    4d9e:	aa 27       	eor	r26, r26
    4da0:	97 fd       	sbrc	r25, 7
    4da2:	a0 95       	com	r26
    4da4:	ba 2f       	mov	r27, r26
    4da6:	84 0f       	add	r24, r20
    4da8:	95 1f       	adc	r25, r21
    4daa:	a6 1f       	adc	r26, r22
    4dac:	b7 1f       	adc	r27, r23
    4dae:	80 93 8b 32 	sts	0x328B, r24
    4db2:	90 93 8c 32 	sts	0x328C, r25
    4db6:	a0 93 8d 32 	sts	0x328D, r26
    4dba:	b0 93 8e 32 	sts	0x328E, r27
	translacija += ((long)(translacija_10ms));
    4dbe:	80 91 fa 29 	lds	r24, 0x29FA
    4dc2:	90 91 fb 29 	lds	r25, 0x29FB
    4dc6:	40 91 bc 24 	lds	r20, 0x24BC
    4dca:	50 91 bd 24 	lds	r21, 0x24BD
    4dce:	60 91 be 24 	lds	r22, 0x24BE
    4dd2:	70 91 bf 24 	lds	r23, 0x24BF
    4dd6:	aa 27       	eor	r26, r26
    4dd8:	97 fd       	sbrc	r25, 7
    4dda:	a0 95       	com	r26
    4ddc:	ba 2f       	mov	r27, r26
    4dde:	84 0f       	add	r24, r20
    4de0:	95 1f       	adc	r25, r21
    4de2:	a6 1f       	adc	r26, r22
    4de4:	b7 1f       	adc	r27, r23
    4de6:	80 93 bc 24 	sts	0x24BC, r24
    4dea:	90 93 bd 24 	sts	0x24BD, r25
    4dee:	a0 93 be 24 	sts	0x24BE, r26
    4df2:	b0 93 bf 24 	sts	0x24BF, r27
	
	//ako predje ceo krug u pozitivnom smeru  //PROVERI OVO
	if(teta >= krug360)
    4df6:	40 91 8b 32 	lds	r20, 0x328B
    4dfa:	50 91 8c 32 	lds	r21, 0x328C
    4dfe:	60 91 8d 32 	lds	r22, 0x328D
    4e02:	70 91 8e 32 	lds	r23, 0x328E
    4e06:	80 91 7d 32 	lds	r24, 0x327D
    4e0a:	90 91 7e 32 	lds	r25, 0x327E
    4e0e:	a0 91 7f 32 	lds	r26, 0x327F
    4e12:	b0 91 80 32 	lds	r27, 0x3280
    4e16:	48 17       	cp	r20, r24
    4e18:	59 07       	cpc	r21, r25
    4e1a:	6a 07       	cpc	r22, r26
    4e1c:	7b 07       	cpc	r23, r27
    4e1e:	e4 f0       	brlt	.+56     	; 0x4e58 <Racunanje_trenutne_pozicije+0x2a4>
		teta -= krug360;
    4e20:	80 91 8b 32 	lds	r24, 0x328B
    4e24:	90 91 8c 32 	lds	r25, 0x328C
    4e28:	a0 91 8d 32 	lds	r26, 0x328D
    4e2c:	b0 91 8e 32 	lds	r27, 0x328E
    4e30:	40 91 7d 32 	lds	r20, 0x327D
    4e34:	50 91 7e 32 	lds	r21, 0x327E
    4e38:	60 91 7f 32 	lds	r22, 0x327F
    4e3c:	70 91 80 32 	lds	r23, 0x3280
    4e40:	84 1b       	sub	r24, r20
    4e42:	95 0b       	sbc	r25, r21
    4e44:	a6 0b       	sbc	r26, r22
    4e46:	b7 0b       	sbc	r27, r23
    4e48:	80 93 8b 32 	sts	0x328B, r24
    4e4c:	90 93 8c 32 	sts	0x328C, r25
    4e50:	a0 93 8d 32 	sts	0x328D, r26
    4e54:	b0 93 8e 32 	sts	0x328E, r27
	
	//ako predje u negativan smer
	if(teta < 0)
    4e58:	80 91 8b 32 	lds	r24, 0x328B
    4e5c:	90 91 8c 32 	lds	r25, 0x328C
    4e60:	a0 91 8d 32 	lds	r26, 0x328D
    4e64:	b0 91 8e 32 	lds	r27, 0x328E
    4e68:	bb 23       	and	r27, r27
    4e6a:	e4 f4       	brge	.+56     	; 0x4ea4 <Racunanje_trenutne_pozicije+0x2f0>
		teta += krug360;	
    4e6c:	40 91 8b 32 	lds	r20, 0x328B
    4e70:	50 91 8c 32 	lds	r21, 0x328C
    4e74:	60 91 8d 32 	lds	r22, 0x328D
    4e78:	70 91 8e 32 	lds	r23, 0x328E
    4e7c:	80 91 7d 32 	lds	r24, 0x327D
    4e80:	90 91 7e 32 	lds	r25, 0x327E
    4e84:	a0 91 7f 32 	lds	r26, 0x327F
    4e88:	b0 91 80 32 	lds	r27, 0x3280
    4e8c:	84 0f       	add	r24, r20
    4e8e:	95 1f       	adc	r25, r21
    4e90:	a6 1f       	adc	r26, r22
    4e92:	b7 1f       	adc	r27, r23
    4e94:	80 93 8b 32 	sts	0x328B, r24
    4e98:	90 93 8c 32 	sts	0x328C, r25
    4e9c:	a0 93 8d 32 	sts	0x328D, r26
    4ea0:	b0 93 8e 32 	sts	0x328E, r27
	
	//racunanje pozicije
	double X_pos_cos, Y_pos_sin;
	X_pos_cos = cos(((double)teta / krug180) * M_PI);
    4ea4:	60 91 8b 32 	lds	r22, 0x328B
    4ea8:	70 91 8c 32 	lds	r23, 0x328C
    4eac:	80 91 8d 32 	lds	r24, 0x328D
    4eb0:	90 91 8e 32 	lds	r25, 0x328E
    4eb4:	c0 90 d7 28 	lds	r12, 0x28D7
    4eb8:	d0 90 d8 28 	lds	r13, 0x28D8
    4ebc:	e0 90 d9 28 	lds	r14, 0x28D9
    4ec0:	f0 90 da 28 	lds	r15, 0x28DA
    4ec4:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    4ec8:	4b 01       	movw	r8, r22
    4eca:	5c 01       	movw	r10, r24
    4ecc:	c7 01       	movw	r24, r14
    4ece:	b6 01       	movw	r22, r12
    4ed0:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    4ed4:	9b 01       	movw	r18, r22
    4ed6:	ac 01       	movw	r20, r24
    4ed8:	c5 01       	movw	r24, r10
    4eda:	b4 01       	movw	r22, r8
    4edc:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__divsf3>
    4ee0:	2b ed       	ldi	r18, 0xDB	; 219
    4ee2:	3f e0       	ldi	r19, 0x0F	; 15
    4ee4:	49 e4       	ldi	r20, 0x49	; 73
    4ee6:	50 e4       	ldi	r21, 0x40	; 64
    4ee8:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    4eec:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <cos>
    4ef0:	2b 01       	movw	r4, r22
    4ef2:	3c 01       	movw	r6, r24
	Y_pos_sin = sin(((double)teta / krug180) * M_PI);
    4ef4:	60 91 8b 32 	lds	r22, 0x328B
    4ef8:	70 91 8c 32 	lds	r23, 0x328C
    4efc:	80 91 8d 32 	lds	r24, 0x328D
    4f00:	90 91 8e 32 	lds	r25, 0x328E
    4f04:	c0 90 d7 28 	lds	r12, 0x28D7
    4f08:	d0 90 d8 28 	lds	r13, 0x28D8
    4f0c:	e0 90 d9 28 	lds	r14, 0x28D9
    4f10:	f0 90 da 28 	lds	r15, 0x28DA
    4f14:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    4f18:	4b 01       	movw	r8, r22
    4f1a:	5c 01       	movw	r10, r24
    4f1c:	c7 01       	movw	r24, r14
    4f1e:	b6 01       	movw	r22, r12
    4f20:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    4f24:	9b 01       	movw	r18, r22
    4f26:	ac 01       	movw	r20, r24
    4f28:	c5 01       	movw	r24, r10
    4f2a:	b4 01       	movw	r22, r8
    4f2c:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__divsf3>
    4f30:	2b ed       	ldi	r18, 0xDB	; 219
    4f32:	3f e0       	ldi	r19, 0x0F	; 15
    4f34:	49 e4       	ldi	r20, 0x49	; 73
    4f36:	50 e4       	ldi	r21, 0x40	; 64
    4f38:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    4f3c:	0e 94 8a 38 	call	0x7114	; 0x7114 <sin>
    4f40:	4b 01       	movw	r8, r22
    4f42:	5c 01       	movw	r10, r24
	X_pos += (int)(((double)translacija_10ms * X_pos_cos));
    4f44:	60 91 fa 29 	lds	r22, 0x29FA
    4f48:	70 91 fb 29 	lds	r23, 0x29FB
    4f4c:	c0 90 2b 2e 	lds	r12, 0x2E2B
    4f50:	d0 90 2c 2e 	lds	r13, 0x2E2C
    4f54:	e0 90 2d 2e 	lds	r14, 0x2E2D
    4f58:	f0 90 2e 2e 	lds	r15, 0x2E2E
    4f5c:	88 27       	eor	r24, r24
    4f5e:	77 fd       	sbrc	r23, 7
    4f60:	80 95       	com	r24
    4f62:	98 2f       	mov	r25, r24
    4f64:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    4f68:	a3 01       	movw	r20, r6
    4f6a:	92 01       	movw	r18, r4
    4f6c:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    4f70:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fixsfsi>
    4f74:	cb 01       	movw	r24, r22
    4f76:	aa 27       	eor	r26, r26
    4f78:	97 fd       	sbrc	r25, 7
    4f7a:	a0 95       	com	r26
    4f7c:	ba 2f       	mov	r27, r26
    4f7e:	c8 0e       	add	r12, r24
    4f80:	d9 1e       	adc	r13, r25
    4f82:	ea 1e       	adc	r14, r26
    4f84:	fb 1e       	adc	r15, r27
    4f86:	c0 92 2b 2e 	sts	0x2E2B, r12
    4f8a:	d0 92 2c 2e 	sts	0x2E2C, r13
    4f8e:	e0 92 2d 2e 	sts	0x2E2D, r14
    4f92:	f0 92 2e 2e 	sts	0x2E2E, r15
	Y_pos += (int)(((double)translacija_10ms * Y_pos_sin));
    4f96:	60 91 fa 29 	lds	r22, 0x29FA
    4f9a:	70 91 fb 29 	lds	r23, 0x29FB
    4f9e:	c0 90 0a 2a 	lds	r12, 0x2A0A
    4fa2:	d0 90 0b 2a 	lds	r13, 0x2A0B
    4fa6:	e0 90 0c 2a 	lds	r14, 0x2A0C
    4faa:	f0 90 0d 2a 	lds	r15, 0x2A0D
    4fae:	88 27       	eor	r24, r24
    4fb0:	77 fd       	sbrc	r23, 7
    4fb2:	80 95       	com	r24
    4fb4:	98 2f       	mov	r25, r24
    4fb6:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    4fba:	a5 01       	movw	r20, r10
    4fbc:	94 01       	movw	r18, r8
    4fbe:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    4fc2:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fixsfsi>
    4fc6:	cb 01       	movw	r24, r22
    4fc8:	aa 27       	eor	r26, r26
    4fca:	97 fd       	sbrc	r25, 7
    4fcc:	a0 95       	com	r26
    4fce:	ba 2f       	mov	r27, r26
    4fd0:	c8 0e       	add	r12, r24
    4fd2:	d9 1e       	adc	r13, r25
    4fd4:	ea 1e       	adc	r14, r26
    4fd6:	fb 1e       	adc	r15, r27
    4fd8:	c0 92 0a 2a 	sts	0x2A0A, r12
    4fdc:	d0 92 0b 2a 	sts	0x2A0B, r13
    4fe0:	e0 92 0c 2a 	sts	0x2A0C, r14
    4fe4:	f0 92 0d 2a 	sts	0x2A0D, r15
}
    4fe8:	ff 90       	pop	r15
    4fea:	ef 90       	pop	r14
    4fec:	df 90       	pop	r13
    4fee:	cf 90       	pop	r12
    4ff0:	bf 90       	pop	r11
    4ff2:	af 90       	pop	r10
    4ff4:	9f 90       	pop	r9
    4ff6:	8f 90       	pop	r8
    4ff8:	7f 90       	pop	r7
    4ffa:	6f 90       	pop	r6
    4ffc:	5f 90       	pop	r5
    4ffe:	4f 90       	pop	r4
    5000:	08 95       	ret

00005002 <Pracenje_pravca>:

void Pracenje_pravca(void) 
{
    5002:	4f 92       	push	r4
    5004:	5f 92       	push	r5
    5006:	6f 92       	push	r6
    5008:	7f 92       	push	r7
    500a:	8f 92       	push	r8
    500c:	9f 92       	push	r9
    500e:	af 92       	push	r10
    5010:	bf 92       	push	r11
    5012:	cf 92       	push	r12
    5014:	df 92       	push	r13
    5016:	ef 92       	push	r14
    5018:	ff 92       	push	r15
    501a:	0f 93       	push	r16
    501c:	1f 93       	push	r17
    501e:	cf 93       	push	r28
    5020:	df 93       	push	r29
	//Ulaz X_cilj i Y_cilj
	//Izlaz je teta_cilj i rastojanje_cilj
	double X_razlika, Y_razlika, XY_zbir, teta_razlika, teta_cilj_radian;
	
	//ako stignu nove zadate koordinate
	if (X_cilj_stari != X_cilj || Y_cilj_stari != Y_cilj)	
    5022:	40 91 39 2e 	lds	r20, 0x2E39
    5026:	50 91 3a 2e 	lds	r21, 0x2E3A
    502a:	60 91 3b 2e 	lds	r22, 0x2E3B
    502e:	70 91 3c 2e 	lds	r23, 0x2E3C
    5032:	80 91 b6 24 	lds	r24, 0x24B6
    5036:	90 91 b7 24 	lds	r25, 0x24B7
    503a:	a0 91 b8 24 	lds	r26, 0x24B8
    503e:	b0 91 b9 24 	lds	r27, 0x24B9
    5042:	48 17       	cp	r20, r24
    5044:	59 07       	cpc	r21, r25
    5046:	6a 07       	cpc	r22, r26
    5048:	7b 07       	cpc	r23, r27
    504a:	a9 f4       	brne	.+42     	; 0x5076 <Pracenje_pravca+0x74>
    504c:	40 91 78 2e 	lds	r20, 0x2E78
    5050:	50 91 79 2e 	lds	r21, 0x2E79
    5054:	60 91 7a 2e 	lds	r22, 0x2E7A
    5058:	70 91 7b 2e 	lds	r23, 0x2E7B
    505c:	80 91 13 2e 	lds	r24, 0x2E13
    5060:	90 91 14 2e 	lds	r25, 0x2E14
    5064:	a0 91 15 2e 	lds	r26, 0x2E15
    5068:	b0 91 16 2e 	lds	r27, 0x2E16
    506c:	48 17       	cp	r20, r24
    506e:	59 07       	cpc	r21, r25
    5070:	6a 07       	cpc	r22, r26
    5072:	7b 07       	cpc	r23, r27
    5074:	71 f0       	breq	.+28     	; 0x5092 <Pracenje_pravca+0x90>
	{
		rezervni_ugao = krug45;	//precizno se pozicioniramo u mestu
    5076:	80 91 d0 24 	lds	r24, 0x24D0
    507a:	90 91 d1 24 	lds	r25, 0x24D1
    507e:	a0 91 d2 24 	lds	r26, 0x24D2
    5082:	b0 91 d3 24 	lds	r27, 0x24D3
    5086:	80 93 37 2e 	sts	0x2E37, r24
    508a:	90 93 38 2e 	sts	0x2E38, r25
		stigao_flag = 0;
    508e:	10 92 06 20 	sts	0x2006, r1
	}
	X_cilj_stari = X_cilj;
    5092:	80 91 b6 24 	lds	r24, 0x24B6
    5096:	90 91 b7 24 	lds	r25, 0x24B7
    509a:	a0 91 b8 24 	lds	r26, 0x24B8
    509e:	b0 91 b9 24 	lds	r27, 0x24B9
    50a2:	80 93 39 2e 	sts	0x2E39, r24
    50a6:	90 93 3a 2e 	sts	0x2E3A, r25
    50aa:	a0 93 3b 2e 	sts	0x2E3B, r26
    50ae:	b0 93 3c 2e 	sts	0x2E3C, r27
	Y_cilj_stari = Y_cilj;
    50b2:	80 91 13 2e 	lds	r24, 0x2E13
    50b6:	90 91 14 2e 	lds	r25, 0x2E14
    50ba:	a0 91 15 2e 	lds	r26, 0x2E15
    50be:	b0 91 16 2e 	lds	r27, 0x2E16
    50c2:	80 93 78 2e 	sts	0x2E78, r24
    50c6:	90 93 79 2e 	sts	0x2E79, r25
    50ca:	a0 93 7a 2e 	sts	0x2E7A, r26
    50ce:	b0 93 7b 2e 	sts	0x2E7B, r27
	
	X_razlika = (X_cilj - X_pos);
    50d2:	40 91 b6 24 	lds	r20, 0x24B6
    50d6:	50 91 b7 24 	lds	r21, 0x24B7
    50da:	60 91 b8 24 	lds	r22, 0x24B8
    50de:	70 91 b9 24 	lds	r23, 0x24B9
    50e2:	80 91 2b 2e 	lds	r24, 0x2E2B
    50e6:	90 91 2c 2e 	lds	r25, 0x2E2C
    50ea:	a0 91 2d 2e 	lds	r26, 0x2E2D
    50ee:	b0 91 2e 2e 	lds	r27, 0x2E2E
    50f2:	8a 01       	movw	r16, r20
    50f4:	9b 01       	movw	r18, r22
    50f6:	08 1b       	sub	r16, r24
    50f8:	19 0b       	sbc	r17, r25
    50fa:	2a 0b       	sbc	r18, r26
    50fc:	3b 0b       	sbc	r19, r27
    50fe:	c9 01       	movw	r24, r18
    5100:	b8 01       	movw	r22, r16
    5102:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    5106:	c6 2e       	mov	r12, r22
    5108:	d7 2e       	mov	r13, r23
    510a:	e8 2e       	mov	r14, r24
    510c:	f9 2e       	mov	r15, r25
	Y_razlika = (Y_cilj - Y_pos);
    510e:	40 91 13 2e 	lds	r20, 0x2E13
    5112:	50 91 14 2e 	lds	r21, 0x2E14
    5116:	60 91 15 2e 	lds	r22, 0x2E15
    511a:	70 91 16 2e 	lds	r23, 0x2E16
    511e:	80 91 0a 2a 	lds	r24, 0x2A0A
    5122:	90 91 0b 2a 	lds	r25, 0x2A0B
    5126:	a0 91 0c 2a 	lds	r26, 0x2A0C
    512a:	b0 91 0d 2a 	lds	r27, 0x2A0D
    512e:	8a 01       	movw	r16, r20
    5130:	9b 01       	movw	r18, r22
    5132:	08 1b       	sub	r16, r24
    5134:	19 0b       	sbc	r17, r25
    5136:	2a 0b       	sbc	r18, r26
    5138:	3b 0b       	sbc	r19, r27
    513a:	c9 01       	movw	r24, r18
    513c:	b8 01       	movw	r22, r16
    513e:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    5142:	06 2f       	mov	r16, r22
    5144:	17 2f       	mov	r17, r23
    5146:	d8 2f       	mov	r29, r24
    5148:	c9 2f       	mov	r28, r25
	X_razlika *= X_razlika;
    514a:	2c 2d       	mov	r18, r12
    514c:	3d 2d       	mov	r19, r13
    514e:	4e 2d       	mov	r20, r14
    5150:	5f 2d       	mov	r21, r15
    5152:	6c 2d       	mov	r22, r12
    5154:	7d 2d       	mov	r23, r13
    5156:	8e 2d       	mov	r24, r14
    5158:	9f 2d       	mov	r25, r15
    515a:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    515e:	6b 01       	movw	r12, r22
    5160:	7c 01       	movw	r14, r24
	Y_razlika *= Y_razlika;
    5162:	20 2f       	mov	r18, r16
    5164:	31 2f       	mov	r19, r17
    5166:	4d 2f       	mov	r20, r29
    5168:	5c 2f       	mov	r21, r28
    516a:	60 2f       	mov	r22, r16
    516c:	71 2f       	mov	r23, r17
    516e:	8d 2f       	mov	r24, r29
    5170:	9c 2f       	mov	r25, r28
    5172:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    5176:	9b 01       	movw	r18, r22
    5178:	ac 01       	movw	r20, r24
	XY_zbir = X_razlika + Y_razlika;
    517a:	c7 01       	movw	r24, r14
    517c:	b6 01       	movw	r22, r12
    517e:	0e 94 a6 35 	call	0x6b4c	; 0x6b4c <__addsf3>
	rastojanje_cilj_temp = sqrt(XY_zbir);
    5182:	0e 94 94 38 	call	0x7128	; 0x7128 <sqrt>
    5186:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fixsfsi>
    518a:	60 93 1a 2e 	sts	0x2E1A, r22
    518e:	70 93 1b 2e 	sts	0x2E1B, r23
    5192:	80 93 1c 2e 	sts	0x2E1C, r24
    5196:	90 93 1d 2e 	sts	0x2E1D, r25
	
	//ako je veca preostala distanca veca od 10 cm onda se radi korrekcija
	if(rastojanje_cilj_temp > (metar / 10))  // metar/12
    519a:	60 91 db 24 	lds	r22, 0x24DB
    519e:	70 91 dc 24 	lds	r23, 0x24DC
    51a2:	80 91 dd 24 	lds	r24, 0x24DD
    51a6:	90 91 de 24 	lds	r25, 0x24DE
    51aa:	c0 90 1a 2e 	lds	r12, 0x2E1A
    51ae:	d0 90 1b 2e 	lds	r13, 0x2E1B
    51b2:	e0 90 1c 2e 	lds	r14, 0x2E1C
    51b6:	f0 90 1d 2e 	lds	r15, 0x2E1D
    51ba:	2a e0       	ldi	r18, 0x0A	; 10
    51bc:	30 e0       	ldi	r19, 0x00	; 0
    51be:	40 e0       	ldi	r20, 0x00	; 0
    51c0:	50 e0       	ldi	r21, 0x00	; 0
    51c2:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    51c6:	2c 15       	cp	r18, r12
    51c8:	3d 05       	cpc	r19, r13
    51ca:	4e 05       	cpc	r20, r14
    51cc:	5f 05       	cpc	r21, r15
    51ce:	0c f0       	brlt	.+2      	; 0x51d2 <Pracenje_pravca+0x1d0>
    51d0:	3f c1       	rjmp	.+638    	; 0x5450 <Pracenje_pravca+0x44e>
	{
		rastojanje_cilj = rastojanje_cilj_temp;
    51d2:	80 91 1a 2e 	lds	r24, 0x2E1A
    51d6:	90 91 1b 2e 	lds	r25, 0x2E1B
    51da:	a0 91 1c 2e 	lds	r26, 0x2E1C
    51de:	b0 91 1d 2e 	lds	r27, 0x2E1D
    51e2:	80 93 71 2e 	sts	0x2E71, r24
    51e6:	90 93 72 2e 	sts	0x2E72, r25
    51ea:	a0 93 73 2e 	sts	0x2E73, r26
    51ee:	b0 93 74 2e 	sts	0x2E74, r27
		translacija = 0;
    51f2:	10 92 bc 24 	sts	0x24BC, r1
    51f6:	10 92 bd 24 	sts	0x24BD, r1
    51fa:	10 92 be 24 	sts	0x24BE, r1
    51fe:	10 92 bf 24 	sts	0x24BF, r1
		vreme_pozicioniranja = 0;
    5202:	10 92 64 2e 	sts	0x2E64, r1
    5206:	10 92 65 2e 	sts	0x2E65, r1
		stigao_flag = 0;
    520a:	10 92 06 20 	sts	0x2006, r1
		
		X_razlika = (X_cilj - X_pos);
    520e:	40 91 b6 24 	lds	r20, 0x24B6
    5212:	50 91 b7 24 	lds	r21, 0x24B7
    5216:	60 91 b8 24 	lds	r22, 0x24B8
    521a:	70 91 b9 24 	lds	r23, 0x24B9
    521e:	80 91 2b 2e 	lds	r24, 0x2E2B
    5222:	90 91 2c 2e 	lds	r25, 0x2E2C
    5226:	a0 91 2d 2e 	lds	r26, 0x2E2D
    522a:	b0 91 2e 2e 	lds	r27, 0x2E2E
		Y_razlika = (Y_cilj - Y_pos);
    522e:	40 90 13 2e 	lds	r4, 0x2E13
    5232:	50 90 14 2e 	lds	r5, 0x2E14
    5236:	60 90 15 2e 	lds	r6, 0x2E15
    523a:	70 90 16 2e 	lds	r7, 0x2E16
    523e:	80 90 0a 2a 	lds	r8, 0x2A0A
    5242:	90 90 0b 2a 	lds	r9, 0x2A0B
    5246:	a0 90 0c 2a 	lds	r10, 0x2A0C
    524a:	b0 90 0d 2a 	lds	r11, 0x2A0D
		rastojanje_cilj = rastojanje_cilj_temp;
		translacija = 0;
		vreme_pozicioniranja = 0;
		stigao_flag = 0;
		
		X_razlika = (X_cilj - X_pos);
    524e:	8a 01       	movw	r16, r20
    5250:	9b 01       	movw	r18, r22
    5252:	08 1b       	sub	r16, r24
    5254:	19 0b       	sbc	r17, r25
    5256:	2a 0b       	sbc	r18, r26
    5258:	3b 0b       	sbc	r19, r27
    525a:	c9 01       	movw	r24, r18
    525c:	b8 01       	movw	r22, r16
    525e:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    5262:	6b 01       	movw	r12, r22
    5264:	7c 01       	movw	r14, r24
		Y_razlika = (Y_cilj - Y_pos);
    5266:	c3 01       	movw	r24, r6
    5268:	b2 01       	movw	r22, r4
    526a:	68 19       	sub	r22, r8
    526c:	79 09       	sbc	r23, r9
    526e:	8a 09       	sbc	r24, r10
    5270:	9b 09       	sbc	r25, r11
    5272:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
		teta_cilj_radian = atan2((double)(Y_razlika), (double)(X_razlika));
    5276:	a7 01       	movw	r20, r14
    5278:	96 01       	movw	r18, r12
    527a:	0e 94 19 36 	call	0x6c32	; 0x6c32 <atan2>
    527e:	6b 01       	movw	r12, r22
    5280:	7c 01       	movw	r14, r24
		
		teta_cilj = (signed long)((teta_cilj_radian * krug180) / M_PI);
    5282:	60 91 d7 28 	lds	r22, 0x28D7
    5286:	70 91 d8 28 	lds	r23, 0x28D8
    528a:	80 91 d9 28 	lds	r24, 0x28D9
    528e:	90 91 da 28 	lds	r25, 0x28DA
    5292:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    5296:	a7 01       	movw	r20, r14
    5298:	96 01       	movw	r18, r12
    529a:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    529e:	2b ed       	ldi	r18, 0xDB	; 219
    52a0:	3f e0       	ldi	r19, 0x0F	; 15
    52a2:	49 e4       	ldi	r20, 0x49	; 73
    52a4:	50 e4       	ldi	r21, 0x40	; 64
    52a6:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__divsf3>
    52aa:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fixsfsi>
    52ae:	60 93 d4 24 	sts	0x24D4, r22
    52b2:	70 93 d5 24 	sts	0x24D5, r23
    52b6:	80 93 d6 24 	sts	0x24D6, r24
    52ba:	90 93 d7 24 	sts	0x24D7, r25
		
		//Za automatsko kontanje rikverca po uglu
		if((smer_zadati) == 0)	//Sam bira smer
    52be:	80 91 66 29 	lds	r24, 0x2966
    52c2:	81 11       	cpse	r24, r1
    52c4:	73 c0       	rjmp	.+230    	; 0x53ac <Pracenje_pravca+0x3aa>
		{
			teta_razlika = teta - teta_cilj;
    52c6:	40 91 8b 32 	lds	r20, 0x328B
    52ca:	50 91 8c 32 	lds	r21, 0x328C
    52ce:	60 91 8d 32 	lds	r22, 0x328D
    52d2:	70 91 8e 32 	lds	r23, 0x328E
    52d6:	80 91 d4 24 	lds	r24, 0x24D4
    52da:	90 91 d5 24 	lds	r25, 0x24D5
    52de:	a0 91 d6 24 	lds	r26, 0x24D6
    52e2:	b0 91 d7 24 	lds	r27, 0x24D7
    52e6:	8a 01       	movw	r16, r20
    52e8:	9b 01       	movw	r18, r22
    52ea:	08 1b       	sub	r16, r24
    52ec:	19 0b       	sbc	r17, r25
    52ee:	2a 0b       	sbc	r18, r26
    52f0:	3b 0b       	sbc	r19, r27
    52f2:	c9 01       	movw	r24, r18
    52f4:	b8 01       	movw	r22, r16
    52f6:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    52fa:	06 2f       	mov	r16, r22
    52fc:	17 2f       	mov	r17, r23
    52fe:	d8 2f       	mov	r29, r24
    5300:	c9 2f       	mov	r28, r25
			if(teta_razlika > (krug90) || teta_razlika < (-krug90))
    5302:	60 91 86 2e 	lds	r22, 0x2E86
    5306:	70 91 87 2e 	lds	r23, 0x2E87
    530a:	80 91 88 2e 	lds	r24, 0x2E88
    530e:	90 91 89 2e 	lds	r25, 0x2E89
    5312:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    5316:	9b 01       	movw	r18, r22
    5318:	ac 01       	movw	r20, r24
    531a:	60 2f       	mov	r22, r16
    531c:	71 2f       	mov	r23, r17
    531e:	8d 2f       	mov	r24, r29
    5320:	9c 2f       	mov	r25, r28
    5322:	0e 94 1c 38 	call	0x7038	; 0x7038 <__gesf2>
    5326:	18 16       	cp	r1, r24
    5328:	ec f0       	brlt	.+58     	; 0x5364 <Pracenje_pravca+0x362>
    532a:	80 91 86 2e 	lds	r24, 0x2E86
    532e:	90 91 87 2e 	lds	r25, 0x2E87
    5332:	a0 91 88 2e 	lds	r26, 0x2E88
    5336:	b0 91 89 2e 	lds	r27, 0x2E89
    533a:	9c 01       	movw	r18, r24
    533c:	ad 01       	movw	r20, r26
    533e:	66 27       	eor	r22, r22
    5340:	77 27       	eor	r23, r23
    5342:	cb 01       	movw	r24, r22
    5344:	62 1b       	sub	r22, r18
    5346:	73 0b       	sbc	r23, r19
    5348:	84 0b       	sbc	r24, r20
    534a:	95 0b       	sbc	r25, r21
    534c:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    5350:	9b 01       	movw	r18, r22
    5352:	ac 01       	movw	r20, r24
    5354:	60 2f       	mov	r22, r16
    5356:	71 2f       	mov	r23, r17
    5358:	8d 2f       	mov	r24, r29
    535a:	9c 2f       	mov	r25, r28
    535c:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <__cmpsf2>
    5360:	88 23       	and	r24, r24
    5362:	04 f5       	brge	.+64     	; 0x53a4 <Pracenje_pravca+0x3a2>
			{
				smer_trenutni = -1;
    5364:	8f ef       	ldi	r24, 0xFF	; 255
    5366:	80 93 80 2e 	sts	0x2E80, r24
				teta_cilj -= krug180;
    536a:	80 91 d4 24 	lds	r24, 0x24D4
    536e:	90 91 d5 24 	lds	r25, 0x24D5
    5372:	a0 91 d6 24 	lds	r26, 0x24D6
    5376:	b0 91 d7 24 	lds	r27, 0x24D7
    537a:	40 91 d7 28 	lds	r20, 0x28D7
    537e:	50 91 d8 28 	lds	r21, 0x28D8
    5382:	60 91 d9 28 	lds	r22, 0x28D9
    5386:	70 91 da 28 	lds	r23, 0x28DA
    538a:	84 1b       	sub	r24, r20
    538c:	95 0b       	sbc	r25, r21
    538e:	a6 0b       	sbc	r26, r22
    5390:	b7 0b       	sbc	r27, r23
    5392:	80 93 d4 24 	sts	0x24D4, r24
    5396:	90 93 d5 24 	sts	0x24D5, r25
    539a:	a0 93 d6 24 	sts	0x24D6, r26
    539e:	b0 93 d7 24 	sts	0x24D7, r27
    53a2:	2e c0       	rjmp	.+92     	; 0x5400 <Pracenje_pravca+0x3fe>
			}	
			else
			{
				smer_trenutni = 1;
    53a4:	81 e0       	ldi	r24, 0x01	; 1
    53a6:	80 93 80 2e 	sts	0x2E80, r24
    53aa:	2a c0       	rjmp	.+84     	; 0x5400 <Pracenje_pravca+0x3fe>
			}
		}
		else if(smer_zadati == 1)	//Samo napred
    53ac:	80 91 66 29 	lds	r24, 0x2966
    53b0:	81 30       	cpi	r24, 0x01	; 1
    53b2:	19 f4       	brne	.+6      	; 0x53ba <Pracenje_pravca+0x3b8>
		{
			smer_trenutni = 1; //1
    53b4:	80 93 80 2e 	sts	0x2E80, r24
    53b8:	23 c0       	rjmp	.+70     	; 0x5400 <Pracenje_pravca+0x3fe>
		}
		else if(smer_zadati == 2)	//Samo nazad
    53ba:	80 91 66 29 	lds	r24, 0x2966
    53be:	82 30       	cpi	r24, 0x02	; 2
    53c0:	f9 f4       	brne	.+62     	; 0x5400 <Pracenje_pravca+0x3fe>
		{
			smer_trenutni = -1; //-1
    53c2:	8f ef       	ldi	r24, 0xFF	; 255
    53c4:	80 93 80 2e 	sts	0x2E80, r24
			teta_cilj -= krug180;
    53c8:	80 91 d4 24 	lds	r24, 0x24D4
    53cc:	90 91 d5 24 	lds	r25, 0x24D5
    53d0:	a0 91 d6 24 	lds	r26, 0x24D6
    53d4:	b0 91 d7 24 	lds	r27, 0x24D7
    53d8:	40 91 d7 28 	lds	r20, 0x28D7
    53dc:	50 91 d8 28 	lds	r21, 0x28D8
    53e0:	60 91 d9 28 	lds	r22, 0x28D9
    53e4:	70 91 da 28 	lds	r23, 0x28DA
    53e8:	84 1b       	sub	r24, r20
    53ea:	95 0b       	sbc	r25, r21
    53ec:	a6 0b       	sbc	r26, r22
    53ee:	b7 0b       	sbc	r27, r23
    53f0:	80 93 d4 24 	sts	0x24D4, r24
    53f4:	90 93 d5 24 	sts	0x24D5, r25
    53f8:	a0 93 d6 24 	sts	0x24D6, r26
    53fc:	b0 93 d7 24 	sts	0x24D7, r27
		}
	
		if(teta_cilj < 0)
    5400:	80 91 d4 24 	lds	r24, 0x24D4
    5404:	90 91 d5 24 	lds	r25, 0x24D5
    5408:	a0 91 d6 24 	lds	r26, 0x24D6
    540c:	b0 91 d7 24 	lds	r27, 0x24D7
    5410:	bb 23       	and	r27, r27
    5412:	0c f0       	brlt	.+2      	; 0x5416 <Pracenje_pravca+0x414>
    5414:	53 c0       	rjmp	.+166    	; 0x54bc <Pracenje_pravca+0x4ba>
			teta_cilj += krug360;
    5416:	40 91 d4 24 	lds	r20, 0x24D4
    541a:	50 91 d5 24 	lds	r21, 0x24D5
    541e:	60 91 d6 24 	lds	r22, 0x24D6
    5422:	70 91 d7 24 	lds	r23, 0x24D7
    5426:	80 91 7d 32 	lds	r24, 0x327D
    542a:	90 91 7e 32 	lds	r25, 0x327E
    542e:	a0 91 7f 32 	lds	r26, 0x327F
    5432:	b0 91 80 32 	lds	r27, 0x3280
    5436:	84 0f       	add	r24, r20
    5438:	95 1f       	adc	r25, r21
    543a:	a6 1f       	adc	r26, r22
    543c:	b7 1f       	adc	r27, r23
    543e:	80 93 d4 24 	sts	0x24D4, r24
    5442:	90 93 d5 24 	sts	0x24D5, r25
    5446:	a0 93 d6 24 	sts	0x24D6, r26
    544a:	b0 93 d7 24 	sts	0x24D7, r27
    544e:	36 c0       	rjmp	.+108    	; 0x54bc <Pracenje_pravca+0x4ba>
	}
	else if (vreme_pozicioniranja >= 300)	//stigli smo do cilja
    5450:	80 91 64 2e 	lds	r24, 0x2E64
    5454:	90 91 65 2e 	lds	r25, 0x2E65
    5458:	8c 32       	cpi	r24, 0x2C	; 44
    545a:	91 40       	sbci	r25, 0x01	; 1
    545c:	78 f1       	brcs	.+94     	; 0x54bc <Pracenje_pravca+0x4ba>
	{
		if (stigao_flag == 0)
    545e:	80 91 06 20 	lds	r24, 0x2006
    5462:	81 11       	cpse	r24, r1
    5464:	03 c0       	rjmp	.+6      	; 0x546c <Pracenje_pravca+0x46a>
		{
			stigao_flag = 1;
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	80 93 06 20 	sts	0x2006, r24
//  			USART_TXBuffer_PutByte(&USART_E1_data, 79);	//O
//  			USART_TXBuffer_PutByte(&USART_E1_data, 75);	//K
//  			USART_TXBuffer_PutByte(&USART_E1_data, 33);	//!
		}
		
		if (teta_cilj_final != 0xFFFFFFFF)	//ako treba zauzmemo krajnji ugao
    546c:	80 91 00 20 	lds	r24, 0x2000
    5470:	90 91 01 20 	lds	r25, 0x2001
    5474:	a0 91 02 20 	lds	r26, 0x2002
    5478:	b0 91 03 20 	lds	r27, 0x2003
    547c:	8f 3f       	cpi	r24, 0xFF	; 255
    547e:	9f 4f       	sbci	r25, 0xFF	; 255
    5480:	af 4f       	sbci	r26, 0xFF	; 255
    5482:	bf 4f       	sbci	r27, 0xFF	; 255
    5484:	d9 f0       	breq	.+54     	; 0x54bc <Pracenje_pravca+0x4ba>
		{
			teta_cilj = teta_cilj_final;
    5486:	80 91 00 20 	lds	r24, 0x2000
    548a:	90 91 01 20 	lds	r25, 0x2001
    548e:	a0 91 02 20 	lds	r26, 0x2002
    5492:	b0 91 03 20 	lds	r27, 0x2003
    5496:	80 93 d4 24 	sts	0x24D4, r24
    549a:	90 93 d5 24 	sts	0x24D5, r25
    549e:	a0 93 d6 24 	sts	0x24D6, r26
    54a2:	b0 93 d7 24 	sts	0x24D7, r27
			teta_cilj_final = 0xFFFFFFFF;	//postavlja se na FF, da sledeci put ne bi se izvrsavao
    54a6:	8f ef       	ldi	r24, 0xFF	; 255
    54a8:	9f ef       	ldi	r25, 0xFF	; 255
    54aa:	dc 01       	movw	r26, r24
    54ac:	80 93 00 20 	sts	0x2000, r24
    54b0:	90 93 01 20 	sts	0x2001, r25
    54b4:	a0 93 02 20 	sts	0x2002, r26
    54b8:	b0 93 03 20 	sts	0x2003, r27
		}		
	}
}
    54bc:	df 91       	pop	r29
    54be:	cf 91       	pop	r28
    54c0:	1f 91       	pop	r17
    54c2:	0f 91       	pop	r16
    54c4:	ff 90       	pop	r15
    54c6:	ef 90       	pop	r14
    54c8:	df 90       	pop	r13
    54ca:	cf 90       	pop	r12
    54cc:	bf 90       	pop	r11
    54ce:	af 90       	pop	r10
    54d0:	9f 90       	pop	r9
    54d2:	8f 90       	pop	r8
    54d4:	7f 90       	pop	r7
    54d6:	6f 90       	pop	r6
    54d8:	5f 90       	pop	r5
    54da:	4f 90       	pop	r4
    54dc:	08 95       	ret

000054de <PID_pravolinijski>:

void PID_pravolinijski(void)
{	
    54de:	4f 92       	push	r4
    54e0:	5f 92       	push	r5
    54e2:	6f 92       	push	r6
    54e4:	7f 92       	push	r7
    54e6:	8f 92       	push	r8
    54e8:	9f 92       	push	r9
    54ea:	af 92       	push	r10
    54ec:	bf 92       	push	r11
    54ee:	cf 92       	push	r12
    54f0:	df 92       	push	r13
    54f2:	ef 92       	push	r14
    54f4:	ff 92       	push	r15
    54f6:	0f 93       	push	r16
    54f8:	1f 93       	push	r17
    54fa:	cf 93       	push	r28
    54fc:	df 93       	push	r29
    54fe:	cd b7       	in	r28, 0x3d	; 61
    5500:	de b7       	in	r29, 0x3e	; 62
    5502:	2c 97       	sbiw	r28, 0x0c	; 12
    5504:	cd bf       	out	0x3d, r28	; 61
    5506:	de bf       	out	0x3e, r29	; 62
	pozicija_greska = rastojanje_cilj * smer_trenutni - translacija;
    5508:	a0 91 80 2e 	lds	r26, 0x2E80
    550c:	20 91 71 2e 	lds	r18, 0x2E71
    5510:	30 91 72 2e 	lds	r19, 0x2E72
    5514:	40 91 73 2e 	lds	r20, 0x2E73
    5518:	50 91 74 2e 	lds	r21, 0x2E74
    551c:	c0 90 bc 24 	lds	r12, 0x24BC
    5520:	d0 90 bd 24 	lds	r13, 0x24BD
    5524:	e0 90 be 24 	lds	r14, 0x24BE
    5528:	f0 90 bf 24 	lds	r15, 0x24BF
    552c:	bb 27       	eor	r27, r27
    552e:	a7 fd       	sbrc	r26, 7
    5530:	b0 95       	com	r27
    5532:	0e 94 64 39 	call	0x72c8	; 0x72c8 <__mulshisi3>
    5536:	dc 01       	movw	r26, r24
    5538:	cb 01       	movw	r24, r22
    553a:	8c 19       	sub	r24, r12
    553c:	9d 09       	sbc	r25, r13
    553e:	ae 09       	sbc	r26, r14
    5540:	bf 09       	sbc	r27, r15
    5542:	80 93 54 2e 	sts	0x2E54, r24
    5546:	90 93 55 2e 	sts	0x2E55, r25
    554a:	a0 93 56 2e 	sts	0x2E56, r26
    554e:	b0 93 57 2e 	sts	0x2E57, r27
	dif_error_pravolinijski = PID_pozicija - PID_pozicija_pret;	
    5552:	80 91 06 2a 	lds	r24, 0x2A06
    5556:	90 91 07 2a 	lds	r25, 0x2A07
    555a:	a0 91 08 2a 	lds	r26, 0x2A08
    555e:	b0 91 09 2a 	lds	r27, 0x2A09
    5562:	40 91 d3 28 	lds	r20, 0x28D3
    5566:	50 91 d4 28 	lds	r21, 0x28D4
    556a:	60 91 d5 28 	lds	r22, 0x28D5
    556e:	70 91 d6 28 	lds	r23, 0x28D6
    5572:	84 1b       	sub	r24, r20
    5574:	95 0b       	sbc	r25, r21
    5576:	a6 0b       	sbc	r26, r22
    5578:	b7 0b       	sbc	r27, r23
    557a:	80 93 fb 2d 	sts	0x2DFB, r24
    557e:	90 93 fc 2d 	sts	0x2DFC, r25
    5582:	a0 93 fd 2d 	sts	0x2DFD, r26
    5586:	b0 93 fe 2d 	sts	0x2DFE, r27
	pozicija_greska_sum += pozicija_greska;
    558a:	40 91 0a 2e 	lds	r20, 0x2E0A
    558e:	50 91 0b 2e 	lds	r21, 0x2E0B
    5592:	60 91 0c 2e 	lds	r22, 0x2E0C
    5596:	70 91 0d 2e 	lds	r23, 0x2E0D
    559a:	80 91 54 2e 	lds	r24, 0x2E54
    559e:	90 91 55 2e 	lds	r25, 0x2E55
    55a2:	a0 91 56 2e 	lds	r26, 0x2E56
    55a6:	b0 91 57 2e 	lds	r27, 0x2E57
    55aa:	84 0f       	add	r24, r20
    55ac:	95 1f       	adc	r25, r21
    55ae:	a6 1f       	adc	r26, r22
    55b0:	b7 1f       	adc	r27, r23
    55b2:	80 93 0a 2e 	sts	0x2E0A, r24
    55b6:	90 93 0b 2e 	sts	0x2E0B, r25
    55ba:	a0 93 0c 2e 	sts	0x2E0C, r26
    55be:	b0 93 0d 2e 	sts	0x2E0D, r27
	
	//anti wind-up
	if(pozicija_greska_sum > 200)
    55c2:	80 91 0a 2e 	lds	r24, 0x2E0A
    55c6:	90 91 0b 2e 	lds	r25, 0x2E0B
    55ca:	a0 91 0c 2e 	lds	r26, 0x2E0C
    55ce:	b0 91 0d 2e 	lds	r27, 0x2E0D
    55d2:	89 3c       	cpi	r24, 0xC9	; 201
    55d4:	91 05       	cpc	r25, r1
    55d6:	a1 05       	cpc	r26, r1
    55d8:	b1 05       	cpc	r27, r1
    55da:	6c f0       	brlt	.+26     	; 0x55f6 <PID_pravolinijski+0x118>
		pozicija_greska_sum = 200;
    55dc:	88 ec       	ldi	r24, 0xC8	; 200
    55de:	90 e0       	ldi	r25, 0x00	; 0
    55e0:	a0 e0       	ldi	r26, 0x00	; 0
    55e2:	b0 e0       	ldi	r27, 0x00	; 0
    55e4:	80 93 0a 2e 	sts	0x2E0A, r24
    55e8:	90 93 0b 2e 	sts	0x2E0B, r25
    55ec:	a0 93 0c 2e 	sts	0x2E0C, r26
    55f0:	b0 93 0d 2e 	sts	0x2E0D, r27
    55f4:	19 c0       	rjmp	.+50     	; 0x5628 <PID_pravolinijski+0x14a>
	else if(pozicija_greska_sum < -200)
    55f6:	80 91 0a 2e 	lds	r24, 0x2E0A
    55fa:	90 91 0b 2e 	lds	r25, 0x2E0B
    55fe:	a0 91 0c 2e 	lds	r26, 0x2E0C
    5602:	b0 91 0d 2e 	lds	r27, 0x2E0D
    5606:	88 33       	cpi	r24, 0x38	; 56
    5608:	9f 4f       	sbci	r25, 0xFF	; 255
    560a:	af 4f       	sbci	r26, 0xFF	; 255
    560c:	bf 4f       	sbci	r27, 0xFF	; 255
    560e:	64 f4       	brge	.+24     	; 0x5628 <PID_pravolinijski+0x14a>
		pozicija_greska_sum = -200;
    5610:	88 e3       	ldi	r24, 0x38	; 56
    5612:	9f ef       	ldi	r25, 0xFF	; 255
    5614:	af ef       	ldi	r26, 0xFF	; 255
    5616:	bf ef       	ldi	r27, 0xFF	; 255
    5618:	80 93 0a 2e 	sts	0x2E0A, r24
    561c:	90 93 0b 2e 	sts	0x2E0B, r25
    5620:	a0 93 0c 2e 	sts	0x2E0C, r26
    5624:	b0 93 0d 2e 	sts	0x2E0D, r27
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    5628:	60 91 54 2e 	lds	r22, 0x2E54
    562c:	70 91 55 2e 	lds	r23, 0x2E55
    5630:	80 91 56 2e 	lds	r24, 0x2E56
    5634:	90 91 57 2e 	lds	r25, 0x2E57
    5638:	80 90 72 29 	lds	r8, 0x2972
    563c:	90 90 73 29 	lds	r9, 0x2973
    5640:	a0 90 74 29 	lds	r10, 0x2974
    5644:	b0 90 75 29 	lds	r11, 0x2975
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
    5648:	20 91 fb 2d 	lds	r18, 0x2DFB
    564c:	30 91 fc 2d 	lds	r19, 0x2DFC
    5650:	40 91 fd 2d 	lds	r20, 0x2DFD
    5654:	50 91 fe 2d 	lds	r21, 0x2DFE
    5658:	29 83       	std	Y+1, r18	; 0x01
    565a:	3a 83       	std	Y+2, r19	; 0x02
    565c:	4b 83       	std	Y+3, r20	; 0x03
    565e:	5c 83       	std	Y+4, r21	; 0x04
    5660:	40 90 c7 28 	lds	r4, 0x28C7
    5664:	50 90 c8 28 	lds	r5, 0x28C8
    5668:	60 90 c9 28 	lds	r6, 0x28C9
    566c:	70 90 ca 28 	lds	r7, 0x28CA
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
    5670:	c0 90 0a 2e 	lds	r12, 0x2E0A
    5674:	d0 90 0b 2e 	lds	r13, 0x2E0B
    5678:	e0 90 0c 2e 	lds	r14, 0x2E0C
    567c:	f0 90 0d 2e 	lds	r15, 0x2E0D
    5680:	20 91 81 32 	lds	r18, 0x3281
    5684:	30 91 82 32 	lds	r19, 0x3282
    5688:	40 91 83 32 	lds	r20, 0x3283
    568c:	50 91 84 32 	lds	r21, 0x3284
    5690:	2d 83       	std	Y+5, r18	; 0x05
    5692:	3e 83       	std	Y+6, r19	; 0x06
    5694:	4f 83       	std	Y+7, r20	; 0x07
    5696:	58 87       	std	Y+8, r21	; 0x08
					((float)((metar >> 1) / zeljena_pravolinijska_brzina));	
    5698:	20 91 db 24 	lds	r18, 0x24DB
    569c:	30 91 dc 24 	lds	r19, 0x24DC
    56a0:	40 91 dd 24 	lds	r20, 0x24DD
    56a4:	50 91 de 24 	lds	r21, 0x24DE
    56a8:	29 87       	std	Y+9, r18	; 0x09
    56aa:	3a 87       	std	Y+10, r19	; 0x0a
    56ac:	4b 87       	std	Y+11, r20	; 0x0b
    56ae:	5c 87       	std	Y+12, r21	; 0x0c
    56b0:	00 91 87 32 	lds	r16, 0x3287
    56b4:	10 91 88 32 	lds	r17, 0x3288
		pozicija_greska_sum = 200;
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    56b8:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    56bc:	a5 01       	movw	r20, r10
    56be:	94 01       	movw	r18, r8
    56c0:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    56c4:	4b 01       	movw	r8, r22
    56c6:	5c 01       	movw	r10, r24
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
    56c8:	69 81       	ldd	r22, Y+1	; 0x01
    56ca:	7a 81       	ldd	r23, Y+2	; 0x02
    56cc:	8b 81       	ldd	r24, Y+3	; 0x03
    56ce:	9c 81       	ldd	r25, Y+4	; 0x04
    56d0:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    56d4:	a3 01       	movw	r20, r6
    56d6:	92 01       	movw	r18, r4
    56d8:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    56dc:	9b 01       	movw	r18, r22
    56de:	ac 01       	movw	r20, r24
		pozicija_greska_sum = 200;
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    56e0:	c5 01       	movw	r24, r10
    56e2:	b4 01       	movw	r22, r8
    56e4:	0e 94 a6 35 	call	0x6b4c	; 0x6b4c <__addsf3>
    56e8:	4b 01       	movw	r8, r22
    56ea:	5c 01       	movw	r10, r24
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
    56ec:	c7 01       	movw	r24, r14
    56ee:	b6 01       	movw	r22, r12
    56f0:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    56f4:	2d 81       	ldd	r18, Y+5	; 0x05
    56f6:	3e 81       	ldd	r19, Y+6	; 0x06
    56f8:	4f 81       	ldd	r20, Y+7	; 0x07
    56fa:	58 85       	ldd	r21, Y+8	; 0x08
    56fc:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    5700:	9b 01       	movw	r18, r22
    5702:	ac 01       	movw	r20, r24
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
    5704:	c5 01       	movw	r24, r10
    5706:	b4 01       	movw	r22, r8
    5708:	0e 94 a6 35 	call	0x6b4c	; 0x6b4c <__addsf3>
    570c:	6b 01       	movw	r12, r22
    570e:	7c 01       	movw	r14, r24
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
					((float)((metar >> 1) / zeljena_pravolinijska_brzina));	
    5710:	69 85       	ldd	r22, Y+9	; 0x09
    5712:	7a 85       	ldd	r23, Y+10	; 0x0a
    5714:	8b 85       	ldd	r24, Y+11	; 0x0b
    5716:	9c 85       	ldd	r25, Y+12	; 0x0c
    5718:	95 95       	asr	r25
    571a:	87 95       	ror	r24
    571c:	77 95       	ror	r23
    571e:	67 95       	ror	r22
    5720:	98 01       	movw	r18, r16
    5722:	44 27       	eor	r20, r20
    5724:	37 fd       	sbrc	r19, 7
    5726:	40 95       	com	r20
    5728:	54 2f       	mov	r21, r20
    572a:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    572e:	ca 01       	movw	r24, r20
    5730:	b9 01       	movw	r22, r18
    5732:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    5736:	9b 01       	movw	r18, r22
    5738:	ac 01       	movw	r20, r24
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
    573a:	c7 01       	movw	r24, r14
    573c:	b6 01       	movw	r22, r12
    573e:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <__divsf3>
		pozicija_greska_sum = 200;
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    5742:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fixsfsi>
    5746:	60 93 06 2a 	sts	0x2A06, r22
    574a:	70 93 07 2a 	sts	0x2A07, r23
    574e:	80 93 08 2a 	sts	0x2A08, r24
    5752:	90 93 09 2a 	sts	0x2A09, r25
	//if(PID_pozicija < -modifikovana_zeljena_pravolinijska_brzina)
		//PID_pozicija = -modifikovana_zeljena_pravolinijska_brzina;
	//if(PID_pozicija > modifikovana_zeljena_pravolinijska_brzina)
		//PID_pozicija = modifikovana_zeljena_pravolinijska_brzina;
		
	if(PID_pozicija < -zeljena_pravolinijska_brzina)
    5756:	40 91 87 32 	lds	r20, 0x3287
    575a:	50 91 88 32 	lds	r21, 0x3288
    575e:	80 91 06 2a 	lds	r24, 0x2A06
    5762:	90 91 07 2a 	lds	r25, 0x2A07
    5766:	a0 91 08 2a 	lds	r26, 0x2A08
    576a:	b0 91 09 2a 	lds	r27, 0x2A09
    576e:	51 95       	neg	r21
    5770:	41 95       	neg	r20
    5772:	51 09       	sbc	r21, r1
    5774:	66 27       	eor	r22, r22
    5776:	57 fd       	sbrc	r21, 7
    5778:	60 95       	com	r22
    577a:	76 2f       	mov	r23, r22
    577c:	84 17       	cp	r24, r20
    577e:	95 07       	cpc	r25, r21
    5780:	a6 07       	cpc	r26, r22
    5782:	b7 07       	cpc	r27, r23
    5784:	9c f4       	brge	.+38     	; 0x57ac <PID_pravolinijski+0x2ce>
		PID_pozicija = -zeljena_pravolinijska_brzina;
    5786:	80 91 87 32 	lds	r24, 0x3287
    578a:	90 91 88 32 	lds	r25, 0x3288
    578e:	91 95       	neg	r25
    5790:	81 95       	neg	r24
    5792:	91 09       	sbc	r25, r1
    5794:	aa 27       	eor	r26, r26
    5796:	97 fd       	sbrc	r25, 7
    5798:	a0 95       	com	r26
    579a:	ba 2f       	mov	r27, r26
    579c:	80 93 06 2a 	sts	0x2A06, r24
    57a0:	90 93 07 2a 	sts	0x2A07, r25
    57a4:	a0 93 08 2a 	sts	0x2A08, r26
    57a8:	b0 93 09 2a 	sts	0x2A09, r27
	if(PID_pozicija > zeljena_pravolinijska_brzina)
    57ac:	40 91 87 32 	lds	r20, 0x3287
    57b0:	50 91 88 32 	lds	r21, 0x3288
    57b4:	80 91 06 2a 	lds	r24, 0x2A06
    57b8:	90 91 07 2a 	lds	r25, 0x2A07
    57bc:	a0 91 08 2a 	lds	r26, 0x2A08
    57c0:	b0 91 09 2a 	lds	r27, 0x2A09
    57c4:	66 27       	eor	r22, r22
    57c6:	57 fd       	sbrc	r21, 7
    57c8:	60 95       	com	r22
    57ca:	76 2f       	mov	r23, r22
    57cc:	48 17       	cp	r20, r24
    57ce:	59 07       	cpc	r21, r25
    57d0:	6a 07       	cpc	r22, r26
    57d2:	7b 07       	cpc	r23, r27
    57d4:	84 f4       	brge	.+32     	; 0x57f6 <PID_pravolinijski+0x318>
		PID_pozicija = zeljena_pravolinijska_brzina;
    57d6:	80 91 87 32 	lds	r24, 0x3287
    57da:	90 91 88 32 	lds	r25, 0x3288
    57de:	aa 27       	eor	r26, r26
    57e0:	97 fd       	sbrc	r25, 7
    57e2:	a0 95       	com	r26
    57e4:	ba 2f       	mov	r27, r26
    57e6:	80 93 06 2a 	sts	0x2A06, r24
    57ea:	90 93 07 2a 	sts	0x2A07, r25
    57ee:	a0 93 08 2a 	sts	0x2A08, r26
    57f2:	b0 93 09 2a 	sts	0x2A09, r27
		
		
	//ubrzavanje po rampi
	if(PID_pozicija < 0)
    57f6:	80 91 06 2a 	lds	r24, 0x2A06
    57fa:	90 91 07 2a 	lds	r25, 0x2A07
    57fe:	a0 91 08 2a 	lds	r26, 0x2A08
    5802:	b0 91 09 2a 	lds	r27, 0x2A09
    5806:	bb 23       	and	r27, r27
    5808:	0c f0       	brlt	.+2      	; 0x580c <PID_pravolinijski+0x32e>
    580a:	53 c0       	rjmp	.+166    	; 0x58b2 <PID_pravolinijski+0x3d4>
	{
		if(PID_pozicija_pret > PID_pozicija)	//UBRZANJE U MINUS
    580c:	40 91 d3 28 	lds	r20, 0x28D3
    5810:	50 91 d4 28 	lds	r21, 0x28D4
    5814:	60 91 d5 28 	lds	r22, 0x28D5
    5818:	70 91 d6 28 	lds	r23, 0x28D6
    581c:	80 91 06 2a 	lds	r24, 0x2A06
    5820:	90 91 07 2a 	lds	r25, 0x2A07
    5824:	a0 91 08 2a 	lds	r26, 0x2A08
    5828:	b0 91 09 2a 	lds	r27, 0x2A09
    582c:	84 17       	cp	r24, r20
    582e:	95 07       	cpc	r25, r21
    5830:	a6 07       	cpc	r26, r22
    5832:	b7 07       	cpc	r27, r23
    5834:	0c f0       	brlt	.+2      	; 0x5838 <PID_pravolinijski+0x35a>
    5836:	8d c0       	rjmp	.+282    	; 0x5952 <PID_pravolinijski+0x474>
		{
			if((abs(PID_pozicija) - abs(PID_pozicija_pret)) > Accel_PID_pos)
    5838:	40 91 06 2a 	lds	r20, 0x2A06
    583c:	50 91 07 2a 	lds	r21, 0x2A07
    5840:	60 91 08 2a 	lds	r22, 0x2A08
    5844:	70 91 09 2a 	lds	r23, 0x2A09
    5848:	80 91 d3 28 	lds	r24, 0x28D3
    584c:	90 91 d4 28 	lds	r25, 0x28D4
    5850:	a0 91 d5 28 	lds	r26, 0x28D5
    5854:	b0 91 d6 28 	lds	r27, 0x28D6
    5858:	20 91 d8 24 	lds	r18, 0x24D8
    585c:	30 91 d9 24 	lds	r19, 0x24D9
    5860:	55 23       	and	r21, r21
    5862:	1c f4       	brge	.+6      	; 0x586a <PID_pravolinijski+0x38c>
    5864:	51 95       	neg	r21
    5866:	41 95       	neg	r20
    5868:	51 09       	sbc	r21, r1
    586a:	99 23       	and	r25, r25
    586c:	1c f4       	brge	.+6      	; 0x5874 <PID_pravolinijski+0x396>
    586e:	91 95       	neg	r25
    5870:	81 95       	neg	r24
    5872:	91 09       	sbc	r25, r1
    5874:	48 1b       	sub	r20, r24
    5876:	59 0b       	sbc	r21, r25
    5878:	24 17       	cp	r18, r20
    587a:	35 07       	cpc	r19, r21
    587c:	08 f0       	brcs	.+2      	; 0x5880 <PID_pravolinijski+0x3a2>
    587e:	69 c0       	rjmp	.+210    	; 0x5952 <PID_pravolinijski+0x474>
				PID_pozicija = PID_pozicija_pret - Accel_PID_pos;
    5880:	80 91 d3 28 	lds	r24, 0x28D3
    5884:	90 91 d4 28 	lds	r25, 0x28D4
    5888:	a0 91 d5 28 	lds	r26, 0x28D5
    588c:	b0 91 d6 28 	lds	r27, 0x28D6
    5890:	20 91 d8 24 	lds	r18, 0x24D8
    5894:	30 91 d9 24 	lds	r19, 0x24D9
    5898:	82 1b       	sub	r24, r18
    589a:	93 0b       	sbc	r25, r19
    589c:	a1 09       	sbc	r26, r1
    589e:	b1 09       	sbc	r27, r1
    58a0:	80 93 06 2a 	sts	0x2A06, r24
    58a4:	90 93 07 2a 	sts	0x2A07, r25
    58a8:	a0 93 08 2a 	sts	0x2A08, r26
    58ac:	b0 93 09 2a 	sts	0x2A09, r27
    58b0:	50 c0       	rjmp	.+160    	; 0x5952 <PID_pravolinijski+0x474>
		}
	}
	else
	{
		if(PID_pozicija_pret < PID_pozicija)	//UBRZANJE U PLUS
    58b2:	40 91 d3 28 	lds	r20, 0x28D3
    58b6:	50 91 d4 28 	lds	r21, 0x28D4
    58ba:	60 91 d5 28 	lds	r22, 0x28D5
    58be:	70 91 d6 28 	lds	r23, 0x28D6
    58c2:	80 91 06 2a 	lds	r24, 0x2A06
    58c6:	90 91 07 2a 	lds	r25, 0x2A07
    58ca:	a0 91 08 2a 	lds	r26, 0x2A08
    58ce:	b0 91 09 2a 	lds	r27, 0x2A09
    58d2:	48 17       	cp	r20, r24
    58d4:	59 07       	cpc	r21, r25
    58d6:	6a 07       	cpc	r22, r26
    58d8:	7b 07       	cpc	r23, r27
    58da:	dc f5       	brge	.+118    	; 0x5952 <PID_pravolinijski+0x474>
		{
			if((abs(PID_pozicija) - abs(PID_pozicija_pret)) > Accel_PID_pos)
    58dc:	40 91 06 2a 	lds	r20, 0x2A06
    58e0:	50 91 07 2a 	lds	r21, 0x2A07
    58e4:	60 91 08 2a 	lds	r22, 0x2A08
    58e8:	70 91 09 2a 	lds	r23, 0x2A09
    58ec:	80 91 d3 28 	lds	r24, 0x28D3
    58f0:	90 91 d4 28 	lds	r25, 0x28D4
    58f4:	a0 91 d5 28 	lds	r26, 0x28D5
    58f8:	b0 91 d6 28 	lds	r27, 0x28D6
    58fc:	20 91 d8 24 	lds	r18, 0x24D8
    5900:	30 91 d9 24 	lds	r19, 0x24D9
    5904:	55 23       	and	r21, r21
    5906:	1c f4       	brge	.+6      	; 0x590e <PID_pravolinijski+0x430>
    5908:	51 95       	neg	r21
    590a:	41 95       	neg	r20
    590c:	51 09       	sbc	r21, r1
    590e:	99 23       	and	r25, r25
    5910:	1c f4       	brge	.+6      	; 0x5918 <PID_pravolinijski+0x43a>
    5912:	91 95       	neg	r25
    5914:	81 95       	neg	r24
    5916:	91 09       	sbc	r25, r1
    5918:	48 1b       	sub	r20, r24
    591a:	59 0b       	sbc	r21, r25
    591c:	24 17       	cp	r18, r20
    591e:	35 07       	cpc	r19, r21
    5920:	c0 f4       	brcc	.+48     	; 0x5952 <PID_pravolinijski+0x474>
				PID_pozicija = PID_pozicija_pret + Accel_PID_pos;
    5922:	20 91 d8 24 	lds	r18, 0x24D8
    5926:	30 91 d9 24 	lds	r19, 0x24D9
    592a:	80 91 d3 28 	lds	r24, 0x28D3
    592e:	90 91 d4 28 	lds	r25, 0x28D4
    5932:	a0 91 d5 28 	lds	r26, 0x28D5
    5936:	b0 91 d6 28 	lds	r27, 0x28D6
    593a:	82 0f       	add	r24, r18
    593c:	93 1f       	adc	r25, r19
    593e:	a1 1d       	adc	r26, r1
    5940:	b1 1d       	adc	r27, r1
    5942:	80 93 06 2a 	sts	0x2A06, r24
    5946:	90 93 07 2a 	sts	0x2A07, r25
    594a:	a0 93 08 2a 	sts	0x2A08, r26
    594e:	b0 93 09 2a 	sts	0x2A09, r27
		}
	}
	PID_pozicija_pret = PID_pozicija;
    5952:	80 91 06 2a 	lds	r24, 0x2A06
    5956:	90 91 07 2a 	lds	r25, 0x2A07
    595a:	a0 91 08 2a 	lds	r26, 0x2A08
    595e:	b0 91 09 2a 	lds	r27, 0x2A09
    5962:	80 93 d3 28 	sts	0x28D3, r24
    5966:	90 93 d4 28 	sts	0x28D4, r25
    596a:	a0 93 d5 28 	sts	0x28D5, r26
    596e:	b0 93 d6 28 	sts	0x28D6, r27
}
    5972:	2c 96       	adiw	r28, 0x0c	; 12
    5974:	cd bf       	out	0x3d, r28	; 61
    5976:	de bf       	out	0x3e, r29	; 62
    5978:	df 91       	pop	r29
    597a:	cf 91       	pop	r28
    597c:	1f 91       	pop	r17
    597e:	0f 91       	pop	r16
    5980:	ff 90       	pop	r15
    5982:	ef 90       	pop	r14
    5984:	df 90       	pop	r13
    5986:	cf 90       	pop	r12
    5988:	bf 90       	pop	r11
    598a:	af 90       	pop	r10
    598c:	9f 90       	pop	r9
    598e:	8f 90       	pop	r8
    5990:	7f 90       	pop	r7
    5992:	6f 90       	pop	r6
    5994:	5f 90       	pop	r5
    5996:	4f 90       	pop	r4
    5998:	08 95       	ret

0000599a <PID_ugaoni>:

void PID_ugaoni(void)
{	
    599a:	4f 92       	push	r4
    599c:	5f 92       	push	r5
    599e:	6f 92       	push	r6
    59a0:	7f 92       	push	r7
    59a2:	8f 92       	push	r8
    59a4:	9f 92       	push	r9
    59a6:	af 92       	push	r10
    59a8:	bf 92       	push	r11
    59aa:	cf 92       	push	r12
    59ac:	df 92       	push	r13
    59ae:	ef 92       	push	r14
    59b0:	ff 92       	push	r15
    59b2:	0f 93       	push	r16
    59b4:	1f 93       	push	r17
    59b6:	cf 93       	push	r28
    59b8:	df 93       	push	r29
    59ba:	cd b7       	in	r28, 0x3d	; 61
    59bc:	de b7       	in	r29, 0x3e	; 62
    59be:	2c 97       	sbiw	r28, 0x0c	; 12
    59c0:	cd bf       	out	0x3d, r28	; 61
    59c2:	de bf       	out	0x3e, r29	; 62
	teta_greska = teta_cilj - teta;
    59c4:	80 91 d4 24 	lds	r24, 0x24D4
    59c8:	90 91 d5 24 	lds	r25, 0x24D5
    59cc:	a0 91 d6 24 	lds	r26, 0x24D6
    59d0:	b0 91 d7 24 	lds	r27, 0x24D7
    59d4:	40 91 8b 32 	lds	r20, 0x328B
    59d8:	50 91 8c 32 	lds	r21, 0x328C
    59dc:	60 91 8d 32 	lds	r22, 0x328D
    59e0:	70 91 8e 32 	lds	r23, 0x328E
    59e4:	84 1b       	sub	r24, r20
    59e6:	95 0b       	sbc	r25, r21
    59e8:	a6 0b       	sbc	r26, r22
    59ea:	b7 0b       	sbc	r27, r23
    59ec:	80 93 7c 2e 	sts	0x2E7C, r24
    59f0:	90 93 7d 2e 	sts	0x2E7D, r25
    59f4:	a0 93 7e 2e 	sts	0x2E7E, r26
    59f8:	b0 93 7f 2e 	sts	0x2E7F, r27
	
	dif_error_ugao = teta_greska - teta_greska_prethodno; // D dejstvo
    59fc:	80 91 7c 2e 	lds	r24, 0x2E7C
    5a00:	90 91 7d 2e 	lds	r25, 0x2E7D
    5a04:	a0 91 7e 2e 	lds	r26, 0x2E7E
    5a08:	b0 91 7f 2e 	lds	r27, 0x2E7F
    5a0c:	40 91 f6 2d 	lds	r20, 0x2DF6
    5a10:	50 91 f7 2d 	lds	r21, 0x2DF7
    5a14:	60 91 f8 2d 	lds	r22, 0x2DF8
    5a18:	70 91 f9 2d 	lds	r23, 0x2DF9
    5a1c:	84 1b       	sub	r24, r20
    5a1e:	95 0b       	sbc	r25, r21
    5a20:	a6 0b       	sbc	r26, r22
    5a22:	b7 0b       	sbc	r27, r23
    5a24:	80 93 43 2e 	sts	0x2E43, r24
    5a28:	90 93 44 2e 	sts	0x2E44, r25
    5a2c:	a0 93 45 2e 	sts	0x2E45, r26
    5a30:	b0 93 46 2e 	sts	0x2E46, r27
	teta_greska_prethodno = teta_greska; //D dejstvo
    5a34:	80 91 7c 2e 	lds	r24, 0x2E7C
    5a38:	90 91 7d 2e 	lds	r25, 0x2E7D
    5a3c:	a0 91 7e 2e 	lds	r26, 0x2E7E
    5a40:	b0 91 7f 2e 	lds	r27, 0x2E7F
    5a44:	80 93 f6 2d 	sts	0x2DF6, r24
    5a48:	90 93 f7 2d 	sts	0x2DF7, r25
    5a4c:	a0 93 f8 2d 	sts	0x2DF8, r26
    5a50:	b0 93 f9 2d 	sts	0x2DF9, r27
	
	//korigovanje greske, da bi se roobot uvek okretao u blizem smeru
	if(teta_greska < -krug180)
    5a54:	40 91 d7 28 	lds	r20, 0x28D7
    5a58:	50 91 d8 28 	lds	r21, 0x28D8
    5a5c:	60 91 d9 28 	lds	r22, 0x28D9
    5a60:	70 91 da 28 	lds	r23, 0x28DA
    5a64:	80 91 7c 2e 	lds	r24, 0x2E7C
    5a68:	90 91 7d 2e 	lds	r25, 0x2E7D
    5a6c:	a0 91 7e 2e 	lds	r26, 0x2E7E
    5a70:	b0 91 7f 2e 	lds	r27, 0x2E7F
    5a74:	70 95       	com	r23
    5a76:	60 95       	com	r22
    5a78:	50 95       	com	r21
    5a7a:	41 95       	neg	r20
    5a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    5a7e:	6f 4f       	sbci	r22, 0xFF	; 255
    5a80:	7f 4f       	sbci	r23, 0xFF	; 255
    5a82:	84 17       	cp	r24, r20
    5a84:	95 07       	cpc	r25, r21
    5a86:	a6 07       	cpc	r26, r22
    5a88:	b7 07       	cpc	r27, r23
    5a8a:	ec f4       	brge	.+58     	; 0x5ac6 <PID_ugaoni+0x12c>
		teta_greska += krug360;
    5a8c:	40 91 7c 2e 	lds	r20, 0x2E7C
    5a90:	50 91 7d 2e 	lds	r21, 0x2E7D
    5a94:	60 91 7e 2e 	lds	r22, 0x2E7E
    5a98:	70 91 7f 2e 	lds	r23, 0x2E7F
    5a9c:	80 91 7d 32 	lds	r24, 0x327D
    5aa0:	90 91 7e 32 	lds	r25, 0x327E
    5aa4:	a0 91 7f 32 	lds	r26, 0x327F
    5aa8:	b0 91 80 32 	lds	r27, 0x3280
    5aac:	84 0f       	add	r24, r20
    5aae:	95 1f       	adc	r25, r21
    5ab0:	a6 1f       	adc	r26, r22
    5ab2:	b7 1f       	adc	r27, r23
    5ab4:	80 93 7c 2e 	sts	0x2E7C, r24
    5ab8:	90 93 7d 2e 	sts	0x2E7D, r25
    5abc:	a0 93 7e 2e 	sts	0x2E7E, r26
    5ac0:	b0 93 7f 2e 	sts	0x2E7F, r27
    5ac4:	31 c0       	rjmp	.+98     	; 0x5b28 <PID_ugaoni+0x18e>
	else if(teta_greska > krug180)
    5ac6:	40 91 7c 2e 	lds	r20, 0x2E7C
    5aca:	50 91 7d 2e 	lds	r21, 0x2E7D
    5ace:	60 91 7e 2e 	lds	r22, 0x2E7E
    5ad2:	70 91 7f 2e 	lds	r23, 0x2E7F
    5ad6:	80 91 d7 28 	lds	r24, 0x28D7
    5ada:	90 91 d8 28 	lds	r25, 0x28D8
    5ade:	a0 91 d9 28 	lds	r26, 0x28D9
    5ae2:	b0 91 da 28 	lds	r27, 0x28DA
    5ae6:	84 17       	cp	r24, r20
    5ae8:	95 07       	cpc	r25, r21
    5aea:	a6 07       	cpc	r26, r22
    5aec:	b7 07       	cpc	r27, r23
    5aee:	e4 f4       	brge	.+56     	; 0x5b28 <PID_ugaoni+0x18e>
		teta_greska -= krug360;
    5af0:	80 91 7c 2e 	lds	r24, 0x2E7C
    5af4:	90 91 7d 2e 	lds	r25, 0x2E7D
    5af8:	a0 91 7e 2e 	lds	r26, 0x2E7E
    5afc:	b0 91 7f 2e 	lds	r27, 0x2E7F
    5b00:	40 91 7d 32 	lds	r20, 0x327D
    5b04:	50 91 7e 32 	lds	r21, 0x327E
    5b08:	60 91 7f 32 	lds	r22, 0x327F
    5b0c:	70 91 80 32 	lds	r23, 0x3280
    5b10:	84 1b       	sub	r24, r20
    5b12:	95 0b       	sbc	r25, r21
    5b14:	a6 0b       	sbc	r26, r22
    5b16:	b7 0b       	sbc	r27, r23
    5b18:	80 93 7c 2e 	sts	0x2E7C, r24
    5b1c:	90 93 7d 2e 	sts	0x2E7D, r25
    5b20:	a0 93 7e 2e 	sts	0x2E7E, r26
    5b24:	b0 93 7f 2e 	sts	0x2E7F, r27
		
	teta_greska_sum += teta_greska;
    5b28:	40 91 2f 2e 	lds	r20, 0x2E2F
    5b2c:	50 91 30 2e 	lds	r21, 0x2E30
    5b30:	60 91 31 2e 	lds	r22, 0x2E31
    5b34:	70 91 32 2e 	lds	r23, 0x2E32
    5b38:	80 91 7c 2e 	lds	r24, 0x2E7C
    5b3c:	90 91 7d 2e 	lds	r25, 0x2E7D
    5b40:	a0 91 7e 2e 	lds	r26, 0x2E7E
    5b44:	b0 91 7f 2e 	lds	r27, 0x2E7F
    5b48:	84 0f       	add	r24, r20
    5b4a:	95 1f       	adc	r25, r21
    5b4c:	a6 1f       	adc	r26, r22
    5b4e:	b7 1f       	adc	r27, r23
    5b50:	80 93 2f 2e 	sts	0x2E2F, r24
    5b54:	90 93 30 2e 	sts	0x2E30, r25
    5b58:	a0 93 31 2e 	sts	0x2E31, r26
    5b5c:	b0 93 32 2e 	sts	0x2E32, r27
	
	//anti wind-up
	if(teta_greska_sum > 200)
    5b60:	80 91 2f 2e 	lds	r24, 0x2E2F
    5b64:	90 91 30 2e 	lds	r25, 0x2E30
    5b68:	a0 91 31 2e 	lds	r26, 0x2E31
    5b6c:	b0 91 32 2e 	lds	r27, 0x2E32
    5b70:	89 3c       	cpi	r24, 0xC9	; 201
    5b72:	91 05       	cpc	r25, r1
    5b74:	a1 05       	cpc	r26, r1
    5b76:	b1 05       	cpc	r27, r1
    5b78:	6c f0       	brlt	.+26     	; 0x5b94 <PID_ugaoni+0x1fa>
		teta_greska_sum = 200;
    5b7a:	88 ec       	ldi	r24, 0xC8	; 200
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	a0 e0       	ldi	r26, 0x00	; 0
    5b80:	b0 e0       	ldi	r27, 0x00	; 0
    5b82:	80 93 2f 2e 	sts	0x2E2F, r24
    5b86:	90 93 30 2e 	sts	0x2E30, r25
    5b8a:	a0 93 31 2e 	sts	0x2E31, r26
    5b8e:	b0 93 32 2e 	sts	0x2E32, r27
    5b92:	19 c0       	rjmp	.+50     	; 0x5bc6 <PID_ugaoni+0x22c>
	else if(teta_greska_sum < -200)
    5b94:	80 91 2f 2e 	lds	r24, 0x2E2F
    5b98:	90 91 30 2e 	lds	r25, 0x2E30
    5b9c:	a0 91 31 2e 	lds	r26, 0x2E31
    5ba0:	b0 91 32 2e 	lds	r27, 0x2E32
    5ba4:	88 33       	cpi	r24, 0x38	; 56
    5ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba8:	af 4f       	sbci	r26, 0xFF	; 255
    5baa:	bf 4f       	sbci	r27, 0xFF	; 255
    5bac:	64 f4       	brge	.+24     	; 0x5bc6 <PID_ugaoni+0x22c>
		teta_greska_sum = -200;
    5bae:	88 e3       	ldi	r24, 0x38	; 56
    5bb0:	9f ef       	ldi	r25, 0xFF	; 255
    5bb2:	af ef       	ldi	r26, 0xFF	; 255
    5bb4:	bf ef       	ldi	r27, 0xFF	; 255
    5bb6:	80 93 2f 2e 	sts	0x2E2F, r24
    5bba:	90 93 30 2e 	sts	0x2E30, r25
    5bbe:	a0 93 31 2e 	sts	0x2E31, r26
    5bc2:	b0 93 32 2e 	sts	0x2E32, r27
	
	//podesavanje pravca robota dok ne stigne u blizinu cilja
	if(rastojanje_cilj_temp > metar/10)  /// bilo /10 ? 
    5bc6:	60 91 db 24 	lds	r22, 0x24DB
    5bca:	70 91 dc 24 	lds	r23, 0x24DC
    5bce:	80 91 dd 24 	lds	r24, 0x24DD
    5bd2:	90 91 de 24 	lds	r25, 0x24DE
    5bd6:	c0 90 1a 2e 	lds	r12, 0x2E1A
    5bda:	d0 90 1b 2e 	lds	r13, 0x2E1B
    5bde:	e0 90 1c 2e 	lds	r14, 0x2E1C
    5be2:	f0 90 1d 2e 	lds	r15, 0x2E1D
    5be6:	2a e0       	ldi	r18, 0x0A	; 10
    5be8:	30 e0       	ldi	r19, 0x00	; 0
    5bea:	40 e0       	ldi	r20, 0x00	; 0
    5bec:	50 e0       	ldi	r21, 0x00	; 0
    5bee:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
    5bf2:	2c 15       	cp	r18, r12
    5bf4:	3d 05       	cpc	r19, r13
    5bf6:	4e 05       	cpc	r20, r14
    5bf8:	5f 05       	cpc	r21, r15
    5bfa:	0c f0       	brlt	.+2      	; 0x5bfe <PID_ugaoni+0x264>
    5bfc:	59 c0       	rjmp	.+178    	; 0x5cb0 <PID_ugaoni+0x316>
	{
		if(labs(teta_greska) > rezervni_ugao)	//okrecemo se u mestu kad treba
    5bfe:	40 91 7c 2e 	lds	r20, 0x2E7C
    5c02:	50 91 7d 2e 	lds	r21, 0x2E7D
    5c06:	60 91 7e 2e 	lds	r22, 0x2E7E
    5c0a:	70 91 7f 2e 	lds	r23, 0x2E7F
    5c0e:	20 91 37 2e 	lds	r18, 0x2E37
    5c12:	30 91 38 2e 	lds	r19, 0x2E38
    5c16:	db 01       	movw	r26, r22
    5c18:	ca 01       	movw	r24, r20
    5c1a:	77 23       	and	r23, r23
    5c1c:	3c f4       	brge	.+14     	; 0x5c2c <PID_ugaoni+0x292>
    5c1e:	88 27       	eor	r24, r24
    5c20:	99 27       	eor	r25, r25
    5c22:	dc 01       	movw	r26, r24
    5c24:	84 1b       	sub	r24, r20
    5c26:	95 0b       	sbc	r25, r21
    5c28:	a6 0b       	sbc	r26, r22
    5c2a:	b7 0b       	sbc	r27, r23
    5c2c:	a9 01       	movw	r20, r18
    5c2e:	66 27       	eor	r22, r22
    5c30:	57 fd       	sbrc	r21, 7
    5c32:	60 95       	com	r22
    5c34:	76 2f       	mov	r23, r22
    5c36:	48 17       	cp	r20, r24
    5c38:	59 07       	cpc	r21, r25
    5c3a:	6a 07       	cpc	r22, r26
    5c3c:	7b 07       	cpc	r23, r27
    5c3e:	ac f4       	brge	.+42     	; 0x5c6a <PID_ugaoni+0x2d0>
		{
			modifikovana_zeljena_pravolinijska_brzina = 0;	//zaustavlja se robot za okretanje u mestu
    5c40:	10 92 ba 24 	sts	0x24BA, r1
    5c44:	10 92 bb 24 	sts	0x24BB, r1
			rezervni_ugao = krug45;
    5c48:	80 91 d0 24 	lds	r24, 0x24D0
    5c4c:	90 91 d1 24 	lds	r25, 0x24D1
    5c50:	a0 91 d2 24 	lds	r26, 0x24D2
    5c54:	b0 91 d3 24 	lds	r27, 0x24D3
    5c58:	80 93 37 2e 	sts	0x2E37, r24
    5c5c:	90 93 38 2e 	sts	0x2E38, r25
			vreme_cekanja_tete = 0;
    5c60:	10 92 6c 29 	sts	0x296C, r1
    5c64:	10 92 6d 29 	sts	0x296D, r1
    5c68:	23 c0       	rjmp	.+70     	; 0x5cb0 <PID_ugaoni+0x316>
		}
		else if(vreme_cekanja_tete >= 300)
    5c6a:	80 91 6c 29 	lds	r24, 0x296C
    5c6e:	90 91 6d 29 	lds	r25, 0x296D
    5c72:	8c 32       	cpi	r24, 0x2C	; 44
    5c74:	91 40       	sbci	r25, 0x01	; 1
    5c76:	e0 f0       	brcs	.+56     	; 0x5cb0 <PID_ugaoni+0x316>
		{
			vreme_cekanja_tete = 0;
    5c78:	10 92 6c 29 	sts	0x296C, r1
    5c7c:	10 92 6d 29 	sts	0x296D, r1
			modifikovana_zeljena_pravolinijska_brzina = zeljena_pravolinijska_brzina;
    5c80:	80 91 87 32 	lds	r24, 0x3287
    5c84:	90 91 88 32 	lds	r25, 0x3288
    5c88:	80 93 ba 24 	sts	0x24BA, r24
    5c8c:	90 93 bb 24 	sts	0x24BB, r25
			Kp_teta=Kp_teta_pravolinijski;
    5c90:	80 91 04 2e 	lds	r24, 0x2E04
    5c94:	90 91 05 2e 	lds	r25, 0x2E05
    5c98:	a0 91 06 2e 	lds	r26, 0x2E06
    5c9c:	b0 91 07 2e 	lds	r27, 0x2E07
    5ca0:	80 93 91 32 	sts	0x3291, r24
    5ca4:	90 93 92 32 	sts	0x3292, r25
    5ca8:	a0 93 93 32 	sts	0x3293, r26
    5cac:	b0 93 94 32 	sts	0x3294, r27
				// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5cb0:	60 91 7c 2e 	lds	r22, 0x2E7C
    5cb4:	70 91 7d 2e 	lds	r23, 0x2E7D
    5cb8:	80 91 7e 2e 	lds	r24, 0x2E7E
    5cbc:	90 91 7f 2e 	lds	r25, 0x2E7F
    5cc0:	80 90 91 32 	lds	r8, 0x3291
    5cc4:	90 90 92 32 	lds	r9, 0x3292
    5cc8:	a0 90 93 32 	lds	r10, 0x3293
    5ccc:	b0 90 94 32 	lds	r11, 0x3294
				(float)(dif_error_ugao * Kd_teta) +
    5cd0:	20 91 43 2e 	lds	r18, 0x2E43
    5cd4:	30 91 44 2e 	lds	r19, 0x2E44
    5cd8:	40 91 45 2e 	lds	r20, 0x2E45
    5cdc:	50 91 46 2e 	lds	r21, 0x2E46
    5ce0:	29 83       	std	Y+1, r18	; 0x01
    5ce2:	3a 83       	std	Y+2, r19	; 0x02
    5ce4:	4b 83       	std	Y+3, r20	; 0x03
    5ce6:	5c 83       	std	Y+4, r21	; 0x04
    5ce8:	40 90 aa 24 	lds	r4, 0x24AA
    5cec:	50 90 ab 24 	lds	r5, 0x24AB
    5cf0:	60 90 ac 24 	lds	r6, 0x24AC
    5cf4:	70 90 ad 24 	lds	r7, 0x24AD
				(float)(teta_greska_sum * Ki_teta)) / 
    5cf8:	c0 90 2f 2e 	lds	r12, 0x2E2F
    5cfc:	d0 90 30 2e 	lds	r13, 0x2E30
    5d00:	e0 90 31 2e 	lds	r14, 0x2E31
    5d04:	f0 90 32 2e 	lds	r15, 0x2E32
    5d08:	20 91 b0 24 	lds	r18, 0x24B0
    5d0c:	30 91 b1 24 	lds	r19, 0x24B1
    5d10:	40 91 b2 24 	lds	r20, 0x24B2
    5d14:	50 91 b3 24 	lds	r21, 0x24B3
    5d18:	2d 83       	std	Y+5, r18	; 0x05
    5d1a:	3e 83       	std	Y+6, r19	; 0x06
    5d1c:	4f 83       	std	Y+7, r20	; 0x07
    5d1e:	58 87       	std	Y+8, r21	; 0x08
				(krug90 / zeljena_brzina_okretanja);
    5d20:	20 91 86 2e 	lds	r18, 0x2E86
    5d24:	30 91 87 2e 	lds	r19, 0x2E87
    5d28:	40 91 88 2e 	lds	r20, 0x2E88
    5d2c:	50 91 89 2e 	lds	r21, 0x2E89
    5d30:	29 87       	std	Y+9, r18	; 0x09
    5d32:	3a 87       	std	Y+10, r19	; 0x0a
    5d34:	4b 87       	std	Y+11, r20	; 0x0b
    5d36:	5c 87       	std	Y+12, r21	; 0x0c
    5d38:	00 91 69 2e 	lds	r16, 0x2E69
    5d3c:	10 91 6a 2e 	lds	r17, 0x2E6A
				// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5d40:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    5d44:	a5 01       	movw	r20, r10
    5d46:	94 01       	movw	r18, r8
    5d48:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    5d4c:	4b 01       	movw	r8, r22
    5d4e:	5c 01       	movw	r10, r24
				(float)(dif_error_ugao * Kd_teta) +
    5d50:	69 81       	ldd	r22, Y+1	; 0x01
    5d52:	7a 81       	ldd	r23, Y+2	; 0x02
    5d54:	8b 81       	ldd	r24, Y+3	; 0x03
    5d56:	9c 81       	ldd	r25, Y+4	; 0x04
    5d58:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    5d5c:	a3 01       	movw	r20, r6
    5d5e:	92 01       	movw	r18, r4
    5d60:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    5d64:	9b 01       	movw	r18, r22
    5d66:	ac 01       	movw	r20, r24
				// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5d68:	c5 01       	movw	r24, r10
    5d6a:	b4 01       	movw	r22, r8
    5d6c:	ef d6       	rcall	.+3550   	; 0x6b4c <__addsf3>
    5d6e:	4b 01       	movw	r8, r22
    5d70:	5c 01       	movw	r10, r24
				(float)(dif_error_ugao * Kd_teta) +
				(float)(teta_greska_sum * Ki_teta)) / 
    5d72:	c7 01       	movw	r24, r14
    5d74:	b6 01       	movw	r22, r12
    5d76:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    5d7a:	2d 81       	ldd	r18, Y+5	; 0x05
    5d7c:	3e 81       	ldd	r19, Y+6	; 0x06
    5d7e:	4f 81       	ldd	r20, Y+7	; 0x07
    5d80:	58 85       	ldd	r21, Y+8	; 0x08
    5d82:	0e 94 27 38 	call	0x704e	; 0x704e <__mulsf3>
    5d86:	9b 01       	movw	r18, r22
    5d88:	ac 01       	movw	r20, r24
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
				(float)(dif_error_ugao * Kd_teta) +
    5d8a:	c5 01       	movw	r24, r10
    5d8c:	b4 01       	movw	r22, r8
    5d8e:	de d6       	rcall	.+3516   	; 0x6b4c <__addsf3>
    5d90:	6b 01       	movw	r12, r22
    5d92:	7c 01       	movw	r14, r24
				(float)(teta_greska_sum * Ki_teta)) / 
				(krug90 / zeljena_brzina_okretanja);
    5d94:	98 01       	movw	r18, r16
    5d96:	44 27       	eor	r20, r20
    5d98:	37 fd       	sbrc	r19, 7
    5d9a:	40 95       	com	r20
    5d9c:	54 2f       	mov	r21, r20
    5d9e:	69 85       	ldd	r22, Y+9	; 0x09
    5da0:	7a 85       	ldd	r23, Y+10	; 0x0a
    5da2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5da4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5da6:	0e 94 3f 39 	call	0x727e	; 0x727e <__divmodsi4>
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
				(float)(dif_error_ugao * Kd_teta) +
				(float)(teta_greska_sum * Ki_teta)) / 
    5daa:	ca 01       	movw	r24, r20
    5dac:	b9 01       	movw	r22, r18
    5dae:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <__floatsisf>
    5db2:	9b 01       	movw	r18, r22
    5db4:	ac 01       	movw	r20, r24
    5db6:	c7 01       	movw	r24, r14
    5db8:	b6 01       	movw	r22, r12
    5dba:	95 d7       	rcall	.+3882   	; 0x6ce6 <__divsf3>
				// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5dbc:	fc d7       	rcall	.+4088   	; 0x6db6 <__fixsfsi>
    5dbe:	60 93 5c 2e 	sts	0x2E5C, r22
    5dc2:	70 93 5d 2e 	sts	0x2E5D, r23
    5dc6:	80 93 5e 2e 	sts	0x2E5E, r24
    5dca:	90 93 5f 2e 	sts	0x2E5F, r25
				(float)(dif_error_ugao * Kd_teta) +
				(float)(teta_greska_sum * Ki_teta)) / 
				(krug90 / zeljena_brzina_okretanja);
	
	if(PID_teta < -zeljena_brzina_okretanja)
    5dce:	40 91 69 2e 	lds	r20, 0x2E69
    5dd2:	50 91 6a 2e 	lds	r21, 0x2E6A
    5dd6:	80 91 5c 2e 	lds	r24, 0x2E5C
    5dda:	90 91 5d 2e 	lds	r25, 0x2E5D
    5dde:	a0 91 5e 2e 	lds	r26, 0x2E5E
    5de2:	b0 91 5f 2e 	lds	r27, 0x2E5F
    5de6:	51 95       	neg	r21
    5de8:	41 95       	neg	r20
    5dea:	51 09       	sbc	r21, r1
    5dec:	66 27       	eor	r22, r22
    5dee:	57 fd       	sbrc	r21, 7
    5df0:	60 95       	com	r22
    5df2:	76 2f       	mov	r23, r22
    5df4:	84 17       	cp	r24, r20
    5df6:	95 07       	cpc	r25, r21
    5df8:	a6 07       	cpc	r26, r22
    5dfa:	b7 07       	cpc	r27, r23
    5dfc:	9c f4       	brge	.+38     	; 0x5e24 <PID_ugaoni+0x48a>
		PID_teta = -zeljena_brzina_okretanja;
    5dfe:	80 91 69 2e 	lds	r24, 0x2E69
    5e02:	90 91 6a 2e 	lds	r25, 0x2E6A
    5e06:	91 95       	neg	r25
    5e08:	81 95       	neg	r24
    5e0a:	91 09       	sbc	r25, r1
    5e0c:	aa 27       	eor	r26, r26
    5e0e:	97 fd       	sbrc	r25, 7
    5e10:	a0 95       	com	r26
    5e12:	ba 2f       	mov	r27, r26
    5e14:	80 93 5c 2e 	sts	0x2E5C, r24
    5e18:	90 93 5d 2e 	sts	0x2E5D, r25
    5e1c:	a0 93 5e 2e 	sts	0x2E5E, r26
    5e20:	b0 93 5f 2e 	sts	0x2E5F, r27
	if(PID_teta > zeljena_brzina_okretanja)
    5e24:	40 91 69 2e 	lds	r20, 0x2E69
    5e28:	50 91 6a 2e 	lds	r21, 0x2E6A
    5e2c:	80 91 5c 2e 	lds	r24, 0x2E5C
    5e30:	90 91 5d 2e 	lds	r25, 0x2E5D
    5e34:	a0 91 5e 2e 	lds	r26, 0x2E5E
    5e38:	b0 91 5f 2e 	lds	r27, 0x2E5F
    5e3c:	66 27       	eor	r22, r22
    5e3e:	57 fd       	sbrc	r21, 7
    5e40:	60 95       	com	r22
    5e42:	76 2f       	mov	r23, r22
    5e44:	48 17       	cp	r20, r24
    5e46:	59 07       	cpc	r21, r25
    5e48:	6a 07       	cpc	r22, r26
    5e4a:	7b 07       	cpc	r23, r27
    5e4c:	84 f4       	brge	.+32     	; 0x5e6e <PID_ugaoni+0x4d4>
		PID_teta = zeljena_brzina_okretanja;
    5e4e:	80 91 69 2e 	lds	r24, 0x2E69
    5e52:	90 91 6a 2e 	lds	r25, 0x2E6A
    5e56:	aa 27       	eor	r26, r26
    5e58:	97 fd       	sbrc	r25, 7
    5e5a:	a0 95       	com	r26
    5e5c:	ba 2f       	mov	r27, r26
    5e5e:	80 93 5c 2e 	sts	0x2E5C, r24
    5e62:	90 93 5d 2e 	sts	0x2E5D, r25
    5e66:	a0 93 5e 2e 	sts	0x2E5E, r26
    5e6a:	b0 93 5f 2e 	sts	0x2E5F, r27
}
    5e6e:	2c 96       	adiw	r28, 0x0c	; 12
    5e70:	cd bf       	out	0x3d, r28	; 61
    5e72:	de bf       	out	0x3e, r29	; 62
    5e74:	df 91       	pop	r29
    5e76:	cf 91       	pop	r28
    5e78:	1f 91       	pop	r17
    5e7a:	0f 91       	pop	r16
    5e7c:	ff 90       	pop	r15
    5e7e:	ef 90       	pop	r14
    5e80:	df 90       	pop	r13
    5e82:	cf 90       	pop	r12
    5e84:	bf 90       	pop	r11
    5e86:	af 90       	pop	r10
    5e88:	9f 90       	pop	r9
    5e8a:	8f 90       	pop	r8
    5e8c:	7f 90       	pop	r7
    5e8e:	6f 90       	pop	r6
    5e90:	5f 90       	pop	r5
    5e92:	4f 90       	pop	r4
    5e94:	08 95       	ret

00005e96 <PID_brzinski>:

void PID_brzinski(void)
{
    5e96:	4f 92       	push	r4
    5e98:	5f 92       	push	r5
    5e9a:	6f 92       	push	r6
    5e9c:	7f 92       	push	r7
    5e9e:	8f 92       	push	r8
    5ea0:	9f 92       	push	r9
    5ea2:	af 92       	push	r10
    5ea4:	bf 92       	push	r11
    5ea6:	cf 92       	push	r12
    5ea8:	df 92       	push	r13
    5eaa:	ef 92       	push	r14
    5eac:	ff 92       	push	r15
    5eae:	0f 93       	push	r16
    5eb0:	1f 93       	push	r17
    5eb2:	cf 93       	push	r28
    5eb4:	df 93       	push	r29
	//////////////PID//////////////////
	//ako nema stop signala, postavlja se izlaz
	
	if((stop_PID_levi == 0) && (set_direct_out == 0))
    5eb6:	80 91 fa 2d 	lds	r24, 0x2DFA
    5eba:	81 11       	cpse	r24, r1
    5ebc:	1a c0       	rjmp	.+52     	; 0x5ef2 <PID_brzinski+0x5c>
    5ebe:	80 91 89 32 	lds	r24, 0x3289
    5ec2:	81 11       	cpse	r24, r1
    5ec4:	16 c0       	rjmp	.+44     	; 0x5ef2 <PID_brzinski+0x5c>
		PID_brzina_L = (PID_pozicija - PID_teta);
    5ec6:	40 91 06 2a 	lds	r20, 0x2A06
    5eca:	50 91 07 2a 	lds	r21, 0x2A07
    5ece:	60 91 08 2a 	lds	r22, 0x2A08
    5ed2:	70 91 09 2a 	lds	r23, 0x2A09
    5ed6:	80 91 5c 2e 	lds	r24, 0x2E5C
    5eda:	90 91 5d 2e 	lds	r25, 0x2E5D
    5ede:	a0 91 5e 2e 	lds	r26, 0x2E5E
    5ee2:	b0 91 5f 2e 	lds	r27, 0x2E5F
    5ee6:	48 1b       	sub	r20, r24
    5ee8:	59 0b       	sbc	r21, r25
    5eea:	40 93 83 2e 	sts	0x2E83, r20
    5eee:	50 93 84 2e 	sts	0x2E84, r21
	if((stop_PID_desni == 0) && (set_direct_out == 0))
    5ef2:	80 91 fc 29 	lds	r24, 0x29FC
    5ef6:	81 11       	cpse	r24, r1
    5ef8:	1a c0       	rjmp	.+52     	; 0x5f2e <PID_brzinski+0x98>
    5efa:	80 91 89 32 	lds	r24, 0x3289
    5efe:	81 11       	cpse	r24, r1
    5f00:	16 c0       	rjmp	.+44     	; 0x5f2e <PID_brzinski+0x98>
		PID_brzina_R = (PID_pozicija + PID_teta); //+
    5f02:	80 91 06 2a 	lds	r24, 0x2A06
    5f06:	90 91 07 2a 	lds	r25, 0x2A07
    5f0a:	a0 91 08 2a 	lds	r26, 0x2A08
    5f0e:	b0 91 09 2a 	lds	r27, 0x2A09
    5f12:	40 91 5c 2e 	lds	r20, 0x2E5C
    5f16:	50 91 5d 2e 	lds	r21, 0x2E5D
    5f1a:	60 91 5e 2e 	lds	r22, 0x2E5E
    5f1e:	70 91 5f 2e 	lds	r23, 0x2E5F
    5f22:	84 0f       	add	r24, r20
    5f24:	95 1f       	adc	r25, r21
    5f26:	80 93 81 2e 	sts	0x2E81, r24
    5f2a:	90 93 82 2e 	sts	0x2E82, r25
	
	//Ogranicenje brzinskog PID-a
	if(PID_brzina_L > max_brzina_motora)
    5f2e:	20 91 83 2e 	lds	r18, 0x2E83
    5f32:	30 91 84 2e 	lds	r19, 0x2E84
    5f36:	80 91 17 2e 	lds	r24, 0x2E17
    5f3a:	90 91 18 2e 	lds	r25, 0x2E18
    5f3e:	82 17       	cp	r24, r18
    5f40:	93 07       	cpc	r25, r19
    5f42:	44 f4       	brge	.+16     	; 0x5f54 <PID_brzinski+0xbe>
		PID_brzina_L = max_brzina_motora;
    5f44:	80 91 17 2e 	lds	r24, 0x2E17
    5f48:	90 91 18 2e 	lds	r25, 0x2E18
    5f4c:	80 93 83 2e 	sts	0x2E83, r24
    5f50:	90 93 84 2e 	sts	0x2E84, r25
	if(PID_brzina_L < -max_brzina_motora)
    5f54:	20 91 17 2e 	lds	r18, 0x2E17
    5f58:	30 91 18 2e 	lds	r19, 0x2E18
    5f5c:	80 91 83 2e 	lds	r24, 0x2E83
    5f60:	90 91 84 2e 	lds	r25, 0x2E84
    5f64:	31 95       	neg	r19
    5f66:	21 95       	neg	r18
    5f68:	31 09       	sbc	r19, r1
    5f6a:	82 17       	cp	r24, r18
    5f6c:	93 07       	cpc	r25, r19
    5f6e:	5c f4       	brge	.+22     	; 0x5f86 <PID_brzinski+0xf0>
		PID_brzina_L = -max_brzina_motora;
    5f70:	80 91 17 2e 	lds	r24, 0x2E17
    5f74:	90 91 18 2e 	lds	r25, 0x2E18
    5f78:	91 95       	neg	r25
    5f7a:	81 95       	neg	r24
    5f7c:	91 09       	sbc	r25, r1
    5f7e:	80 93 83 2e 	sts	0x2E83, r24
    5f82:	90 93 84 2e 	sts	0x2E84, r25
	if(PID_brzina_R > max_brzina_motora)
    5f86:	20 91 81 2e 	lds	r18, 0x2E81
    5f8a:	30 91 82 2e 	lds	r19, 0x2E82
    5f8e:	80 91 17 2e 	lds	r24, 0x2E17
    5f92:	90 91 18 2e 	lds	r25, 0x2E18
    5f96:	82 17       	cp	r24, r18
    5f98:	93 07       	cpc	r25, r19
    5f9a:	44 f4       	brge	.+16     	; 0x5fac <PID_brzinski+0x116>
		PID_brzina_R = max_brzina_motora;
    5f9c:	80 91 17 2e 	lds	r24, 0x2E17
    5fa0:	90 91 18 2e 	lds	r25, 0x2E18
    5fa4:	80 93 81 2e 	sts	0x2E81, r24
    5fa8:	90 93 82 2e 	sts	0x2E82, r25
	if(PID_brzina_R < -max_brzina_motora)
    5fac:	20 91 17 2e 	lds	r18, 0x2E17
    5fb0:	30 91 18 2e 	lds	r19, 0x2E18
    5fb4:	80 91 81 2e 	lds	r24, 0x2E81
    5fb8:	90 91 82 2e 	lds	r25, 0x2E82
    5fbc:	31 95       	neg	r19
    5fbe:	21 95       	neg	r18
    5fc0:	31 09       	sbc	r19, r1
    5fc2:	82 17       	cp	r24, r18
    5fc4:	93 07       	cpc	r25, r19
    5fc6:	5c f4       	brge	.+22     	; 0x5fde <PID_brzinski+0x148>
		PID_brzina_R = -max_brzina_motora;
    5fc8:	80 91 17 2e 	lds	r24, 0x2E17
    5fcc:	90 91 18 2e 	lds	r25, 0x2E18
    5fd0:	91 95       	neg	r25
    5fd2:	81 95       	neg	r24
    5fd4:	91 09       	sbc	r25, r1
    5fd6:	80 93 81 2e 	sts	0x2E81, r24
    5fda:	90 93 82 2e 	sts	0x2E82, r25
	
	Pe_brzina_L = PID_brzina_L;
    5fde:	80 91 83 2e 	lds	r24, 0x2E83
    5fe2:	90 91 84 2e 	lds	r25, 0x2E84
    5fe6:	80 93 8a 2e 	sts	0x2E8A, r24
    5fea:	90 93 8b 2e 	sts	0x2E8B, r25
	Pe_brzina_R = PID_brzina_R;
    5fee:	80 91 81 2e 	lds	r24, 0x2E81
    5ff2:	90 91 82 2e 	lds	r25, 0x2E82
    5ff6:	80 93 0e 2e 	sts	0x2E0E, r24
    5ffa:	90 93 0f 2e 	sts	0x2E0F, r25
	Ie_brzina_L += Pe_brzina_L;
    5ffe:	20 91 90 2e 	lds	r18, 0x2E90
    6002:	30 91 91 2e 	lds	r19, 0x2E91
    6006:	80 91 8a 2e 	lds	r24, 0x2E8A
    600a:	90 91 8b 2e 	lds	r25, 0x2E8B
    600e:	82 0f       	add	r24, r18
    6010:	93 1f       	adc	r25, r19
    6012:	80 93 90 2e 	sts	0x2E90, r24
    6016:	90 93 91 2e 	sts	0x2E91, r25
	Ie_brzina_R += Pe_brzina_R;
    601a:	20 91 ca 24 	lds	r18, 0x24CA
    601e:	30 91 cb 24 	lds	r19, 0x24CB
    6022:	80 91 0e 2e 	lds	r24, 0x2E0E
    6026:	90 91 0f 2e 	lds	r25, 0x2E0F
    602a:	82 0f       	add	r24, r18
    602c:	93 1f       	adc	r25, r19
    602e:	80 93 ca 24 	sts	0x24CA, r24
    6032:	90 93 cb 24 	sts	0x24CB, r25
	De_brzina_L = PID_brzina_pret_L - PID_brzina_L;
    6036:	80 91 ae 24 	lds	r24, 0x24AE
    603a:	90 91 af 24 	lds	r25, 0x24AF
    603e:	20 91 83 2e 	lds	r18, 0x2E83
    6042:	30 91 84 2e 	lds	r19, 0x2E84
    6046:	82 1b       	sub	r24, r18
    6048:	93 0b       	sbc	r25, r19
    604a:	80 93 76 2e 	sts	0x2E76, r24
    604e:	90 93 77 2e 	sts	0x2E77, r25
	De_brzina_R = PID_brzina_pret_R - PID_brzina_R;
    6052:	80 91 33 2e 	lds	r24, 0x2E33
    6056:	90 91 34 2e 	lds	r25, 0x2E34
    605a:	20 91 81 2e 	lds	r18, 0x2E81
    605e:	30 91 82 2e 	lds	r19, 0x2E82
    6062:	82 1b       	sub	r24, r18
    6064:	93 0b       	sbc	r25, r19
    6066:	80 93 d1 28 	sts	0x28D1, r24
    606a:	90 93 d2 28 	sts	0x28D2, r25
	
	PID_brzina_pret_L = PID_brzina_L;
    606e:	80 91 83 2e 	lds	r24, 0x2E83
    6072:	90 91 84 2e 	lds	r25, 0x2E84
    6076:	80 93 ae 24 	sts	0x24AE, r24
    607a:	90 93 af 24 	sts	0x24AF, r25
	PID_brzina_pret_R = PID_brzina_R;
    607e:	80 91 81 2e 	lds	r24, 0x2E81
    6082:	90 91 82 2e 	lds	r25, 0x2E82
    6086:	80 93 33 2e 	sts	0x2E33, r24
    608a:	90 93 34 2e 	sts	0x2E34, r25
	
	//anti wind-up
	if(Ie_brzina_L > 200) //300
    608e:	80 91 90 2e 	lds	r24, 0x2E90
    6092:	90 91 91 2e 	lds	r25, 0x2E91
    6096:	89 3c       	cpi	r24, 0xC9	; 201
    6098:	91 05       	cpc	r25, r1
    609a:	34 f0       	brlt	.+12     	; 0x60a8 <PID_brzinski+0x212>
		Ie_brzina_L = 200;
    609c:	88 ec       	ldi	r24, 0xC8	; 200
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	80 93 90 2e 	sts	0x2E90, r24
    60a4:	90 93 91 2e 	sts	0x2E91, r25
	if(Ie_brzina_L < -200)
    60a8:	80 91 90 2e 	lds	r24, 0x2E90
    60ac:	90 91 91 2e 	lds	r25, 0x2E91
    60b0:	88 33       	cpi	r24, 0x38	; 56
    60b2:	9f 4f       	sbci	r25, 0xFF	; 255
    60b4:	34 f4       	brge	.+12     	; 0x60c2 <PID_brzinski+0x22c>
		Ie_brzina_L = -200;
    60b6:	88 e3       	ldi	r24, 0x38	; 56
    60b8:	9f ef       	ldi	r25, 0xFF	; 255
    60ba:	80 93 90 2e 	sts	0x2E90, r24
    60be:	90 93 91 2e 	sts	0x2E91, r25
	if(Ie_brzina_R > 200)
    60c2:	80 91 ca 24 	lds	r24, 0x24CA
    60c6:	90 91 cb 24 	lds	r25, 0x24CB
    60ca:	89 3c       	cpi	r24, 0xC9	; 201
    60cc:	91 05       	cpc	r25, r1
    60ce:	34 f0       	brlt	.+12     	; 0x60dc <PID_brzinski+0x246>
		Ie_brzina_R = 200;
    60d0:	88 ec       	ldi	r24, 0xC8	; 200
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	80 93 ca 24 	sts	0x24CA, r24
    60d8:	90 93 cb 24 	sts	0x24CB, r25
	if(Ie_brzina_R < -200)
    60dc:	80 91 ca 24 	lds	r24, 0x24CA
    60e0:	90 91 cb 24 	lds	r25, 0x24CB
    60e4:	88 33       	cpi	r24, 0x38	; 56
    60e6:	9f 4f       	sbci	r25, 0xFF	; 255
    60e8:	34 f4       	brge	.+12     	; 0x60f6 <PID_brzinski+0x260>
		Ie_brzina_R = -200;
    60ea:	88 e3       	ldi	r24, 0x38	; 56
    60ec:	9f ef       	ldi	r25, 0xFF	; 255
    60ee:	80 93 ca 24 	sts	0x24CA, r24
    60f2:	90 93 cb 24 	sts	0x24CB, r25

	PID_ukupni_L = (float)(Pe_brzina_L) * Kp_brzina + (float)(Ie_brzina_L) * Ki_brzina + (float)(De_brzina_L) * Kd_brzina; // znak - je zbog smera kretanja
    60f6:	60 91 8a 2e 	lds	r22, 0x2E8A
    60fa:	70 91 8b 2e 	lds	r23, 0x2E8B
    60fe:	c0 90 db 28 	lds	r12, 0x28DB
    6102:	d0 90 dc 28 	lds	r13, 0x28DC
    6106:	e0 90 dd 28 	lds	r14, 0x28DD
    610a:	f0 90 de 28 	lds	r15, 0x28DE
    610e:	00 91 90 2e 	lds	r16, 0x2E90
    6112:	10 91 91 2e 	lds	r17, 0x2E91
    6116:	40 90 c0 24 	lds	r4, 0x24C0
    611a:	50 90 c1 24 	lds	r5, 0x24C1
    611e:	60 90 c2 24 	lds	r6, 0x24C2
    6122:	70 90 c3 24 	lds	r7, 0x24C3
    6126:	c0 91 76 2e 	lds	r28, 0x2E76
    612a:	d0 91 77 2e 	lds	r29, 0x2E77
    612e:	80 90 58 2e 	lds	r8, 0x2E58
    6132:	90 90 59 2e 	lds	r9, 0x2E59
    6136:	a0 90 5a 2e 	lds	r10, 0x2E5A
    613a:	b0 90 5b 2e 	lds	r11, 0x2E5B
    613e:	88 27       	eor	r24, r24
    6140:	77 fd       	sbrc	r23, 7
    6142:	80 95       	com	r24
    6144:	98 2f       	mov	r25, r24
    6146:	6a d6       	rcall	.+3284   	; 0x6e1c <__floatsisf>
    6148:	a7 01       	movw	r20, r14
    614a:	96 01       	movw	r18, r12
    614c:	80 d7       	rcall	.+3840   	; 0x704e <__mulsf3>
    614e:	6b 01       	movw	r12, r22
    6150:	7c 01       	movw	r14, r24
    6152:	b8 01       	movw	r22, r16
    6154:	88 27       	eor	r24, r24
    6156:	77 fd       	sbrc	r23, 7
    6158:	80 95       	com	r24
    615a:	98 2f       	mov	r25, r24
    615c:	5f d6       	rcall	.+3262   	; 0x6e1c <__floatsisf>
    615e:	a3 01       	movw	r20, r6
    6160:	92 01       	movw	r18, r4
    6162:	75 d7       	rcall	.+3818   	; 0x704e <__mulsf3>
    6164:	9b 01       	movw	r18, r22
    6166:	ac 01       	movw	r20, r24
    6168:	c7 01       	movw	r24, r14
    616a:	b6 01       	movw	r22, r12
    616c:	ef d4       	rcall	.+2526   	; 0x6b4c <__addsf3>
    616e:	6b 01       	movw	r12, r22
    6170:	7c 01       	movw	r14, r24
    6172:	be 01       	movw	r22, r28
    6174:	88 27       	eor	r24, r24
    6176:	77 fd       	sbrc	r23, 7
    6178:	80 95       	com	r24
    617a:	98 2f       	mov	r25, r24
    617c:	4f d6       	rcall	.+3230   	; 0x6e1c <__floatsisf>
    617e:	a5 01       	movw	r20, r10
    6180:	94 01       	movw	r18, r8
    6182:	65 d7       	rcall	.+3786   	; 0x704e <__mulsf3>
    6184:	9b 01       	movw	r18, r22
    6186:	ac 01       	movw	r20, r24
    6188:	c7 01       	movw	r24, r14
    618a:	b6 01       	movw	r22, r12
    618c:	df d4       	rcall	.+2494   	; 0x6b4c <__addsf3>
    618e:	13 d6       	rcall	.+3110   	; 0x6db6 <__fixsfsi>
    6190:	60 93 e1 28 	sts	0x28E1, r22
    6194:	70 93 e2 28 	sts	0x28E2, r23
    6198:	80 93 e3 28 	sts	0x28E3, r24
    619c:	90 93 e4 28 	sts	0x28E4, r25
	PID_ukupni_R = (float)(Pe_brzina_R) * Kp_brzina + (float)(Ie_brzina_R) * Ki_brzina + (float)(De_brzina_R) * Kd_brzina;
    61a0:	60 91 0e 2e 	lds	r22, 0x2E0E
    61a4:	70 91 0f 2e 	lds	r23, 0x2E0F
    61a8:	c0 90 db 28 	lds	r12, 0x28DB
    61ac:	d0 90 dc 28 	lds	r13, 0x28DC
    61b0:	e0 90 dd 28 	lds	r14, 0x28DD
    61b4:	f0 90 de 28 	lds	r15, 0x28DE
    61b8:	00 91 ca 24 	lds	r16, 0x24CA
    61bc:	10 91 cb 24 	lds	r17, 0x24CB
    61c0:	40 90 c0 24 	lds	r4, 0x24C0
    61c4:	50 90 c1 24 	lds	r5, 0x24C1
    61c8:	60 90 c2 24 	lds	r6, 0x24C2
    61cc:	70 90 c3 24 	lds	r7, 0x24C3
    61d0:	c0 91 d1 28 	lds	r28, 0x28D1
    61d4:	d0 91 d2 28 	lds	r29, 0x28D2
    61d8:	80 90 58 2e 	lds	r8, 0x2E58
    61dc:	90 90 59 2e 	lds	r9, 0x2E59
    61e0:	a0 90 5a 2e 	lds	r10, 0x2E5A
    61e4:	b0 90 5b 2e 	lds	r11, 0x2E5B
    61e8:	88 27       	eor	r24, r24
    61ea:	77 fd       	sbrc	r23, 7
    61ec:	80 95       	com	r24
    61ee:	98 2f       	mov	r25, r24
    61f0:	15 d6       	rcall	.+3114   	; 0x6e1c <__floatsisf>
    61f2:	a7 01       	movw	r20, r14
    61f4:	96 01       	movw	r18, r12
    61f6:	2b d7       	rcall	.+3670   	; 0x704e <__mulsf3>
    61f8:	6b 01       	movw	r12, r22
    61fa:	7c 01       	movw	r14, r24
    61fc:	b8 01       	movw	r22, r16
    61fe:	88 27       	eor	r24, r24
    6200:	77 fd       	sbrc	r23, 7
    6202:	80 95       	com	r24
    6204:	98 2f       	mov	r25, r24
    6206:	0a d6       	rcall	.+3092   	; 0x6e1c <__floatsisf>
    6208:	a3 01       	movw	r20, r6
    620a:	92 01       	movw	r18, r4
    620c:	20 d7       	rcall	.+3648   	; 0x704e <__mulsf3>
    620e:	9b 01       	movw	r18, r22
    6210:	ac 01       	movw	r20, r24
    6212:	c7 01       	movw	r24, r14
    6214:	b6 01       	movw	r22, r12
    6216:	9a d4       	rcall	.+2356   	; 0x6b4c <__addsf3>
    6218:	6b 01       	movw	r12, r22
    621a:	7c 01       	movw	r14, r24
    621c:	be 01       	movw	r22, r28
    621e:	88 27       	eor	r24, r24
    6220:	77 fd       	sbrc	r23, 7
    6222:	80 95       	com	r24
    6224:	98 2f       	mov	r25, r24
    6226:	fa d5       	rcall	.+3060   	; 0x6e1c <__floatsisf>
    6228:	a5 01       	movw	r20, r10
    622a:	94 01       	movw	r18, r8
    622c:	10 d7       	rcall	.+3616   	; 0x704e <__mulsf3>
    622e:	9b 01       	movw	r18, r22
    6230:	ac 01       	movw	r20, r24
    6232:	c7 01       	movw	r24, r14
    6234:	b6 01       	movw	r22, r12
    6236:	8a d4       	rcall	.+2324   	; 0x6b4c <__addsf3>
    6238:	be d5       	rcall	.+2940   	; 0x6db6 <__fixsfsi>
    623a:	60 93 8c 2e 	sts	0x2E8C, r22
    623e:	70 93 8d 2e 	sts	0x2E8D, r23
    6242:	80 93 8e 2e 	sts	0x2E8E, r24
    6246:	90 93 8f 2e 	sts	0x2E8F, r25
	
	//preskaliranje - ne mora da se radi posto su max_brzina_motora i PWM_perioda slicne velicine
	//PID_ukupni_L = (PID_ukupni_L * PWM_perioda) / max_brzina_motora; 
	
	//Ogranicenje PID izlaza
	if(PID_ukupni_L > PWM_perioda)
    624a:	40 91 66 2e 	lds	r20, 0x2E66
    624e:	50 91 67 2e 	lds	r21, 0x2E67
    6252:	80 91 e1 28 	lds	r24, 0x28E1
    6256:	90 91 e2 28 	lds	r25, 0x28E2
    625a:	a0 91 e3 28 	lds	r26, 0x28E3
    625e:	b0 91 e4 28 	lds	r27, 0x28E4
    6262:	66 27       	eor	r22, r22
    6264:	57 fd       	sbrc	r21, 7
    6266:	60 95       	com	r22
    6268:	76 2f       	mov	r23, r22
    626a:	48 17       	cp	r20, r24
    626c:	59 07       	cpc	r21, r25
    626e:	6a 07       	cpc	r22, r26
    6270:	7b 07       	cpc	r23, r27
    6272:	84 f4       	brge	.+32     	; 0x6294 <PID_brzinski+0x3fe>
		PID_ukupni_L = PWM_perioda;
    6274:	80 91 66 2e 	lds	r24, 0x2E66
    6278:	90 91 67 2e 	lds	r25, 0x2E67
    627c:	aa 27       	eor	r26, r26
    627e:	97 fd       	sbrc	r25, 7
    6280:	a0 95       	com	r26
    6282:	ba 2f       	mov	r27, r26
    6284:	80 93 e1 28 	sts	0x28E1, r24
    6288:	90 93 e2 28 	sts	0x28E2, r25
    628c:	a0 93 e3 28 	sts	0x28E3, r26
    6290:	b0 93 e4 28 	sts	0x28E4, r27
	if(PID_ukupni_L < -PWM_perioda)
    6294:	40 91 66 2e 	lds	r20, 0x2E66
    6298:	50 91 67 2e 	lds	r21, 0x2E67
    629c:	80 91 e1 28 	lds	r24, 0x28E1
    62a0:	90 91 e2 28 	lds	r25, 0x28E2
    62a4:	a0 91 e3 28 	lds	r26, 0x28E3
    62a8:	b0 91 e4 28 	lds	r27, 0x28E4
    62ac:	51 95       	neg	r21
    62ae:	41 95       	neg	r20
    62b0:	51 09       	sbc	r21, r1
    62b2:	66 27       	eor	r22, r22
    62b4:	57 fd       	sbrc	r21, 7
    62b6:	60 95       	com	r22
    62b8:	76 2f       	mov	r23, r22
    62ba:	84 17       	cp	r24, r20
    62bc:	95 07       	cpc	r25, r21
    62be:	a6 07       	cpc	r26, r22
    62c0:	b7 07       	cpc	r27, r23
    62c2:	9c f4       	brge	.+38     	; 0x62ea <PID_brzinski+0x454>
		PID_ukupni_L = -PWM_perioda;
    62c4:	80 91 66 2e 	lds	r24, 0x2E66
    62c8:	90 91 67 2e 	lds	r25, 0x2E67
    62cc:	91 95       	neg	r25
    62ce:	81 95       	neg	r24
    62d0:	91 09       	sbc	r25, r1
    62d2:	aa 27       	eor	r26, r26
    62d4:	97 fd       	sbrc	r25, 7
    62d6:	a0 95       	com	r26
    62d8:	ba 2f       	mov	r27, r26
    62da:	80 93 e1 28 	sts	0x28E1, r24
    62de:	90 93 e2 28 	sts	0x28E2, r25
    62e2:	a0 93 e3 28 	sts	0x28E3, r26
    62e6:	b0 93 e4 28 	sts	0x28E4, r27
		
	if(PID_ukupni_R > PWM_perioda)
    62ea:	40 91 66 2e 	lds	r20, 0x2E66
    62ee:	50 91 67 2e 	lds	r21, 0x2E67
    62f2:	80 91 8c 2e 	lds	r24, 0x2E8C
    62f6:	90 91 8d 2e 	lds	r25, 0x2E8D
    62fa:	a0 91 8e 2e 	lds	r26, 0x2E8E
    62fe:	b0 91 8f 2e 	lds	r27, 0x2E8F
    6302:	66 27       	eor	r22, r22
    6304:	57 fd       	sbrc	r21, 7
    6306:	60 95       	com	r22
    6308:	76 2f       	mov	r23, r22
    630a:	48 17       	cp	r20, r24
    630c:	59 07       	cpc	r21, r25
    630e:	6a 07       	cpc	r22, r26
    6310:	7b 07       	cpc	r23, r27
    6312:	84 f4       	brge	.+32     	; 0x6334 <PID_brzinski+0x49e>
		PID_ukupni_R = PWM_perioda;
    6314:	80 91 66 2e 	lds	r24, 0x2E66
    6318:	90 91 67 2e 	lds	r25, 0x2E67
    631c:	aa 27       	eor	r26, r26
    631e:	97 fd       	sbrc	r25, 7
    6320:	a0 95       	com	r26
    6322:	ba 2f       	mov	r27, r26
    6324:	80 93 8c 2e 	sts	0x2E8C, r24
    6328:	90 93 8d 2e 	sts	0x2E8D, r25
    632c:	a0 93 8e 2e 	sts	0x2E8E, r26
    6330:	b0 93 8f 2e 	sts	0x2E8F, r27
	if(PID_ukupni_R < -PWM_perioda)
    6334:	40 91 66 2e 	lds	r20, 0x2E66
    6338:	50 91 67 2e 	lds	r21, 0x2E67
    633c:	80 91 8c 2e 	lds	r24, 0x2E8C
    6340:	90 91 8d 2e 	lds	r25, 0x2E8D
    6344:	a0 91 8e 2e 	lds	r26, 0x2E8E
    6348:	b0 91 8f 2e 	lds	r27, 0x2E8F
    634c:	51 95       	neg	r21
    634e:	41 95       	neg	r20
    6350:	51 09       	sbc	r21, r1
    6352:	66 27       	eor	r22, r22
    6354:	57 fd       	sbrc	r21, 7
    6356:	60 95       	com	r22
    6358:	76 2f       	mov	r23, r22
    635a:	84 17       	cp	r24, r20
    635c:	95 07       	cpc	r25, r21
    635e:	a6 07       	cpc	r26, r22
    6360:	b7 07       	cpc	r27, r23
    6362:	9c f4       	brge	.+38     	; 0x638a <PID_brzinski+0x4f4>
		PID_ukupni_R = -PWM_perioda;
    6364:	80 91 66 2e 	lds	r24, 0x2E66
    6368:	90 91 67 2e 	lds	r25, 0x2E67
    636c:	91 95       	neg	r25
    636e:	81 95       	neg	r24
    6370:	91 09       	sbc	r25, r1
    6372:	aa 27       	eor	r26, r26
    6374:	97 fd       	sbrc	r25, 7
    6376:	a0 95       	com	r26
    6378:	ba 2f       	mov	r27, r26
    637a:	80 93 8c 2e 	sts	0x2E8C, r24
    637e:	90 93 8d 2e 	sts	0x2E8D, r25
    6382:	a0 93 8e 2e 	sts	0x2E8E, r26
    6386:	b0 93 8f 2e 	sts	0x2E8F, r27
		
	//levi motor
	if (PID_ukupni_L > 3)/*if (PID_ukupni_L > 5)*/	//smer 1
    638a:	80 91 e1 28 	lds	r24, 0x28E1
    638e:	90 91 e2 28 	lds	r25, 0x28E2
    6392:	a0 91 e3 28 	lds	r26, 0x28E3
    6396:	b0 91 e4 28 	lds	r27, 0x28E4
    639a:	04 97       	sbiw	r24, 0x04	; 4
    639c:	a1 05       	cpc	r26, r1
    639e:	b1 05       	cpc	r27, r1
    63a0:	9c f0       	brlt	.+38     	; 0x63c8 <PID_brzinski+0x532>
	{
		PORT_ClearPins(&PORTH, 0b00010000);	//IN_A2=0
    63a2:	e0 ee       	ldi	r30, 0xE0	; 224
    63a4:	f6 e0       	ldi	r31, 0x06	; 6
    63a6:	80 e1       	ldi	r24, 0x10	; 16
    63a8:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b10000000);	//IN_B2=1
    63aa:	80 e8       	ldi	r24, 0x80	; 128
    63ac:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCBBUF = PID_ukupni_L;
    63ae:	80 91 e1 28 	lds	r24, 0x28E1
    63b2:	90 91 e2 28 	lds	r25, 0x28E2
    63b6:	a0 91 e3 28 	lds	r26, 0x28E3
    63ba:	b0 91 e4 28 	lds	r27, 0x28E4
    63be:	e0 e4       	ldi	r30, 0x40	; 64
    63c0:	fb e0       	ldi	r31, 0x0B	; 11
    63c2:	82 af       	std	Z+58, r24	; 0x3a
    63c4:	93 af       	std	Z+59, r25	; 0x3b
    63c6:	27 c0       	rjmp	.+78     	; 0x6416 <PID_brzinski+0x580>
	}
	else if (PID_ukupni_L < -3)	//smer 2
    63c8:	80 91 e1 28 	lds	r24, 0x28E1
    63cc:	90 91 e2 28 	lds	r25, 0x28E2
    63d0:	a0 91 e3 28 	lds	r26, 0x28E3
    63d4:	b0 91 e4 28 	lds	r27, 0x28E4
    63d8:	8d 3f       	cpi	r24, 0xFD	; 253
    63da:	9f 4f       	sbci	r25, 0xFF	; 255
    63dc:	af 4f       	sbci	r26, 0xFF	; 255
    63de:	bf 4f       	sbci	r27, 0xFF	; 255
    63e0:	b4 f4       	brge	.+44     	; 0x640e <PID_brzinski+0x578>
	{
		PORT_ClearPins(&PORTH, 0b10000000);	//IN_B2=0
    63e2:	e0 ee       	ldi	r30, 0xE0	; 224
    63e4:	f6 e0       	ldi	r31, 0x06	; 6
    63e6:	80 e8       	ldi	r24, 0x80	; 128
    63e8:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00010000);	//IN_A2=1,
    63ea:	80 e1       	ldi	r24, 0x10	; 16
    63ec:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCBBUF = -PID_ukupni_L;
    63ee:	80 91 e1 28 	lds	r24, 0x28E1
    63f2:	90 91 e2 28 	lds	r25, 0x28E2
    63f6:	a0 91 e3 28 	lds	r26, 0x28E3
    63fa:	b0 91 e4 28 	lds	r27, 0x28E4
    63fe:	91 95       	neg	r25
    6400:	81 95       	neg	r24
    6402:	91 09       	sbc	r25, r1
    6404:	e0 e4       	ldi	r30, 0x40	; 64
    6406:	fb e0       	ldi	r31, 0x0B	; 11
    6408:	82 af       	std	Z+58, r24	; 0x3a
    640a:	93 af       	std	Z+59, r25	; 0x3b
    640c:	04 c0       	rjmp	.+8      	; 0x6416 <PID_brzinski+0x580>
	}
	else	//kocenje
		PORT_ClearPins(&PORTH, 0b10010000);	//IN_A2=0, IN_B2=0	
    640e:	80 e9       	ldi	r24, 0x90	; 144
    6410:	e0 ee       	ldi	r30, 0xE0	; 224
    6412:	f6 e0       	ldi	r31, 0x06	; 6
    6414:	86 83       	std	Z+6, r24	; 0x06
	//desni motor
	if (PID_ukupni_R > 3) //smer 1
    6416:	80 91 8c 2e 	lds	r24, 0x2E8C
    641a:	90 91 8d 2e 	lds	r25, 0x2E8D
    641e:	a0 91 8e 2e 	lds	r26, 0x2E8E
    6422:	b0 91 8f 2e 	lds	r27, 0x2E8F
    6426:	04 97       	sbiw	r24, 0x04	; 4
    6428:	a1 05       	cpc	r26, r1
    642a:	b1 05       	cpc	r27, r1
    642c:	9c f0       	brlt	.+38     	; 0x6454 <PID_brzinski+0x5be>
	{
		PORT_ClearPins(&PORTH, 0b00001000);	//IN_B1=0
    642e:	e0 ee       	ldi	r30, 0xE0	; 224
    6430:	f6 e0       	ldi	r31, 0x06	; 6
    6432:	88 e0       	ldi	r24, 0x08	; 8
    6434:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00000001);	//IN_A1=1
    6436:	81 e0       	ldi	r24, 0x01	; 1
    6438:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCABUF = PID_ukupni_R;
    643a:	80 91 8c 2e 	lds	r24, 0x2E8C
    643e:	90 91 8d 2e 	lds	r25, 0x2E8D
    6442:	a0 91 8e 2e 	lds	r26, 0x2E8E
    6446:	b0 91 8f 2e 	lds	r27, 0x2E8F
    644a:	e0 e4       	ldi	r30, 0x40	; 64
    644c:	fb e0       	ldi	r31, 0x0B	; 11
    644e:	80 af       	std	Z+56, r24	; 0x38
    6450:	91 af       	std	Z+57, r25	; 0x39
    6452:	27 c0       	rjmp	.+78     	; 0x64a2 <PID_brzinski+0x60c>
	}
	else if (PID_ukupni_R < -3)	//smer 2
    6454:	80 91 8c 2e 	lds	r24, 0x2E8C
    6458:	90 91 8d 2e 	lds	r25, 0x2E8D
    645c:	a0 91 8e 2e 	lds	r26, 0x2E8E
    6460:	b0 91 8f 2e 	lds	r27, 0x2E8F
    6464:	8d 3f       	cpi	r24, 0xFD	; 253
    6466:	9f 4f       	sbci	r25, 0xFF	; 255
    6468:	af 4f       	sbci	r26, 0xFF	; 255
    646a:	bf 4f       	sbci	r27, 0xFF	; 255
    646c:	b4 f4       	brge	.+44     	; 0x649a <PID_brzinski+0x604>
	{
		PORT_ClearPins(&PORTH, 0b00000001);	//IN_A1=0
    646e:	e0 ee       	ldi	r30, 0xE0	; 224
    6470:	f6 e0       	ldi	r31, 0x06	; 6
    6472:	81 e0       	ldi	r24, 0x01	; 1
    6474:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00001000);	//IN_B1=1
    6476:	88 e0       	ldi	r24, 0x08	; 8
    6478:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCABUF = -PID_ukupni_R;
    647a:	80 91 8c 2e 	lds	r24, 0x2E8C
    647e:	90 91 8d 2e 	lds	r25, 0x2E8D
    6482:	a0 91 8e 2e 	lds	r26, 0x2E8E
    6486:	b0 91 8f 2e 	lds	r27, 0x2E8F
    648a:	91 95       	neg	r25
    648c:	81 95       	neg	r24
    648e:	91 09       	sbc	r25, r1
    6490:	e0 e4       	ldi	r30, 0x40	; 64
    6492:	fb e0       	ldi	r31, 0x0B	; 11
    6494:	80 af       	std	Z+56, r24	; 0x38
    6496:	91 af       	std	Z+57, r25	; 0x39
    6498:	04 c0       	rjmp	.+8      	; 0x64a2 <PID_brzinski+0x60c>
	}
	else //kocenje
		PORT_ClearPins(&PORTH, 0b00001001);	//IN_A1=0, IN_B1=0
    649a:	89 e0       	ldi	r24, 0x09	; 9
    649c:	e0 ee       	ldi	r30, 0xE0	; 224
    649e:	f6 e0       	ldi	r31, 0x06	; 6
    64a0:	86 83       	std	Z+6, r24	; 0x06
		
}
    64a2:	df 91       	pop	r29
    64a4:	cf 91       	pop	r28
    64a6:	1f 91       	pop	r17
    64a8:	0f 91       	pop	r16
    64aa:	ff 90       	pop	r15
    64ac:	ef 90       	pop	r14
    64ae:	df 90       	pop	r13
    64b0:	cf 90       	pop	r12
    64b2:	bf 90       	pop	r11
    64b4:	af 90       	pop	r10
    64b6:	9f 90       	pop	r9
    64b8:	8f 90       	pop	r8
    64ba:	7f 90       	pop	r7
    64bc:	6f 90       	pop	r6
    64be:	5f 90       	pop	r5
    64c0:	4f 90       	pop	r4
    64c2:	08 95       	ret

000064c4 <PGM_Mode>:

int PGM_Mode(){
	if((PORTB.IN & 0b00000001) == 0)
    64c4:	e0 e2       	ldi	r30, 0x20	; 32
    64c6:	f6 e0       	ldi	r31, 0x06	; 6
    64c8:	80 85       	ldd	r24, Z+8	; 0x08
    64ca:	80 ff       	sbrs	r24, 0
    64cc:	05 c0       	rjmp	.+10     	; 0x64d8 <PGM_Mode+0x14>
	{//Pritisnut taster
		return 1;
	}
	else{
		set_direct_out = 0;
    64ce:	10 92 89 32 	sts	0x3289, r1
		return 0;
    64d2:	20 e0       	ldi	r18, 0x00	; 0
    64d4:	30 e0       	ldi	r19, 0x00	; 0
    64d6:	02 c0       	rjmp	.+4      	; 0x64dc <PGM_Mode+0x18>
}

int PGM_Mode(){
	if((PORTB.IN & 0b00000001) == 0)
	{//Pritisnut taster
		return 1;
    64d8:	21 e0       	ldi	r18, 0x01	; 1
    64da:	30 e0       	ldi	r19, 0x00	; 0
	}
	else{
		set_direct_out = 0;
		return 0;
	}
}
    64dc:	82 2f       	mov	r24, r18
    64de:	93 2f       	mov	r25, r19
    64e0:	08 95       	ret

000064e2 <PORT_ConfigureInterrupt0>:
void PORT_ConfigureInterrupt1( PORT_t * port,
                               PORT_INT1LVL_t intLevel,
                               uint8_t pinMask )
{
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT1LVL_gm ) | intLevel;
	port->INT1MASK = pinMask;
    64e2:	fc 01       	movw	r30, r24
    64e4:	81 85       	ldd	r24, Z+9	; 0x09
    64e6:	8c 7f       	andi	r24, 0xFC	; 252
    64e8:	68 2b       	or	r22, r24
    64ea:	61 87       	std	Z+9, r22	; 0x09
    64ec:	42 87       	std	Z+10, r20	; 0x0a
    64ee:	08 95       	ret

000064f0 <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
    64f0:	ef 92       	push	r14
    64f2:	0f 93       	push	r16
	// Build pin control register value
	// N.B. Look in iox126a1.h for description of bit and group masks
	uint8_t temp = (uint8_t) opc |
    64f4:	0e 29       	or	r16, r14
    64f6:	44 23       	and	r20, r20
    64f8:	11 f0       	breq	.+4      	; 0x64fe <PORT_ConfigurePins+0xe>
    64fa:	30 e8       	ldi	r19, 0x80	; 128
    64fc:	01 c0       	rjmp	.+2      	; 0x6500 <PORT_ConfigurePins+0x10>
    64fe:	30 e0       	ldi	r19, 0x00	; 0
    6500:	03 2b       	or	r16, r19
    6502:	22 23       	and	r18, r18
    6504:	11 f0       	breq	.+4      	; 0x650a <PORT_ConfigurePins+0x1a>
    6506:	20 e4       	ldi	r18, 0x40	; 64
    6508:	01 c0       	rjmp	.+2      	; 0x650c <PORT_ConfigurePins+0x1c>
    650a:	20 e0       	ldi	r18, 0x00	; 0
    650c:	02 2b       	or	r16, r18
	               (invertEnable ? PORT_INVEN_bm : 0);

	// Configure the pins in one atomic operation. 

	// Save status register. 
	uint8_t sreg = SREG;
    650e:	2f b7       	in	r18, 0x3f	; 63

	// Disable the global interrupt flag
	cli();	
    6510:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
    6512:	60 93 b0 00 	sts	0x00B0, r22
	port->PIN0CTRL = temp;
    6516:	fc 01       	movw	r30, r24
    6518:	00 8b       	std	Z+16, r16	; 0x10

	// Restore status register. 
	SREG = sreg;
    651a:	2f bf       	out	0x3f, r18	; 63
}
    651c:	0f 91       	pop	r16
    651e:	ef 90       	pop	r14
    6520:	08 95       	ret

00006522 <TC1_ConfigClockSource>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    6522:	fc 01       	movw	r30, r24
    6524:	20 81       	ld	r18, Z
    6526:	20 7f       	andi	r18, 0xF0	; 240
    6528:	62 2b       	or	r22, r18
    652a:	60 83       	st	Z, r22
    652c:	08 95       	ret

0000652e <TC1_SetOverflowIntLevel>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
    652e:	fc 01       	movw	r30, r24
    6530:	26 81       	ldd	r18, Z+6	; 0x06
    6532:	2c 7f       	andi	r18, 0xFC	; 252
    6534:	62 2b       	or	r22, r18
    6536:	66 83       	std	Z+6, r22	; 0x06
    6538:	08 95       	ret

0000653a <nuliraj_poziciju_robota>:
 			default:
 			break;
 		}

 		
 }
    653a:	10 92 b6 24 	sts	0x24B6, r1
    653e:	10 92 b7 24 	sts	0x24B7, r1
    6542:	10 92 b8 24 	sts	0x24B8, r1
    6546:	10 92 b9 24 	sts	0x24B9, r1
    654a:	10 92 2b 2e 	sts	0x2E2B, r1
    654e:	10 92 2c 2e 	sts	0x2E2C, r1
    6552:	10 92 2d 2e 	sts	0x2E2D, r1
    6556:	10 92 2e 2e 	sts	0x2E2E, r1
    655a:	10 92 13 2e 	sts	0x2E13, r1
    655e:	10 92 14 2e 	sts	0x2E14, r1
    6562:	10 92 15 2e 	sts	0x2E15, r1
    6566:	10 92 16 2e 	sts	0x2E16, r1
    656a:	10 92 0a 2a 	sts	0x2A0A, r1
    656e:	10 92 0b 2a 	sts	0x2A0B, r1
    6572:	10 92 0c 2a 	sts	0x2A0C, r1
    6576:	10 92 0d 2a 	sts	0x2A0D, r1
    657a:	10 92 00 20 	sts	0x2000, r1
    657e:	10 92 01 20 	sts	0x2001, r1
    6582:	10 92 02 20 	sts	0x2002, r1
    6586:	10 92 03 20 	sts	0x2003, r1
    658a:	10 92 d4 24 	sts	0x24D4, r1
    658e:	10 92 d5 24 	sts	0x24D5, r1
    6592:	10 92 d6 24 	sts	0x24D6, r1
    6596:	10 92 d7 24 	sts	0x24D7, r1
    659a:	10 92 8b 32 	sts	0x328B, r1
    659e:	10 92 8c 32 	sts	0x328C, r1
    65a2:	10 92 8d 32 	sts	0x328D, r1
    65a6:	10 92 8e 32 	sts	0x328E, r1
    65aa:	82 e0       	ldi	r24, 0x02	; 2
    65ac:	80 93 80 2e 	sts	0x2E80, r24
    65b0:	80 93 66 29 	sts	0x2966, r24
    65b4:	e0 e0       	ldi	r30, 0x00	; 0
    65b6:	f9 e0       	ldi	r31, 0x09	; 9
    65b8:	10 a2       	std	Z+32, r1	; 0x20
    65ba:	11 a2       	std	Z+33, r1	; 0x21
    65bc:	e0 e4       	ldi	r30, 0x40	; 64
    65be:	f9 e0       	ldi	r31, 0x09	; 9
    65c0:	10 a2       	std	Z+32, r1	; 0x20
    65c2:	11 a2       	std	Z+33, r1	; 0x21
    65c4:	10 92 85 32 	sts	0x3285, r1
    65c8:	10 92 86 32 	sts	0x3286, r1
    65cc:	10 92 26 2e 	sts	0x2E26, r1
    65d0:	10 92 27 2e 	sts	0x2E27, r1
    65d4:	10 92 28 2e 	sts	0x2E28, r1
    65d8:	10 92 29 2e 	sts	0x2E29, r1
    65dc:	10 92 f6 29 	sts	0x29F6, r1
    65e0:	10 92 f7 29 	sts	0x29F7, r1
    65e4:	10 92 f8 29 	sts	0x29F8, r1
    65e8:	10 92 f9 29 	sts	0x29F9, r1
    65ec:	10 92 35 2e 	sts	0x2E35, r1
    65f0:	10 92 36 2e 	sts	0x2E36, r1
    65f4:	08 95       	ret

000065f6 <idi_pravo>:
    65f6:	8f 92       	push	r8
    65f8:	9f 92       	push	r9
    65fa:	af 92       	push	r10
    65fc:	bf 92       	push	r11
    65fe:	ef 92       	push	r14
    6600:	ff 92       	push	r15
    6602:	0f 93       	push	r16
    6604:	1f 93       	push	r17
    6606:	49 01       	movw	r8, r18
    6608:	5a 01       	movw	r10, r20
    660a:	a0 91 08 2e 	lds	r26, 0x2E08
    660e:	b0 91 09 2e 	lds	r27, 0x2E09
    6612:	22 27       	eor	r18, r18
    6614:	33 27       	eor	r19, r19
    6616:	a9 01       	movw	r20, r18
    6618:	26 1b       	sub	r18, r22
    661a:	37 0b       	sbc	r19, r23
    661c:	48 0b       	sbc	r20, r24
    661e:	59 0b       	sbc	r21, r25
    6620:	49 d6       	rcall	.+3218   	; 0x72b4 <__muluhisi3>
    6622:	60 93 b6 24 	sts	0x24B6, r22
    6626:	70 93 b7 24 	sts	0x24B7, r23
    662a:	80 93 b8 24 	sts	0x24B8, r24
    662e:	90 93 b9 24 	sts	0x24B9, r25
    6632:	a0 91 08 2e 	lds	r26, 0x2E08
    6636:	b0 91 09 2e 	lds	r27, 0x2E09
    663a:	22 27       	eor	r18, r18
    663c:	33 27       	eor	r19, r19
    663e:	a9 01       	movw	r20, r18
    6640:	28 19       	sub	r18, r8
    6642:	39 09       	sbc	r19, r9
    6644:	4a 09       	sbc	r20, r10
    6646:	5b 09       	sbc	r21, r11
    6648:	35 d6       	rcall	.+3178   	; 0x72b4 <__muluhisi3>
    664a:	60 93 13 2e 	sts	0x2E13, r22
    664e:	70 93 14 2e 	sts	0x2E14, r23
    6652:	80 93 15 2e 	sts	0x2E15, r24
    6656:	90 93 16 2e 	sts	0x2E16, r25
    665a:	60 91 7d 32 	lds	r22, 0x327D
    665e:	70 91 7e 32 	lds	r23, 0x327E
    6662:	80 91 7f 32 	lds	r24, 0x327F
    6666:	90 91 80 32 	lds	r25, 0x3280
    666a:	a8 01       	movw	r20, r16
    666c:	97 01       	movw	r18, r14
    666e:	c3 d5       	rcall	.+2950   	; 0x71f6 <__mulsi3>
    6670:	28 e6       	ldi	r18, 0x68	; 104
    6672:	31 e0       	ldi	r19, 0x01	; 1
    6674:	40 e0       	ldi	r20, 0x00	; 0
    6676:	50 e0       	ldi	r21, 0x00	; 0
    6678:	e0 d5       	rcall	.+3008   	; 0x723a <__udivmodsi4>
    667a:	20 93 00 20 	sts	0x2000, r18
    667e:	30 93 01 20 	sts	0x2001, r19
    6682:	40 93 02 20 	sts	0x2002, r20
    6686:	50 93 03 20 	sts	0x2003, r21
    668a:	82 e0       	ldi	r24, 0x02	; 2
    668c:	80 93 66 29 	sts	0x2966, r24
    6690:	1f 91       	pop	r17
    6692:	0f 91       	pop	r16
    6694:	ff 90       	pop	r15
    6696:	ef 90       	pop	r14
    6698:	bf 90       	pop	r11
    669a:	af 90       	pop	r10
    669c:	9f 90       	pop	r9
    669e:	8f 90       	pop	r8
    66a0:	08 95       	ret

000066a2 <idi_unazad>:
    66a2:	8f 92       	push	r8
    66a4:	9f 92       	push	r9
    66a6:	af 92       	push	r10
    66a8:	bf 92       	push	r11
    66aa:	ef 92       	push	r14
    66ac:	ff 92       	push	r15
    66ae:	0f 93       	push	r16
    66b0:	1f 93       	push	r17
    66b2:	49 01       	movw	r8, r18
    66b4:	5a 01       	movw	r10, r20
    66b6:	a0 91 08 2e 	lds	r26, 0x2E08
    66ba:	b0 91 09 2e 	lds	r27, 0x2E09
    66be:	22 27       	eor	r18, r18
    66c0:	33 27       	eor	r19, r19
    66c2:	a9 01       	movw	r20, r18
    66c4:	26 1b       	sub	r18, r22
    66c6:	37 0b       	sbc	r19, r23
    66c8:	48 0b       	sbc	r20, r24
    66ca:	59 0b       	sbc	r21, r25
    66cc:	f3 d5       	rcall	.+3046   	; 0x72b4 <__muluhisi3>
    66ce:	60 93 b6 24 	sts	0x24B6, r22
    66d2:	70 93 b7 24 	sts	0x24B7, r23
    66d6:	80 93 b8 24 	sts	0x24B8, r24
    66da:	90 93 b9 24 	sts	0x24B9, r25
    66de:	a0 91 08 2e 	lds	r26, 0x2E08
    66e2:	b0 91 09 2e 	lds	r27, 0x2E09
    66e6:	22 27       	eor	r18, r18
    66e8:	33 27       	eor	r19, r19
    66ea:	a9 01       	movw	r20, r18
    66ec:	28 19       	sub	r18, r8
    66ee:	39 09       	sbc	r19, r9
    66f0:	4a 09       	sbc	r20, r10
    66f2:	5b 09       	sbc	r21, r11
    66f4:	df d5       	rcall	.+3006   	; 0x72b4 <__muluhisi3>
    66f6:	60 93 13 2e 	sts	0x2E13, r22
    66fa:	70 93 14 2e 	sts	0x2E14, r23
    66fe:	80 93 15 2e 	sts	0x2E15, r24
    6702:	90 93 16 2e 	sts	0x2E16, r25
    6706:	60 91 7d 32 	lds	r22, 0x327D
    670a:	70 91 7e 32 	lds	r23, 0x327E
    670e:	80 91 7f 32 	lds	r24, 0x327F
    6712:	90 91 80 32 	lds	r25, 0x3280
    6716:	a8 01       	movw	r20, r16
    6718:	97 01       	movw	r18, r14
    671a:	6d d5       	rcall	.+2778   	; 0x71f6 <__mulsi3>
    671c:	28 e6       	ldi	r18, 0x68	; 104
    671e:	31 e0       	ldi	r19, 0x01	; 1
    6720:	40 e0       	ldi	r20, 0x00	; 0
    6722:	50 e0       	ldi	r21, 0x00	; 0
    6724:	8a d5       	rcall	.+2836   	; 0x723a <__udivmodsi4>
    6726:	20 93 00 20 	sts	0x2000, r18
    672a:	30 93 01 20 	sts	0x2001, r19
    672e:	40 93 02 20 	sts	0x2002, r20
    6732:	50 93 03 20 	sts	0x2003, r21
    6736:	81 e0       	ldi	r24, 0x01	; 1
    6738:	80 93 66 29 	sts	0x2966, r24
    673c:	1f 91       	pop	r17
    673e:	0f 91       	pop	r16
    6740:	ff 90       	pop	r15
    6742:	ef 90       	pop	r14
    6744:	bf 90       	pop	r11
    6746:	af 90       	pop	r10
    6748:	9f 90       	pop	r9
    674a:	8f 90       	pop	r8
    674c:	08 95       	ret

0000674e <sendChar>:
    674e:	80 93 a0 0a 	sts	0x0AA0, r24
    6752:	e0 ea       	ldi	r30, 0xA0	; 160
    6754:	fa e0       	ldi	r31, 0x0A	; 10
    6756:	81 81       	ldd	r24, Z+1	; 0x01
    6758:	85 ff       	sbrs	r24, 5
    675a:	fd cf       	rjmp	.-6      	; 0x6756 <sendChar+0x8>
    675c:	08 95       	ret

0000675e <sendMsg>:
    675e:	cf 93       	push	r28
    6760:	df 93       	push	r29
    6762:	ec 01       	movw	r28, r24
    6764:	88 81       	ld	r24, Y
    6766:	88 23       	and	r24, r24
    6768:	29 f0       	breq	.+10     	; 0x6774 <sendMsg+0x16>
    676a:	21 96       	adiw	r28, 0x01	; 1
    676c:	f0 df       	rcall	.-32     	; 0x674e <sendChar>
    676e:	89 91       	ld	r24, Y+
    6770:	81 11       	cpse	r24, r1
    6772:	fc cf       	rjmp	.-8      	; 0x676c <sendMsg+0xe>
    6774:	df 91       	pop	r29
    6776:	cf 91       	pop	r28
    6778:	08 95       	ret

0000677a <__vector_110>:
    677a:	1f 92       	push	r1
    677c:	0f 92       	push	r0
    677e:	0f b6       	in	r0, 0x3f	; 63
    6780:	0f 92       	push	r0
    6782:	11 24       	eor	r1, r1
    6784:	08 b6       	in	r0, 0x38	; 56
    6786:	0f 92       	push	r0
    6788:	18 be       	out	0x38, r1	; 56
    678a:	0b b6       	in	r0, 0x3b	; 59
    678c:	0f 92       	push	r0
    678e:	1b be       	out	0x3b, r1	; 59
    6790:	8f 93       	push	r24
    6792:	ef 93       	push	r30
    6794:	ff 93       	push	r31
    6796:	e0 ea       	ldi	r30, 0xA0	; 160
    6798:	f6 e0       	ldi	r31, 0x06	; 6
    679a:	84 81       	ldd	r24, Z+4	; 0x04
    679c:	81 60       	ori	r24, 0x01	; 1
    679e:	84 83       	std	Z+4, r24	; 0x04
    67a0:	ff 91       	pop	r31
    67a2:	ef 91       	pop	r30
    67a4:	8f 91       	pop	r24
    67a6:	0f 90       	pop	r0
    67a8:	0b be       	out	0x3b, r0	; 59
    67aa:	0f 90       	pop	r0
    67ac:	08 be       	out	0x38, r0	; 56
    67ae:	0f 90       	pop	r0
    67b0:	0f be       	out	0x3f, r0	; 63
    67b2:	0f 90       	pop	r0
    67b4:	1f 90       	pop	r1
    67b6:	18 95       	reti

000067b8 <__vector_108>:
    67b8:	1f 92       	push	r1
    67ba:	0f 92       	push	r0
    67bc:	0f b6       	in	r0, 0x3f	; 63
    67be:	0f 92       	push	r0
    67c0:	11 24       	eor	r1, r1
    67c2:	08 b6       	in	r0, 0x38	; 56
    67c4:	0f 92       	push	r0
    67c6:	18 be       	out	0x38, r1	; 56
    67c8:	0b b6       	in	r0, 0x3b	; 59
    67ca:	0f 92       	push	r0
    67cc:	1b be       	out	0x3b, r1	; 59
    67ce:	8f 93       	push	r24
    67d0:	ef 93       	push	r30
    67d2:	ff 93       	push	r31
    67d4:	e0 ea       	ldi	r30, 0xA0	; 160
    67d6:	f6 e0       	ldi	r31, 0x06	; 6
    67d8:	84 81       	ldd	r24, Z+4	; 0x04
    67da:	8e 7f       	andi	r24, 0xFE	; 254
    67dc:	84 83       	std	Z+4, r24	; 0x04
    67de:	ff 91       	pop	r31
    67e0:	ef 91       	pop	r30
    67e2:	8f 91       	pop	r24
    67e4:	0f 90       	pop	r0
    67e6:	0b be       	out	0x3b, r0	; 59
    67e8:	0f 90       	pop	r0
    67ea:	08 be       	out	0x38, r0	; 56
    67ec:	0f 90       	pop	r0
    67ee:	0f be       	out	0x3f, r0	; 63
    67f0:	0f 90       	pop	r0
    67f2:	1f 90       	pop	r1
    67f4:	18 95       	reti

000067f6 <demo_3>:
 
 
  void demo_3(void)
  {
    67f6:	ef 92       	push	r14
    67f8:	ff 92       	push	r15
    67fa:	0f 93       	push	r16
    67fc:	1f 93       	push	r17
	  
	  switch(step1)
    67fe:	80 91 11 20 	lds	r24, 0x2011
    6802:	81 30       	cpi	r24, 0x01	; 1
    6804:	a9 f1       	breq	.+106    	; 0x6870 <demo_3+0x7a>
    6806:	38 f0       	brcs	.+14     	; 0x6816 <demo_3+0x20>
    6808:	82 30       	cpi	r24, 0x02	; 2
    680a:	09 f4       	brne	.+2      	; 0x680e <demo_3+0x18>
    680c:	60 c0       	rjmp	.+192    	; 0x68ce <demo_3+0xd8>
    680e:	83 30       	cpi	r24, 0x03	; 3
    6810:	09 f0       	breq	.+2      	; 0x6814 <demo_3+0x1e>
    6812:	b4 c0       	rjmp	.+360    	; 0x697c <demo_3+0x186>
    6814:	89 c0       	rjmp	.+274    	; 0x6928 <demo_3+0x132>
	  {
		  case 0:
		  if (sys_time>333)
    6816:	80 91 cc 24 	lds	r24, 0x24CC
    681a:	90 91 cd 24 	lds	r25, 0x24CD
    681e:	8e 34       	cpi	r24, 0x4E	; 78
    6820:	91 40       	sbci	r25, 0x01	; 1
    6822:	08 f4       	brcc	.+2      	; 0x6826 <demo_3+0x30>
    6824:	ab c0       	rjmp	.+342    	; 0x697c <demo_3+0x186>
		  {
			  if(flag1 == 0){
    6826:	80 91 12 20 	lds	r24, 0x2012
    682a:	81 11       	cpse	r24, r1
    682c:	13 c0       	rjmp	.+38     	; 0x6854 <demo_3+0x5e>
				  stigao_flag = 0;
    682e:	10 92 06 20 	sts	0x2006, r1
				  flag1 = 1;
    6832:	81 e0       	ldi	r24, 0x01	; 1
    6834:	80 93 12 20 	sts	0x2012, r24
				  idi_pravo(500,0,0);
    6838:	e1 2c       	mov	r14, r1
    683a:	f1 2c       	mov	r15, r1
    683c:	87 01       	movw	r16, r14
    683e:	20 e0       	ldi	r18, 0x00	; 0
    6840:	30 e0       	ldi	r19, 0x00	; 0
    6842:	a9 01       	movw	r20, r18
    6844:	64 ef       	ldi	r22, 0xF4	; 244
    6846:	71 e0       	ldi	r23, 0x01	; 1
    6848:	80 e0       	ldi	r24, 0x00	; 0
    684a:	90 e0       	ldi	r25, 0x00	; 0
    684c:	d4 de       	rcall	.-600    	; 0x65f6 <idi_pravo>
				  // zadaj_X_Y(-500,0,2);
				  sendChar('0');
    684e:	80 e3       	ldi	r24, 0x30	; 48
    6850:	7e df       	rcall	.-260    	; 0x674e <sendChar>
    6852:	94 c0       	rjmp	.+296    	; 0x697c <demo_3+0x186>
			  }
			  else if(stigao_flag == 1){
    6854:	80 91 06 20 	lds	r24, 0x2006
    6858:	81 30       	cpi	r24, 0x01	; 1
    685a:	09 f0       	breq	.+2      	; 0x685e <demo_3+0x68>
    685c:	8f c0       	rjmp	.+286    	; 0x697c <demo_3+0x186>
				  step1++;
    685e:	80 93 11 20 	sts	0x2011, r24
				  flag1 = 0;
    6862:	10 92 12 20 	sts	0x2012, r1
				  sys_time=0;
    6866:	10 92 cc 24 	sts	0x24CC, r1
    686a:	10 92 cd 24 	sts	0x24CD, r1
    686e:	86 c0       	rjmp	.+268    	; 0x697c <demo_3+0x186>
			  }
		  }
		  break;
		  
		  case 1:
		  if (sys_time>666)
    6870:	80 91 cc 24 	lds	r24, 0x24CC
    6874:	90 91 cd 24 	lds	r25, 0x24CD
    6878:	8b 39       	cpi	r24, 0x9B	; 155
    687a:	92 40       	sbci	r25, 0x02	; 2
    687c:	08 f4       	brcc	.+2      	; 0x6880 <demo_3+0x8a>
    687e:	7e c0       	rjmp	.+252    	; 0x697c <demo_3+0x186>
		  {
			  if(flag1 == 0){
    6880:	80 91 12 20 	lds	r24, 0x2012
    6884:	81 11       	cpse	r24, r1
    6886:	14 c0       	rjmp	.+40     	; 0x68b0 <demo_3+0xba>
				  stigao_flag = 0;
    6888:	10 92 06 20 	sts	0x2006, r1
				  flag1 = 1;
    688c:	81 e0       	ldi	r24, 0x01	; 1
    688e:	80 93 12 20 	sts	0x2012, r24
				  idi_unazad(500,500,0);
    6892:	e1 2c       	mov	r14, r1
    6894:	f1 2c       	mov	r15, r1
    6896:	87 01       	movw	r16, r14
    6898:	24 ef       	ldi	r18, 0xF4	; 244
    689a:	31 e0       	ldi	r19, 0x01	; 1
    689c:	40 e0       	ldi	r20, 0x00	; 0
    689e:	50 e0       	ldi	r21, 0x00	; 0
    68a0:	64 ef       	ldi	r22, 0xF4	; 244
    68a2:	71 e0       	ldi	r23, 0x01	; 1
    68a4:	80 e0       	ldi	r24, 0x00	; 0
    68a6:	90 e0       	ldi	r25, 0x00	; 0
    68a8:	fc de       	rcall	.-520    	; 0x66a2 <idi_unazad>
				  // zadaj_X_Y(-500,0,2);
				  sendChar('1');
    68aa:	81 e3       	ldi	r24, 0x31	; 49
    68ac:	50 df       	rcall	.-352    	; 0x674e <sendChar>
    68ae:	66 c0       	rjmp	.+204    	; 0x697c <demo_3+0x186>
			  }
			  else if(stigao_flag == 1){
    68b0:	80 91 06 20 	lds	r24, 0x2006
    68b4:	81 30       	cpi	r24, 0x01	; 1
    68b6:	09 f0       	breq	.+2      	; 0x68ba <demo_3+0xc4>
    68b8:	61 c0       	rjmp	.+194    	; 0x697c <demo_3+0x186>
				  step1++;
    68ba:	82 e0       	ldi	r24, 0x02	; 2
    68bc:	80 93 11 20 	sts	0x2011, r24
				  flag1 = 0;
    68c0:	10 92 12 20 	sts	0x2012, r1
				  sys_time=0;
    68c4:	10 92 cc 24 	sts	0x24CC, r1
    68c8:	10 92 cd 24 	sts	0x24CD, r1
    68cc:	57 c0       	rjmp	.+174    	; 0x697c <demo_3+0x186>
			  }
		  }
		  break;
		  
		   case 2:
		   if (sys_time>666)
    68ce:	80 91 cc 24 	lds	r24, 0x24CC
    68d2:	90 91 cd 24 	lds	r25, 0x24CD
    68d6:	8b 39       	cpi	r24, 0x9B	; 155
    68d8:	92 40       	sbci	r25, 0x02	; 2
    68da:	08 f4       	brcc	.+2      	; 0x68de <demo_3+0xe8>
    68dc:	4f c0       	rjmp	.+158    	; 0x697c <demo_3+0x186>
		   {
			   if(flag1 == 0){
    68de:	80 91 12 20 	lds	r24, 0x2012
    68e2:	81 11       	cpse	r24, r1
    68e4:	13 c0       	rjmp	.+38     	; 0x690c <demo_3+0x116>
				   stigao_flag = 0;
    68e6:	10 92 06 20 	sts	0x2006, r1
				   flag1 = 1;
    68ea:	81 e0       	ldi	r24, 0x01	; 1
    68ec:	80 93 12 20 	sts	0x2012, r24
				   idi_unazad(0,500,0);
    68f0:	e1 2c       	mov	r14, r1
    68f2:	f1 2c       	mov	r15, r1
    68f4:	87 01       	movw	r16, r14
    68f6:	24 ef       	ldi	r18, 0xF4	; 244
    68f8:	31 e0       	ldi	r19, 0x01	; 1
    68fa:	40 e0       	ldi	r20, 0x00	; 0
    68fc:	50 e0       	ldi	r21, 0x00	; 0
    68fe:	60 e0       	ldi	r22, 0x00	; 0
    6900:	70 e0       	ldi	r23, 0x00	; 0
    6902:	cb 01       	movw	r24, r22
    6904:	ce de       	rcall	.-612    	; 0x66a2 <idi_unazad>
				   // zadaj_X_Y(-500,0,2);
				   sendChar('2');
    6906:	82 e3       	ldi	r24, 0x32	; 50
    6908:	22 df       	rcall	.-444    	; 0x674e <sendChar>
    690a:	38 c0       	rjmp	.+112    	; 0x697c <demo_3+0x186>
			   }
			   else if(stigao_flag == 1){
    690c:	80 91 06 20 	lds	r24, 0x2006
    6910:	81 30       	cpi	r24, 0x01	; 1
    6912:	a1 f5       	brne	.+104    	; 0x697c <demo_3+0x186>
				   step1++;
    6914:	83 e0       	ldi	r24, 0x03	; 3
    6916:	80 93 11 20 	sts	0x2011, r24
				   flag1 = 0;
    691a:	10 92 12 20 	sts	0x2012, r1
				   sys_time=0;
    691e:	10 92 cc 24 	sts	0x24CC, r1
    6922:	10 92 cd 24 	sts	0x24CD, r1
    6926:	2a c0       	rjmp	.+84     	; 0x697c <demo_3+0x186>
			   }
		   }
		   break;
		   
		    case 3:
		    if (sys_time>666)
    6928:	80 91 cc 24 	lds	r24, 0x24CC
    692c:	90 91 cd 24 	lds	r25, 0x24CD
    6930:	8b 39       	cpi	r24, 0x9B	; 155
    6932:	92 40       	sbci	r25, 0x02	; 2
    6934:	18 f1       	brcs	.+70     	; 0x697c <demo_3+0x186>
		    {
			    if(flag1 == 0){
    6936:	80 91 12 20 	lds	r24, 0x2012
    693a:	81 11       	cpse	r24, r1
    693c:	12 c0       	rjmp	.+36     	; 0x6962 <demo_3+0x16c>
				    stigao_flag = 0;
    693e:	10 92 06 20 	sts	0x2006, r1
				    flag1 = 1;
    6942:	81 e0       	ldi	r24, 0x01	; 1
    6944:	80 93 12 20 	sts	0x2012, r24
				    idi_unazad(0,0,0);
    6948:	e1 2c       	mov	r14, r1
    694a:	f1 2c       	mov	r15, r1
    694c:	87 01       	movw	r16, r14
    694e:	20 e0       	ldi	r18, 0x00	; 0
    6950:	30 e0       	ldi	r19, 0x00	; 0
    6952:	a9 01       	movw	r20, r18
    6954:	60 e0       	ldi	r22, 0x00	; 0
    6956:	70 e0       	ldi	r23, 0x00	; 0
    6958:	cb 01       	movw	r24, r22
    695a:	a3 de       	rcall	.-698    	; 0x66a2 <idi_unazad>
				    // zadaj_X_Y(-500,0,2);
				    sendChar('3');
    695c:	83 e3       	ldi	r24, 0x33	; 51
    695e:	f7 de       	rcall	.-530    	; 0x674e <sendChar>
    6960:	0d c0       	rjmp	.+26     	; 0x697c <demo_3+0x186>
			    }
			    else if(stigao_flag == 1){
    6962:	80 91 06 20 	lds	r24, 0x2006
    6966:	81 30       	cpi	r24, 0x01	; 1
    6968:	49 f4       	brne	.+18     	; 0x697c <demo_3+0x186>
				    step1++;
    696a:	84 e0       	ldi	r24, 0x04	; 4
    696c:	80 93 11 20 	sts	0x2011, r24
				    flag1 = 0;
    6970:	10 92 12 20 	sts	0x2012, r1
				    sys_time=0;
    6974:	10 92 cc 24 	sts	0x24CC, r1
    6978:	10 92 cd 24 	sts	0x24CD, r1
		  default:
		  break;
	  }

	  
  }
    697c:	1f 91       	pop	r17
    697e:	0f 91       	pop	r16
    6980:	ff 90       	pop	r15
    6982:	ef 90       	pop	r14
    6984:	08 95       	ret

00006986 <USART_InterruptDriver_Initialize>:
	uint8_t tempHead = usart_data->buffer.RX_Head;
	uint8_t tempTail = usart_data->buffer.RX_Tail;

	// There are data left in the buffer unless Head and Tail are equal.  
	return (tempHead != tempTail);
}
    6986:	fc 01       	movw	r30, r24
    6988:	60 83       	st	Z, r22
    698a:	71 83       	std	Z+1, r23	; 0x01
    698c:	42 83       	std	Z+2, r20	; 0x02
    698e:	ec 57       	subi	r30, 0x7C	; 124
    6990:	fe 4f       	sbci	r31, 0xFE	; 254
    6992:	10 82       	st	Z, r1
    6994:	fc 01       	movw	r30, r24
    6996:	ed 57       	subi	r30, 0x7D	; 125
    6998:	fe 4f       	sbci	r31, 0xFE	; 254
    699a:	10 82       	st	Z, r1
    699c:	fc 01       	movw	r30, r24
    699e:	ea 57       	subi	r30, 0x7A	; 122
    69a0:	fe 4f       	sbci	r31, 0xFE	; 254
    69a2:	10 82       	st	Z, r1
    69a4:	fc 01       	movw	r30, r24
    69a6:	eb 57       	subi	r30, 0x7B	; 123
    69a8:	fe 4f       	sbci	r31, 0xFE	; 254
    69aa:	10 82       	st	Z, r1
    69ac:	08 95       	ret

000069ae <USART_TXBuffer_FreeSpace>:
    69ae:	fc 01       	movw	r30, r24
    69b0:	eb 57       	subi	r30, 0x7B	; 123
    69b2:	fe 4f       	sbci	r31, 0xFE	; 254
    69b4:	20 81       	ld	r18, Z
    69b6:	fc 01       	movw	r30, r24
    69b8:	ea 57       	subi	r30, 0x7A	; 122
    69ba:	fe 4f       	sbci	r31, 0xFE	; 254
    69bc:	90 81       	ld	r25, Z
    69be:	2f 5f       	subi	r18, 0xFF	; 255
    69c0:	81 e0       	ldi	r24, 0x01	; 1
    69c2:	29 13       	cpse	r18, r25
    69c4:	01 c0       	rjmp	.+2      	; 0x69c8 <USART_TXBuffer_FreeSpace+0x1a>
    69c6:	80 e0       	ldi	r24, 0x00	; 0
    69c8:	08 95       	ret

000069ca <USART_TXBuffer_PutByte>:
    69ca:	1f 93       	push	r17
    69cc:	cf 93       	push	r28
    69ce:	df 93       	push	r29
    69d0:	ec 01       	movw	r28, r24
    69d2:	16 2f       	mov	r17, r22
    69d4:	ec df       	rcall	.-40     	; 0x69ae <USART_TXBuffer_FreeSpace>
    69d6:	88 23       	and	r24, r24
    69d8:	99 f0       	breq	.+38     	; 0x6a00 <USART_TXBuffer_PutByte+0x36>
    69da:	fe 01       	movw	r30, r28
    69dc:	eb 57       	subi	r30, 0x7B	; 123
    69de:	fe 4f       	sbci	r31, 0xFE	; 254
    69e0:	90 81       	ld	r25, Z
    69e2:	de 01       	movw	r26, r28
    69e4:	a9 0f       	add	r26, r25
    69e6:	b1 1d       	adc	r27, r1
    69e8:	ad 57       	subi	r26, 0x7D	; 125
    69ea:	bf 4f       	sbci	r27, 0xFF	; 255
    69ec:	1c 93       	st	X, r17
    69ee:	9f 5f       	subi	r25, 0xFF	; 255
    69f0:	90 83       	st	Z, r25
    69f2:	e8 81       	ld	r30, Y
    69f4:	f9 81       	ldd	r31, Y+1	; 0x01
    69f6:	93 81       	ldd	r25, Z+3	; 0x03
    69f8:	9c 7f       	andi	r25, 0xFC	; 252
    69fa:	2a 81       	ldd	r18, Y+2	; 0x02
    69fc:	92 2b       	or	r25, r18
    69fe:	93 83       	std	Z+3, r25	; 0x03
    6a00:	df 91       	pop	r29
    6a02:	cf 91       	pop	r28
    6a04:	1f 91       	pop	r17
    6a06:	08 95       	ret

00006a08 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    6a08:	fc 01       	movw	r30, r24
    6a0a:	ec 57       	subi	r30, 0x7C	; 124
    6a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    6a0e:	20 81       	ld	r18, Z
    6a10:	dc 01       	movw	r26, r24
    6a12:	a2 0f       	add	r26, r18
    6a14:	b1 1d       	adc	r27, r1
    6a16:	13 96       	adiw	r26, 0x03	; 3
    6a18:	8c 91       	ld	r24, X

	// Advance buffer tail.  
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    6a1a:	90 81       	ld	r25, Z
    6a1c:	9f 5f       	subi	r25, 0xFF	; 255
    6a1e:	9f 77       	andi	r25, 0x7F	; 127
    6a20:	90 83       	st	Z, r25

	return ans;
}
    6a22:	08 95       	ret

00006a24 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	// Advance buffer head.  
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    6a24:	fc 01       	movw	r30, r24
    6a26:	ed 57       	subi	r30, 0x7D	; 125
    6a28:	fe 4f       	sbci	r31, 0xFE	; 254
    6a2a:	20 81       	ld	r18, Z
    6a2c:	2f 5f       	subi	r18, 0xFF	; 255
    6a2e:	2f 77       	andi	r18, 0x7F	; 127

	// Check for overflow.  
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    6a30:	fc 01       	movw	r30, r24
    6a32:	ec 57       	subi	r30, 0x7C	; 124
    6a34:	fe 4f       	sbci	r31, 0xFE	; 254
    6a36:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    6a38:	dc 01       	movw	r26, r24
    6a3a:	ed 91       	ld	r30, X+
    6a3c:	fc 91       	ld	r31, X
    6a3e:	11 97       	sbiw	r26, 0x01	; 1
    6a40:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    6a42:	23 17       	cp	r18, r19
    6a44:	59 f0       	breq	.+22     	; 0x6a5c <USART_RXComplete+0x38>
	  	ans = false;		//stigli su svi podaci
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    6a46:	fc 01       	movw	r30, r24
    6a48:	ed 57       	subi	r30, 0x7D	; 125
    6a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    6a4c:	30 81       	ld	r19, Z
    6a4e:	a3 0f       	add	r26, r19
    6a50:	b1 1d       	adc	r27, r1
    6a52:	13 96       	adiw	r26, 0x03	; 3
    6a54:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    6a56:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;		//stigli su svi podaci
	}else{
		ans = true;
    6a58:	81 e0       	ldi	r24, 0x01	; 1
    6a5a:	08 95       	ret
	// Check for overflow.  
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;		//stigli su svi podaci
    6a5c:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    6a5e:	08 95       	ret

00006a60 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    6a60:	cf 93       	push	r28
    6a62:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	// Check if all data is transmitted. 
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    6a64:	fc 01       	movw	r30, r24
    6a66:	ea 57       	subi	r30, 0x7A	; 122
    6a68:	fe 4f       	sbci	r31, 0xFE	; 254
    6a6a:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    6a6c:	fc 01       	movw	r30, r24
    6a6e:	eb 57       	subi	r30, 0x7B	; 123
    6a70:	fe 4f       	sbci	r31, 0xFE	; 254
    6a72:	30 81       	ld	r19, Z
    6a74:	32 13       	cpse	r19, r18
    6a76:	07 c0       	rjmp	.+14     	; 0x6a86 <USART_DataRegEmpty+0x26>
	    // Disable DRE interrupts.
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    6a78:	dc 01       	movw	r26, r24
    6a7a:	ed 91       	ld	r30, X+
    6a7c:	fc 91       	ld	r31, X
    6a7e:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    6a80:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    6a82:	83 83       	std	Z+3, r24	; 0x03
    6a84:	11 c0       	rjmp	.+34     	; 0x6aa8 <USART_DataRegEmpty+0x48>

	}else{
		// Start transmitting. 
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    6a86:	fc 01       	movw	r30, r24
    6a88:	ea 57       	subi	r30, 0x7A	; 122
    6a8a:	fe 4f       	sbci	r31, 0xFE	; 254
    6a8c:	20 81       	ld	r18, Z
    6a8e:	dc 01       	movw	r26, r24
    6a90:	a2 0f       	add	r26, r18
    6a92:	b1 1d       	adc	r27, r1
    6a94:	ad 57       	subi	r26, 0x7D	; 125
    6a96:	bf 4f       	sbci	r27, 0xFF	; 255
    6a98:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    6a9a:	ec 01       	movw	r28, r24
    6a9c:	a8 81       	ld	r26, Y
    6a9e:	b9 81       	ldd	r27, Y+1	; 0x01
    6aa0:	2c 93       	st	X, r18

		// Advance buffer tail. 
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    6aa2:	80 81       	ld	r24, Z
    6aa4:	8f 5f       	subi	r24, 0xFF	; 255
    6aa6:	80 83       	st	Z, r24
	}
}
    6aa8:	df 91       	pop	r29
    6aaa:	cf 91       	pop	r28
    6aac:	08 95       	ret

00006aae <main>:
int main(void)
{
	int msg_counter = 0;
	int servo_counter = 0;
	//char servo_flag = 0;
	Podesi_Oscilator();					//podesavanje oscilatora
    6aae:	0e 94 41 03 	call	0x682	; 0x682 <Podesi_Oscilator>
	Podesi_Parametre_Robota();			//podesavanje broja impulsa u krugu
    6ab2:	0e 94 b0 01 	call	0x360	; 0x360 <Podesi_Parametre_Robota>
	Podesi_PID_Pojacanja();				//podesavanje pojacanja PID regulatora
    6ab6:	0e 94 4c 02 	call	0x498	; 0x498 <Podesi_PID_Pojacanja>
	PodesiADC();						//podesavanje AD konvertora
    6aba:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <PodesiADC>
	Podesi_Tajmere();					//podesavanje tajmera
    6abe:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Podesi_Tajmere>
	Podesi_QDEC();						//podesavanje kvadraturnih dekodera
    6ac2:	0e 94 c3 02 	call	0x586	; 0x586 <Podesi_QDEC>
	Podesi_PWM();						//podesavanje PWM signala za motore i servoe
    6ac6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <Podesi_PWM>
	Podesi_Interapt();					//podesavanje interapt prioriteta
    6aca:	0e 94 31 03 	call	0x662	; 0x662 <Podesi_Interapt>
	Podesi_Pinove();					//podesavanje I/O pinova
    6ace:	0e 94 f7 03 	call	0x7ee	; 0x7ee <Podesi_Pinove>
	Podesi_USART_Komunikaciju();		//podesavanje komunikacije
    6ad2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Podesi_USART_Komunikaciju>
	
	//inicijalizuj_servo_tajmer_20ms();
	//pomeri_servo_1(0);
	//sendChar('k');
	//_delay_ms(1000);					//cekanje da se stabilizuje sistem
	nuliraj_poziciju_robota();
    6ad6:	31 dd       	rcall	.-1438   	; 0x653a <nuliraj_poziciju_robota>
			//PID_brzinski se poziva direktno u interaptu sistemskog tajmera TCE1!
		}
		
		//PROGRAMMING MODE - kod koji ako je pritisnut CRVENI taster gasi motore
		while(PGM_Mode() == 1){
			set_direct_out = 1;
    6ad8:	c1 e0       	ldi	r28, 0x01	; 1
	//_delay_ms(1000);					//cekanje da se stabilizuje sistem
	nuliraj_poziciju_robota();
	//CheckInputMotorControl();
	while(1)
	{
		demo_3();
    6ada:	8d de       	rcall	.-742    	; 0x67f6 <demo_3>
		
		//Racunanje trenutne pozicije
		if (Rac_tren_poz_sample_counter >= 3){		 //3 x 1.5ms = 4.5ms
    6adc:	80 91 10 20 	lds	r24, 0x2010
    6ae0:	83 30       	cpi	r24, 0x03	; 3
    6ae2:	20 f0       	brcs	.+8      	; 0x6aec <main+0x3e>
			Rac_tren_poz_sample_counter = 0;
    6ae4:	10 92 10 20 	sts	0x2010, r1
			Racunanje_trenutne_pozicije();
    6ae8:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <Racunanje_trenutne_pozicije>
		}
		
		//Korekcija pravca i distance prema cilju
		if(Pracenje_Pravca_sample_counter >= 30){	//30 x 1.5ms = 45ms
    6aec:	80 91 04 20 	lds	r24, 0x2004
    6af0:	8e 31       	cpi	r24, 0x1E	; 30
    6af2:	20 f0       	brcs	.+8      	; 0x6afc <main+0x4e>
			msg_counter++;
			servo_counter++;
			Pracenje_Pravca_sample_counter = 0;
    6af4:	10 92 04 20 	sts	0x2004, r1
			Pracenje_pravca();
    6af8:	0e 94 01 28 	call	0x5002	; 0x5002 <Pracenje_pravca>
		}
		
		//PID regulacija
		if(PID_pozicioni_sample_counter >= 3){		//3 x 1.5ms = 4.5ms
    6afc:	80 91 05 20 	lds	r24, 0x2005
    6b00:	83 30       	cpi	r24, 0x03	; 3
    6b02:	e8 f0       	brcs	.+58     	; 0x6b3e <main+0x90>
			PID_pozicioni_sample_counter = 0;
    6b04:	10 92 05 20 	sts	0x2005, r1
			PID_ugaoni();
    6b08:	0e 94 cd 2c 	call	0x599a	; 0x599a <PID_ugaoni>
			PID_pravolinijski();
    6b0c:	0e 94 6f 2a 	call	0x54de	; 0x54de <PID_pravolinijski>
    6b10:	16 c0       	rjmp	.+44     	; 0x6b3e <main+0x90>
			//PID_brzinski se poziva direktno u interaptu sistemskog tajmera TCE1!
		}
		
		//PROGRAMMING MODE - kod koji ako je pritisnut CRVENI taster gasi motore
		while(PGM_Mode() == 1){
			set_direct_out = 1;
    6b12:	c0 93 89 32 	sts	0x3289, r28
			PID_brzina_L = 0;
    6b16:	10 92 83 2e 	sts	0x2E83, r1
    6b1a:	10 92 84 2e 	sts	0x2E84, r1
			PID_brzina_R = 0;
    6b1e:	10 92 81 2e 	sts	0x2E81, r1
    6b22:	10 92 82 2e 	sts	0x2E82, r1
			sendMsg("PGM_MODE");
    6b26:	87 e0       	ldi	r24, 0x07	; 7
    6b28:	90 e2       	ldi	r25, 0x20	; 32
    6b2a:	19 de       	rcall	.-974    	; 0x675e <sendMsg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6b2c:	2f ef       	ldi	r18, 0xFF	; 255
    6b2e:	82 e5       	ldi	r24, 0x52	; 82
    6b30:	97 e0       	ldi	r25, 0x07	; 7
    6b32:	21 50       	subi	r18, 0x01	; 1
    6b34:	80 40       	sbci	r24, 0x00	; 0
    6b36:	90 40       	sbci	r25, 0x00	; 0
    6b38:	e1 f7       	brne	.-8      	; 0x6b32 <main+0x84>
    6b3a:	00 c0       	rjmp	.+0      	; 0x6b3c <main+0x8e>
    6b3c:	00 00       	nop
			PID_pravolinijski();
			//PID_brzinski se poziva direktno u interaptu sistemskog tajmera TCE1!
		}
		
		//PROGRAMMING MODE - kod koji ako je pritisnut CRVENI taster gasi motore
		while(PGM_Mode() == 1){
    6b3e:	c2 dc       	rcall	.-1660   	; 0x64c4 <PGM_Mode>
    6b40:	01 97       	sbiw	r24, 0x01	; 1
    6b42:	39 f3       	breq	.-50     	; 0x6b12 <main+0x64>
			PID_brzina_L = 0;
			PID_brzina_R = 0;
			sendMsg("PGM_MODE");
			_delay_ms(300);
		}
		set_direct_out = 0;
    6b44:	10 92 89 32 	sts	0x3289, r1
		
	}//while
    6b48:	c8 cf       	rjmp	.-112    	; 0x6ada <main+0x2c>

00006b4a <__subsf3>:
    6b4a:	50 58       	subi	r21, 0x80	; 128

00006b4c <__addsf3>:
    6b4c:	bb 27       	eor	r27, r27
    6b4e:	aa 27       	eor	r26, r26
    6b50:	0e d0       	rcall	.+28     	; 0x6b6e <__addsf3x>
    6b52:	27 c2       	rjmp	.+1102   	; 0x6fa2 <__fp_round>
    6b54:	f0 d1       	rcall	.+992    	; 0x6f36 <__fp_pscA>
    6b56:	30 f0       	brcs	.+12     	; 0x6b64 <__addsf3+0x18>
    6b58:	f5 d1       	rcall	.+1002   	; 0x6f44 <__fp_pscB>
    6b5a:	20 f0       	brcs	.+8      	; 0x6b64 <__addsf3+0x18>
    6b5c:	31 f4       	brne	.+12     	; 0x6b6a <__addsf3+0x1e>
    6b5e:	9f 3f       	cpi	r25, 0xFF	; 255
    6b60:	11 f4       	brne	.+4      	; 0x6b66 <__addsf3+0x1a>
    6b62:	1e f4       	brtc	.+6      	; 0x6b6a <__addsf3+0x1e>
    6b64:	c0 c1       	rjmp	.+896    	; 0x6ee6 <__fp_nan>
    6b66:	0e f4       	brtc	.+2      	; 0x6b6a <__addsf3+0x1e>
    6b68:	e0 95       	com	r30
    6b6a:	e7 fb       	bst	r30, 7
    6b6c:	b6 c1       	rjmp	.+876    	; 0x6eda <__fp_inf>

00006b6e <__addsf3x>:
    6b6e:	e9 2f       	mov	r30, r25
    6b70:	3a d2       	rcall	.+1140   	; 0x6fe6 <__fp_split3>
    6b72:	80 f3       	brcs	.-32     	; 0x6b54 <__addsf3+0x8>
    6b74:	ba 17       	cp	r27, r26
    6b76:	62 07       	cpc	r22, r18
    6b78:	73 07       	cpc	r23, r19
    6b7a:	84 07       	cpc	r24, r20
    6b7c:	95 07       	cpc	r25, r21
    6b7e:	18 f0       	brcs	.+6      	; 0x6b86 <__addsf3x+0x18>
    6b80:	71 f4       	brne	.+28     	; 0x6b9e <__addsf3x+0x30>
    6b82:	9e f5       	brtc	.+102    	; 0x6bea <__addsf3x+0x7c>
    6b84:	52 c2       	rjmp	.+1188   	; 0x702a <__fp_zero>
    6b86:	0e f4       	brtc	.+2      	; 0x6b8a <__addsf3x+0x1c>
    6b88:	e0 95       	com	r30
    6b8a:	0b 2e       	mov	r0, r27
    6b8c:	ba 2f       	mov	r27, r26
    6b8e:	a0 2d       	mov	r26, r0
    6b90:	0b 01       	movw	r0, r22
    6b92:	b9 01       	movw	r22, r18
    6b94:	90 01       	movw	r18, r0
    6b96:	0c 01       	movw	r0, r24
    6b98:	ca 01       	movw	r24, r20
    6b9a:	a0 01       	movw	r20, r0
    6b9c:	11 24       	eor	r1, r1
    6b9e:	ff 27       	eor	r31, r31
    6ba0:	59 1b       	sub	r21, r25
    6ba2:	99 f0       	breq	.+38     	; 0x6bca <__addsf3x+0x5c>
    6ba4:	59 3f       	cpi	r21, 0xF9	; 249
    6ba6:	50 f4       	brcc	.+20     	; 0x6bbc <__addsf3x+0x4e>
    6ba8:	50 3e       	cpi	r21, 0xE0	; 224
    6baa:	68 f1       	brcs	.+90     	; 0x6c06 <__addsf3x+0x98>
    6bac:	1a 16       	cp	r1, r26
    6bae:	f0 40       	sbci	r31, 0x00	; 0
    6bb0:	a2 2f       	mov	r26, r18
    6bb2:	23 2f       	mov	r18, r19
    6bb4:	34 2f       	mov	r19, r20
    6bb6:	44 27       	eor	r20, r20
    6bb8:	58 5f       	subi	r21, 0xF8	; 248
    6bba:	f3 cf       	rjmp	.-26     	; 0x6ba2 <__addsf3x+0x34>
    6bbc:	46 95       	lsr	r20
    6bbe:	37 95       	ror	r19
    6bc0:	27 95       	ror	r18
    6bc2:	a7 95       	ror	r26
    6bc4:	f0 40       	sbci	r31, 0x00	; 0
    6bc6:	53 95       	inc	r21
    6bc8:	c9 f7       	brne	.-14     	; 0x6bbc <__addsf3x+0x4e>
    6bca:	7e f4       	brtc	.+30     	; 0x6bea <__addsf3x+0x7c>
    6bcc:	1f 16       	cp	r1, r31
    6bce:	ba 0b       	sbc	r27, r26
    6bd0:	62 0b       	sbc	r22, r18
    6bd2:	73 0b       	sbc	r23, r19
    6bd4:	84 0b       	sbc	r24, r20
    6bd6:	ba f0       	brmi	.+46     	; 0x6c06 <__addsf3x+0x98>
    6bd8:	91 50       	subi	r25, 0x01	; 1
    6bda:	a1 f0       	breq	.+40     	; 0x6c04 <__addsf3x+0x96>
    6bdc:	ff 0f       	add	r31, r31
    6bde:	bb 1f       	adc	r27, r27
    6be0:	66 1f       	adc	r22, r22
    6be2:	77 1f       	adc	r23, r23
    6be4:	88 1f       	adc	r24, r24
    6be6:	c2 f7       	brpl	.-16     	; 0x6bd8 <__addsf3x+0x6a>
    6be8:	0e c0       	rjmp	.+28     	; 0x6c06 <__addsf3x+0x98>
    6bea:	ba 0f       	add	r27, r26
    6bec:	62 1f       	adc	r22, r18
    6bee:	73 1f       	adc	r23, r19
    6bf0:	84 1f       	adc	r24, r20
    6bf2:	48 f4       	brcc	.+18     	; 0x6c06 <__addsf3x+0x98>
    6bf4:	87 95       	ror	r24
    6bf6:	77 95       	ror	r23
    6bf8:	67 95       	ror	r22
    6bfa:	b7 95       	ror	r27
    6bfc:	f7 95       	ror	r31
    6bfe:	9e 3f       	cpi	r25, 0xFE	; 254
    6c00:	08 f0       	brcs	.+2      	; 0x6c04 <__addsf3x+0x96>
    6c02:	b3 cf       	rjmp	.-154    	; 0x6b6a <__addsf3+0x1e>
    6c04:	93 95       	inc	r25
    6c06:	88 0f       	add	r24, r24
    6c08:	08 f0       	brcs	.+2      	; 0x6c0c <__addsf3x+0x9e>
    6c0a:	99 27       	eor	r25, r25
    6c0c:	ee 0f       	add	r30, r30
    6c0e:	97 95       	ror	r25
    6c10:	87 95       	ror	r24
    6c12:	08 95       	ret
    6c14:	90 d1       	rcall	.+800    	; 0x6f36 <__fp_pscA>
    6c16:	58 f0       	brcs	.+22     	; 0x6c2e <__addsf3x+0xc0>
    6c18:	80 e8       	ldi	r24, 0x80	; 128
    6c1a:	91 e0       	ldi	r25, 0x01	; 1
    6c1c:	09 f4       	brne	.+2      	; 0x6c20 <__addsf3x+0xb2>
    6c1e:	9e ef       	ldi	r25, 0xFE	; 254
    6c20:	91 d1       	rcall	.+802    	; 0x6f44 <__fp_pscB>
    6c22:	28 f0       	brcs	.+10     	; 0x6c2e <__addsf3x+0xc0>
    6c24:	40 e8       	ldi	r20, 0x80	; 128
    6c26:	51 e0       	ldi	r21, 0x01	; 1
    6c28:	59 f4       	brne	.+22     	; 0x6c40 <atan2+0xe>
    6c2a:	5e ef       	ldi	r21, 0xFE	; 254
    6c2c:	09 c0       	rjmp	.+18     	; 0x6c40 <atan2+0xe>
    6c2e:	5b c1       	rjmp	.+694    	; 0x6ee6 <__fp_nan>
    6c30:	fc c1       	rjmp	.+1016   	; 0x702a <__fp_zero>

00006c32 <atan2>:
    6c32:	e9 2f       	mov	r30, r25
    6c34:	e0 78       	andi	r30, 0x80	; 128
    6c36:	d7 d1       	rcall	.+942    	; 0x6fe6 <__fp_split3>
    6c38:	68 f3       	brcs	.-38     	; 0x6c14 <__addsf3x+0xa6>
    6c3a:	09 2e       	mov	r0, r25
    6c3c:	05 2a       	or	r0, r21
    6c3e:	c1 f3       	breq	.-16     	; 0x6c30 <__addsf3x+0xc2>
    6c40:	26 17       	cp	r18, r22
    6c42:	37 07       	cpc	r19, r23
    6c44:	48 07       	cpc	r20, r24
    6c46:	59 07       	cpc	r21, r25
    6c48:	38 f0       	brcs	.+14     	; 0x6c58 <atan2+0x26>
    6c4a:	0e 2e       	mov	r0, r30
    6c4c:	07 f8       	bld	r0, 7
    6c4e:	e0 25       	eor	r30, r0
    6c50:	69 f0       	breq	.+26     	; 0x6c6c <atan2+0x3a>
    6c52:	e0 25       	eor	r30, r0
    6c54:	e0 64       	ori	r30, 0x40	; 64
    6c56:	0a c0       	rjmp	.+20     	; 0x6c6c <atan2+0x3a>
    6c58:	ef 63       	ori	r30, 0x3F	; 63
    6c5a:	07 f8       	bld	r0, 7
    6c5c:	00 94       	com	r0
    6c5e:	07 fa       	bst	r0, 7
    6c60:	db 01       	movw	r26, r22
    6c62:	b9 01       	movw	r22, r18
    6c64:	9d 01       	movw	r18, r26
    6c66:	dc 01       	movw	r26, r24
    6c68:	ca 01       	movw	r24, r20
    6c6a:	ad 01       	movw	r20, r26
    6c6c:	ef 93       	push	r30
    6c6e:	4a d0       	rcall	.+148    	; 0x6d04 <__divsf3_pse>
    6c70:	98 d1       	rcall	.+816    	; 0x6fa2 <__fp_round>
    6c72:	0a d0       	rcall	.+20     	; 0x6c88 <atan>
    6c74:	5f 91       	pop	r21
    6c76:	55 23       	and	r21, r21
    6c78:	31 f0       	breq	.+12     	; 0x6c86 <atan2+0x54>
    6c7a:	2b ed       	ldi	r18, 0xDB	; 219
    6c7c:	3f e0       	ldi	r19, 0x0F	; 15
    6c7e:	49 e4       	ldi	r20, 0x49	; 73
    6c80:	50 fd       	sbrc	r21, 0
    6c82:	49 ec       	ldi	r20, 0xC9	; 201
    6c84:	63 cf       	rjmp	.-314    	; 0x6b4c <__addsf3>
    6c86:	08 95       	ret

00006c88 <atan>:
    6c88:	df 93       	push	r29
    6c8a:	dd 27       	eor	r29, r29
    6c8c:	b9 2f       	mov	r27, r25
    6c8e:	bf 77       	andi	r27, 0x7F	; 127
    6c90:	40 e8       	ldi	r20, 0x80	; 128
    6c92:	5f e3       	ldi	r21, 0x3F	; 63
    6c94:	16 16       	cp	r1, r22
    6c96:	17 06       	cpc	r1, r23
    6c98:	48 07       	cpc	r20, r24
    6c9a:	5b 07       	cpc	r21, r27
    6c9c:	10 f4       	brcc	.+4      	; 0x6ca2 <atan+0x1a>
    6c9e:	d9 2f       	mov	r29, r25
    6ca0:	cf d1       	rcall	.+926    	; 0x7040 <inverse>
    6ca2:	9f 93       	push	r25
    6ca4:	8f 93       	push	r24
    6ca6:	7f 93       	push	r23
    6ca8:	6f 93       	push	r22
    6caa:	7c d2       	rcall	.+1272   	; 0x71a4 <square>
    6cac:	e4 ef       	ldi	r30, 0xF4	; 244
    6cae:	f1 e0       	ldi	r31, 0x01	; 1
    6cb0:	1d d1       	rcall	.+570    	; 0x6eec <__fp_powser>
    6cb2:	77 d1       	rcall	.+750    	; 0x6fa2 <__fp_round>
    6cb4:	2f 91       	pop	r18
    6cb6:	3f 91       	pop	r19
    6cb8:	4f 91       	pop	r20
    6cba:	5f 91       	pop	r21
    6cbc:	d4 d1       	rcall	.+936    	; 0x7066 <__mulsf3x>
    6cbe:	dd 23       	and	r29, r29
    6cc0:	49 f0       	breq	.+18     	; 0x6cd4 <atan+0x4c>
    6cc2:	90 58       	subi	r25, 0x80	; 128
    6cc4:	a2 ea       	ldi	r26, 0xA2	; 162
    6cc6:	2a ed       	ldi	r18, 0xDA	; 218
    6cc8:	3f e0       	ldi	r19, 0x0F	; 15
    6cca:	49 ec       	ldi	r20, 0xC9	; 201
    6ccc:	5f e3       	ldi	r21, 0x3F	; 63
    6cce:	d0 78       	andi	r29, 0x80	; 128
    6cd0:	5d 27       	eor	r21, r29
    6cd2:	4d df       	rcall	.-358    	; 0x6b6e <__addsf3x>
    6cd4:	df 91       	pop	r29
    6cd6:	65 c1       	rjmp	.+714    	; 0x6fa2 <__fp_round>

00006cd8 <__cmpsf2>:
    6cd8:	dc d0       	rcall	.+440    	; 0x6e92 <__fp_cmp>
    6cda:	08 f4       	brcc	.+2      	; 0x6cde <__cmpsf2+0x6>
    6cdc:	81 e0       	ldi	r24, 0x01	; 1
    6cde:	08 95       	ret

00006ce0 <cos>:
    6ce0:	39 d1       	rcall	.+626    	; 0x6f54 <__fp_rempio2>
    6ce2:	e3 95       	inc	r30
    6ce4:	6f c1       	rjmp	.+734    	; 0x6fc4 <__fp_sinus>

00006ce6 <__divsf3>:
    6ce6:	0c d0       	rcall	.+24     	; 0x6d00 <__divsf3x>
    6ce8:	5c c1       	rjmp	.+696    	; 0x6fa2 <__fp_round>
    6cea:	2c d1       	rcall	.+600    	; 0x6f44 <__fp_pscB>
    6cec:	40 f0       	brcs	.+16     	; 0x6cfe <__divsf3+0x18>
    6cee:	23 d1       	rcall	.+582    	; 0x6f36 <__fp_pscA>
    6cf0:	30 f0       	brcs	.+12     	; 0x6cfe <__divsf3+0x18>
    6cf2:	21 f4       	brne	.+8      	; 0x6cfc <__divsf3+0x16>
    6cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    6cf6:	19 f0       	breq	.+6      	; 0x6cfe <__divsf3+0x18>
    6cf8:	f0 c0       	rjmp	.+480    	; 0x6eda <__fp_inf>
    6cfa:	51 11       	cpse	r21, r1
    6cfc:	97 c1       	rjmp	.+814    	; 0x702c <__fp_szero>
    6cfe:	f3 c0       	rjmp	.+486    	; 0x6ee6 <__fp_nan>

00006d00 <__divsf3x>:
    6d00:	72 d1       	rcall	.+740    	; 0x6fe6 <__fp_split3>
    6d02:	98 f3       	brcs	.-26     	; 0x6cea <__divsf3+0x4>

00006d04 <__divsf3_pse>:
    6d04:	99 23       	and	r25, r25
    6d06:	c9 f3       	breq	.-14     	; 0x6cfa <__divsf3+0x14>
    6d08:	55 23       	and	r21, r21
    6d0a:	b1 f3       	breq	.-20     	; 0x6cf8 <__divsf3+0x12>
    6d0c:	95 1b       	sub	r25, r21
    6d0e:	55 0b       	sbc	r21, r21
    6d10:	bb 27       	eor	r27, r27
    6d12:	aa 27       	eor	r26, r26
    6d14:	62 17       	cp	r22, r18
    6d16:	73 07       	cpc	r23, r19
    6d18:	84 07       	cpc	r24, r20
    6d1a:	38 f0       	brcs	.+14     	; 0x6d2a <__divsf3_pse+0x26>
    6d1c:	9f 5f       	subi	r25, 0xFF	; 255
    6d1e:	5f 4f       	sbci	r21, 0xFF	; 255
    6d20:	22 0f       	add	r18, r18
    6d22:	33 1f       	adc	r19, r19
    6d24:	44 1f       	adc	r20, r20
    6d26:	aa 1f       	adc	r26, r26
    6d28:	a9 f3       	breq	.-22     	; 0x6d14 <__divsf3_pse+0x10>
    6d2a:	33 d0       	rcall	.+102    	; 0x6d92 <__divsf3_pse+0x8e>
    6d2c:	0e 2e       	mov	r0, r30
    6d2e:	3a f0       	brmi	.+14     	; 0x6d3e <__divsf3_pse+0x3a>
    6d30:	e0 e8       	ldi	r30, 0x80	; 128
    6d32:	30 d0       	rcall	.+96     	; 0x6d94 <__divsf3_pse+0x90>
    6d34:	91 50       	subi	r25, 0x01	; 1
    6d36:	50 40       	sbci	r21, 0x00	; 0
    6d38:	e6 95       	lsr	r30
    6d3a:	00 1c       	adc	r0, r0
    6d3c:	ca f7       	brpl	.-14     	; 0x6d30 <__divsf3_pse+0x2c>
    6d3e:	29 d0       	rcall	.+82     	; 0x6d92 <__divsf3_pse+0x8e>
    6d40:	fe 2f       	mov	r31, r30
    6d42:	27 d0       	rcall	.+78     	; 0x6d92 <__divsf3_pse+0x8e>
    6d44:	66 0f       	add	r22, r22
    6d46:	77 1f       	adc	r23, r23
    6d48:	88 1f       	adc	r24, r24
    6d4a:	bb 1f       	adc	r27, r27
    6d4c:	26 17       	cp	r18, r22
    6d4e:	37 07       	cpc	r19, r23
    6d50:	48 07       	cpc	r20, r24
    6d52:	ab 07       	cpc	r26, r27
    6d54:	b0 e8       	ldi	r27, 0x80	; 128
    6d56:	09 f0       	breq	.+2      	; 0x6d5a <__divsf3_pse+0x56>
    6d58:	bb 0b       	sbc	r27, r27
    6d5a:	80 2d       	mov	r24, r0
    6d5c:	bf 01       	movw	r22, r30
    6d5e:	ff 27       	eor	r31, r31
    6d60:	93 58       	subi	r25, 0x83	; 131
    6d62:	5f 4f       	sbci	r21, 0xFF	; 255
    6d64:	2a f0       	brmi	.+10     	; 0x6d70 <__divsf3_pse+0x6c>
    6d66:	9e 3f       	cpi	r25, 0xFE	; 254
    6d68:	51 05       	cpc	r21, r1
    6d6a:	68 f0       	brcs	.+26     	; 0x6d86 <__divsf3_pse+0x82>
    6d6c:	b6 c0       	rjmp	.+364    	; 0x6eda <__fp_inf>
    6d6e:	5e c1       	rjmp	.+700    	; 0x702c <__fp_szero>
    6d70:	5f 3f       	cpi	r21, 0xFF	; 255
    6d72:	ec f3       	brlt	.-6      	; 0x6d6e <__divsf3_pse+0x6a>
    6d74:	98 3e       	cpi	r25, 0xE8	; 232
    6d76:	dc f3       	brlt	.-10     	; 0x6d6e <__divsf3_pse+0x6a>
    6d78:	86 95       	lsr	r24
    6d7a:	77 95       	ror	r23
    6d7c:	67 95       	ror	r22
    6d7e:	b7 95       	ror	r27
    6d80:	f7 95       	ror	r31
    6d82:	9f 5f       	subi	r25, 0xFF	; 255
    6d84:	c9 f7       	brne	.-14     	; 0x6d78 <__divsf3_pse+0x74>
    6d86:	88 0f       	add	r24, r24
    6d88:	91 1d       	adc	r25, r1
    6d8a:	96 95       	lsr	r25
    6d8c:	87 95       	ror	r24
    6d8e:	97 f9       	bld	r25, 7
    6d90:	08 95       	ret
    6d92:	e1 e0       	ldi	r30, 0x01	; 1
    6d94:	66 0f       	add	r22, r22
    6d96:	77 1f       	adc	r23, r23
    6d98:	88 1f       	adc	r24, r24
    6d9a:	bb 1f       	adc	r27, r27
    6d9c:	62 17       	cp	r22, r18
    6d9e:	73 07       	cpc	r23, r19
    6da0:	84 07       	cpc	r24, r20
    6da2:	ba 07       	cpc	r27, r26
    6da4:	20 f0       	brcs	.+8      	; 0x6dae <__divsf3_pse+0xaa>
    6da6:	62 1b       	sub	r22, r18
    6da8:	73 0b       	sbc	r23, r19
    6daa:	84 0b       	sbc	r24, r20
    6dac:	ba 0b       	sbc	r27, r26
    6dae:	ee 1f       	adc	r30, r30
    6db0:	88 f7       	brcc	.-30     	; 0x6d94 <__divsf3_pse+0x90>
    6db2:	e0 95       	com	r30
    6db4:	08 95       	ret

00006db6 <__fixsfsi>:
    6db6:	04 d0       	rcall	.+8      	; 0x6dc0 <__fixunssfsi>
    6db8:	68 94       	set
    6dba:	b1 11       	cpse	r27, r1
    6dbc:	37 c1       	rjmp	.+622    	; 0x702c <__fp_szero>
    6dbe:	08 95       	ret

00006dc0 <__fixunssfsi>:
    6dc0:	1a d1       	rcall	.+564    	; 0x6ff6 <__fp_splitA>
    6dc2:	88 f0       	brcs	.+34     	; 0x6de6 <__fixunssfsi+0x26>
    6dc4:	9f 57       	subi	r25, 0x7F	; 127
    6dc6:	90 f0       	brcs	.+36     	; 0x6dec <__fixunssfsi+0x2c>
    6dc8:	b9 2f       	mov	r27, r25
    6dca:	99 27       	eor	r25, r25
    6dcc:	b7 51       	subi	r27, 0x17	; 23
    6dce:	a0 f0       	brcs	.+40     	; 0x6df8 <__fixunssfsi+0x38>
    6dd0:	d1 f0       	breq	.+52     	; 0x6e06 <__fixunssfsi+0x46>
    6dd2:	66 0f       	add	r22, r22
    6dd4:	77 1f       	adc	r23, r23
    6dd6:	88 1f       	adc	r24, r24
    6dd8:	99 1f       	adc	r25, r25
    6dda:	1a f0       	brmi	.+6      	; 0x6de2 <__fixunssfsi+0x22>
    6ddc:	ba 95       	dec	r27
    6dde:	c9 f7       	brne	.-14     	; 0x6dd2 <__fixunssfsi+0x12>
    6de0:	12 c0       	rjmp	.+36     	; 0x6e06 <__fixunssfsi+0x46>
    6de2:	b1 30       	cpi	r27, 0x01	; 1
    6de4:	81 f0       	breq	.+32     	; 0x6e06 <__fixunssfsi+0x46>
    6de6:	21 d1       	rcall	.+578    	; 0x702a <__fp_zero>
    6de8:	b1 e0       	ldi	r27, 0x01	; 1
    6dea:	08 95       	ret
    6dec:	1e c1       	rjmp	.+572    	; 0x702a <__fp_zero>
    6dee:	67 2f       	mov	r22, r23
    6df0:	78 2f       	mov	r23, r24
    6df2:	88 27       	eor	r24, r24
    6df4:	b8 5f       	subi	r27, 0xF8	; 248
    6df6:	39 f0       	breq	.+14     	; 0x6e06 <__fixunssfsi+0x46>
    6df8:	b9 3f       	cpi	r27, 0xF9	; 249
    6dfa:	cc f3       	brlt	.-14     	; 0x6dee <__fixunssfsi+0x2e>
    6dfc:	86 95       	lsr	r24
    6dfe:	77 95       	ror	r23
    6e00:	67 95       	ror	r22
    6e02:	b3 95       	inc	r27
    6e04:	d9 f7       	brne	.-10     	; 0x6dfc <__fixunssfsi+0x3c>
    6e06:	3e f4       	brtc	.+14     	; 0x6e16 <__fixunssfsi+0x56>
    6e08:	90 95       	com	r25
    6e0a:	80 95       	com	r24
    6e0c:	70 95       	com	r23
    6e0e:	61 95       	neg	r22
    6e10:	7f 4f       	sbci	r23, 0xFF	; 255
    6e12:	8f 4f       	sbci	r24, 0xFF	; 255
    6e14:	9f 4f       	sbci	r25, 0xFF	; 255
    6e16:	08 95       	ret

00006e18 <__floatunsisf>:
    6e18:	e8 94       	clt
    6e1a:	09 c0       	rjmp	.+18     	; 0x6e2e <__floatsisf+0x12>

00006e1c <__floatsisf>:
    6e1c:	97 fb       	bst	r25, 7
    6e1e:	3e f4       	brtc	.+14     	; 0x6e2e <__floatsisf+0x12>
    6e20:	90 95       	com	r25
    6e22:	80 95       	com	r24
    6e24:	70 95       	com	r23
    6e26:	61 95       	neg	r22
    6e28:	7f 4f       	sbci	r23, 0xFF	; 255
    6e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    6e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e2e:	99 23       	and	r25, r25
    6e30:	a9 f0       	breq	.+42     	; 0x6e5c <__floatsisf+0x40>
    6e32:	f9 2f       	mov	r31, r25
    6e34:	96 e9       	ldi	r25, 0x96	; 150
    6e36:	bb 27       	eor	r27, r27
    6e38:	93 95       	inc	r25
    6e3a:	f6 95       	lsr	r31
    6e3c:	87 95       	ror	r24
    6e3e:	77 95       	ror	r23
    6e40:	67 95       	ror	r22
    6e42:	b7 95       	ror	r27
    6e44:	f1 11       	cpse	r31, r1
    6e46:	f8 cf       	rjmp	.-16     	; 0x6e38 <__floatsisf+0x1c>
    6e48:	fa f4       	brpl	.+62     	; 0x6e88 <__floatsisf+0x6c>
    6e4a:	bb 0f       	add	r27, r27
    6e4c:	11 f4       	brne	.+4      	; 0x6e52 <__floatsisf+0x36>
    6e4e:	60 ff       	sbrs	r22, 0
    6e50:	1b c0       	rjmp	.+54     	; 0x6e88 <__floatsisf+0x6c>
    6e52:	6f 5f       	subi	r22, 0xFF	; 255
    6e54:	7f 4f       	sbci	r23, 0xFF	; 255
    6e56:	8f 4f       	sbci	r24, 0xFF	; 255
    6e58:	9f 4f       	sbci	r25, 0xFF	; 255
    6e5a:	16 c0       	rjmp	.+44     	; 0x6e88 <__floatsisf+0x6c>
    6e5c:	88 23       	and	r24, r24
    6e5e:	11 f0       	breq	.+4      	; 0x6e64 <__floatsisf+0x48>
    6e60:	96 e9       	ldi	r25, 0x96	; 150
    6e62:	11 c0       	rjmp	.+34     	; 0x6e86 <__floatsisf+0x6a>
    6e64:	77 23       	and	r23, r23
    6e66:	21 f0       	breq	.+8      	; 0x6e70 <__floatsisf+0x54>
    6e68:	9e e8       	ldi	r25, 0x8E	; 142
    6e6a:	87 2f       	mov	r24, r23
    6e6c:	76 2f       	mov	r23, r22
    6e6e:	05 c0       	rjmp	.+10     	; 0x6e7a <__floatsisf+0x5e>
    6e70:	66 23       	and	r22, r22
    6e72:	71 f0       	breq	.+28     	; 0x6e90 <__floatsisf+0x74>
    6e74:	96 e8       	ldi	r25, 0x86	; 134
    6e76:	86 2f       	mov	r24, r22
    6e78:	70 e0       	ldi	r23, 0x00	; 0
    6e7a:	60 e0       	ldi	r22, 0x00	; 0
    6e7c:	2a f0       	brmi	.+10     	; 0x6e88 <__floatsisf+0x6c>
    6e7e:	9a 95       	dec	r25
    6e80:	66 0f       	add	r22, r22
    6e82:	77 1f       	adc	r23, r23
    6e84:	88 1f       	adc	r24, r24
    6e86:	da f7       	brpl	.-10     	; 0x6e7e <__floatsisf+0x62>
    6e88:	88 0f       	add	r24, r24
    6e8a:	96 95       	lsr	r25
    6e8c:	87 95       	ror	r24
    6e8e:	97 f9       	bld	r25, 7
    6e90:	08 95       	ret

00006e92 <__fp_cmp>:
    6e92:	99 0f       	add	r25, r25
    6e94:	00 08       	sbc	r0, r0
    6e96:	55 0f       	add	r21, r21
    6e98:	aa 0b       	sbc	r26, r26
    6e9a:	e0 e8       	ldi	r30, 0x80	; 128
    6e9c:	fe ef       	ldi	r31, 0xFE	; 254
    6e9e:	16 16       	cp	r1, r22
    6ea0:	17 06       	cpc	r1, r23
    6ea2:	e8 07       	cpc	r30, r24
    6ea4:	f9 07       	cpc	r31, r25
    6ea6:	c0 f0       	brcs	.+48     	; 0x6ed8 <__fp_cmp+0x46>
    6ea8:	12 16       	cp	r1, r18
    6eaa:	13 06       	cpc	r1, r19
    6eac:	e4 07       	cpc	r30, r20
    6eae:	f5 07       	cpc	r31, r21
    6eb0:	98 f0       	brcs	.+38     	; 0x6ed8 <__fp_cmp+0x46>
    6eb2:	62 1b       	sub	r22, r18
    6eb4:	73 0b       	sbc	r23, r19
    6eb6:	84 0b       	sbc	r24, r20
    6eb8:	95 0b       	sbc	r25, r21
    6eba:	39 f4       	brne	.+14     	; 0x6eca <__fp_cmp+0x38>
    6ebc:	0a 26       	eor	r0, r26
    6ebe:	61 f0       	breq	.+24     	; 0x6ed8 <__fp_cmp+0x46>
    6ec0:	23 2b       	or	r18, r19
    6ec2:	24 2b       	or	r18, r20
    6ec4:	25 2b       	or	r18, r21
    6ec6:	21 f4       	brne	.+8      	; 0x6ed0 <__fp_cmp+0x3e>
    6ec8:	08 95       	ret
    6eca:	0a 26       	eor	r0, r26
    6ecc:	09 f4       	brne	.+2      	; 0x6ed0 <__fp_cmp+0x3e>
    6ece:	a1 40       	sbci	r26, 0x01	; 1
    6ed0:	a6 95       	lsr	r26
    6ed2:	8f ef       	ldi	r24, 0xFF	; 255
    6ed4:	81 1d       	adc	r24, r1
    6ed6:	81 1d       	adc	r24, r1
    6ed8:	08 95       	ret

00006eda <__fp_inf>:
    6eda:	97 f9       	bld	r25, 7
    6edc:	9f 67       	ori	r25, 0x7F	; 127
    6ede:	80 e8       	ldi	r24, 0x80	; 128
    6ee0:	70 e0       	ldi	r23, 0x00	; 0
    6ee2:	60 e0       	ldi	r22, 0x00	; 0
    6ee4:	08 95       	ret

00006ee6 <__fp_nan>:
    6ee6:	9f ef       	ldi	r25, 0xFF	; 255
    6ee8:	80 ec       	ldi	r24, 0xC0	; 192
    6eea:	08 95       	ret

00006eec <__fp_powser>:
    6eec:	df 93       	push	r29
    6eee:	cf 93       	push	r28
    6ef0:	1f 93       	push	r17
    6ef2:	0f 93       	push	r16
    6ef4:	ff 92       	push	r15
    6ef6:	ef 92       	push	r14
    6ef8:	df 92       	push	r13
    6efa:	7b 01       	movw	r14, r22
    6efc:	8c 01       	movw	r16, r24
    6efe:	68 94       	set
    6f00:	05 c0       	rjmp	.+10     	; 0x6f0c <__fp_powser+0x20>
    6f02:	da 2e       	mov	r13, r26
    6f04:	ef 01       	movw	r28, r30
    6f06:	af d0       	rcall	.+350    	; 0x7066 <__mulsf3x>
    6f08:	fe 01       	movw	r30, r28
    6f0a:	e8 94       	clt
    6f0c:	a5 91       	lpm	r26, Z+
    6f0e:	25 91       	lpm	r18, Z+
    6f10:	35 91       	lpm	r19, Z+
    6f12:	45 91       	lpm	r20, Z+
    6f14:	55 91       	lpm	r21, Z+
    6f16:	ae f3       	brts	.-22     	; 0x6f02 <__fp_powser+0x16>
    6f18:	ef 01       	movw	r28, r30
    6f1a:	29 de       	rcall	.-942    	; 0x6b6e <__addsf3x>
    6f1c:	fe 01       	movw	r30, r28
    6f1e:	97 01       	movw	r18, r14
    6f20:	a8 01       	movw	r20, r16
    6f22:	da 94       	dec	r13
    6f24:	79 f7       	brne	.-34     	; 0x6f04 <__fp_powser+0x18>
    6f26:	df 90       	pop	r13
    6f28:	ef 90       	pop	r14
    6f2a:	ff 90       	pop	r15
    6f2c:	0f 91       	pop	r16
    6f2e:	1f 91       	pop	r17
    6f30:	cf 91       	pop	r28
    6f32:	df 91       	pop	r29
    6f34:	08 95       	ret

00006f36 <__fp_pscA>:
    6f36:	00 24       	eor	r0, r0
    6f38:	0a 94       	dec	r0
    6f3a:	16 16       	cp	r1, r22
    6f3c:	17 06       	cpc	r1, r23
    6f3e:	18 06       	cpc	r1, r24
    6f40:	09 06       	cpc	r0, r25
    6f42:	08 95       	ret

00006f44 <__fp_pscB>:
    6f44:	00 24       	eor	r0, r0
    6f46:	0a 94       	dec	r0
    6f48:	12 16       	cp	r1, r18
    6f4a:	13 06       	cpc	r1, r19
    6f4c:	14 06       	cpc	r1, r20
    6f4e:	05 06       	cpc	r0, r21
    6f50:	08 95       	ret
    6f52:	c9 cf       	rjmp	.-110    	; 0x6ee6 <__fp_nan>

00006f54 <__fp_rempio2>:
    6f54:	50 d0       	rcall	.+160    	; 0x6ff6 <__fp_splitA>
    6f56:	e8 f3       	brcs	.-6      	; 0x6f52 <__fp_pscB+0xe>
    6f58:	e8 94       	clt
    6f5a:	e0 e0       	ldi	r30, 0x00	; 0
    6f5c:	bb 27       	eor	r27, r27
    6f5e:	9f 57       	subi	r25, 0x7F	; 127
    6f60:	f0 f0       	brcs	.+60     	; 0x6f9e <__fp_rempio2+0x4a>
    6f62:	2a ed       	ldi	r18, 0xDA	; 218
    6f64:	3f e0       	ldi	r19, 0x0F	; 15
    6f66:	49 ec       	ldi	r20, 0xC9	; 201
    6f68:	06 c0       	rjmp	.+12     	; 0x6f76 <__fp_rempio2+0x22>
    6f6a:	ee 0f       	add	r30, r30
    6f6c:	bb 0f       	add	r27, r27
    6f6e:	66 1f       	adc	r22, r22
    6f70:	77 1f       	adc	r23, r23
    6f72:	88 1f       	adc	r24, r24
    6f74:	28 f0       	brcs	.+10     	; 0x6f80 <__fp_rempio2+0x2c>
    6f76:	b2 3a       	cpi	r27, 0xA2	; 162
    6f78:	62 07       	cpc	r22, r18
    6f7a:	73 07       	cpc	r23, r19
    6f7c:	84 07       	cpc	r24, r20
    6f7e:	28 f0       	brcs	.+10     	; 0x6f8a <__fp_rempio2+0x36>
    6f80:	b2 5a       	subi	r27, 0xA2	; 162
    6f82:	62 0b       	sbc	r22, r18
    6f84:	73 0b       	sbc	r23, r19
    6f86:	84 0b       	sbc	r24, r20
    6f88:	e3 95       	inc	r30
    6f8a:	9a 95       	dec	r25
    6f8c:	72 f7       	brpl	.-36     	; 0x6f6a <__fp_rempio2+0x16>
    6f8e:	80 38       	cpi	r24, 0x80	; 128
    6f90:	30 f4       	brcc	.+12     	; 0x6f9e <__fp_rempio2+0x4a>
    6f92:	9a 95       	dec	r25
    6f94:	bb 0f       	add	r27, r27
    6f96:	66 1f       	adc	r22, r22
    6f98:	77 1f       	adc	r23, r23
    6f9a:	88 1f       	adc	r24, r24
    6f9c:	d2 f7       	brpl	.-12     	; 0x6f92 <__fp_rempio2+0x3e>
    6f9e:	90 48       	sbci	r25, 0x80	; 128
    6fa0:	06 c1       	rjmp	.+524    	; 0x71ae <__fp_mpack_finite>

00006fa2 <__fp_round>:
    6fa2:	09 2e       	mov	r0, r25
    6fa4:	03 94       	inc	r0
    6fa6:	00 0c       	add	r0, r0
    6fa8:	11 f4       	brne	.+4      	; 0x6fae <__fp_round+0xc>
    6faa:	88 23       	and	r24, r24
    6fac:	52 f0       	brmi	.+20     	; 0x6fc2 <__fp_round+0x20>
    6fae:	bb 0f       	add	r27, r27
    6fb0:	40 f4       	brcc	.+16     	; 0x6fc2 <__fp_round+0x20>
    6fb2:	bf 2b       	or	r27, r31
    6fb4:	11 f4       	brne	.+4      	; 0x6fba <__fp_round+0x18>
    6fb6:	60 ff       	sbrs	r22, 0
    6fb8:	04 c0       	rjmp	.+8      	; 0x6fc2 <__fp_round+0x20>
    6fba:	6f 5f       	subi	r22, 0xFF	; 255
    6fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    6fbe:	8f 4f       	sbci	r24, 0xFF	; 255
    6fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    6fc2:	08 95       	ret

00006fc4 <__fp_sinus>:
    6fc4:	ef 93       	push	r30
    6fc6:	e0 ff       	sbrs	r30, 0
    6fc8:	06 c0       	rjmp	.+12     	; 0x6fd6 <__fp_sinus+0x12>
    6fca:	a2 ea       	ldi	r26, 0xA2	; 162
    6fcc:	2a ed       	ldi	r18, 0xDA	; 218
    6fce:	3f e0       	ldi	r19, 0x0F	; 15
    6fd0:	49 ec       	ldi	r20, 0xC9	; 201
    6fd2:	5f eb       	ldi	r21, 0xBF	; 191
    6fd4:	cc dd       	rcall	.-1128   	; 0x6b6e <__addsf3x>
    6fd6:	e5 df       	rcall	.-54     	; 0x6fa2 <__fp_round>
    6fd8:	0f 90       	pop	r0
    6fda:	03 94       	inc	r0
    6fdc:	01 fc       	sbrc	r0, 1
    6fde:	90 58       	subi	r25, 0x80	; 128
    6fe0:	e1 e2       	ldi	r30, 0x21	; 33
    6fe2:	f2 e0       	ldi	r31, 0x02	; 2
    6fe4:	f7 c0       	rjmp	.+494    	; 0x71d4 <__fp_powsodd>

00006fe6 <__fp_split3>:
    6fe6:	57 fd       	sbrc	r21, 7
    6fe8:	90 58       	subi	r25, 0x80	; 128
    6fea:	44 0f       	add	r20, r20
    6fec:	55 1f       	adc	r21, r21
    6fee:	59 f0       	breq	.+22     	; 0x7006 <__fp_splitA+0x10>
    6ff0:	5f 3f       	cpi	r21, 0xFF	; 255
    6ff2:	71 f0       	breq	.+28     	; 0x7010 <__fp_splitA+0x1a>
    6ff4:	47 95       	ror	r20

00006ff6 <__fp_splitA>:
    6ff6:	88 0f       	add	r24, r24
    6ff8:	97 fb       	bst	r25, 7
    6ffa:	99 1f       	adc	r25, r25
    6ffc:	61 f0       	breq	.+24     	; 0x7016 <__fp_splitA+0x20>
    6ffe:	9f 3f       	cpi	r25, 0xFF	; 255
    7000:	79 f0       	breq	.+30     	; 0x7020 <__fp_splitA+0x2a>
    7002:	87 95       	ror	r24
    7004:	08 95       	ret
    7006:	12 16       	cp	r1, r18
    7008:	13 06       	cpc	r1, r19
    700a:	14 06       	cpc	r1, r20
    700c:	55 1f       	adc	r21, r21
    700e:	f2 cf       	rjmp	.-28     	; 0x6ff4 <__fp_split3+0xe>
    7010:	46 95       	lsr	r20
    7012:	f1 df       	rcall	.-30     	; 0x6ff6 <__fp_splitA>
    7014:	08 c0       	rjmp	.+16     	; 0x7026 <__fp_splitA+0x30>
    7016:	16 16       	cp	r1, r22
    7018:	17 06       	cpc	r1, r23
    701a:	18 06       	cpc	r1, r24
    701c:	99 1f       	adc	r25, r25
    701e:	f1 cf       	rjmp	.-30     	; 0x7002 <__fp_splitA+0xc>
    7020:	86 95       	lsr	r24
    7022:	71 05       	cpc	r23, r1
    7024:	61 05       	cpc	r22, r1
    7026:	08 94       	sec
    7028:	08 95       	ret

0000702a <__fp_zero>:
    702a:	e8 94       	clt

0000702c <__fp_szero>:
    702c:	bb 27       	eor	r27, r27
    702e:	66 27       	eor	r22, r22
    7030:	77 27       	eor	r23, r23
    7032:	cb 01       	movw	r24, r22
    7034:	97 f9       	bld	r25, 7
    7036:	08 95       	ret

00007038 <__gesf2>:
    7038:	2c df       	rcall	.-424    	; 0x6e92 <__fp_cmp>
    703a:	08 f4       	brcc	.+2      	; 0x703e <__gesf2+0x6>
    703c:	8f ef       	ldi	r24, 0xFF	; 255
    703e:	08 95       	ret

00007040 <inverse>:
    7040:	9b 01       	movw	r18, r22
    7042:	ac 01       	movw	r20, r24
    7044:	60 e0       	ldi	r22, 0x00	; 0
    7046:	70 e0       	ldi	r23, 0x00	; 0
    7048:	80 e8       	ldi	r24, 0x80	; 128
    704a:	9f e3       	ldi	r25, 0x3F	; 63
    704c:	4c ce       	rjmp	.-872    	; 0x6ce6 <__divsf3>

0000704e <__mulsf3>:
    704e:	0b d0       	rcall	.+22     	; 0x7066 <__mulsf3x>
    7050:	a8 cf       	rjmp	.-176    	; 0x6fa2 <__fp_round>
    7052:	71 df       	rcall	.-286    	; 0x6f36 <__fp_pscA>
    7054:	28 f0       	brcs	.+10     	; 0x7060 <__mulsf3+0x12>
    7056:	76 df       	rcall	.-276    	; 0x6f44 <__fp_pscB>
    7058:	18 f0       	brcs	.+6      	; 0x7060 <__mulsf3+0x12>
    705a:	95 23       	and	r25, r21
    705c:	09 f0       	breq	.+2      	; 0x7060 <__mulsf3+0x12>
    705e:	3d cf       	rjmp	.-390    	; 0x6eda <__fp_inf>
    7060:	42 cf       	rjmp	.-380    	; 0x6ee6 <__fp_nan>
    7062:	11 24       	eor	r1, r1
    7064:	e3 cf       	rjmp	.-58     	; 0x702c <__fp_szero>

00007066 <__mulsf3x>:
    7066:	bf df       	rcall	.-130    	; 0x6fe6 <__fp_split3>
    7068:	a0 f3       	brcs	.-24     	; 0x7052 <__mulsf3+0x4>

0000706a <__mulsf3_pse>:
    706a:	95 9f       	mul	r25, r21
    706c:	d1 f3       	breq	.-12     	; 0x7062 <__mulsf3+0x14>
    706e:	95 0f       	add	r25, r21
    7070:	50 e0       	ldi	r21, 0x00	; 0
    7072:	55 1f       	adc	r21, r21
    7074:	62 9f       	mul	r22, r18
    7076:	f0 01       	movw	r30, r0
    7078:	72 9f       	mul	r23, r18
    707a:	bb 27       	eor	r27, r27
    707c:	f0 0d       	add	r31, r0
    707e:	b1 1d       	adc	r27, r1
    7080:	63 9f       	mul	r22, r19
    7082:	aa 27       	eor	r26, r26
    7084:	f0 0d       	add	r31, r0
    7086:	b1 1d       	adc	r27, r1
    7088:	aa 1f       	adc	r26, r26
    708a:	64 9f       	mul	r22, r20
    708c:	66 27       	eor	r22, r22
    708e:	b0 0d       	add	r27, r0
    7090:	a1 1d       	adc	r26, r1
    7092:	66 1f       	adc	r22, r22
    7094:	82 9f       	mul	r24, r18
    7096:	22 27       	eor	r18, r18
    7098:	b0 0d       	add	r27, r0
    709a:	a1 1d       	adc	r26, r1
    709c:	62 1f       	adc	r22, r18
    709e:	73 9f       	mul	r23, r19
    70a0:	b0 0d       	add	r27, r0
    70a2:	a1 1d       	adc	r26, r1
    70a4:	62 1f       	adc	r22, r18
    70a6:	83 9f       	mul	r24, r19
    70a8:	a0 0d       	add	r26, r0
    70aa:	61 1d       	adc	r22, r1
    70ac:	22 1f       	adc	r18, r18
    70ae:	74 9f       	mul	r23, r20
    70b0:	33 27       	eor	r19, r19
    70b2:	a0 0d       	add	r26, r0
    70b4:	61 1d       	adc	r22, r1
    70b6:	23 1f       	adc	r18, r19
    70b8:	84 9f       	mul	r24, r20
    70ba:	60 0d       	add	r22, r0
    70bc:	21 1d       	adc	r18, r1
    70be:	82 2f       	mov	r24, r18
    70c0:	76 2f       	mov	r23, r22
    70c2:	6a 2f       	mov	r22, r26
    70c4:	11 24       	eor	r1, r1
    70c6:	9f 57       	subi	r25, 0x7F	; 127
    70c8:	50 40       	sbci	r21, 0x00	; 0
    70ca:	8a f0       	brmi	.+34     	; 0x70ee <__mulsf3_pse+0x84>
    70cc:	e1 f0       	breq	.+56     	; 0x7106 <__mulsf3_pse+0x9c>
    70ce:	88 23       	and	r24, r24
    70d0:	4a f0       	brmi	.+18     	; 0x70e4 <__mulsf3_pse+0x7a>
    70d2:	ee 0f       	add	r30, r30
    70d4:	ff 1f       	adc	r31, r31
    70d6:	bb 1f       	adc	r27, r27
    70d8:	66 1f       	adc	r22, r22
    70da:	77 1f       	adc	r23, r23
    70dc:	88 1f       	adc	r24, r24
    70de:	91 50       	subi	r25, 0x01	; 1
    70e0:	50 40       	sbci	r21, 0x00	; 0
    70e2:	a9 f7       	brne	.-22     	; 0x70ce <__mulsf3_pse+0x64>
    70e4:	9e 3f       	cpi	r25, 0xFE	; 254
    70e6:	51 05       	cpc	r21, r1
    70e8:	70 f0       	brcs	.+28     	; 0x7106 <__mulsf3_pse+0x9c>
    70ea:	f7 ce       	rjmp	.-530    	; 0x6eda <__fp_inf>
    70ec:	9f cf       	rjmp	.-194    	; 0x702c <__fp_szero>
    70ee:	5f 3f       	cpi	r21, 0xFF	; 255
    70f0:	ec f3       	brlt	.-6      	; 0x70ec <__mulsf3_pse+0x82>
    70f2:	98 3e       	cpi	r25, 0xE8	; 232
    70f4:	dc f3       	brlt	.-10     	; 0x70ec <__mulsf3_pse+0x82>
    70f6:	86 95       	lsr	r24
    70f8:	77 95       	ror	r23
    70fa:	67 95       	ror	r22
    70fc:	b7 95       	ror	r27
    70fe:	f7 95       	ror	r31
    7100:	e7 95       	ror	r30
    7102:	9f 5f       	subi	r25, 0xFF	; 255
    7104:	c1 f7       	brne	.-16     	; 0x70f6 <__mulsf3_pse+0x8c>
    7106:	fe 2b       	or	r31, r30
    7108:	88 0f       	add	r24, r24
    710a:	91 1d       	adc	r25, r1
    710c:	96 95       	lsr	r25
    710e:	87 95       	ror	r24
    7110:	97 f9       	bld	r25, 7
    7112:	08 95       	ret

00007114 <sin>:
    7114:	9f 93       	push	r25
    7116:	1e df       	rcall	.-452    	; 0x6f54 <__fp_rempio2>
    7118:	0f 90       	pop	r0
    711a:	07 fc       	sbrc	r0, 7
    711c:	ee 5f       	subi	r30, 0xFE	; 254
    711e:	52 cf       	rjmp	.-348    	; 0x6fc4 <__fp_sinus>
    7120:	11 f4       	brne	.+4      	; 0x7126 <sin+0x12>
    7122:	0e f4       	brtc	.+2      	; 0x7126 <sin+0x12>
    7124:	e0 ce       	rjmp	.-576    	; 0x6ee6 <__fp_nan>
    7126:	41 c0       	rjmp	.+130    	; 0x71aa <__fp_mpack>

00007128 <sqrt>:
    7128:	66 df       	rcall	.-308    	; 0x6ff6 <__fp_splitA>
    712a:	d0 f3       	brcs	.-12     	; 0x7120 <sin+0xc>
    712c:	99 23       	and	r25, r25
    712e:	d9 f3       	breq	.-10     	; 0x7126 <sin+0x12>
    7130:	ce f3       	brts	.-14     	; 0x7124 <sin+0x10>
    7132:	9f 57       	subi	r25, 0x7F	; 127
    7134:	55 0b       	sbc	r21, r21
    7136:	87 ff       	sbrs	r24, 7
    7138:	46 d0       	rcall	.+140    	; 0x71c6 <__fp_norm2>
    713a:	00 24       	eor	r0, r0
    713c:	a0 e6       	ldi	r26, 0x60	; 96
    713e:	40 ea       	ldi	r20, 0xA0	; 160
    7140:	90 01       	movw	r18, r0
    7142:	80 58       	subi	r24, 0x80	; 128
    7144:	56 95       	lsr	r21
    7146:	97 95       	ror	r25
    7148:	28 f4       	brcc	.+10     	; 0x7154 <sqrt+0x2c>
    714a:	80 5c       	subi	r24, 0xC0	; 192
    714c:	66 0f       	add	r22, r22
    714e:	77 1f       	adc	r23, r23
    7150:	88 1f       	adc	r24, r24
    7152:	20 f0       	brcs	.+8      	; 0x715c <sqrt+0x34>
    7154:	26 17       	cp	r18, r22
    7156:	37 07       	cpc	r19, r23
    7158:	48 07       	cpc	r20, r24
    715a:	30 f4       	brcc	.+12     	; 0x7168 <sqrt+0x40>
    715c:	62 1b       	sub	r22, r18
    715e:	73 0b       	sbc	r23, r19
    7160:	84 0b       	sbc	r24, r20
    7162:	20 29       	or	r18, r0
    7164:	31 29       	or	r19, r1
    7166:	4a 2b       	or	r20, r26
    7168:	a6 95       	lsr	r26
    716a:	17 94       	ror	r1
    716c:	07 94       	ror	r0
    716e:	20 25       	eor	r18, r0
    7170:	31 25       	eor	r19, r1
    7172:	4a 27       	eor	r20, r26
    7174:	58 f7       	brcc	.-42     	; 0x714c <sqrt+0x24>
    7176:	66 0f       	add	r22, r22
    7178:	77 1f       	adc	r23, r23
    717a:	88 1f       	adc	r24, r24
    717c:	20 f0       	brcs	.+8      	; 0x7186 <sqrt+0x5e>
    717e:	26 17       	cp	r18, r22
    7180:	37 07       	cpc	r19, r23
    7182:	48 07       	cpc	r20, r24
    7184:	30 f4       	brcc	.+12     	; 0x7192 <sqrt+0x6a>
    7186:	62 0b       	sbc	r22, r18
    7188:	73 0b       	sbc	r23, r19
    718a:	84 0b       	sbc	r24, r20
    718c:	20 0d       	add	r18, r0
    718e:	31 1d       	adc	r19, r1
    7190:	41 1d       	adc	r20, r1
    7192:	a0 95       	com	r26
    7194:	81 f7       	brne	.-32     	; 0x7176 <sqrt+0x4e>
    7196:	b9 01       	movw	r22, r18
    7198:	84 2f       	mov	r24, r20
    719a:	91 58       	subi	r25, 0x81	; 129
    719c:	88 0f       	add	r24, r24
    719e:	96 95       	lsr	r25
    71a0:	87 95       	ror	r24
    71a2:	08 95       	ret

000071a4 <square>:
    71a4:	9b 01       	movw	r18, r22
    71a6:	ac 01       	movw	r20, r24
    71a8:	52 cf       	rjmp	.-348    	; 0x704e <__mulsf3>

000071aa <__fp_mpack>:
    71aa:	9f 3f       	cpi	r25, 0xFF	; 255
    71ac:	31 f0       	breq	.+12     	; 0x71ba <__fp_mpack_finite+0xc>

000071ae <__fp_mpack_finite>:
    71ae:	91 50       	subi	r25, 0x01	; 1
    71b0:	20 f4       	brcc	.+8      	; 0x71ba <__fp_mpack_finite+0xc>
    71b2:	87 95       	ror	r24
    71b4:	77 95       	ror	r23
    71b6:	67 95       	ror	r22
    71b8:	b7 95       	ror	r27
    71ba:	88 0f       	add	r24, r24
    71bc:	91 1d       	adc	r25, r1
    71be:	96 95       	lsr	r25
    71c0:	87 95       	ror	r24
    71c2:	97 f9       	bld	r25, 7
    71c4:	08 95       	ret

000071c6 <__fp_norm2>:
    71c6:	91 50       	subi	r25, 0x01	; 1
    71c8:	50 40       	sbci	r21, 0x00	; 0
    71ca:	66 0f       	add	r22, r22
    71cc:	77 1f       	adc	r23, r23
    71ce:	88 1f       	adc	r24, r24
    71d0:	d2 f7       	brpl	.-12     	; 0x71c6 <__fp_norm2>
    71d2:	08 95       	ret

000071d4 <__fp_powsodd>:
    71d4:	9f 93       	push	r25
    71d6:	8f 93       	push	r24
    71d8:	7f 93       	push	r23
    71da:	6f 93       	push	r22
    71dc:	ff 93       	push	r31
    71de:	ef 93       	push	r30
    71e0:	9b 01       	movw	r18, r22
    71e2:	ac 01       	movw	r20, r24
    71e4:	34 df       	rcall	.-408    	; 0x704e <__mulsf3>
    71e6:	ef 91       	pop	r30
    71e8:	ff 91       	pop	r31
    71ea:	80 de       	rcall	.-768    	; 0x6eec <__fp_powser>
    71ec:	2f 91       	pop	r18
    71ee:	3f 91       	pop	r19
    71f0:	4f 91       	pop	r20
    71f2:	5f 91       	pop	r21
    71f4:	2c cf       	rjmp	.-424    	; 0x704e <__mulsf3>

000071f6 <__mulsi3>:
    71f6:	db 01       	movw	r26, r22
    71f8:	8f 93       	push	r24
    71fa:	9f 93       	push	r25
    71fc:	5b d0       	rcall	.+182    	; 0x72b4 <__muluhisi3>
    71fe:	bf 91       	pop	r27
    7200:	af 91       	pop	r26
    7202:	a2 9f       	mul	r26, r18
    7204:	80 0d       	add	r24, r0
    7206:	91 1d       	adc	r25, r1
    7208:	a3 9f       	mul	r26, r19
    720a:	90 0d       	add	r25, r0
    720c:	b2 9f       	mul	r27, r18
    720e:	90 0d       	add	r25, r0
    7210:	11 24       	eor	r1, r1
    7212:	08 95       	ret

00007214 <__divmodhi4>:
    7214:	97 fb       	bst	r25, 7
    7216:	07 2e       	mov	r0, r23
    7218:	16 f4       	brtc	.+4      	; 0x721e <__divmodhi4+0xa>
    721a:	00 94       	com	r0
    721c:	06 d0       	rcall	.+12     	; 0x722a <__divmodhi4_neg1>
    721e:	77 fd       	sbrc	r23, 7
    7220:	08 d0       	rcall	.+16     	; 0x7232 <__divmodhi4_neg2>
    7222:	58 d0       	rcall	.+176    	; 0x72d4 <__udivmodhi4>
    7224:	07 fc       	sbrc	r0, 7
    7226:	05 d0       	rcall	.+10     	; 0x7232 <__divmodhi4_neg2>
    7228:	3e f4       	brtc	.+14     	; 0x7238 <__divmodhi4_exit>

0000722a <__divmodhi4_neg1>:
    722a:	90 95       	com	r25
    722c:	81 95       	neg	r24
    722e:	9f 4f       	sbci	r25, 0xFF	; 255
    7230:	08 95       	ret

00007232 <__divmodhi4_neg2>:
    7232:	70 95       	com	r23
    7234:	61 95       	neg	r22
    7236:	7f 4f       	sbci	r23, 0xFF	; 255

00007238 <__divmodhi4_exit>:
    7238:	08 95       	ret

0000723a <__udivmodsi4>:
    723a:	a1 e2       	ldi	r26, 0x21	; 33
    723c:	1a 2e       	mov	r1, r26
    723e:	aa 1b       	sub	r26, r26
    7240:	bb 1b       	sub	r27, r27
    7242:	fd 01       	movw	r30, r26
    7244:	0d c0       	rjmp	.+26     	; 0x7260 <__udivmodsi4_ep>

00007246 <__udivmodsi4_loop>:
    7246:	aa 1f       	adc	r26, r26
    7248:	bb 1f       	adc	r27, r27
    724a:	ee 1f       	adc	r30, r30
    724c:	ff 1f       	adc	r31, r31
    724e:	a2 17       	cp	r26, r18
    7250:	b3 07       	cpc	r27, r19
    7252:	e4 07       	cpc	r30, r20
    7254:	f5 07       	cpc	r31, r21
    7256:	20 f0       	brcs	.+8      	; 0x7260 <__udivmodsi4_ep>
    7258:	a2 1b       	sub	r26, r18
    725a:	b3 0b       	sbc	r27, r19
    725c:	e4 0b       	sbc	r30, r20
    725e:	f5 0b       	sbc	r31, r21

00007260 <__udivmodsi4_ep>:
    7260:	66 1f       	adc	r22, r22
    7262:	77 1f       	adc	r23, r23
    7264:	88 1f       	adc	r24, r24
    7266:	99 1f       	adc	r25, r25
    7268:	1a 94       	dec	r1
    726a:	69 f7       	brne	.-38     	; 0x7246 <__udivmodsi4_loop>
    726c:	60 95       	com	r22
    726e:	70 95       	com	r23
    7270:	80 95       	com	r24
    7272:	90 95       	com	r25
    7274:	9b 01       	movw	r18, r22
    7276:	ac 01       	movw	r20, r24
    7278:	bd 01       	movw	r22, r26
    727a:	cf 01       	movw	r24, r30
    727c:	08 95       	ret

0000727e <__divmodsi4>:
    727e:	05 2e       	mov	r0, r21
    7280:	97 fb       	bst	r25, 7
    7282:	16 f4       	brtc	.+4      	; 0x7288 <__divmodsi4+0xa>
    7284:	00 94       	com	r0
    7286:	06 d0       	rcall	.+12     	; 0x7294 <__divmodsi4_neg1>
    7288:	57 fd       	sbrc	r21, 7
    728a:	0c d0       	rcall	.+24     	; 0x72a4 <__divmodsi4_neg2>
    728c:	d6 df       	rcall	.-84     	; 0x723a <__udivmodsi4>
    728e:	07 fc       	sbrc	r0, 7
    7290:	09 d0       	rcall	.+18     	; 0x72a4 <__divmodsi4_neg2>
    7292:	7e f4       	brtc	.+30     	; 0x72b2 <__divmodsi4_exit>

00007294 <__divmodsi4_neg1>:
    7294:	90 95       	com	r25
    7296:	80 95       	com	r24
    7298:	70 95       	com	r23
    729a:	61 95       	neg	r22
    729c:	7f 4f       	sbci	r23, 0xFF	; 255
    729e:	8f 4f       	sbci	r24, 0xFF	; 255
    72a0:	9f 4f       	sbci	r25, 0xFF	; 255
    72a2:	08 95       	ret

000072a4 <__divmodsi4_neg2>:
    72a4:	50 95       	com	r21
    72a6:	40 95       	com	r20
    72a8:	30 95       	com	r19
    72aa:	21 95       	neg	r18
    72ac:	3f 4f       	sbci	r19, 0xFF	; 255
    72ae:	4f 4f       	sbci	r20, 0xFF	; 255
    72b0:	5f 4f       	sbci	r21, 0xFF	; 255

000072b2 <__divmodsi4_exit>:
    72b2:	08 95       	ret

000072b4 <__muluhisi3>:
    72b4:	23 d0       	rcall	.+70     	; 0x72fc <__umulhisi3>
    72b6:	a5 9f       	mul	r26, r21
    72b8:	90 0d       	add	r25, r0
    72ba:	b4 9f       	mul	r27, r20
    72bc:	90 0d       	add	r25, r0
    72be:	a4 9f       	mul	r26, r20
    72c0:	80 0d       	add	r24, r0
    72c2:	91 1d       	adc	r25, r1
    72c4:	11 24       	eor	r1, r1
    72c6:	08 95       	ret

000072c8 <__mulshisi3>:
    72c8:	b7 ff       	sbrs	r27, 7
    72ca:	f4 cf       	rjmp	.-24     	; 0x72b4 <__muluhisi3>

000072cc <__mulohisi3>:
    72cc:	f3 df       	rcall	.-26     	; 0x72b4 <__muluhisi3>
    72ce:	82 1b       	sub	r24, r18
    72d0:	93 0b       	sbc	r25, r19
    72d2:	08 95       	ret

000072d4 <__udivmodhi4>:
    72d4:	aa 1b       	sub	r26, r26
    72d6:	bb 1b       	sub	r27, r27
    72d8:	51 e1       	ldi	r21, 0x11	; 17
    72da:	07 c0       	rjmp	.+14     	; 0x72ea <__udivmodhi4_ep>

000072dc <__udivmodhi4_loop>:
    72dc:	aa 1f       	adc	r26, r26
    72de:	bb 1f       	adc	r27, r27
    72e0:	a6 17       	cp	r26, r22
    72e2:	b7 07       	cpc	r27, r23
    72e4:	10 f0       	brcs	.+4      	; 0x72ea <__udivmodhi4_ep>
    72e6:	a6 1b       	sub	r26, r22
    72e8:	b7 0b       	sbc	r27, r23

000072ea <__udivmodhi4_ep>:
    72ea:	88 1f       	adc	r24, r24
    72ec:	99 1f       	adc	r25, r25
    72ee:	5a 95       	dec	r21
    72f0:	a9 f7       	brne	.-22     	; 0x72dc <__udivmodhi4_loop>
    72f2:	80 95       	com	r24
    72f4:	90 95       	com	r25
    72f6:	bc 01       	movw	r22, r24
    72f8:	cd 01       	movw	r24, r26
    72fa:	08 95       	ret

000072fc <__umulhisi3>:
    72fc:	a2 9f       	mul	r26, r18
    72fe:	b0 01       	movw	r22, r0
    7300:	b3 9f       	mul	r27, r19
    7302:	c0 01       	movw	r24, r0
    7304:	a3 9f       	mul	r26, r19
    7306:	01 d0       	rcall	.+2      	; 0x730a <__umulhisi3+0xe>
    7308:	b2 9f       	mul	r27, r18
    730a:	70 0d       	add	r23, r0
    730c:	81 1d       	adc	r24, r1
    730e:	11 24       	eor	r1, r1
    7310:	91 1d       	adc	r25, r1
    7312:	08 95       	ret

00007314 <_exit>:
    7314:	f8 94       	cli

00007316 <__stop_program>:
    7316:	ff cf       	rjmp	.-2      	; 0x7316 <__stop_program>
