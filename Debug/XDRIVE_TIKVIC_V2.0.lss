
XDRIVE_TIKVIC_V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000072f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  000072f4  00007388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001285  00802008  00802008  00007390  2**0
                  ALLOC
  3 .stab         000035f4  00000000  00000000  00007390  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f10  00000000  00000000  0000a984  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000b894  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003c0  00000000  00000000  0000b8c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a410  00000000  00000000  0000bc83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000120e  00000000  00000000  00016093  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003d3c  00000000  00000000  000172a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d44  00000000  00000000  0001afe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003056  00000000  00000000  0001bd24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002ca6  00000000  00000000  0001ed7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000330  00000000  00000000  00021a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
       2:	00 00       	nop
       4:	43 c1       	rjmp	.+646    	; 0x28c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c1       	rjmp	.+642    	; 0x28c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c1       	rjmp	.+638    	; 0x28c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c1       	rjmp	.+634    	; 0x28c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c1       	rjmp	.+630    	; 0x28c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c1       	rjmp	.+626    	; 0x28c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c1       	rjmp	.+622    	; 0x28c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c1       	rjmp	.+618    	; 0x28c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c1       	rjmp	.+614    	; 0x28c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c1       	rjmp	.+610    	; 0x28c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c1       	rjmp	.+606    	; 0x28c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c1       	rjmp	.+602    	; 0x28c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c1       	rjmp	.+598    	; 0x28c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c1       	rjmp	.+594    	; 0x28c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c1       	rjmp	.+590    	; 0x28c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c1       	rjmp	.+586    	; 0x28c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c1       	rjmp	.+582    	; 0x28c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c1       	rjmp	.+578    	; 0x28c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c1       	rjmp	.+574    	; 0x28c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c1       	rjmp	.+570    	; 0x28c <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c1       	rjmp	.+566    	; 0x28c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c1       	rjmp	.+562    	; 0x28c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	17 c1       	rjmp	.+558    	; 0x28c <__bad_interrupt>
      5e:	00 00       	nop
      60:	15 c1       	rjmp	.+554    	; 0x28c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <__vector_25>
      68:	0c 94 d2 23 	jmp	0x47a4	; 0x47a4 <__vector_26>
      6c:	0f c1       	rjmp	.+542    	; 0x28c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c1       	rjmp	.+538    	; 0x28c <__bad_interrupt>
      72:	00 00       	nop
      74:	0b c1       	rjmp	.+534    	; 0x28c <__bad_interrupt>
      76:	00 00       	nop
      78:	09 c1       	rjmp	.+530    	; 0x28c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	07 c1       	rjmp	.+526    	; 0x28c <__bad_interrupt>
      7e:	00 00       	nop
      80:	05 c1       	rjmp	.+522    	; 0x28c <__bad_interrupt>
      82:	00 00       	nop
      84:	03 c1       	rjmp	.+518    	; 0x28c <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 07 24 	jmp	0x480e	; 0x480e <__vector_34>
      8c:	ff c0       	rjmp	.+510    	; 0x28c <__bad_interrupt>
      8e:	00 00       	nop
      90:	fd c0       	rjmp	.+506    	; 0x28c <__bad_interrupt>
      92:	00 00       	nop
      94:	fb c0       	rjmp	.+502    	; 0x28c <__bad_interrupt>
      96:	00 00       	nop
      98:	f9 c0       	rjmp	.+498    	; 0x28c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f7 c0       	rjmp	.+494    	; 0x28c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f5 c0       	rjmp	.+490    	; 0x28c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f3 c0       	rjmp	.+486    	; 0x28c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f1 c0       	rjmp	.+482    	; 0x28c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ef c0       	rjmp	.+478    	; 0x28c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ed c0       	rjmp	.+474    	; 0x28c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	eb c0       	rjmp	.+470    	; 0x28c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e9 c0       	rjmp	.+466    	; 0x28c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e7 c0       	rjmp	.+462    	; 0x28c <__bad_interrupt>
      be:	00 00       	nop
      c0:	e5 c0       	rjmp	.+458    	; 0x28c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e3 c0       	rjmp	.+454    	; 0x28c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e1 c0       	rjmp	.+450    	; 0x28c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	df c0       	rjmp	.+446    	; 0x28c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	dd c0       	rjmp	.+442    	; 0x28c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	be c3       	rjmp	.+1916   	; 0x852 <__vector_53>
      d6:	00 00       	nop
      d8:	d9 c0       	rjmp	.+434    	; 0x28c <__bad_interrupt>
      da:	00 00       	nop
      dc:	d7 c0       	rjmp	.+430    	; 0x28c <__bad_interrupt>
      de:	00 00       	nop
      e0:	d5 c0       	rjmp	.+426    	; 0x28c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d3 c0       	rjmp	.+422    	; 0x28c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a4 c4       	rjmp	.+2376   	; 0xa32 <__vector_58>
      ea:	00 00       	nop
      ec:	0c 94 68 23 	jmp	0x46d0	; 0x46d0 <__vector_59>
      f0:	cd c0       	rjmp	.+410    	; 0x28c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__vector_61>
      f8:	0c 94 9d 23 	jmp	0x473a	; 0x473a <__vector_62>
      fc:	c7 c0       	rjmp	.+398    	; 0x28c <__bad_interrupt>
      fe:	00 00       	nop
     100:	c5 c0       	rjmp	.+394    	; 0x28c <__bad_interrupt>
     102:	00 00       	nop
     104:	c3 c0       	rjmp	.+390    	; 0x28c <__bad_interrupt>
     106:	00 00       	nop
     108:	c1 c0       	rjmp	.+386    	; 0x28c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	bf c0       	rjmp	.+382    	; 0x28c <__bad_interrupt>
     10e:	00 00       	nop
     110:	bd c0       	rjmp	.+378    	; 0x28c <__bad_interrupt>
     112:	00 00       	nop
     114:	bb c0       	rjmp	.+374    	; 0x28c <__bad_interrupt>
     116:	00 00       	nop
     118:	b9 c0       	rjmp	.+370    	; 0x28c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b7 c0       	rjmp	.+366    	; 0x28c <__bad_interrupt>
     11e:	00 00       	nop
     120:	b5 c0       	rjmp	.+362    	; 0x28c <__bad_interrupt>
     122:	00 00       	nop
     124:	b3 c0       	rjmp	.+358    	; 0x28c <__bad_interrupt>
     126:	00 00       	nop
     128:	b1 c0       	rjmp	.+354    	; 0x28c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	af c0       	rjmp	.+350    	; 0x28c <__bad_interrupt>
     12e:	00 00       	nop
     130:	ad c0       	rjmp	.+346    	; 0x28c <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 14 23 	jmp	0x4628	; 0x4628 <__vector_77>
     138:	a9 c0       	rjmp	.+338    	; 0x28c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a7 c0       	rjmp	.+334    	; 0x28c <__bad_interrupt>
     13e:	00 00       	nop
     140:	a5 c0       	rjmp	.+330    	; 0x28c <__bad_interrupt>
     142:	00 00       	nop
     144:	a3 c0       	rjmp	.+326    	; 0x28c <__bad_interrupt>
     146:	00 00       	nop
     148:	a1 c0       	rjmp	.+322    	; 0x28c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 3e 23 	jmp	0x467c	; 0x467c <__vector_83>
     150:	9d c0       	rjmp	.+314    	; 0x28c <__bad_interrupt>
     152:	00 00       	nop
     154:	9b c0       	rjmp	.+310    	; 0x28c <__bad_interrupt>
     156:	00 00       	nop
     158:	99 c0       	rjmp	.+306    	; 0x28c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	97 c0       	rjmp	.+302    	; 0x28c <__bad_interrupt>
     15e:	00 00       	nop
     160:	95 c0       	rjmp	.+298    	; 0x28c <__bad_interrupt>
     162:	00 00       	nop
     164:	93 c0       	rjmp	.+294    	; 0x28c <__bad_interrupt>
     166:	00 00       	nop
     168:	91 c0       	rjmp	.+290    	; 0x28c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	8f c0       	rjmp	.+286    	; 0x28c <__bad_interrupt>
     16e:	00 00       	nop
     170:	8d c0       	rjmp	.+282    	; 0x28c <__bad_interrupt>
     172:	00 00       	nop
     174:	8b c0       	rjmp	.+278    	; 0x28c <__bad_interrupt>
     176:	00 00       	nop
     178:	89 c0       	rjmp	.+274    	; 0x28c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	87 c0       	rjmp	.+270    	; 0x28c <__bad_interrupt>
     17e:	00 00       	nop
     180:	85 c0       	rjmp	.+266    	; 0x28c <__bad_interrupt>
     182:	00 00       	nop
     184:	83 c0       	rjmp	.+262    	; 0x28c <__bad_interrupt>
     186:	00 00       	nop
     188:	81 c0       	rjmp	.+258    	; 0x28c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7f c0       	rjmp	.+254    	; 0x28c <__bad_interrupt>
     18e:	00 00       	nop
     190:	7d c0       	rjmp	.+250    	; 0x28c <__bad_interrupt>
     192:	00 00       	nop
     194:	7b c0       	rjmp	.+246    	; 0x28c <__bad_interrupt>
     196:	00 00       	nop
     198:	79 c0       	rjmp	.+242    	; 0x28c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	77 c0       	rjmp	.+238    	; 0x28c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	75 c0       	rjmp	.+234    	; 0x28c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	73 c0       	rjmp	.+230    	; 0x28c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	71 c0       	rjmp	.+226    	; 0x28c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6f c0       	rjmp	.+222    	; 0x28c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 e6 33 	jmp	0x67cc	; 0x67cc <__vector_108>
     1b4:	6b c0       	rjmp	.+214    	; 0x28c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	0c 94 c7 33 	jmp	0x678e	; 0x678e <__vector_110>
     1bc:	67 c0       	rjmp	.+206    	; 0x28c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	65 c0       	rjmp	.+202    	; 0x28c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	63 c0       	rjmp	.+198    	; 0x28c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	61 c0       	rjmp	.+194    	; 0x28c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5f c0       	rjmp	.+190    	; 0x28c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	5d c0       	rjmp	.+186    	; 0x28c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	5b c0       	rjmp	.+182    	; 0x28c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	59 c0       	rjmp	.+178    	; 0x28c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	57 c0       	rjmp	.+174    	; 0x28c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	55 c0       	rjmp	.+170    	; 0x28c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	53 c0       	rjmp	.+166    	; 0x28c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	51 c0       	rjmp	.+162    	; 0x28c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4f c0       	rjmp	.+158    	; 0x28c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	4d c0       	rjmp	.+154    	; 0x28c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	08 4a       	sbci	r16, 0xA8	; 168
     1f6:	d7 3b       	cpi	r29, 0xB7	; 183
     1f8:	3b ce       	rjmp	.-906    	; 0xfffffe70 <__eeprom_end+0xff7efe70>
     1fa:	01 6e       	ori	r16, 0xE1	; 225
     1fc:	84 bc       	out	0x24, r8	; 36
     1fe:	bf fd       	.word	0xfdbf	; ????
     200:	c1 2f       	mov	r28, r17
     202:	3d 6c       	ori	r19, 0xCD	; 205
     204:	74 31       	cpi	r23, 0x14	; 20
     206:	9a bd       	out	0x2a, r25	; 42
     208:	56 83       	std	Z+6, r21	; 0x06
     20a:	3d da       	rcall	.-2950   	; 0xfffff686 <__eeprom_end+0xff7ef686>
     20c:	3d 00       	.word	0x003d	; ????
     20e:	c7 7f       	andi	r28, 0xF7	; 247
     210:	11 be       	out	0x31, r1	; 49
     212:	d9 e4       	ldi	r29, 0x49	; 73
     214:	bb 4c       	sbci	r27, 0xCB	; 203
     216:	3e 91       	ld	r19, -X
     218:	6b aa       	std	Y+51, r6	; 0x33
     21a:	aa be       	out	0x3a, r10	; 58
     21c:	00 00       	nop
     21e:	00 80       	ld	r0, Z
     220:	3f 05       	cpc	r19, r15
     222:	a8 4c       	sbci	r26, 0xC8	; 200
     224:	cd b2       	in	r12, 0x1d	; 29
     226:	d4 4e       	sbci	r29, 0xE4	; 228
     228:	b9 38       	cpi	r27, 0x89	; 137
     22a:	36 a9       	ldd	r19, Z+54	; 0x36
     22c:	02 0c       	add	r0, r2
     22e:	50 b9       	out	0x00, r21	; 0
     230:	91 86       	std	Z+9, r9	; 0x09
     232:	88 08       	sbc	r8, r8
     234:	3c a6       	std	Y+44, r3	; 0x2c
     236:	aa aa       	std	Y+50, r10	; 0x32
     238:	2a be       	out	0x3a, r2	; 58
     23a:	00 00       	nop
     23c:	00 80       	ld	r0, Z
     23e:	3f 00       	.word	0x003f	; ????

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	df e3       	ldi	r29, 0x3F	; 63
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	0c bf       	out	0x3c, r16	; 60
     250:	18 be       	out	0x38, r1	; 56
     252:	19 be       	out	0x39, r1	; 57
     254:	1a be       	out	0x3a, r1	; 58
     256:	1b be       	out	0x3b, r1	; 59

00000258 <__do_copy_data>:
     258:	10 e2       	ldi	r17, 0x20	; 32
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b0 e2       	ldi	r27, 0x20	; 32
     25e:	e4 ef       	ldi	r30, 0xF4	; 244
     260:	f2 e7       	ldi	r31, 0x72	; 114
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	0b bf       	out	0x3b, r16	; 59
     266:	02 c0       	rjmp	.+4      	; 0x26c <__do_copy_data+0x14>
     268:	07 90       	elpm	r0, Z+
     26a:	0d 92       	st	X+, r0
     26c:	a8 30       	cpi	r26, 0x08	; 8
     26e:	b1 07       	cpc	r27, r17
     270:	d9 f7       	brne	.-10     	; 0x268 <__do_copy_data+0x10>
     272:	1b be       	out	0x3b, r1	; 59

00000274 <__do_clear_bss>:
     274:	22 e3       	ldi	r18, 0x32	; 50
     276:	a8 e0       	ldi	r26, 0x08	; 8
     278:	b0 e2       	ldi	r27, 0x20	; 32
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	ad 38       	cpi	r26, 0x8D	; 141
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <main>
     288:	0c 94 78 39 	jmp	0x72f0	; 0x72f0 <_exit>

0000028c <__bad_interrupt>:
     28c:	b9 ce       	rjmp	.-654    	; 0x0 <__vectors>

0000028e <ADC_ResultCh_GetWord>:

	// Wait 4*COMMEN_MODE_CYCLES for common mode to settle.  
	delay_us(4*COMMEN_MODE_CYCLES);

	// Set prescaler to old value 
	adc->PRESCALER = prescaler_val;
     28e:	46 2f       	mov	r20, r22
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	66 23       	and	r22, r22
     294:	0c f4       	brge	.+2      	; 0x298 <ADC_ResultCh_GetWord+0xa>
     296:	5f 6f       	ori	r21, 0xFF	; 255
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	fc 01       	movw	r30, r24
     29c:	23 83       	std	Z+3, r18	; 0x03
     29e:	24 81       	ldd	r18, Z+4	; 0x04
     2a0:	35 81       	ldd	r19, Z+5	; 0x05
     2a2:	24 1b       	sub	r18, r20
     2a4:	35 0b       	sbc	r19, r21
     2a6:	82 2f       	mov	r24, r18
     2a8:	93 2f       	mov	r25, r19
     2aa:	08 95       	ret

000002ac <ADC_ResultCh_GetLowByte>:
     2ac:	21 e0       	ldi	r18, 0x01	; 1
     2ae:	fc 01       	movw	r30, r24
     2b0:	23 83       	std	Z+3, r18	; 0x03
     2b2:	84 81       	ldd	r24, Z+4	; 0x04
     2b4:	86 1b       	sub	r24, r22
     2b6:	08 95       	ret

000002b8 <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
     2b8:	fc 01       	movw	r30, r24
  	// Store old prescaler value.  
  	uint8_t prescaler_val = adc->PRESCALER;
     2ba:	84 81       	ldd	r24, Z+4	; 0x04

	// Set prescaler value to minimum value.  
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	94 83       	std	Z+4, r25	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c0:	af ef       	ldi	r26, 0xFF	; 255
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	11 97       	sbiw	r26, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <ADC_Wait_32MHz+0xc>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <ADC_Wait_32MHz+0x12>
     2ca:	00 00       	nop

	// wait 8*COMMEN_MODE_CYCLES for common mode to settle 
	delay_us(8*COMMEN_MODE_CYCLES);

	// Set prescaler to old value 
	adc->PRESCALER = prescaler_val;
     2cc:	84 83       	std	Z+4, r24	; 0x04
     2ce:	08 95       	ret

000002d0 <ADC_Offset_Get>:
 *  \param adc Pointer to the ADC to calculate offset from.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get(ADC_t * adc)
{
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	ec 01       	movw	r28, r24
	uint8_t offset;

  	// Set up ADC to get offset.  
  	ADC_ConvMode_and_Resolution_Config(adc, true, ADC_RESOLUTION_12BIT_gc);
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	89 7e       	andi	r24, 0xE9	; 233
     2da:	80 61       	ori	r24, 0x10	; 16
     2dc:	89 83       	std	Y+1, r24	; 0x01

	ADC_Prescaler_Config(adc , ADC_PRESCALER_DIV8_gc);
     2de:	8c 81       	ldd	r24, Y+4	; 0x04
     2e0:	88 7f       	andi	r24, 0xF8	; 248
     2e2:	81 60       	ori	r24, 0x01	; 1
     2e4:	8c 83       	std	Y+4, r24	; 0x04

	ADC_Referance_Config(adc , ADC_REFSEL_INT1V_gc);
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	8f 7c       	andi	r24, 0xCF	; 207
     2ea:	8a 83       	std	Y+2, r24	; 0x02

	ADC_Ch_InputMode_and_Gain_Config(&(adc->CH0),
     2ec:	88 a1       	ldd	r24, Y+32	; 0x20
     2ee:	80 7e       	andi	r24, 0xE0	; 224
     2f0:	82 60       	ori	r24, 0x02	; 2
     2f2:	88 a3       	std	Y+32, r24	; 0x20
	                                 ADC_CH_INPUTMODE_DIFF_gc,
	                                 ADC_CH_GAIN_1X_gc);

	ADC_Ch_InputMux_Config(&(adc->CH0), ADC_CH_MUXPOS_PIN0_gc, ADC_CH_MUXNEG_PIN0_gc);
     2f4:	19 a2       	std	Y+33, r1	; 0x21

	// Enable ADC.  
	ADC_Enable(adc);
     2f6:	88 81       	ld	r24, Y
     2f8:	81 60       	ori	r24, 0x01	; 1
     2fa:	88 83       	st	Y, r24

	// Wait until ADC is ready.  
	ADC_Wait_32MHz(adc);
     2fc:	ce 01       	movw	r24, r28
     2fe:	dc df       	rcall	.-72     	; 0x2b8 <ADC_Wait_32MHz>

	// Do one conversion to find offset.  
	ADC_Ch_Conversion_Start(&(adc->CH0));
     300:	88 a1       	ldd	r24, Y+32	; 0x20
     302:	80 68       	ori	r24, 0x80	; 128
     304:	88 a3       	std	Y+32, r24	; 0x20

	do{
	}while(!ADC_Ch_Conversion_Complete(&(adc->CH0)));
     306:	8b a1       	ldd	r24, Y+35	; 0x23
     308:	80 ff       	sbrs	r24, 0
     30a:	fd cf       	rjmp	.-6      	; 0x306 <ADC_Offset_Get+0x36>
	offset = ADC_ResultCh_GetLowByte(&(adc->CH0), 0x00);
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	ce 01       	movw	r24, r28
     310:	80 96       	adiw	r24, 0x20	; 32
     312:	cc df       	rcall	.-104    	; 0x2ac <ADC_ResultCh_GetLowByte>

	// Disable ADC.  
	ADC_Disable(adc);
     314:	98 81       	ld	r25, Y
     316:	9e 7f       	andi	r25, 0xFE	; 254
     318:	98 83       	st	Y, r25

	return offset;
}
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <SP_ReadCalibrationByte>:
		  "M" (NVM_CMD_READ_CALIB_ROW_gc),
		  "M" (NVM_CMD_NO_OPERATION_gc)
		: "r20", "r30", "r31"
		); */

		GPIO30 = index;  // r30 - LSB of Z pointer to EEPROM
     320:	8e bb       	out	0x1e, r24	; 30
		GPIO31 = 0;
     322:	1f ba       	out	0x1f, r1	; 31
		NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     324:	ea ec       	ldi	r30, 0xCA	; 202
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	80 83       	st	Z, r24
		result = GPIO30;
     32c:	8e b3       	in	r24, 0x1e	; 30
		NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     32e:	10 82       	st	Z, r1


		return result;

}
     330:	08 95       	ret

00000332 <ADC_CalibrationValues_Set>:
 *  register. The calibration data reduces the gain error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
 void ADC_CalibrationValues_Set(ADC_t * adc)
{
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     338:	c1 15       	cp	r28, r1
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	d8 07       	cpc	r29, r24
     33e:	41 f4       	brne	.+16     	; 0x350 <ADC_CalibrationValues_Set+0x1e>
		 // Get ADCCAL0 from byte address 0x20 (Word address 0x10.  
		adc->CAL = SP_ReadCalibrationByte(0x20);
     340:	80 e2       	ldi	r24, 0x20	; 32
     342:	ee df       	rcall	.-36     	; 0x320 <SP_ReadCalibrationByte>
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	e0 e0       	ldi	r30, 0x00	; 0
     348:	f2 e0       	ldi	r31, 0x02	; 2
     34a:	84 87       	std	Z+12, r24	; 0x0c
     34c:	95 87       	std	Z+13, r25	; 0x0d
     34e:	05 c0       	rjmp	.+10     	; 0x35a <ADC_CalibrationValues_Set+0x28>
	}else {
		// Get ADCCAL0 from byte address 0x24 (Word address 0x12.  
		adc->CAL = SP_ReadCalibrationByte(0x24);
     350:	84 e2       	ldi	r24, 0x24	; 36
     352:	e6 df       	rcall	.-52     	; 0x320 <SP_ReadCalibrationByte>
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	8c 87       	std	Y+12, r24	; 0x0c
     358:	9d 87       	std	Y+13, r25	; 0x0d
	}
} 
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <Podesi_Parametre_Robota>:


void Podesi_Parametre_Robota(void)
{
	//mehanicke karakteristike
	metar = 38250*2; //75000; //broj inkremenata za 1m - eksperiment!      /39035*2 izracunata vrednost
     360:	84 ed       	ldi	r24, 0xD4	; 212
     362:	9a e2       	ldi	r25, 0x2A	; 42
     364:	a1 e0       	ldi	r26, 0x01	; 1
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	80 93 d3 24 	sts	0x24D3, r24
     36c:	90 93 d4 24 	sts	0x24D4, r25
     370:	a0 93 d5 24 	sts	0x24D5, r26
     374:	b0 93 d6 24 	sts	0x24D6, r27
	krug360 = 13925; //49650 - eksperiment 1;  //66250 - matematika;	//broj inkremenata za jedan krug - eksperiment!		//13653
     378:	85 e6       	ldi	r24, 0x65	; 101
     37a:	96 e3       	ldi	r25, 0x36	; 54
     37c:	a0 e0       	ldi	r26, 0x00	; 0
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	80 93 75 32 	sts	0x3275, r24
     384:	90 93 76 32 	sts	0x3276, r25
     388:	a0 93 77 32 	sts	0x3277, r26
     38c:	b0 93 78 32 	sts	0x3278, r27
	
	scale_factor_for_mm = metar / 1000;
     390:	60 91 d3 24 	lds	r22, 0x24D3
     394:	70 91 d4 24 	lds	r23, 0x24D4
     398:	80 91 d5 24 	lds	r24, 0x24D5
     39c:	90 91 d6 24 	lds	r25, 0x24D6
     3a0:	28 ee       	ldi	r18, 0xE8	; 232
     3a2:	33 e0       	ldi	r19, 0x03	; 3
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
     3ac:	20 93 00 2e 	sts	0x2E00, r18
     3b0:	30 93 01 2e 	sts	0x2E01, r19
	krug180 = krug360 >> 1;	
     3b4:	80 91 75 32 	lds	r24, 0x3275
     3b8:	90 91 76 32 	lds	r25, 0x3276
     3bc:	a0 91 77 32 	lds	r26, 0x3277
     3c0:	b0 91 78 32 	lds	r27, 0x3278
     3c4:	b5 95       	asr	r27
     3c6:	a7 95       	ror	r26
     3c8:	97 95       	ror	r25
     3ca:	87 95       	ror	r24
     3cc:	80 93 cf 28 	sts	0x28CF, r24
     3d0:	90 93 d0 28 	sts	0x28D0, r25
     3d4:	a0 93 d1 28 	sts	0x28D1, r26
     3d8:	b0 93 d2 28 	sts	0x28D2, r27
	krug90 =  krug360 >> 2;
     3dc:	80 91 75 32 	lds	r24, 0x3275
     3e0:	90 91 76 32 	lds	r25, 0x3276
     3e4:	a0 91 77 32 	lds	r26, 0x3277
     3e8:	b0 91 78 32 	lds	r27, 0x3278
     3ec:	b5 95       	asr	r27
     3ee:	a7 95       	ror	r26
     3f0:	97 95       	ror	r25
     3f2:	87 95       	ror	r24
     3f4:	b5 95       	asr	r27
     3f6:	a7 95       	ror	r26
     3f8:	97 95       	ror	r25
     3fa:	87 95       	ror	r24
     3fc:	80 93 7e 2e 	sts	0x2E7E, r24
     400:	90 93 7f 2e 	sts	0x2E7F, r25
     404:	a0 93 80 2e 	sts	0x2E80, r26
     408:	b0 93 81 2e 	sts	0x2E81, r27
	krug45 =  krug360 >> 3;			
     40c:	80 91 75 32 	lds	r24, 0x3275
     410:	90 91 76 32 	lds	r25, 0x3276
     414:	a0 91 77 32 	lds	r26, 0x3277
     418:	b0 91 78 32 	lds	r27, 0x3278
     41c:	68 94       	set
     41e:	12 f8       	bld	r1, 2
     420:	b5 95       	asr	r27
     422:	a7 95       	ror	r26
     424:	97 95       	ror	r25
     426:	87 95       	ror	r24
     428:	16 94       	lsr	r1
     42a:	d1 f7       	brne	.-12     	; 0x420 <Podesi_Parametre_Robota+0xc0>
     42c:	80 93 c8 24 	sts	0x24C8, r24
     430:	90 93 c9 24 	sts	0x24C9, r25
     434:	a0 93 ca 24 	sts	0x24CA, r26
     438:	b0 93 cb 24 	sts	0x24CB, r27

	smer_zadati = 1;						//1-napred, 2-nazad, 0-sam bira smer
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	80 93 5e 29 	sts	0x295E, r24
	zeljena_pravolinijska_brzina = 400;		//brzina kojom se pravo krece robot
     442:	80 e9       	ldi	r24, 0x90	; 144
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	80 93 7f 32 	sts	0x327F, r24
     44a:	90 93 80 32 	sts	0x3280, r25
	zeljena_brzina_okretanja = 300; //brzina kojom se okrece robot
     44e:	8c e2       	ldi	r24, 0x2C	; 44
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	80 93 61 2e 	sts	0x2E61, r24
     456:	90 93 62 2e 	sts	0x2E62, r25
	max_brzina_motora = 800;				//eksperimentalno utvrdjena max brzina motora [impuls/vreme_odabiranja(3ms)] (max je oko 1000)
     45a:	20 e2       	ldi	r18, 0x20	; 32
     45c:	33 e0       	ldi	r19, 0x03	; 3
     45e:	20 93 0f 2e 	sts	0x2E0F, r18
     462:	30 93 10 2e 	sts	0x2E10, r19
	
	modifikovana_zeljena_pravolinijska_brzina = zeljena_pravolinijska_brzina;
     466:	80 91 7f 32 	lds	r24, 0x327F
     46a:	90 91 80 32 	lds	r25, 0x3280
     46e:	80 93 b2 24 	sts	0x24B2, r24
     472:	90 93 b3 24 	sts	0x24B3, r25
	rezervni_ugao = krug45;		//vrednost ugaone greske preko koje se radi reorijentacija robota  
     476:	80 91 c8 24 	lds	r24, 0x24C8
     47a:	90 91 c9 24 	lds	r25, 0x24C9
     47e:	a0 91 ca 24 	lds	r26, 0x24CA
     482:	b0 91 cb 24 	lds	r27, 0x24CB
     486:	80 93 2f 2e 	sts	0x2E2F, r24
     48a:	90 93 30 2e 	sts	0x2E30, r25
	PWM_perioda = 800;			//PWM tajmer broji do 800 - frekvenicja 20KHz
     48e:	20 93 5e 2e 	sts	0x2E5E, r18
     492:	30 93 5f 2e 	sts	0x2E5F, r19
     496:	08 95       	ret

00000498 <Podesi_PID_Pojacanja>:

void Podesi_PID_Pojacanja(void)
{
	//PID parametri
	//Regulacija pravolinijskog kretanja
	Kp_pravolinijski = 6;		//1.89625
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	a0 ec       	ldi	r26, 0xC0	; 192
     49e:	b0 e4       	ldi	r27, 0x40	; 64
     4a0:	80 93 6a 29 	sts	0x296A, r24
     4a4:	90 93 6b 29 	sts	0x296B, r25
     4a8:	a0 93 6c 29 	sts	0x296C, r26
     4ac:	b0 93 6d 29 	sts	0x296D, r27
	Ki_pravolinijski = 1.3;
     4b0:	86 e6       	ldi	r24, 0x66	; 102
     4b2:	96 e6       	ldi	r25, 0x66	; 102
     4b4:	a6 ea       	ldi	r26, 0xA6	; 166
     4b6:	bf e3       	ldi	r27, 0x3F	; 63
     4b8:	80 93 79 32 	sts	0x3279, r24
     4bc:	90 93 7a 32 	sts	0x327A, r25
     4c0:	a0 93 7b 32 	sts	0x327B, r26
     4c4:	b0 93 7c 32 	sts	0x327C, r27
	Kd_pravolinijski = 125;		//6
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	aa ef       	ldi	r26, 0xFA	; 250
     4ce:	b2 e4       	ldi	r27, 0x42	; 66
     4d0:	80 93 bf 28 	sts	0x28BF, r24
     4d4:	90 93 c0 28 	sts	0x28C0, r25
     4d8:	a0 93 c1 28 	sts	0x28C1, r26
     4dc:	b0 93 c2 28 	sts	0x28C2, r27
	Kp_teta_pravolinijski = 15;	
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	a0 e7       	ldi	r26, 0x70	; 112
     4e6:	b1 e4       	ldi	r27, 0x41	; 65
     4e8:	80 93 fc 2d 	sts	0x2DFC, r24
     4ec:	90 93 fd 2d 	sts	0x2DFD, r25
     4f0:	a0 93 fe 2d 	sts	0x2DFE, r26
     4f4:	b0 93 ff 2d 	sts	0x2DFF, r27
		
	//Regulacija ugaonog zakretanja
	Kp_teta = 20;
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	a0 ea       	ldi	r26, 0xA0	; 160
     4fe:	b1 e4       	ldi	r27, 0x41	; 65
     500:	80 93 89 32 	sts	0x3289, r24
     504:	90 93 8a 32 	sts	0x328A, r25
     508:	a0 93 8b 32 	sts	0x328B, r26
     50c:	b0 93 8c 32 	sts	0x328C, r27
	Ki_teta = 1.2;
     510:	4a e9       	ldi	r20, 0x9A	; 154
     512:	59 e9       	ldi	r21, 0x99	; 153
     514:	69 e9       	ldi	r22, 0x99	; 153
     516:	7f e3       	ldi	r23, 0x3F	; 63
     518:	40 93 a8 24 	sts	0x24A8, r20
     51c:	50 93 a9 24 	sts	0x24A9, r21
     520:	60 93 aa 24 	sts	0x24AA, r22
     524:	70 93 ab 24 	sts	0x24AB, r23
	Kd_teta = 20;
     528:	80 93 a2 24 	sts	0x24A2, r24
     52c:	90 93 a3 24 	sts	0x24A3, r25
     530:	a0 93 a4 24 	sts	0x24A4, r26
     534:	b0 93 a5 24 	sts	0x24A5, r27
	Kp_teta_okretanje = 1.5;
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	a0 ec       	ldi	r26, 0xC0	; 192
     53e:	bf e3       	ldi	r27, 0x3F	; 63
     540:	80 93 65 2e 	sts	0x2E65, r24
     544:	90 93 66 2e 	sts	0x2E66, r25
     548:	a0 93 67 2e 	sts	0x2E67, r26
     54c:	b0 93 68 2e 	sts	0x2E68, r27
		
	//Regulacija brzine
	Kp_brzina = 0.2;	//0.4
     550:	8d ec       	ldi	r24, 0xCD	; 205
     552:	9c ec       	ldi	r25, 0xCC	; 204
     554:	ac e4       	ldi	r26, 0x4C	; 76
     556:	be e3       	ldi	r27, 0x3E	; 62
     558:	80 93 d3 28 	sts	0x28D3, r24
     55c:	90 93 d4 28 	sts	0x28D4, r25
     560:	a0 93 d5 28 	sts	0x28D5, r26
     564:	b0 93 d6 28 	sts	0x28D6, r27
	Ki_brzina = 0;
     568:	10 92 b8 24 	sts	0x24B8, r1
     56c:	10 92 b9 24 	sts	0x24B9, r1
     570:	10 92 ba 24 	sts	0x24BA, r1
     574:	10 92 bb 24 	sts	0x24BB, r1
	Kd_brzina = 0;
     578:	10 92 50 2e 	sts	0x2E50, r1
     57c:	10 92 51 2e 	sts	0x2E51, r1
     580:	10 92 52 2e 	sts	0x2E52, r1
     584:	10 92 53 2e 	sts	0x2E53, r1

	//Ubrzavanje po rampi
	Accel_PID_pos = 2;	//bilo 2
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	80 93 d0 24 	sts	0x24D0, r24
     590:	90 93 d1 24 	sts	0x24D1, r25
     594:	08 95       	ret

00000596 <Podesi_QDEC>:
}

void Podesi_QDEC(void)
{
     596:	ef 92       	push	r14
     598:	0f 93       	push	r16
	//enkoderski ulazi
	PORT_ConfigurePins( &PORTD, 0xFF, false, false, PORT_OPC_PULLUP_gc, PORT_ISC_FALLING_gc);
     59a:	68 94       	set
     59c:	ee 24       	eor	r14, r14
     59e:	e1 f8       	bld	r14, 1
     5a0:	08 e1       	ldi	r16, 0x18	; 24
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	6f ef       	ldi	r22, 0xFF	; 255
     5a8:	80 e6       	ldi	r24, 0x60	; 96
     5aa:	96 e0       	ldi	r25, 0x06	; 6
     5ac:	0e 94 71 32 	call	0x64e2	; 0x64e2 <PORT_ConfigurePins>
	PORT_SetPinsAsInput( &PORTD, 0xFF );
     5b0:	e0 e6       	ldi	r30, 0x60	; 96
     5b2:	f6 e0       	ldi	r31, 0x06	; 6
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
     5b6:	82 83       	std	Z+2, r24	; 0x02
	
	//Levi pasivni PORTD6,7
	PORTD.PIN6CTRL |= 0b01000000;	//invertuje se pin, da enkoder broji u drugom smeru
     5b8:	86 89       	ldd	r24, Z+22	; 0x16
     5ba:	80 64       	ori	r24, 0x40	; 64
     5bc:	86 8b       	std	Z+22, r24	; 0x16
	EVSYS.CH0MUX = 0b01101110;		// PORTD6 mux input -> MOTOR_QDEC.LEFT
     5be:	e0 e8       	ldi	r30, 0x80	; 128
     5c0:	f1 e0       	ldi	r31, 0x01	; 1
     5c2:	8e e6       	ldi	r24, 0x6E	; 110
     5c4:	80 83       	st	Z, r24
	EVSYS.CH0CTRL = 0b00001001;		//enable QDEC, filtering 2x
     5c6:	99 e0       	ldi	r25, 0x09	; 9
     5c8:	90 87       	std	Z+8, r25	; 0x08
	TCD1.CTRLA = 0b00000001;		//clock source
     5ca:	a0 e4       	ldi	r26, 0x40	; 64
     5cc:	b9 e0       	ldi	r27, 0x09	; 9
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	8c 93       	st	X, r24
	TCD1.CTRLD = 0b01101000;  		//event action=QDEC, event source=ch0 [01101000]
     5d2:	28 e6       	ldi	r18, 0x68	; 104
     5d4:	13 96       	adiw	r26, 0x03	; 3
     5d6:	2c 93       	st	X, r18
     5d8:	13 97       	sbiw	r26, 0x03	; 3
	TCD1.INTCTRLA = ( TCD1.INTCTRLA & ~TC1_OVFINTLVL_gm ) | 1;	//interapt na owerflov
     5da:	16 96       	adiw	r26, 0x06	; 6
     5dc:	2c 91       	ld	r18, X
     5de:	16 97       	sbiw	r26, 0x06	; 6
     5e0:	2c 7f       	andi	r18, 0xFC	; 252
     5e2:	21 60       	ori	r18, 0x01	; 1
     5e4:	16 96       	adiw	r26, 0x06	; 6
     5e6:	2c 93       	st	X, r18

	//Desni pasivni	PORTD4,5
	//PORTD.PIN4CTRL |= 0b01000000;	//invertuje se pin, da enkoder broji u drugom smeru
	EVSYS.CH2MUX = 0b01101100;			//PORTD4 mux input -> PASIVNI_DESNI
     5e8:	2c e6       	ldi	r18, 0x6C	; 108
     5ea:	22 83       	std	Z+2, r18	; 0x02
	EVSYS.CH2CTRL = 0b00001001;			//enable QDEC, filtering 2x
     5ec:	92 87       	std	Z+10, r25	; 0x0a
	TCD0.CTRLA = 0b00000001;			//clock source
     5ee:	e0 e0       	ldi	r30, 0x00	; 0
     5f0:	f9 e0       	ldi	r31, 0x09	; 9
     5f2:	80 83       	st	Z, r24
	TCD0.CTRLD = 0b01101010;  			//event action=QDEC, event source=ch2
     5f4:	8a e6       	ldi	r24, 0x6A	; 106
     5f6:	83 83       	std	Z+3, r24	; 0x03
	TCD0.INTCTRLA = ( TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | 1;
     5f8:	86 81       	ldd	r24, Z+6	; 0x06
     5fa:	8c 7f       	andi	r24, 0xFC	; 252
     5fc:	81 60       	ori	r24, 0x01	; 1
     5fe:	86 83       	std	Z+6, r24	; 0x06
}
     600:	0f 91       	pop	r16
     602:	ef 90       	pop	r14
     604:	08 95       	ret

00000606 <PodesiADC>:

void PodesiADC(void)
{
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
	//ADCB.REFCTRL = 0b00000010; //bandgap
	//ADCB.EVCTRL = 0b00000000;	//
	

	/* Move stored calibration values to ADC B. */
	ADC_CalibrationValues_Set(&ADCA);
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	91 de       	rcall	.-734    	; 0x332 <ADC_CalibrationValues_Set>

	/* Get offset value for ADC A. */
 	offset = ADC_Offset_Get(&ADCA);
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	5d de       	rcall	.-838    	; 0x2d0 <ADC_Offset_Get>
     616:	80 93 5a 2e 	sts	0x2E5A, r24

	/* Set up ADC B to have signed conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, false, ADC_RESOLUTION_8BIT_gc);
     61a:	c0 e0       	ldi	r28, 0x00	; 0
     61c:	d2 e0       	ldi	r29, 0x02	; 2
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	89 7e       	andi	r24, 0xE9	; 233
     622:	84 60       	ori	r24, 0x04	; 4
     624:	89 83       	std	Y+1, r24	; 0x01

	/* Sample rate is CPUFREQ/8. Allow time for storing data. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV4_gc);
     626:	8c 81       	ldd	r24, Y+4	; 0x04
     628:	88 7f       	andi	r24, 0xF8	; 248
     62a:	8c 83       	std	Y+4, r24	; 0x04

	/* Set referance voltage on ADC B to be VCC-0.6 V.*/
	ADC_Referance_Config(&ADCA, ADC_REFSEL_INT1V_gc);
     62c:	8a 81       	ldd	r24, Y+2	; 0x02
     62e:	8f 7c       	andi	r24, 0xCF	; 207
     630:	8a 83       	std	Y+2, r24	; 0x02

	/* Setup channel 0 to have single ended input. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     632:	a0 e2       	ldi	r26, 0x20	; 32
     634:	b2 e0       	ldi	r27, 0x02	; 2
     636:	8c 91       	ld	r24, X
     638:	80 7e       	andi	r24, 0xE0	; 224
     63a:	81 60       	ori	r24, 0x01	; 1
     63c:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_CH_GAIN_1X_gc);
	/* Setup channel 1 to have single ended input. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH1,
     63e:	e8 e2       	ldi	r30, 0x28	; 40
     640:	f2 e0       	ldi	r31, 0x02	; 2
     642:	80 81       	ld	r24, Z
     644:	80 7e       	andi	r24, 0xE0	; 224
     646:	81 60       	ori	r24, 0x01	; 1
     648:	80 83       	st	Z, r24
										ADC_CH_INPUTMODE_SINGLEENDED_gc,
										ADC_CH_GAIN_1X_gc);

	/* Set input to the channel in ADC B to be PIN 1. */	//Levi motor pin0
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, ADC_CH_MUXNEG_PIN0_gc);
     64a:	11 96       	adiw	r26, 0x01	; 1
     64c:	1c 92       	st	X, r1
	/* Set input to the channel in ADC B to be PIN 1. */	//Desni motor pin1
	ADC_Ch_InputMux_Config(&ADCA.CH1, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN0_gc);
     64e:	88 e0       	ldi	r24, 0x08	; 8
     650:	81 83       	std	Z+1, r24	; 0x01
	
	/* Setup sweep of all four virtual channels. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_01_gc);
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	8f 73       	andi	r24, 0x3F	; 63
     656:	80 64       	ori	r24, 0x40	; 64
     658:	8b 83       	std	Y+3, r24	; 0x03

	/* Enable ADC B with free running mode, Vcc reference and unsigned conversion.*/
	ADC_Enable(&ADCA);
     65a:	88 81       	ld	r24, Y
     65c:	81 60       	ori	r24, 0x01	; 1
     65e:	88 83       	st	Y, r24

	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	92 e0       	ldi	r25, 0x02	; 2
     664:	29 de       	rcall	.-942    	; 0x2b8 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	88 60       	ori	r24, 0x08	; 8
     66a:	89 83       	std	Y+1, r24	; 0x01

}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <Podesi_Interapt>:

void Podesi_Interapt(void)
{
	// Enable high level interrupts in the PMIC. 
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     672:	e0 ea       	ldi	r30, 0xA0	; 160
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	82 81       	ldd	r24, Z+2	; 0x02
     678:	84 60       	ori	r24, 0x04	; 4
     67a:	82 83       	std	Z+2, r24	; 0x02
	// Enable medium level interrupts in the PMIC. 
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
     67c:	82 81       	ldd	r24, Z+2	; 0x02
     67e:	82 60       	ori	r24, 0x02	; 2
     680:	82 83       	std	Z+2, r24	; 0x02
	// Enable low level interrupts in the PMIC. 
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     682:	82 81       	ldd	r24, Z+2	; 0x02
     684:	81 60       	ori	r24, 0x01	; 1
     686:	82 83       	std	Z+2, r24	; 0x02
	//round-robin algoritam EN
	PMIC.CTRL |= PMIC_RREN_bm;
     688:	82 81       	ldd	r24, Z+2	; 0x02
     68a:	80 68       	ori	r24, 0x80	; 128
     68c:	82 83       	std	Z+2, r24	; 0x02
	
	sei(); // enable all inerrupts
     68e:	78 94       	sei
     690:	08 95       	ret

00000692 <Podesi_Oscilator>:
}

void Podesi_Oscilator(void)
{
	//Startovanje internog oscilatora od 32MHz
	OSC.CTRL = OSC_RC32MEN_bm;
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	80 93 50 00 	sts	0x0050, r24

	do {
		//Sacekaj dok se stabilizuje oscilator
	} while ( ( OSC.STATUS & OSC_RC32MRDY_bm ) == 0 );
     698:	e0 e5       	ldi	r30, 0x50	; 80
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	81 81       	ldd	r24, Z+1	; 0x01
     69e:	81 ff       	sbrs	r24, 1
     6a0:	fd cf       	rjmp	.-6      	; 0x69c <Podesi_Oscilator+0xa>
	
	//Ukljuci preskalere B i C
	CCP = CCP_IOREG_gc;
     6a2:	88 ed       	ldi	r24, 0xD8	; 216
     6a4:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = CLK_PSBCDIV_2_2_gc;
     6a6:	e0 e4       	ldi	r30, 0x40	; 64
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	91 83       	std	Z+1, r25	; 0x01

	//Postavi 32MHz kao glavni oscilator
	CCP = CCP_IOREG_gc;
     6ae:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;	
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 83       	st	Z, r24
     6b4:	08 95       	ret

000006b6 <Podesi_USART_Komunikaciju>:
}

void Podesi_USART_Komunikaciju(void)
{
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
	//USART_E1 - BT - 115200
  	//PE7 (TXE1) - izlaz  
	PORTE.DIR |= PIN7_bm;
     6c0:	c0 e8       	ldi	r28, 0x80	; 128
     6c2:	d6 e0       	ldi	r29, 0x06	; 6
     6c4:	88 81       	ld	r24, Y
     6c6:	80 68       	ori	r24, 0x80	; 128
     6c8:	88 83       	st	Y, r24
	//PE6 (RXE1) - ulaz
	PORTE.DIR  &= ~PIN6_bm;
     6ca:	88 81       	ld	r24, Y
     6cc:	8f 7b       	andi	r24, 0xBF	; 191
     6ce:	88 83       	st	Y, r24
	//Koriscenje USARTE1 (definisano u globals.h) i inicijalizacija buffer-a
	USART_InterruptDriver_Initialize(&USART_E1_data, &USARTE1, USART_DREINTLVL_LO_gc);
     6d0:	41 e0       	ldi	r20, 0x01	; 1
     6d2:	60 eb       	ldi	r22, 0xB0	; 176
     6d4:	7a e0       	ldi	r23, 0x0A	; 10
     6d6:	8b e0       	ldi	r24, 0x0B	; 11
     6d8:	90 e2       	ldi	r25, 0x20	; 32
     6da:	0e 94 cd 34 	call	0x699a	; 0x699a <USART_InterruptDriver_Initialize>
	//USARTE1, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(USART_E1_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     6de:	e0 91 0b 20 	lds	r30, 0x200B
     6e2:	f0 91 0c 20 	lds	r31, 0x200C
     6e6:	13 e0       	ldi	r17, 0x03	; 3
     6e8:	15 83       	std	Z+5, r17	; 0x05
	//Aktiviranje RXC interrupt-a
	USART_RxdInterruptLevel_Set(USART_E1_data.usart, USART_RXCINTLVL_LO_gc);
     6ea:	83 81       	ldd	r24, Z+3	; 0x03
     6ec:	8f 7c       	andi	r24, 0xCF	; 207
     6ee:	80 61       	ori	r24, 0x10	; 16
     6f0:	83 83       	std	Z+3, r24	; 0x03
	//Podesavanje Baud rate
	//USART_Baudrate_Set(&USARTE1, 14, -2 );	//115200
	USART_Baudrate_Set(&USARTE1,3269, -6 );	//9600
     6f2:	a0 eb       	ldi	r26, 0xB0	; 176
     6f4:	ba e0       	ldi	r27, 0x0A	; 10
     6f6:	0f 2e       	mov	r0, r31
     6f8:	f5 ec       	ldi	r31, 0xC5	; 197
     6fa:	ff 2e       	mov	r15, r31
     6fc:	f0 2d       	mov	r31, r0
     6fe:	16 96       	adiw	r26, 0x06	; 6
     700:	fc 92       	st	X, r15
     702:	16 97       	sbiw	r26, 0x06	; 6
     704:	0c ea       	ldi	r16, 0xAC	; 172
     706:	17 96       	adiw	r26, 0x07	; 7
     708:	0c 93       	st	X, r16
	//Ukljucivanje RX i TX
	USART_Rx_Enable(USART_E1_data.usart);
     70a:	84 81       	ldd	r24, Z+4	; 0x04
     70c:	80 61       	ori	r24, 0x10	; 16
     70e:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_E1_data.usart);
     710:	84 81       	ldd	r24, Z+4	; 0x04
     712:	88 60       	ori	r24, 0x08	; 8
     714:	84 83       	std	Z+4, r24	; 0x04
	
	//USART_E0 BT_RS232 - MCU - 19200
	//PE3 (TXE0) - izlaz
	PORTE.DIR |= PIN3_bm;
     716:	88 81       	ld	r24, Y
     718:	88 60       	ori	r24, 0x08	; 8
     71a:	88 83       	st	Y, r24
	//PE2 (RXE0) - ulaz
	PORTE.DIR  &= ~PIN2_bm;
     71c:	88 81       	ld	r24, Y
     71e:	8b 7f       	andi	r24, 0xFB	; 251
     720:	88 83       	st	Y, r24
	//Koriscenje USARTE0 i inicijalizacija buffer-a
	USART_InterruptDriver_Initialize(&USART_E0_data, &USARTE0, USART_DREINTLVL_LO_gc);
     722:	41 e0       	ldi	r20, 0x01	; 1
     724:	60 ea       	ldi	r22, 0xA0	; 160
     726:	7a e0       	ldi	r23, 0x0A	; 10
     728:	89 e1       	ldi	r24, 0x19	; 25
     72a:	93 e2       	ldi	r25, 0x23	; 35
     72c:	0e 94 cd 34 	call	0x699a	; 0x699a <USART_InterruptDriver_Initialize>
	//USARTE0, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(USART_E0_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     730:	e0 91 19 23 	lds	r30, 0x2319
     734:	f0 91 1a 23 	lds	r31, 0x231A
     738:	15 83       	std	Z+5, r17	; 0x05
	//Aktiviranje RXC interrupt-a
	USART_RxdInterruptLevel_Set(USART_E0_data.usart, USART_RXCINTLVL_LO_gc);
     73a:	83 81       	ldd	r24, Z+3	; 0x03
     73c:	8f 7c       	andi	r24, 0xCF	; 207
     73e:	80 61       	ori	r24, 0x10	; 16
     740:	83 83       	std	Z+3, r24	; 0x03
	//19200 @ 32Mhz as calculated from ProtoTalk Calc
	USART_Baudrate_Set(&USARTE0, 3269, -6 ); //9600
     742:	a0 ea       	ldi	r26, 0xA0	; 160
     744:	ba e0       	ldi	r27, 0x0A	; 10
     746:	16 96       	adiw	r26, 0x06	; 6
     748:	fc 92       	st	X, r15
     74a:	16 97       	sbiw	r26, 0x06	; 6
     74c:	17 96       	adiw	r26, 0x07	; 7
     74e:	0c 93       	st	X, r16
	//Ukljucivanje RX i TX
	USART_Rx_Enable(USART_E0_data.usart);
     750:	84 81       	ldd	r24, Z+4	; 0x04
     752:	80 61       	ori	r24, 0x10	; 16
     754:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_E0_data.usart);
     756:	84 81       	ldd	r24, Z+4	; 0x04
     758:	88 60       	ori	r24, 0x08	; 8
     75a:	84 83       	std	Z+4, r24	; 0x04
	

	//USART_C0 - Xmega_USB - 115200
	//PE3 (TXE0) - izlaz
	PORTC.DIR &= PIN3_bm;
     75c:	e0 e4       	ldi	r30, 0x40	; 64
     75e:	f6 e0       	ldi	r31, 0x06	; 6
     760:	80 81       	ld	r24, Z
     762:	88 70       	andi	r24, 0x08	; 8
     764:	80 83       	st	Z, r24
	//PE2 (RXE0) - ulaz
	PORTC.DIR  |= ~PIN2_bm;
     766:	80 81       	ld	r24, Z
     768:	8b 6f       	ori	r24, 0xFB	; 251
     76a:	80 83       	st	Z, r24
	//Koriscenje USARTE0 i inicijalizacija buffer-a
	USART_InterruptDriver_Initialize(&USART_C0_data, &USARTC0, USART_DREINTLVL_LO_gc);
     76c:	41 e0       	ldi	r20, 0x01	; 1
     76e:	60 ea       	ldi	r22, 0xA0	; 160
     770:	78 e0       	ldi	r23, 0x08	; 8
     772:	82 e9       	ldi	r24, 0x92	; 146
     774:	91 e2       	ldi	r25, 0x21	; 33
     776:	0e 94 cd 34 	call	0x699a	; 0x699a <USART_InterruptDriver_Initialize>
	//USARTE0, 8 Data bits, No Parity, 1 Stop bit.
	USART_Format_Set(USART_C0_data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     77a:	e0 91 92 21 	lds	r30, 0x2192
     77e:	f0 91 93 21 	lds	r31, 0x2193
     782:	15 83       	std	Z+5, r17	; 0x05
	//Aktiviranje RXC interrupt-a
	USART_RxdInterruptLevel_Set(USART_C0_data.usart, USART_RXCINTLVL_LO_gc);
     784:	83 81       	ldd	r24, Z+3	; 0x03
     786:	8f 7c       	andi	r24, 0xCF	; 207
     788:	80 61       	ori	r24, 0x10	; 16
     78a:	83 83       	std	Z+3, r24	; 0x03
	//Podesavanje Baud rate
	USART_Baudrate_Set(&USARTC0, 107, -5 );	//115200
     78c:	a0 ea       	ldi	r26, 0xA0	; 160
     78e:	b8 e0       	ldi	r27, 0x08	; 8
     790:	8b e6       	ldi	r24, 0x6B	; 107
     792:	16 96       	adiw	r26, 0x06	; 6
     794:	8c 93       	st	X, r24
     796:	16 97       	sbiw	r26, 0x06	; 6
     798:	80 eb       	ldi	r24, 0xB0	; 176
     79a:	17 96       	adiw	r26, 0x07	; 7
     79c:	8c 93       	st	X, r24
	//USART_Baudrate_Set(&USARTC0, 14, -2 );	//115200
	//Ukljucivanje RX i TX
	USART_Rx_Enable(USART_C0_data.usart);
     79e:	84 81       	ldd	r24, Z+4	; 0x04
     7a0:	80 61       	ori	r24, 0x10	; 16
     7a2:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_C0_data.usart);
     7a4:	84 81       	ldd	r24, Z+4	; 0x04
     7a6:	88 60       	ori	r24, 0x08	; 8
     7a8:	84 83       	std	Z+4, r24	; 0x04

}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	08 95       	ret

000007b6 <Podesi_Tajmere>:
	//TCF0 - servo signal generator
	//TCF1 - motor PWM (levi, desni)
	
	//System tajmer za uzorkovanje enkodera i PID regulaciju
	/* Set period ( TOP value ). */
	TC_SetPeriod( &TCE1, 0x005F ); //0x00BF = 12ms //0x5F = 6ms //0x2F = 3ms <- Mirko //Nasa -> //0x5DC0
     7b6:	8f e5       	ldi	r24, 0x5F	; 95
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	e0 e4       	ldi	r30, 0x40	; 64
     7bc:	fa e0       	ldi	r31, 0x0A	; 10
     7be:	86 a3       	std	Z+38, r24	; 0x26
     7c0:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable overflow interrupt at low level */
	TC1_SetOverflowIntLevel( &TCE1, TC_OVFINTLVL_MED_gc );
     7c2:	62 e0       	ldi	r22, 0x02	; 2
     7c4:	80 e4       	ldi	r24, 0x40	; 64
     7c6:	9a e0       	ldi	r25, 0x0A	; 10
     7c8:	0e 94 90 32 	call	0x6520	; 0x6520 <TC1_SetOverflowIntLevel>
	/* Start Timer/Counter. */
	TC1_ConfigClockSource( &TCE1, TC_CLKSEL_DIV256_gc );
     7cc:	66 e0       	ldi	r22, 0x06	; 6
     7ce:	80 e4       	ldi	r24, 0x40	; 64
     7d0:	9a e0       	ldi	r25, 0x0A	; 10
     7d2:	0c 94 8a 32 	jmp	0x6514	; 0x6514 <TC1_ConfigClockSource>

000007d6 <Podesi_PWM>:
	//TC0_ConfigClockSource( &TCF0, TC_CLKSEL_DIV64_gc );
}

void Podesi_PWM(void)
{	
	HIRESF_CTRLA = 0b00000010; //enable hi-res za TCF1
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	80 93 90 0b 	sts	0x0B90, r24
	// Configure timer 
	TCF1.PER = PWM_perioda;
     7dc:	80 91 5e 2e 	lds	r24, 0x2E5E
     7e0:	90 91 5f 2e 	lds	r25, 0x2E5F
     7e4:	e0 e4       	ldi	r30, 0x40	; 64
     7e6:	fb e0       	ldi	r31, 0x0B	; 11
     7e8:	86 a3       	std	Z+38, r24	; 0x26
     7ea:	97 a3       	std	Z+39, r25	; 0x27
	TCF1.CTRLB = TC1_CCBEN_bm | TC1_CCAEN_bm | TC_WGMODE_DS_T_gc;
     7ec:	85 e3       	ldi	r24, 0x35	; 53
     7ee:	81 83       	std	Z+1, r24	; 0x01
	TCF1.CTRLA = TC_CLKSEL_DIV1_gc;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 83       	st	Z, r24
	
	PORT_SetPinsAsOutput( &PORTF, 0b00110000 ); //PF5 - PWM_L, PF4 - PWM_D
     7f4:	80 e3       	ldi	r24, 0x30	; 48
     7f6:	e0 ea       	ldi	r30, 0xA0	; 160
     7f8:	f6 e0       	ldi	r31, 0x06	; 6
     7fa:	81 83       	std	Z+1, r24	; 0x01
     7fc:	08 95       	ret

000007fe <Podesi_Pinove>:
}

void Podesi_Pinove(void)
{
     7fe:	ef 92       	push	r14
     800:	0f 93       	push	r16
     802:	cf 93       	push	r28
	//PORTB - digitalni ulazi 
	
	PORT_SetPinsAsInput( &PORTB, 0xFF );
     804:	cf ef       	ldi	r28, 0xFF	; 255
     806:	e0 e2       	ldi	r30, 0x20	; 32
     808:	f6 e0       	ldi	r31, 0x06	; 6
     80a:	c2 83       	std	Z+2, r28	; 0x02
	PORT_ConfigurePins( &PORTB,
     80c:	68 94       	set
     80e:	ee 24       	eor	r14, r14
     810:	e1 f8       	bld	r14, 1
     812:	08 e1       	ldi	r16, 0x18	; 24
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	6f ef       	ldi	r22, 0xFF	; 255
     81a:	80 e2       	ldi	r24, 0x20	; 32
     81c:	96 e0       	ldi	r25, 0x06	; 6
     81e:	0e 94 71 32 	call	0x64e2	; 0x64e2 <PORT_ConfigurePins>
						false,
						PORT_OPC_PULLUP_gc,
						PORT_ISC_FALLING_gc);
	
	//podesavanje interrupt0 za PORTB.0 - ISR(PORTB_INT0_vect)
	PORT_ConfigureInterrupt0( &PORTB, PORT_INT0LVL_LO_gc, 0x01 );
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	80 e2       	ldi	r24, 0x20	; 32
     828:	96 e0       	ldi	r25, 0x06	; 6
     82a:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <PORT_ConfigureInterrupt0>
	
	//PORTC - FET izlazi 
	PORT_SetPinsAsOutput(&PORTC, 0xFF);
     82e:	e0 e4       	ldi	r30, 0x40	; 64
     830:	f6 e0       	ldi	r31, 0x06	; 6
     832:	c1 83       	std	Z+1, r28	; 0x01
//  	PORT_MapVirtualPort0( PORTCFG_VP0MAP_PORTC_gc );	//mapiranje virtualnog porta 0 na PORTC
//  	PORT_SetDirection( &VPORT0, 0xFF );
//		VPORT0.OUT = 0x00;	//clear
	
	//pinovi za upravljanje moorima
	PORT_SetPinsAsOutput(&PORTH, 0xFF); //PH0-IN_A1, PH1-EN_A1, PH2-EN_B1, PH3-IN_B1, PH4-IN_A2, PH5-EN_A2, PH6-EN_B2, PH7-IN_B2
     834:	e0 ee       	ldi	r30, 0xE0	; 224
     836:	f6 e0       	ldi	r31, 0x06	; 6
     838:	c1 83       	std	Z+1, r28	; 0x01
	PORT_ClearPins(&PORTH, 0xFF);
     83a:	c6 83       	std	Z+6, r28	; 0x06
	PORT_SetPins(&PORTH, 0b01100110); // EN ALL	
     83c:	86 e6       	ldi	r24, 0x66	; 102
     83e:	85 83       	std	Z+5, r24	; 0x05

	//servo izlazi
	PORT_SetPinsAsOutput(&PORTF, 0x0F);
     840:	e0 ea       	ldi	r30, 0xA0	; 160
     842:	f6 e0       	ldi	r31, 0x06	; 6
     844:	8f e0       	ldi	r24, 0x0F	; 15
     846:	81 83       	std	Z+1, r24	; 0x01
	PORT_ClearPins(&PORTF, 0x0F);
     848:	86 83       	std	Z+6, r24	; 0x06
	
}
     84a:	cf 91       	pop	r28
     84c:	0f 91       	pop	r16
     84e:	ef 90       	pop	r14
     850:	08 95       	ret

00000852 <__vector_53>:
#include "Headers/port_driver.h"
#include "math.h"

//Tajmer za rad drajvera
ISR(TCE1_OVF_vect)	//3ms
{	
     852:	1f 92       	push	r1
     854:	0f 92       	push	r0
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	0f 92       	push	r0
     85a:	11 24       	eor	r1, r1
     85c:	08 b6       	in	r0, 0x38	; 56
     85e:	0f 92       	push	r0
     860:	18 be       	out	0x38, r1	; 56
     862:	09 b6       	in	r0, 0x39	; 57
     864:	0f 92       	push	r0
     866:	19 be       	out	0x39, r1	; 57
     868:	0b b6       	in	r0, 0x3b	; 59
     86a:	0f 92       	push	r0
     86c:	1b be       	out	0x3b, r1	; 59
     86e:	2f 93       	push	r18
     870:	3f 93       	push	r19
     872:	4f 93       	push	r20
     874:	5f 93       	push	r21
     876:	6f 93       	push	r22
     878:	7f 93       	push	r23
     87a:	8f 93       	push	r24
     87c:	9f 93       	push	r25
     87e:	af 93       	push	r26
     880:	bf 93       	push	r27
     882:	ef 93       	push	r30
     884:	ff 93       	push	r31
	vreme_cekanja_tete++;
     886:	80 91 64 29 	lds	r24, 0x2964
     88a:	90 91 65 29 	lds	r25, 0x2965
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	80 93 64 29 	sts	0x2964, r24
     894:	90 93 65 29 	sts	0x2965, r25
	vreme_pozicioniranja++;
     898:	80 91 5c 2e 	lds	r24, 0x2E5C
     89c:	90 91 5d 2e 	lds	r25, 0x2E5D
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	80 93 5c 2e 	sts	0x2E5C, r24
     8a6:	90 93 5d 2e 	sts	0x2E5D, r25
	sys_time++;
     8aa:	80 91 c4 24 	lds	r24, 0x24C4
     8ae:	90 91 c5 24 	lds	r25, 0x24C5
     8b2:	01 96       	adiw	r24, 0x01	; 1
     8b4:	80 93 c4 24 	sts	0x24C4, r24
     8b8:	90 93 c5 24 	sts	0x24C5, r25
	
	sample_counter_niz_1++;
     8bc:	80 91 58 2e 	lds	r24, 0x2E58
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	80 93 58 2e 	sts	0x2E58, r24
	sample_counter_niz_2++;
     8c6:	80 91 f9 2d 	lds	r24, 0x2DF9
     8ca:	8f 5f       	subi	r24, 0xFF	; 255
     8cc:	80 93 f9 2d 	sts	0x2DF9, r24
	sample_counter_niz_3++;
     8d0:	80 91 5f 29 	lds	r24, 0x295F
     8d4:	8f 5f       	subi	r24, 0xFF	; 255
     8d6:	80 93 5f 29 	sts	0x295F, r24
	
	//Sample time za PID brzinski
	PID_brzinski();
     8da:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <PID_brzinski>
	//Sample time za uzimanje trenutnog stanja enkodera i racunaje pozicije
	Rac_tren_poz_sample_counter++;
     8de:	80 91 08 20 	lds	r24, 0x2008
     8e2:	8f 5f       	subi	r24, 0xFF	; 255
     8e4:	80 93 08 20 	sts	0x2008, r24
	//Sample time za pracenje pravca
	Pracenje_Pravca_sample_counter++;
     8e8:	80 91 04 20 	lds	r24, 0x2004
     8ec:	8f 5f       	subi	r24, 0xFF	; 255
     8ee:	80 93 04 20 	sts	0x2004, r24
	//Sample time za pozicioni PID
	PID_pozicioni_sample_counter++;
     8f2:	80 91 05 20 	lds	r24, 0x2005
     8f6:	8f 5f       	subi	r24, 0xFF	; 255
     8f8:	80 93 05 20 	sts	0x2005, r24
	
	if(timeout)
     8fc:	80 91 35 2e 	lds	r24, 0x2E35
     900:	90 91 36 2e 	lds	r25, 0x2E36
     904:	89 2b       	or	r24, r25
     906:	49 f0       	breq	.+18     	; 0x91a <__vector_53+0xc8>
	{
		timeout--;
     908:	80 91 35 2e 	lds	r24, 0x2E35
     90c:	90 91 36 2e 	lds	r25, 0x2E36
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	80 93 35 2e 	sts	0x2E35, r24
     916:	90 93 36 2e 	sts	0x2E36, r25
	}
	
	//provera vreme primanja
	if (proveri_vreme_primanja > 0)
     91a:	80 91 fb 2d 	lds	r24, 0x2DFB
     91e:	88 23       	and	r24, r24
     920:	89 f0       	breq	.+34     	; 0x944 <__vector_53+0xf2>
	{
		proveri_vreme_primanja++;
     922:	80 91 fb 2d 	lds	r24, 0x2DFB
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	80 93 fb 2d 	sts	0x2DFB, r24
		if (proveri_vreme_primanja > 100)
     92c:	80 91 fb 2d 	lds	r24, 0x2DFB
     930:	85 36       	cpi	r24, 0x65	; 101
     932:	40 f0       	brcs	.+16     	; 0x944 <__vector_53+0xf2>
		{
			RX_i_E0 = 0;
     934:	10 92 5b 2e 	sts	0x2E5B, r1
			RX_i_E1 = 0;
     938:	10 92 5d 29 	sts	0x295D, r1
			RX_i_C0 = 0;
     93c:	10 92 3f 2e 	sts	0x2E3F, r1
			proveri_vreme_primanja = 0;
     940:	10 92 fb 2d 	sts	0x2DFB, r1
		}
	}
	
	//snimanje niz_1
	if ((sample_counter_niz_1 > sample_time_niz_1) && (niz_counter_niz_1 < 127))
     944:	90 91 58 2e 	lds	r25, 0x2E58
     948:	80 91 72 32 	lds	r24, 0x3272
     94c:	89 17       	cp	r24, r25
     94e:	08 f0       	brcs	.+2      	; 0x952 <__vector_53+0x100>
     950:	59 c0       	rjmp	.+178    	; 0xa04 <__vector_53+0x1b2>
     952:	80 91 59 2e 	lds	r24, 0x2E59
     956:	8f 37       	cpi	r24, 0x7F	; 127
     958:	08 f0       	brcs	.+2      	; 0x95c <__vector_53+0x10a>
     95a:	54 c0       	rjmp	.+168    	; 0xa04 <__vector_53+0x1b2>
	{
		if (velicina_niz_1 == 2)
     95c:	80 91 82 32 	lds	r24, 0x3282
     960:	82 30       	cpi	r24, 0x02	; 2
     962:	91 f5       	brne	.+100    	; 0x9c8 <__vector_53+0x176>
		{
			niz_1[niz_counter_niz_1] = mmio32(adresa_niz_1 + 1);
     964:	e0 91 59 2e 	lds	r30, 0x2E59
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 91 fa 29 	lds	r24, 0x29FA
     96e:	90 91 fb 29 	lds	r25, 0x29FB
     972:	a0 91 fc 29 	lds	r26, 0x29FC
     976:	b0 91 fd 29 	lds	r27, 0x29FD
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	a1 1d       	adc	r26, r1
     97e:	b1 1d       	adc	r27, r1
     980:	dc 01       	movw	r26, r24
     982:	8d 91       	ld	r24, X+
     984:	9d 91       	ld	r25, X+
     986:	0d 90       	ld	r0, X+
     988:	bc 91       	ld	r27, X
     98a:	a0 2d       	mov	r26, r0
     98c:	ee 0f       	add	r30, r30
     98e:	ff 1f       	adc	r31, r31
     990:	ea 5f       	subi	r30, 0xFA	; 250
     992:	f5 4d       	sbci	r31, 0xD5	; 213
     994:	80 83       	st	Z, r24
     996:	91 83       	std	Z+1, r25	; 0x01
			niz_1[niz_counter_niz_1] = mmio32(adresa_niz_1);
     998:	e0 91 59 2e 	lds	r30, 0x2E59
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 91 fa 29 	lds	r24, 0x29FA
     9a2:	90 91 fb 29 	lds	r25, 0x29FB
     9a6:	a0 91 fc 29 	lds	r26, 0x29FC
     9aa:	b0 91 fd 29 	lds	r27, 0x29FD
     9ae:	dc 01       	movw	r26, r24
     9b0:	8d 91       	ld	r24, X+
     9b2:	9d 91       	ld	r25, X+
     9b4:	0d 90       	ld	r0, X+
     9b6:	bc 91       	ld	r27, X
     9b8:	a0 2d       	mov	r26, r0
     9ba:	ee 0f       	add	r30, r30
     9bc:	ff 1f       	adc	r31, r31
     9be:	ea 5f       	subi	r30, 0xFA	; 250
     9c0:	f5 4d       	sbci	r31, 0xD5	; 213
     9c2:	80 83       	st	Z, r24
     9c4:	91 83       	std	Z+1, r25	; 0x01
     9c6:	17 c0       	rjmp	.+46     	; 0x9f6 <__vector_53+0x1a4>
		}
		else
		niz_1[niz_counter_niz_1] = mmio32(adresa_niz_1);
     9c8:	e0 91 59 2e 	lds	r30, 0x2E59
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 91 fa 29 	lds	r24, 0x29FA
     9d2:	90 91 fb 29 	lds	r25, 0x29FB
     9d6:	a0 91 fc 29 	lds	r26, 0x29FC
     9da:	b0 91 fd 29 	lds	r27, 0x29FD
     9de:	dc 01       	movw	r26, r24
     9e0:	8d 91       	ld	r24, X+
     9e2:	9d 91       	ld	r25, X+
     9e4:	0d 90       	ld	r0, X+
     9e6:	bc 91       	ld	r27, X
     9e8:	a0 2d       	mov	r26, r0
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	ea 5f       	subi	r30, 0xFA	; 250
     9f0:	f5 4d       	sbci	r31, 0xD5	; 213
     9f2:	80 83       	st	Z, r24
     9f4:	91 83       	std	Z+1, r25	; 0x01
		
		niz_counter_niz_1++;
     9f6:	80 91 59 2e 	lds	r24, 0x2E59
     9fa:	8f 5f       	subi	r24, 0xFF	; 255
     9fc:	80 93 59 2e 	sts	0x2E59, r24
		sample_counter_niz_1 = 0;
     a00:	10 92 58 2e 	sts	0x2E58, r1
	}
}
     a04:	ff 91       	pop	r31
     a06:	ef 91       	pop	r30
     a08:	bf 91       	pop	r27
     a0a:	af 91       	pop	r26
     a0c:	9f 91       	pop	r25
     a0e:	8f 91       	pop	r24
     a10:	7f 91       	pop	r23
     a12:	6f 91       	pop	r22
     a14:	5f 91       	pop	r21
     a16:	4f 91       	pop	r20
     a18:	3f 91       	pop	r19
     a1a:	2f 91       	pop	r18
     a1c:	0f 90       	pop	r0
     a1e:	0b be       	out	0x3b, r0	; 59
     a20:	0f 90       	pop	r0
     a22:	09 be       	out	0x39, r0	; 57
     a24:	0f 90       	pop	r0
     a26:	08 be       	out	0x38, r0	; 56
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	0f 90       	pop	r0
     a2e:	1f 90       	pop	r1
     a30:	18 95       	reti

00000a32 <__vector_58>:
//Serijska komunikacija - USART_E0 - BT_RS232 - MCU
ISR(USARTE0_RXC_vect)
{
     a32:	1f 92       	push	r1
     a34:	0f 92       	push	r0
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	0f 92       	push	r0
     a3a:	11 24       	eor	r1, r1
     a3c:	08 b6       	in	r0, 0x38	; 56
     a3e:	0f 92       	push	r0
     a40:	18 be       	out	0x38, r1	; 56
     a42:	09 b6       	in	r0, 0x39	; 57
     a44:	0f 92       	push	r0
     a46:	19 be       	out	0x39, r1	; 57
     a48:	0a b6       	in	r0, 0x3a	; 58
     a4a:	0f 92       	push	r0
     a4c:	1a be       	out	0x3a, r1	; 58
     a4e:	0b b6       	in	r0, 0x3b	; 59
     a50:	0f 92       	push	r0
     a52:	1b be       	out	0x3b, r1	; 59
     a54:	4f 92       	push	r4
     a56:	5f 92       	push	r5
     a58:	6f 92       	push	r6
     a5a:	7f 92       	push	r7
     a5c:	8f 92       	push	r8
     a5e:	9f 92       	push	r9
     a60:	af 92       	push	r10
     a62:	bf 92       	push	r11
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	2f 93       	push	r18
     a72:	3f 93       	push	r19
     a74:	4f 93       	push	r20
     a76:	5f 93       	push	r21
     a78:	6f 93       	push	r22
     a7a:	7f 93       	push	r23
     a7c:	8f 93       	push	r24
     a7e:	9f 93       	push	r25
     a80:	af 93       	push	r26
     a82:	bf 93       	push	r27
     a84:	ef 93       	push	r30
     a86:	ff 93       	push	r31
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
     a90:	28 97       	sbiw	r28, 0x08	; 8
     a92:	cd bf       	out	0x3d, r28	; 61
     a94:	de bf       	out	0x3e, r29	; 62
	int i;
	USART_RXComplete(&USART_E0_data);
     a96:	89 e1       	ldi	r24, 0x19	; 25
     a98:	93 e2       	ldi	r25, 0x23	; 35
     a9a:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <USART_RXComplete>
	receiveArray[RX_i_E0] = USART_RXBuffer_GetByte(&USART_E0_data);
     a9e:	80 91 5b 2e 	lds	r24, 0x2E5B
     aa2:	08 2f       	mov	r16, r24
     aa4:	10 e0       	ldi	r17, 0x00	; 0
     aa6:	89 e1       	ldi	r24, 0x19	; 25
     aa8:	93 e2       	ldi	r25, 0x23	; 35
     aaa:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <USART_RXBuffer_GetByte>
     aae:	f8 01       	movw	r30, r16
     ab0:	e2 59       	subi	r30, 0x92	; 146
     ab2:	f6 4d       	sbci	r31, 0xD6	; 214
     ab4:	80 83       	st	Z, r24
	//USART_TXBuffer_PutByte(&USART_E0_data, receiveArray[RX_i_E0]);	//echo
	RX_i_E0++;
     ab6:	80 91 5b 2e 	lds	r24, 0x2E5B
     aba:	8f 5f       	subi	r24, 0xFF	; 255
     abc:	80 93 5b 2e 	sts	0x2E5B, r24
	
	//vremenska zastita
	if (RX_i_E0 >= 1)
     ac0:	80 91 5b 2e 	lds	r24, 0x2E5B
     ac4:	88 23       	and	r24, r24
     ac6:	19 f0       	breq	.+6      	; 0xace <__vector_58+0x9c>
 		proveri_vreme_primanja = 1;
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	80 93 fb 2d 	sts	0x2DFB, r24
	 
	//CITANJE PARAMETARA - 1
	if(receiveArray[0] == 1)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
     ace:	80 91 6e 29 	lds	r24, 0x296E
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	09 f0       	breq	.+2      	; 0xad8 <__vector_58+0xa6>
     ad6:	b0 c0       	rjmp	.+352    	; 0xc38 <__vector_58+0x206>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
     ad8:	80 91 5b 2e 	lds	r24, 0x2E5B
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	11 f0       	breq	.+4      	; 0xae4 <__vector_58+0xb2>
     ae0:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
     ae4:	10 92 fb 2d 	sts	0x2DFB, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
     ae8:	80 91 6e 29 	lds	r24, 0x296E
     aec:	80 93 dd 28 	sts	0x28DD, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
     af0:	60 91 23 2e 	lds	r22, 0x2E23
     af4:	70 91 24 2e 	lds	r23, 0x2E24
     af8:	80 91 25 2e 	lds	r24, 0x2E25
     afc:	90 91 26 2e 	lds	r25, 0x2E26
     b00:	20 91 00 2e 	lds	r18, 0x2E00
     b04:	30 91 01 2e 	lds	r19, 0x2E01
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
     b10:	bb 27       	eor	r27, r27
     b12:	57 fd       	sbrc	r21, 7
     b14:	ba 95       	dec	r27
     b16:	a5 2f       	mov	r26, r21
     b18:	94 2f       	mov	r25, r20
     b1a:	83 2f       	mov	r24, r19
     b1c:	80 93 de 28 	sts	0x28DE, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
     b20:	60 91 23 2e 	lds	r22, 0x2E23
     b24:	70 91 24 2e 	lds	r23, 0x2E24
     b28:	80 91 25 2e 	lds	r24, 0x2E25
     b2c:	90 91 26 2e 	lds	r25, 0x2E26
     b30:	20 91 00 2e 	lds	r18, 0x2E00
     b34:	30 91 01 2e 	lds	r19, 0x2E01
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
     b40:	20 93 df 28 	sts	0x28DF, r18
				sendArray[3] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna Y pozicija HI
     b44:	60 91 02 2a 	lds	r22, 0x2A02
     b48:	70 91 03 2a 	lds	r23, 0x2A03
     b4c:	80 91 04 2a 	lds	r24, 0x2A04
     b50:	90 91 05 2a 	lds	r25, 0x2A05
     b54:	20 91 00 2e 	lds	r18, 0x2E00
     b58:	30 91 01 2e 	lds	r19, 0x2E01
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
     b64:	bb 27       	eor	r27, r27
     b66:	57 fd       	sbrc	r21, 7
     b68:	ba 95       	dec	r27
     b6a:	a5 2f       	mov	r26, r21
     b6c:	94 2f       	mov	r25, r20
     b6e:	83 2f       	mov	r24, r19
     b70:	80 93 e0 28 	sts	0x28E0, r24
				sendArray[4] = Y_pos / scale_factor_for_mm;							//Absolutna Y pozicija LO
     b74:	60 91 02 2a 	lds	r22, 0x2A02
     b78:	70 91 03 2a 	lds	r23, 0x2A03
     b7c:	80 91 04 2a 	lds	r24, 0x2A04
     b80:	90 91 05 2a 	lds	r25, 0x2A05
     b84:	20 91 00 2e 	lds	r18, 0x2E00
     b88:	30 91 01 2e 	lds	r19, 0x2E01
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
     b94:	20 93 e1 28 	sts	0x28E1, r18
				sendArray[5] = ((teta * 360) / krug360) >> 8;						//Teta HI
     b98:	20 91 83 32 	lds	r18, 0x3283
     b9c:	30 91 84 32 	lds	r19, 0x3284
     ba0:	40 91 85 32 	lds	r20, 0x3285
     ba4:	50 91 86 32 	lds	r21, 0x3286
     ba8:	c0 90 75 32 	lds	r12, 0x3275
     bac:	d0 90 76 32 	lds	r13, 0x3276
     bb0:	e0 90 77 32 	lds	r14, 0x3277
     bb4:	f0 90 78 32 	lds	r15, 0x3278
     bb8:	a8 e6       	ldi	r26, 0x68	; 104
     bba:	b1 e0       	ldi	r27, 0x01	; 1
     bbc:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
     bc0:	a7 01       	movw	r20, r14
     bc2:	96 01       	movw	r18, r12
     bc4:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
     bc8:	bb 27       	eor	r27, r27
     bca:	57 fd       	sbrc	r21, 7
     bcc:	ba 95       	dec	r27
     bce:	a5 2f       	mov	r26, r21
     bd0:	94 2f       	mov	r25, r20
     bd2:	83 2f       	mov	r24, r19
     bd4:	80 93 e2 28 	sts	0x28E2, r24
				sendArray[6] = ((teta * 360) / krug360);							//Teta LO	
     bd8:	20 91 83 32 	lds	r18, 0x3283
     bdc:	30 91 84 32 	lds	r19, 0x3284
     be0:	40 91 85 32 	lds	r20, 0x3285
     be4:	50 91 86 32 	lds	r21, 0x3286
     be8:	c0 90 75 32 	lds	r12, 0x3275
     bec:	d0 90 76 32 	lds	r13, 0x3276
     bf0:	e0 90 77 32 	lds	r14, 0x3277
     bf4:	f0 90 78 32 	lds	r15, 0x3278
     bf8:	a8 e6       	ldi	r26, 0x68	; 104
     bfa:	b1 e0       	ldi	r27, 0x01	; 1
     bfc:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
     c00:	a7 01       	movw	r20, r14
     c02:	96 01       	movw	r18, r12
     c04:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
     c08:	20 93 e3 28 	sts	0x28E3, r18
// 				sendArray[12] =	ADC_ResultCh_GetWord(&ADCA.CH0, offset);			//struja motora 1
// 				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
// 				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
     c0c:	00 e0       	ldi	r16, 0x00	; 0
     c0e:	10 e0       	ldi	r17, 0x00	; 0
				while (i <= 14) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
     c10:	f8 01       	movw	r30, r16
     c12:	e3 52       	subi	r30, 0x23	; 35
     c14:	f7 4d       	sbci	r31, 0xD7	; 215
     c16:	60 81       	ld	r22, Z
     c18:	89 e1       	ldi	r24, 0x19	; 25
     c1a:	93 e2       	ldi	r25, 0x23	; 35
     c1c:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
     c20:	88 23       	and	r24, r24
     c22:	11 f0       	breq	.+4      	; 0xc28 <__vector_58+0x1f6>
						i++;
     c24:	0f 5f       	subi	r16, 0xFF	; 255
     c26:	1f 4f       	sbci	r17, 0xFF	; 255
// 				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
// 				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
				while (i <= 14) 
     c28:	0f 30       	cpi	r16, 0x0F	; 15
     c2a:	11 05       	cpc	r17, r1
     c2c:	8c f3       	brlt	.-30     	; 0xc10 <__vector_58+0x1de>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
     c2e:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
     c32:	10 92 5b 2e 	sts	0x2E5B, r1
     c36:	d4 c7       	rjmp	.+4008   	; 0x1be0 <__vector_58+0x11ae>
		}		
	}
	//ZADAVANJE X,Y KOORDINATA - 2
	else if(receiveArray[0] == 2)					//provera funkcijskog bajta >> 2-upis x,y koordinate
     c38:	80 91 6e 29 	lds	r24, 0x296E
     c3c:	82 30       	cpi	r24, 0x02	; 2
     c3e:	09 f0       	breq	.+2      	; 0xc42 <__vector_58+0x210>
     c40:	bf c0       	rjmp	.+382    	; 0xdc0 <__vector_58+0x38e>
	{
		if(RX_i_E0 >= 5)							//stigla je cela poruka	(5 bajtova)
     c42:	80 91 5b 2e 	lds	r24, 0x2E5B
     c46:	85 30       	cpi	r24, 0x05	; 5
     c48:	08 f4       	brcc	.+2      	; 0xc4c <__vector_58+0x21a>
     c4a:	ca c7       	rjmp	.+3988   	; 0x1be0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
     c4c:	10 92 fb 2d 	sts	0x2DFB, r1
			//ENABLE
			stop_PID_desni = 0;
     c50:	10 92 f4 29 	sts	0x29F4, r1
			stop_PID_levi = 0;
     c54:	10 92 f2 2d 	sts	0x2DF2, r1
			set_direct_out = 0;
     c58:	10 92 81 32 	sts	0x3281, r1
			
			X_cilj = 0;
     c5c:	10 92 ae 24 	sts	0x24AE, r1
     c60:	10 92 af 24 	sts	0x24AF, r1
     c64:	10 92 b0 24 	sts	0x24B0, r1
     c68:	10 92 b1 24 	sts	0x24B1, r1
			X_cilj |= ((int)receiveArray[1]) << 8;
     c6c:	20 91 6f 29 	lds	r18, 0x296F
     c70:	40 91 ae 24 	lds	r20, 0x24AE
     c74:	50 91 af 24 	lds	r21, 0x24AF
     c78:	60 91 b0 24 	lds	r22, 0x24B0
     c7c:	70 91 b1 24 	lds	r23, 0x24B1
     c80:	92 2f       	mov	r25, r18
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	aa 27       	eor	r26, r26
     c86:	97 fd       	sbrc	r25, 7
     c88:	a0 95       	com	r26
     c8a:	ba 2f       	mov	r27, r26
     c8c:	84 2b       	or	r24, r20
     c8e:	95 2b       	or	r25, r21
     c90:	a6 2b       	or	r26, r22
     c92:	b7 2b       	or	r27, r23
     c94:	80 93 ae 24 	sts	0x24AE, r24
     c98:	90 93 af 24 	sts	0x24AF, r25
     c9c:	a0 93 b0 24 	sts	0x24B0, r26
     ca0:	b0 93 b1 24 	sts	0x24B1, r27
			X_cilj |= (int)receiveArray[2];
     ca4:	20 91 70 29 	lds	r18, 0x2970
     ca8:	80 91 ae 24 	lds	r24, 0x24AE
     cac:	90 91 af 24 	lds	r25, 0x24AF
     cb0:	a0 91 b0 24 	lds	r26, 0x24B0
     cb4:	b0 91 b1 24 	lds	r27, 0x24B1
     cb8:	82 2b       	or	r24, r18
     cba:	80 93 ae 24 	sts	0x24AE, r24
     cbe:	90 93 af 24 	sts	0x24AF, r25
     cc2:	a0 93 b0 24 	sts	0x24B0, r26
     cc6:	b0 93 b1 24 	sts	0x24B1, r27
			X_cilj = (X_cilj * scale_factor_for_mm);
     cca:	a0 91 00 2e 	lds	r26, 0x2E00
     cce:	b0 91 01 2e 	lds	r27, 0x2E01
     cd2:	20 91 ae 24 	lds	r18, 0x24AE
     cd6:	30 91 af 24 	lds	r19, 0x24AF
     cda:	40 91 b0 24 	lds	r20, 0x24B0
     cde:	50 91 b1 24 	lds	r21, 0x24B1
     ce2:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
     ce6:	60 93 ae 24 	sts	0x24AE, r22
     cea:	70 93 af 24 	sts	0x24AF, r23
     cee:	80 93 b0 24 	sts	0x24B0, r24
     cf2:	90 93 b1 24 	sts	0x24B1, r25
			//Y_cilj
			Y_cilj = 0;
     cf6:	10 92 0b 2e 	sts	0x2E0B, r1
     cfa:	10 92 0c 2e 	sts	0x2E0C, r1
     cfe:	10 92 0d 2e 	sts	0x2E0D, r1
     d02:	10 92 0e 2e 	sts	0x2E0E, r1
			Y_cilj |= ((int)receiveArray[3]) << 8;
     d06:	20 91 71 29 	lds	r18, 0x2971
     d0a:	40 91 0b 2e 	lds	r20, 0x2E0B
     d0e:	50 91 0c 2e 	lds	r21, 0x2E0C
     d12:	60 91 0d 2e 	lds	r22, 0x2E0D
     d16:	70 91 0e 2e 	lds	r23, 0x2E0E
     d1a:	92 2f       	mov	r25, r18
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	aa 27       	eor	r26, r26
     d20:	97 fd       	sbrc	r25, 7
     d22:	a0 95       	com	r26
     d24:	ba 2f       	mov	r27, r26
     d26:	84 2b       	or	r24, r20
     d28:	95 2b       	or	r25, r21
     d2a:	a6 2b       	or	r26, r22
     d2c:	b7 2b       	or	r27, r23
     d2e:	80 93 0b 2e 	sts	0x2E0B, r24
     d32:	90 93 0c 2e 	sts	0x2E0C, r25
     d36:	a0 93 0d 2e 	sts	0x2E0D, r26
     d3a:	b0 93 0e 2e 	sts	0x2E0E, r27
			Y_cilj |= (int)receiveArray[4];
     d3e:	20 91 72 29 	lds	r18, 0x2972
     d42:	80 91 0b 2e 	lds	r24, 0x2E0B
     d46:	90 91 0c 2e 	lds	r25, 0x2E0C
     d4a:	a0 91 0d 2e 	lds	r26, 0x2E0D
     d4e:	b0 91 0e 2e 	lds	r27, 0x2E0E
     d52:	82 2b       	or	r24, r18
     d54:	80 93 0b 2e 	sts	0x2E0B, r24
     d58:	90 93 0c 2e 	sts	0x2E0C, r25
     d5c:	a0 93 0d 2e 	sts	0x2E0D, r26
     d60:	b0 93 0e 2e 	sts	0x2E0E, r27
			Y_cilj = Y_cilj * scale_factor_for_mm;
     d64:	a0 91 00 2e 	lds	r26, 0x2E00
     d68:	b0 91 01 2e 	lds	r27, 0x2E01
     d6c:	20 91 0b 2e 	lds	r18, 0x2E0B
     d70:	30 91 0c 2e 	lds	r19, 0x2E0C
     d74:	40 91 0d 2e 	lds	r20, 0x2E0D
     d78:	50 91 0e 2e 	lds	r21, 0x2E0E
     d7c:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
     d80:	60 93 0b 2e 	sts	0x2E0B, r22
     d84:	70 93 0c 2e 	sts	0x2E0C, r23
     d88:	80 93 0d 2e 	sts	0x2E0D, r24
     d8c:	90 93 0e 2e 	sts	0x2E0E, r25
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
     d90:	80 91 6e 29 	lds	r24, 0x296E
     d94:	80 93 dd 28 	sts	0x28DD, r24
			i = 0;
     d98:	00 e0       	ldi	r16, 0x00	; 0
     d9a:	10 e0       	ldi	r17, 0x00	; 0
			while (i < 1)
			{
				bool byteToBuffer;
				byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
     d9c:	f8 01       	movw	r30, r16
     d9e:	e3 52       	subi	r30, 0x23	; 35
     da0:	f7 4d       	sbci	r31, 0xD7	; 215
     da2:	60 81       	ld	r22, Z
     da4:	89 e1       	ldi	r24, 0x19	; 25
     da6:	93 e2       	ldi	r25, 0x23	; 35
     da8:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
				if(byteToBuffer)
     dac:	88 23       	and	r24, r24
     dae:	11 f0       	breq	.+4      	; 0xdb4 <__vector_58+0x382>
				{
					i++;
     db0:	0f 5f       	subi	r16, 0xFF	; 255
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
			Y_cilj = Y_cilj * scale_factor_for_mm;
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
			i = 0;
			while (i < 1)
     db4:	10 16       	cp	r1, r16
     db6:	11 06       	cpc	r1, r17
     db8:	8c f7       	brge	.-30     	; 0xd9c <__vector_58+0x36a>
				if(byteToBuffer)
				{
					i++;
				}
			}
			RX_i_E0 = 0;
     dba:	10 92 5b 2e 	sts	0x2E5B, r1
     dbe:	10 c7       	rjmp	.+3616   	; 0x1be0 <__vector_58+0x11ae>
		}
	}	
	//ZADAVANJE X,Y KOORDINATA I PARAMETRE KRETANJA - 3
	else if(receiveArray[0] == 3)					//provera funkcijskog bajta >> 3 - X,Y koordinate sa svim parametrima kretanja
     dc0:	80 91 6e 29 	lds	r24, 0x296E
     dc4:	83 30       	cpi	r24, 0x03	; 3
     dc6:	09 f0       	breq	.+2      	; 0xdca <__vector_58+0x398>
     dc8:	e3 c1       	rjmp	.+966    	; 0x1190 <__vector_58+0x75e>
	{
		if(RX_i_E0 >= 11)							//stigla je cela poruka	(11)
     dca:	80 91 5b 2e 	lds	r24, 0x2E5B
     dce:	8b 30       	cpi	r24, 0x0B	; 11
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <__vector_58+0x3a2>
     dd2:	06 c7       	rjmp	.+3596   	; 0x1be0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
     dd4:	10 92 fb 2d 	sts	0x2DFB, r1
// 				CHC ^= receiveArray[i];

			//if(receiveArray[x] == CHC)				//CHC ok
			{
				//x_cilj
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     dd8:	80 91 6f 29 	lds	r24, 0x296F
     ddc:	8f 3f       	cpi	r24, 0xFF	; 255
     dde:	29 f4       	brne	.+10     	; 0xdea <__vector_58+0x3b8>
     de0:	80 91 70 29 	lds	r24, 0x2970
     de4:	8f 3f       	cpi	r24, 0xFF	; 255
     de6:	09 f4       	brne	.+2      	; 0xdea <__vector_58+0x3b8>
     de8:	53 c0       	rjmp	.+166    	; 0xe90 <__vector_58+0x45e>
				{
					//ENABLE
					stop_PID_desni = 0;
     dea:	10 92 f4 29 	sts	0x29F4, r1
					stop_PID_levi = 0;
     dee:	10 92 f2 2d 	sts	0x2DF2, r1
					set_direct_out = 0;
     df2:	10 92 81 32 	sts	0x3281, r1
					
					X_cilj = 0;
     df6:	10 92 ae 24 	sts	0x24AE, r1
     dfa:	10 92 af 24 	sts	0x24AF, r1
     dfe:	10 92 b0 24 	sts	0x24B0, r1
     e02:	10 92 b1 24 	sts	0x24B1, r1
					X_cilj |= ((int)receiveArray[1]) << 8;
     e06:	20 91 6f 29 	lds	r18, 0x296F
     e0a:	40 91 ae 24 	lds	r20, 0x24AE
     e0e:	50 91 af 24 	lds	r21, 0x24AF
     e12:	60 91 b0 24 	lds	r22, 0x24B0
     e16:	70 91 b1 24 	lds	r23, 0x24B1
     e1a:	92 2f       	mov	r25, r18
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	aa 27       	eor	r26, r26
     e20:	97 fd       	sbrc	r25, 7
     e22:	a0 95       	com	r26
     e24:	ba 2f       	mov	r27, r26
     e26:	84 2b       	or	r24, r20
     e28:	95 2b       	or	r25, r21
     e2a:	a6 2b       	or	r26, r22
     e2c:	b7 2b       	or	r27, r23
     e2e:	80 93 ae 24 	sts	0x24AE, r24
     e32:	90 93 af 24 	sts	0x24AF, r25
     e36:	a0 93 b0 24 	sts	0x24B0, r26
     e3a:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj |= (int)receiveArray[2];
     e3e:	20 91 70 29 	lds	r18, 0x2970
     e42:	80 91 ae 24 	lds	r24, 0x24AE
     e46:	90 91 af 24 	lds	r25, 0x24AF
     e4a:	a0 91 b0 24 	lds	r26, 0x24B0
     e4e:	b0 91 b1 24 	lds	r27, 0x24B1
     e52:	82 2b       	or	r24, r18
     e54:	80 93 ae 24 	sts	0x24AE, r24
     e58:	90 93 af 24 	sts	0x24AF, r25
     e5c:	a0 93 b0 24 	sts	0x24B0, r26
     e60:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj = (X_cilj * scale_factor_for_mm);	
     e64:	a0 91 00 2e 	lds	r26, 0x2E00
     e68:	b0 91 01 2e 	lds	r27, 0x2E01
     e6c:	20 91 ae 24 	lds	r18, 0x24AE
     e70:	30 91 af 24 	lds	r19, 0x24AF
     e74:	40 91 b0 24 	lds	r20, 0x24B0
     e78:	50 91 b1 24 	lds	r21, 0x24B1
     e7c:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
     e80:	60 93 ae 24 	sts	0x24AE, r22
     e84:	70 93 af 24 	sts	0x24AF, r23
     e88:	80 93 b0 24 	sts	0x24B0, r24
     e8c:	90 93 b1 24 	sts	0x24B1, r25
				}	
				//Y_cilj
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     e90:	80 91 71 29 	lds	r24, 0x2971
     e94:	8f 3f       	cpi	r24, 0xFF	; 255
     e96:	29 f4       	brne	.+10     	; 0xea2 <__vector_58+0x470>
     e98:	80 91 72 29 	lds	r24, 0x2972
     e9c:	8f 3f       	cpi	r24, 0xFF	; 255
     e9e:	09 f4       	brne	.+2      	; 0xea2 <__vector_58+0x470>
     ea0:	53 c0       	rjmp	.+166    	; 0xf48 <__vector_58+0x516>
				{		
					stop_PID_desni = 0;
     ea2:	10 92 f4 29 	sts	0x29F4, r1
					stop_PID_levi = 0;	
     ea6:	10 92 f2 2d 	sts	0x2DF2, r1
					set_direct_out = 0;
     eaa:	10 92 81 32 	sts	0x3281, r1
					Y_cilj = 0;
     eae:	10 92 0b 2e 	sts	0x2E0B, r1
     eb2:	10 92 0c 2e 	sts	0x2E0C, r1
     eb6:	10 92 0d 2e 	sts	0x2E0D, r1
     eba:	10 92 0e 2e 	sts	0x2E0E, r1
					Y_cilj |= ((int)receiveArray[3]) << 8;
     ebe:	20 91 71 29 	lds	r18, 0x2971
     ec2:	40 91 0b 2e 	lds	r20, 0x2E0B
     ec6:	50 91 0c 2e 	lds	r21, 0x2E0C
     eca:	60 91 0d 2e 	lds	r22, 0x2E0D
     ece:	70 91 0e 2e 	lds	r23, 0x2E0E
     ed2:	92 2f       	mov	r25, r18
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	aa 27       	eor	r26, r26
     ed8:	97 fd       	sbrc	r25, 7
     eda:	a0 95       	com	r26
     edc:	ba 2f       	mov	r27, r26
     ede:	84 2b       	or	r24, r20
     ee0:	95 2b       	or	r25, r21
     ee2:	a6 2b       	or	r26, r22
     ee4:	b7 2b       	or	r27, r23
     ee6:	80 93 0b 2e 	sts	0x2E0B, r24
     eea:	90 93 0c 2e 	sts	0x2E0C, r25
     eee:	a0 93 0d 2e 	sts	0x2E0D, r26
     ef2:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj |= (int)receiveArray[4];
     ef6:	20 91 72 29 	lds	r18, 0x2972
     efa:	80 91 0b 2e 	lds	r24, 0x2E0B
     efe:	90 91 0c 2e 	lds	r25, 0x2E0C
     f02:	a0 91 0d 2e 	lds	r26, 0x2E0D
     f06:	b0 91 0e 2e 	lds	r27, 0x2E0E
     f0a:	82 2b       	or	r24, r18
     f0c:	80 93 0b 2e 	sts	0x2E0B, r24
     f10:	90 93 0c 2e 	sts	0x2E0C, r25
     f14:	a0 93 0d 2e 	sts	0x2E0D, r26
     f18:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj = Y_cilj * scale_factor_for_mm;
     f1c:	a0 91 00 2e 	lds	r26, 0x2E00
     f20:	b0 91 01 2e 	lds	r27, 0x2E01
     f24:	20 91 0b 2e 	lds	r18, 0x2E0B
     f28:	30 91 0c 2e 	lds	r19, 0x2E0C
     f2c:	40 91 0d 2e 	lds	r20, 0x2E0D
     f30:	50 91 0e 2e 	lds	r21, 0x2E0E
     f34:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
     f38:	60 93 0b 2e 	sts	0x2E0B, r22
     f3c:	70 93 0c 2e 	sts	0x2E0C, r23
     f40:	80 93 0d 2e 	sts	0x2E0D, r24
     f44:	90 93 0e 2e 	sts	0x2E0E, r25
				}	
				
				//teta_cilj_final_absolute
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
     f48:	80 91 73 29 	lds	r24, 0x2973
     f4c:	8f 3f       	cpi	r24, 0xFF	; 255
     f4e:	29 f4       	brne	.+10     	; 0xf5a <__vector_58+0x528>
     f50:	80 91 74 29 	lds	r24, 0x2974
     f54:	8f 3f       	cpi	r24, 0xFF	; 255
     f56:	09 f4       	brne	.+2      	; 0xf5a <__vector_58+0x528>
     f58:	58 c0       	rjmp	.+176    	; 0x100a <__vector_58+0x5d8>
				{
					teta_cilj_final = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
     f5a:	10 92 00 20 	sts	0x2000, r1
     f5e:	10 92 01 20 	sts	0x2001, r1
     f62:	10 92 02 20 	sts	0x2002, r1
     f66:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[5]) << 8;
     f6a:	20 91 73 29 	lds	r18, 0x2973
     f6e:	40 91 00 20 	lds	r20, 0x2000
     f72:	50 91 01 20 	lds	r21, 0x2001
     f76:	60 91 02 20 	lds	r22, 0x2002
     f7a:	70 91 03 20 	lds	r23, 0x2003
     f7e:	92 2f       	mov	r25, r18
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	aa 27       	eor	r26, r26
     f84:	97 fd       	sbrc	r25, 7
     f86:	a0 95       	com	r26
     f88:	ba 2f       	mov	r27, r26
     f8a:	84 2b       	or	r24, r20
     f8c:	95 2b       	or	r25, r21
     f8e:	a6 2b       	or	r26, r22
     f90:	b7 2b       	or	r27, r23
     f92:	80 93 00 20 	sts	0x2000, r24
     f96:	90 93 01 20 	sts	0x2001, r25
     f9a:	a0 93 02 20 	sts	0x2002, r26
     f9e:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[6];
     fa2:	20 91 74 29 	lds	r18, 0x2974
     fa6:	80 91 00 20 	lds	r24, 0x2000
     faa:	90 91 01 20 	lds	r25, 0x2001
     fae:	a0 91 02 20 	lds	r26, 0x2002
     fb2:	b0 91 03 20 	lds	r27, 0x2003
     fb6:	82 2b       	or	r24, r18
     fb8:	80 93 00 20 	sts	0x2000, r24
     fbc:	90 93 01 20 	sts	0x2001, r25
     fc0:	a0 93 02 20 	sts	0x2002, r26
     fc4:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = (teta_cilj_final * krug360) / 360;
     fc8:	20 91 00 20 	lds	r18, 0x2000
     fcc:	30 91 01 20 	lds	r19, 0x2001
     fd0:	40 91 02 20 	lds	r20, 0x2002
     fd4:	50 91 03 20 	lds	r21, 0x2003
     fd8:	60 91 75 32 	lds	r22, 0x3275
     fdc:	70 91 76 32 	lds	r23, 0x3276
     fe0:	80 91 77 32 	lds	r24, 0x3277
     fe4:	90 91 78 32 	lds	r25, 0x3278
     fe8:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__mulsi3>
     fec:	28 e6       	ldi	r18, 0x68	; 104
     fee:	31 e0       	ldi	r19, 0x01	; 1
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
     ff8:	20 93 00 20 	sts	0x2000, r18
     ffc:	30 93 01 20 	sts	0x2001, r19
    1000:	40 93 02 20 	sts	0x2002, r20
    1004:	50 93 03 20 	sts	0x2003, r21
    1008:	78 c0       	rjmp	.+240    	; 0x10fa <__vector_58+0x6c8>
				}	
				//teta_cilj_final_relative
				else if(!(receiveArray[7] == 0xFF && receiveArray[8] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    100a:	80 91 75 29 	lds	r24, 0x2975
    100e:	8f 3f       	cpi	r24, 0xFF	; 255
    1010:	29 f4       	brne	.+10     	; 0x101c <__vector_58+0x5ea>
    1012:	80 91 76 29 	lds	r24, 0x2976
    1016:	8f 3f       	cpi	r24, 0xFF	; 255
    1018:	09 f4       	brne	.+2      	; 0x101c <__vector_58+0x5ea>
    101a:	64 c0       	rjmp	.+200    	; 0x10e4 <__vector_58+0x6b2>
				{
					teta_cilj_final = 0;
    101c:	10 92 00 20 	sts	0x2000, r1
    1020:	10 92 01 20 	sts	0x2001, r1
    1024:	10 92 02 20 	sts	0x2002, r1
    1028:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[7]) << 8;
    102c:	20 91 75 29 	lds	r18, 0x2975
    1030:	40 91 00 20 	lds	r20, 0x2000
    1034:	50 91 01 20 	lds	r21, 0x2001
    1038:	60 91 02 20 	lds	r22, 0x2002
    103c:	70 91 03 20 	lds	r23, 0x2003
    1040:	92 2f       	mov	r25, r18
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	aa 27       	eor	r26, r26
    1046:	97 fd       	sbrc	r25, 7
    1048:	a0 95       	com	r26
    104a:	ba 2f       	mov	r27, r26
    104c:	84 2b       	or	r24, r20
    104e:	95 2b       	or	r25, r21
    1050:	a6 2b       	or	r26, r22
    1052:	b7 2b       	or	r27, r23
    1054:	80 93 00 20 	sts	0x2000, r24
    1058:	90 93 01 20 	sts	0x2001, r25
    105c:	a0 93 02 20 	sts	0x2002, r26
    1060:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[8];
    1064:	20 91 76 29 	lds	r18, 0x2976
    1068:	80 91 00 20 	lds	r24, 0x2000
    106c:	90 91 01 20 	lds	r25, 0x2001
    1070:	a0 91 02 20 	lds	r26, 0x2002
    1074:	b0 91 03 20 	lds	r27, 0x2003
    1078:	82 2b       	or	r24, r18
    107a:	80 93 00 20 	sts	0x2000, r24
    107e:	90 93 01 20 	sts	0x2001, r25
    1082:	a0 93 02 20 	sts	0x2002, r26
    1086:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = teta + (teta_cilj_final * krug360) / 360;
    108a:	20 91 00 20 	lds	r18, 0x2000
    108e:	30 91 01 20 	lds	r19, 0x2001
    1092:	40 91 02 20 	lds	r20, 0x2002
    1096:	50 91 03 20 	lds	r21, 0x2003
    109a:	60 91 75 32 	lds	r22, 0x3275
    109e:	70 91 76 32 	lds	r23, 0x3276
    10a2:	80 91 77 32 	lds	r24, 0x3277
    10a6:	90 91 78 32 	lds	r25, 0x3278
    10aa:	c0 90 83 32 	lds	r12, 0x3283
    10ae:	d0 90 84 32 	lds	r13, 0x3284
    10b2:	e0 90 85 32 	lds	r14, 0x3285
    10b6:	f0 90 86 32 	lds	r15, 0x3286
    10ba:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__mulsi3>
    10be:	28 e6       	ldi	r18, 0x68	; 104
    10c0:	31 e0       	ldi	r19, 0x01	; 1
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    10ca:	c2 0e       	add	r12, r18
    10cc:	d3 1e       	adc	r13, r19
    10ce:	e4 1e       	adc	r14, r20
    10d0:	f5 1e       	adc	r15, r21
    10d2:	c0 92 00 20 	sts	0x2000, r12
    10d6:	d0 92 01 20 	sts	0x2001, r13
    10da:	e0 92 02 20 	sts	0x2002, r14
    10de:	f0 92 03 20 	sts	0x2003, r15
    10e2:	0b c0       	rjmp	.+22     	; 0x10fa <__vector_58+0x6c8>
				}
				else
					teta_cilj_final = 0xFFFFFFFF;				
    10e4:	8f ef       	ldi	r24, 0xFF	; 255
    10e6:	9f ef       	ldi	r25, 0xFF	; 255
    10e8:	dc 01       	movw	r26, r24
    10ea:	80 93 00 20 	sts	0x2000, r24
    10ee:	90 93 01 20 	sts	0x2001, r25
    10f2:	a0 93 02 20 	sts	0x2002, r26
    10f6:	b0 93 03 20 	sts	0x2003, r27
				//bzina
				if(receiveArray[9] != 0xFF)	// ako zadajemo 0xFF ne menja se brzina
    10fa:	80 91 77 29 	lds	r24, 0x2977
    10fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1100:	c9 f0       	breq	.+50     	; 0x1134 <__vector_58+0x702>
				{
					zeljena_pravolinijska_brzina = receiveArray[9] * 3;	//podesiti faktor!
    1102:	80 91 77 29 	lds	r24, 0x2977
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	9c 01       	movw	r18, r24
    110a:	22 0f       	add	r18, r18
    110c:	33 1f       	adc	r19, r19
    110e:	82 0f       	add	r24, r18
    1110:	93 1f       	adc	r25, r19
    1112:	80 93 7f 32 	sts	0x327F, r24
    1116:	90 93 80 32 	sts	0x3280, r25
					zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2;
    111a:	80 91 7f 32 	lds	r24, 0x327F
    111e:	90 91 80 32 	lds	r25, 0x3280
    1122:	99 23       	and	r25, r25
    1124:	0c f4       	brge	.+2      	; 0x1128 <__vector_58+0x6f6>
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	95 95       	asr	r25
    112a:	87 95       	ror	r24
    112c:	80 93 61 2e 	sts	0x2E61, r24
    1130:	90 93 62 2e 	sts	0x2E62, r25
				}				
				//smer
				if(receiveArray[10] != 0xFF)	// ako zadajemo 0xFF ne menja se smer
    1134:	80 91 78 29 	lds	r24, 0x2978
    1138:	8f 3f       	cpi	r24, 0xFF	; 255
    113a:	21 f0       	breq	.+8      	; 0x1144 <__vector_58+0x712>
					smer_zadati = receiveArray[10];	
    113c:	80 91 78 29 	lds	r24, 0x2978
    1140:	80 93 5e 29 	sts	0x295E, r24
				
				//pokretanje snimanja u nizove
				sample_counter_niz_1 = 0;
    1144:	10 92 58 2e 	sts	0x2E58, r1
				niz_counter_niz_1 = 0;	
    1148:	10 92 59 2e 	sts	0x2E59, r1
				sample_counter_niz_2 = 0;
    114c:	10 92 f9 2d 	sts	0x2DF9, r1
				niz_counter_niz_2 = 0;
    1150:	10 92 fa 2d 	sts	0x2DFA, r1
				sample_counter_niz_3 = 0;
    1154:	10 92 5f 29 	sts	0x295F, r1
				niz_counter_niz_3 = 0;		
    1158:	10 92 c6 24 	sts	0x24C6, r1
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
    115c:	80 91 6e 29 	lds	r24, 0x296E
    1160:	80 93 dd 28 	sts	0x28DD, r24
				niz_counter_niz_2 = 0;
				sample_counter_niz_3 = 0;
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
    1164:	00 e0       	ldi	r16, 0x00	; 0
    1166:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];	
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1168:	f8 01       	movw	r30, r16
    116a:	e3 52       	subi	r30, 0x23	; 35
    116c:	f7 4d       	sbci	r31, 0xD7	; 215
    116e:	60 81       	ld	r22, Z
    1170:	89 e1       	ldi	r24, 0x19	; 25
    1172:	93 e2       	ldi	r25, 0x23	; 35
    1174:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1178:	88 23       	and	r24, r24
    117a:	11 f0       	breq	.+4      	; 0x1180 <__vector_58+0x74e>
					{
						i++;
    117c:	0f 5f       	subi	r16, 0xFF	; 255
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
				while (i < 1)
    1180:	10 16       	cp	r1, r16
    1182:	11 06       	cpc	r1, r17
    1184:	8c f7       	brge	.-30     	; 0x1168 <__vector_58+0x736>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    1186:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda	
    118a:	10 92 5b 2e 	sts	0x2E5B, r1
    118e:	28 c5       	rjmp	.+2640   	; 0x1be0 <__vector_58+0x11ae>
		}					
	}
	//RELATIVNA DISTANCA I UGAO - 4
	else if(receiveArray[0] == 4)					//provera funkcijskog bajta
    1190:	80 91 6e 29 	lds	r24, 0x296E
    1194:	84 30       	cpi	r24, 0x04	; 4
    1196:	09 f0       	breq	.+2      	; 0x119a <__vector_58+0x768>
    1198:	95 c1       	rjmp	.+810    	; 0x14c4 <__vector_58+0xa92>
	{
		if(RX_i_E0 >= 5)								//stigla je cela poruka
    119a:	80 91 5b 2e 	lds	r24, 0x2E5B
    119e:	85 30       	cpi	r24, 0x05	; 5
    11a0:	08 f4       	brcc	.+2      	; 0x11a4 <__vector_58+0x772>
    11a2:	1e c5       	rjmp	.+2620   	; 0x1be0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    11a4:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//ENABLE
				stop_PID_desni = 0;
    11a8:	10 92 f4 29 	sts	0x29F4, r1
				stop_PID_levi = 0;
    11ac:	10 92 f2 2d 	sts	0x2DF2, r1
				set_direct_out = 0;
    11b0:	10 92 81 32 	sts	0x3281, r1
				
				rel_distanca = 0;
    11b4:	10 92 c5 28 	sts	0x28C5, r1
    11b8:	10 92 c6 28 	sts	0x28C6, r1
    11bc:	10 92 c7 28 	sts	0x28C7, r1
    11c0:	10 92 c8 28 	sts	0x28C8, r1
				rel_distanca |= ((int)receiveArray[1]) << 8;
    11c4:	20 91 6f 29 	lds	r18, 0x296F
    11c8:	40 91 c5 28 	lds	r20, 0x28C5
    11cc:	50 91 c6 28 	lds	r21, 0x28C6
    11d0:	60 91 c7 28 	lds	r22, 0x28C7
    11d4:	70 91 c8 28 	lds	r23, 0x28C8
    11d8:	92 2f       	mov	r25, r18
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	aa 27       	eor	r26, r26
    11de:	97 fd       	sbrc	r25, 7
    11e0:	a0 95       	com	r26
    11e2:	ba 2f       	mov	r27, r26
    11e4:	84 2b       	or	r24, r20
    11e6:	95 2b       	or	r25, r21
    11e8:	a6 2b       	or	r26, r22
    11ea:	b7 2b       	or	r27, r23
    11ec:	80 93 c5 28 	sts	0x28C5, r24
    11f0:	90 93 c6 28 	sts	0x28C6, r25
    11f4:	a0 93 c7 28 	sts	0x28C7, r26
    11f8:	b0 93 c8 28 	sts	0x28C8, r27
				rel_distanca |= (int)receiveArray[2];
    11fc:	20 91 70 29 	lds	r18, 0x2970
    1200:	80 91 c5 28 	lds	r24, 0x28C5
    1204:	90 91 c6 28 	lds	r25, 0x28C6
    1208:	a0 91 c7 28 	lds	r26, 0x28C7
    120c:	b0 91 c8 28 	lds	r27, 0x28C8
    1210:	82 2b       	or	r24, r18
    1212:	80 93 c5 28 	sts	0x28C5, r24
    1216:	90 93 c6 28 	sts	0x28C6, r25
    121a:	a0 93 c7 28 	sts	0x28C7, r26
    121e:	b0 93 c8 28 	sts	0x28C8, r27
				rel_distanca = (rel_distanca * scale_factor_for_mm);
    1222:	a0 91 00 2e 	lds	r26, 0x2E00
    1226:	b0 91 01 2e 	lds	r27, 0x2E01
    122a:	20 91 c5 28 	lds	r18, 0x28C5
    122e:	30 91 c6 28 	lds	r19, 0x28C6
    1232:	40 91 c7 28 	lds	r20, 0x28C7
    1236:	50 91 c8 28 	lds	r21, 0x28C8
    123a:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    123e:	60 93 c5 28 	sts	0x28C5, r22
    1242:	70 93 c6 28 	sts	0x28C6, r23
    1246:	80 93 c7 28 	sts	0x28C7, r24
    124a:	90 93 c8 28 	sts	0x28C8, r25

				rel_ugao = 0;
    124e:	10 92 16 2e 	sts	0x2E16, r1
    1252:	10 92 17 2e 	sts	0x2E17, r1
    1256:	10 92 18 2e 	sts	0x2E18, r1
    125a:	10 92 19 2e 	sts	0x2E19, r1
				rel_ugao |= ((int)receiveArray[3]) << 8;
    125e:	20 91 71 29 	lds	r18, 0x2971
    1262:	40 91 16 2e 	lds	r20, 0x2E16
    1266:	50 91 17 2e 	lds	r21, 0x2E17
    126a:	60 91 18 2e 	lds	r22, 0x2E18
    126e:	70 91 19 2e 	lds	r23, 0x2E19
    1272:	92 2f       	mov	r25, r18
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	aa 27       	eor	r26, r26
    1278:	97 fd       	sbrc	r25, 7
    127a:	a0 95       	com	r26
    127c:	ba 2f       	mov	r27, r26
    127e:	84 2b       	or	r24, r20
    1280:	95 2b       	or	r25, r21
    1282:	a6 2b       	or	r26, r22
    1284:	b7 2b       	or	r27, r23
    1286:	80 93 16 2e 	sts	0x2E16, r24
    128a:	90 93 17 2e 	sts	0x2E17, r25
    128e:	a0 93 18 2e 	sts	0x2E18, r26
    1292:	b0 93 19 2e 	sts	0x2E19, r27
				rel_ugao |= (int)receiveArray[4];
    1296:	20 91 72 29 	lds	r18, 0x2972
    129a:	80 91 16 2e 	lds	r24, 0x2E16
    129e:	90 91 17 2e 	lds	r25, 0x2E17
    12a2:	a0 91 18 2e 	lds	r26, 0x2E18
    12a6:	b0 91 19 2e 	lds	r27, 0x2E19
    12aa:	82 2b       	or	r24, r18
    12ac:	80 93 16 2e 	sts	0x2E16, r24
    12b0:	90 93 17 2e 	sts	0x2E17, r25
    12b4:	a0 93 18 2e 	sts	0x2E18, r26
    12b8:	b0 93 19 2e 	sts	0x2E19, r27
				rel_ugao = (rel_ugao * krug360) / 360;
    12bc:	20 91 16 2e 	lds	r18, 0x2E16
    12c0:	30 91 17 2e 	lds	r19, 0x2E17
    12c4:	40 91 18 2e 	lds	r20, 0x2E18
    12c8:	50 91 19 2e 	lds	r21, 0x2E19
    12cc:	60 91 75 32 	lds	r22, 0x3275
    12d0:	70 91 76 32 	lds	r23, 0x3276
    12d4:	80 91 77 32 	lds	r24, 0x3277
    12d8:	90 91 78 32 	lds	r25, 0x3278
    12dc:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__mulsi3>
    12e0:	28 e6       	ldi	r18, 0x68	; 104
    12e2:	31 e0       	ldi	r19, 0x01	; 1
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    12ec:	20 93 16 2e 	sts	0x2E16, r18
    12f0:	30 93 17 2e 	sts	0x2E17, r19
    12f4:	40 93 18 2e 	sts	0x2E18, r20
    12f8:	50 93 19 2e 	sts	0x2E19, r21
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    12fc:	40 91 83 32 	lds	r20, 0x3283
    1300:	50 91 84 32 	lds	r21, 0x3284
    1304:	60 91 85 32 	lds	r22, 0x3285
    1308:	70 91 86 32 	lds	r23, 0x3286
    130c:	80 91 16 2e 	lds	r24, 0x2E16
    1310:	90 91 17 2e 	lds	r25, 0x2E17
    1314:	a0 91 18 2e 	lds	r26, 0x2E18
    1318:	b0 91 19 2e 	lds	r27, 0x2E19
    131c:	c0 90 cf 28 	lds	r12, 0x28CF
    1320:	d0 90 d0 28 	lds	r13, 0x28D0
    1324:	e0 90 d1 28 	lds	r14, 0x28D1
    1328:	f0 90 d2 28 	lds	r15, 0x28D2
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    132c:	40 90 83 32 	lds	r4, 0x3283
    1330:	50 90 84 32 	lds	r5, 0x3284
    1334:	60 90 85 32 	lds	r6, 0x3285
    1338:	70 90 86 32 	lds	r7, 0x3286
    133c:	00 91 16 2e 	lds	r16, 0x2E16
    1340:	10 91 17 2e 	lds	r17, 0x2E17
    1344:	20 91 18 2e 	lds	r18, 0x2E18
    1348:	30 91 19 2e 	lds	r19, 0x2E19
    134c:	09 83       	std	Y+1, r16	; 0x01
    134e:	1a 83       	std	Y+2, r17	; 0x02
    1350:	2b 83       	std	Y+3, r18	; 0x03
    1352:	3c 83       	std	Y+4, r19	; 0x04
    1354:	80 90 cf 28 	lds	r8, 0x28CF
    1358:	90 90 d0 28 	lds	r9, 0x28D0
    135c:	a0 90 d1 28 	lds	r10, 0x28D1
    1360:	b0 90 d2 28 	lds	r11, 0x28D2
				rel_ugao |= (int)receiveArray[4];
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    1364:	8a 01       	movw	r16, r20
    1366:	9b 01       	movw	r18, r22
    1368:	08 0f       	add	r16, r24
    136a:	19 1f       	adc	r17, r25
    136c:	2a 1f       	adc	r18, r26
    136e:	3b 1f       	adc	r19, r27
    1370:	c9 01       	movw	r24, r18
    1372:	b8 01       	movw	r22, r16
    1374:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    1378:	6d 83       	std	Y+5, r22	; 0x05
    137a:	7e 83       	std	Y+6, r23	; 0x06
    137c:	8f 83       	std	Y+7, r24	; 0x07
    137e:	98 87       	std	Y+8, r25	; 0x08
    1380:	c7 01       	movw	r24, r14
    1382:	b6 01       	movw	r22, r12
    1384:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    1388:	9b 01       	movw	r18, r22
    138a:	ac 01       	movw	r20, r24
    138c:	6d 81       	ldd	r22, Y+5	; 0x05
    138e:	7e 81       	ldd	r23, Y+6	; 0x06
    1390:	8f 81       	ldd	r24, Y+7	; 0x07
    1392:	98 85       	ldd	r25, Y+8	; 0x08
    1394:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__divsf3>
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
    1398:	2b ed       	ldi	r18, 0xDB	; 219
    139a:	3f e0       	ldi	r19, 0x0F	; 15
    139c:	49 e4       	ldi	r20, 0x49	; 73
    139e:	50 e4       	ldi	r21, 0x40	; 64
    13a0:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    13a4:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <cos>
    13a8:	6b 01       	movw	r12, r22
    13aa:	7c 01       	movw	r14, r24
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    13ac:	69 81       	ldd	r22, Y+1	; 0x01
    13ae:	7a 81       	ldd	r23, Y+2	; 0x02
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	64 0d       	add	r22, r4
    13b6:	75 1d       	adc	r23, r5
    13b8:	86 1d       	adc	r24, r6
    13ba:	97 1d       	adc	r25, r7
    13bc:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    13c0:	2b 01       	movw	r4, r22
    13c2:	3c 01       	movw	r6, r24
    13c4:	c5 01       	movw	r24, r10
    13c6:	b4 01       	movw	r22, r8
    13c8:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    13cc:	9b 01       	movw	r18, r22
    13ce:	ac 01       	movw	r20, r24
    13d0:	c3 01       	movw	r24, r6
    13d2:	b2 01       	movw	r22, r4
    13d4:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__divsf3>
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
    13d8:	2b ed       	ldi	r18, 0xDB	; 219
    13da:	3f e0       	ldi	r19, 0x0F	; 15
    13dc:	49 e4       	ldi	r20, 0x49	; 73
    13de:	50 e4       	ldi	r21, 0x40	; 64
    13e0:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    13e4:	0e 94 78 38 	call	0x70f0	; 0x70f0 <sin>
    13e8:	4b 01       	movw	r8, r22
    13ea:	5c 01       	movw	r10, r24
				X_pos_cos = rel_distanca * X_pos_cos;
    13ec:	60 91 c5 28 	lds	r22, 0x28C5
    13f0:	70 91 c6 28 	lds	r23, 0x28C6
    13f4:	80 91 c7 28 	lds	r24, 0x28C7
    13f8:	90 91 c8 28 	lds	r25, 0x28C8
				Y_pos_sin = rel_distanca * Y_pos_sin;
    13fc:	40 90 c5 28 	lds	r4, 0x28C5
    1400:	50 90 c6 28 	lds	r5, 0x28C6
    1404:	60 90 c7 28 	lds	r6, 0x28C7
    1408:	70 90 c8 28 	lds	r7, 0x28C8
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    140c:	20 91 23 2e 	lds	r18, 0x2E23
    1410:	30 91 24 2e 	lds	r19, 0x2E24
    1414:	40 91 25 2e 	lds	r20, 0x2E25
    1418:	50 91 26 2e 	lds	r21, 0x2E26
    141c:	29 83       	std	Y+1, r18	; 0x01
    141e:	3a 83       	std	Y+2, r19	; 0x02
    1420:	4b 83       	std	Y+3, r20	; 0x03
    1422:	5c 83       	std	Y+4, r21	; 0x04
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
    1424:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    1428:	a7 01       	movw	r20, r14
    142a:	96 01       	movw	r18, r12
    142c:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
				Y_pos_sin = rel_distanca * Y_pos_sin;
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    1430:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <__fixsfsi>
    1434:	09 81       	ldd	r16, Y+1	; 0x01
    1436:	1a 81       	ldd	r17, Y+2	; 0x02
    1438:	2b 81       	ldd	r18, Y+3	; 0x03
    143a:	3c 81       	ldd	r19, Y+4	; 0x04
    143c:	06 0f       	add	r16, r22
    143e:	17 1f       	adc	r17, r23
    1440:	28 1f       	adc	r18, r24
    1442:	39 1f       	adc	r19, r25
    1444:	00 93 ae 24 	sts	0x24AE, r16
    1448:	10 93 af 24 	sts	0x24AF, r17
    144c:	20 93 b0 24 	sts	0x24B0, r18
    1450:	30 93 b1 24 	sts	0x24B1, r19
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    1454:	c0 90 02 2a 	lds	r12, 0x2A02
    1458:	d0 90 03 2a 	lds	r13, 0x2A03
    145c:	e0 90 04 2a 	lds	r14, 0x2A04
    1460:	f0 90 05 2a 	lds	r15, 0x2A05
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
				Y_pos_sin = rel_distanca * Y_pos_sin;
    1464:	c3 01       	movw	r24, r6
    1466:	b2 01       	movw	r22, r4
    1468:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    146c:	a5 01       	movw	r20, r10
    146e:	94 01       	movw	r18, r8
    1470:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    1474:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <__fixsfsi>
    1478:	c6 0e       	add	r12, r22
    147a:	d7 1e       	adc	r13, r23
    147c:	e8 1e       	adc	r14, r24
    147e:	f9 1e       	adc	r15, r25
    1480:	c0 92 0b 2e 	sts	0x2E0B, r12
    1484:	d0 92 0c 2e 	sts	0x2E0C, r13
    1488:	e0 92 0d 2e 	sts	0x2E0D, r14
    148c:	f0 92 0e 2e 	sts	0x2E0E, r15
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1490:	80 91 6e 29 	lds	r24, 0x296E
    1494:	80 93 dd 28 	sts	0x28DD, r24
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
    1498:	00 e0       	ldi	r16, 0x00	; 0
    149a:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    149c:	f8 01       	movw	r30, r16
    149e:	e3 52       	subi	r30, 0x23	; 35
    14a0:	f7 4d       	sbci	r31, 0xD7	; 215
    14a2:	60 81       	ld	r22, Z
    14a4:	89 e1       	ldi	r24, 0x19	; 25
    14a6:	93 e2       	ldi	r25, 0x23	; 35
    14a8:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    14ac:	88 23       	and	r24, r24
    14ae:	11 f0       	breq	.+4      	; 0x14b4 <__vector_58+0xa82>
					{
						i++;
    14b0:	0f 5f       	subi	r16, 0xFF	; 255
    14b2:	1f 4f       	sbci	r17, 0xFF	; 255
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    14b4:	10 16       	cp	r1, r16
    14b6:	11 06       	cpc	r1, r17
    14b8:	8c f7       	brge	.-30     	; 0x149c <__vector_58+0xa6a>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    14ba:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda
    14be:	10 92 5b 2e 	sts	0x2E5B, r1
    14c2:	8e c3       	rjmp	.+1820   	; 0x1be0 <__vector_58+0x11ae>
		}
	}
	//SET DIRECT OUT - 5
	else if(receiveArray[0] == 5)					//provera funkcijskog bajta
    14c4:	80 91 6e 29 	lds	r24, 0x296E
    14c8:	85 30       	cpi	r24, 0x05	; 5
    14ca:	09 f0       	breq	.+2      	; 0x14ce <__vector_58+0xa9c>
    14cc:	6e c0       	rjmp	.+220    	; 0x15aa <__vector_58+0xb78>
	{
		if(RX_i_E0 >= 3)							//stigla je cela poruka
    14ce:	80 91 5b 2e 	lds	r24, 0x2E5B
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	08 f4       	brcc	.+2      	; 0x14d8 <__vector_58+0xaa6>
    14d6:	84 c3       	rjmp	.+1800   	; 0x1be0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    14d8:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//ENABLE
				set_direct_out = 1;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	80 93 81 32 	sts	0x3281, r24
				
				if(receiveArray[1] >= 128)
    14e2:	80 91 6f 29 	lds	r24, 0x296F
    14e6:	88 23       	and	r24, r24
    14e8:	8c f4       	brge	.+34     	; 0x150c <__vector_58+0xada>
					PID_brzina_L = (receiveArray[1] - 128) * 5;	//podesiti faktor!
    14ea:	80 91 6f 29 	lds	r24, 0x296F
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9c 01       	movw	r18, r24
    14f2:	22 0f       	add	r18, r18
    14f4:	33 1f       	adc	r19, r19
    14f6:	22 0f       	add	r18, r18
    14f8:	33 1f       	adc	r19, r19
    14fa:	82 0f       	add	r24, r18
    14fc:	93 1f       	adc	r25, r19
    14fe:	80 58       	subi	r24, 0x80	; 128
    1500:	92 40       	sbci	r25, 0x02	; 2
    1502:	80 93 7b 2e 	sts	0x2E7B, r24
    1506:	90 93 7c 2e 	sts	0x2E7C, r25
    150a:	10 c0       	rjmp	.+32     	; 0x152c <__vector_58+0xafa>
				else
					PID_brzina_L = (128 - receiveArray[1]) * (-5);
    150c:	80 91 6f 29 	lds	r24, 0x296F
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	9c 01       	movw	r18, r24
    1514:	22 0f       	add	r18, r18
    1516:	33 1f       	adc	r19, r19
    1518:	22 0f       	add	r18, r18
    151a:	33 1f       	adc	r19, r19
    151c:	82 0f       	add	r24, r18
    151e:	93 1f       	adc	r25, r19
    1520:	80 58       	subi	r24, 0x80	; 128
    1522:	92 40       	sbci	r25, 0x02	; 2
    1524:	80 93 7b 2e 	sts	0x2E7B, r24
    1528:	90 93 7c 2e 	sts	0x2E7C, r25
					
				if(receiveArray[2] >= 128)
    152c:	80 91 70 29 	lds	r24, 0x2970
    1530:	88 23       	and	r24, r24
    1532:	8c f4       	brge	.+34     	; 0x1556 <__vector_58+0xb24>
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
    1534:	80 91 70 29 	lds	r24, 0x2970
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9c 01       	movw	r18, r24
    153c:	22 0f       	add	r18, r18
    153e:	33 1f       	adc	r19, r19
    1540:	22 0f       	add	r18, r18
    1542:	33 1f       	adc	r19, r19
    1544:	82 0f       	add	r24, r18
    1546:	93 1f       	adc	r25, r19
    1548:	80 58       	subi	r24, 0x80	; 128
    154a:	92 40       	sbci	r25, 0x02	; 2
    154c:	80 93 79 2e 	sts	0x2E79, r24
    1550:	90 93 7a 2e 	sts	0x2E7A, r25
    1554:	10 c0       	rjmp	.+32     	; 0x1576 <__vector_58+0xb44>
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
    1556:	80 91 70 29 	lds	r24, 0x2970
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	9c 01       	movw	r18, r24
    155e:	22 0f       	add	r18, r18
    1560:	33 1f       	adc	r19, r19
    1562:	22 0f       	add	r18, r18
    1564:	33 1f       	adc	r19, r19
    1566:	82 0f       	add	r24, r18
    1568:	93 1f       	adc	r25, r19
    156a:	80 58       	subi	r24, 0x80	; 128
    156c:	92 40       	sbci	r25, 0x02	; 2
    156e:	80 93 79 2e 	sts	0x2E79, r24
    1572:	90 93 7a 2e 	sts	0x2E7A, r25
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1576:	80 91 6e 29 	lds	r24, 0x296E
    157a:	80 93 dd 28 	sts	0x28DD, r24
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
    157e:	00 e0       	ldi	r16, 0x00	; 0
    1580:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1582:	f8 01       	movw	r30, r16
    1584:	e3 52       	subi	r30, 0x23	; 35
    1586:	f7 4d       	sbci	r31, 0xD7	; 215
    1588:	60 81       	ld	r22, Z
    158a:	89 e1       	ldi	r24, 0x19	; 25
    158c:	93 e2       	ldi	r25, 0x23	; 35
    158e:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1592:	88 23       	and	r24, r24
    1594:	11 f0       	breq	.+4      	; 0x159a <__vector_58+0xb68>
					{
						i++;
    1596:	0f 5f       	subi	r16, 0xFF	; 255
    1598:	1f 4f       	sbci	r17, 0xFF	; 255
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    159a:	10 16       	cp	r1, r16
    159c:	11 06       	cpc	r1, r17
    159e:	8c f7       	brge	.-30     	; 0x1582 <__vector_58+0xb50>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    15a0:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda
    15a4:	10 92 5b 2e 	sts	0x2E5B, r1
    15a8:	1b c3       	rjmp	.+1590   	; 0x1be0 <__vector_58+0x11ae>
		}
	}			
	//PODESAVANJE FET izlaza i servoa - 6
	else if(receiveArray[0] == 6)					//provera funkcijskog bajta 
    15aa:	80 91 6e 29 	lds	r24, 0x296E
    15ae:	86 30       	cpi	r24, 0x06	; 6
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <__vector_58+0xb82>
    15b2:	56 c0       	rjmp	.+172    	; 0x1660 <__vector_58+0xc2e>
	{
		if(RX_i_E0 >= 7)							//stigla je cela poruka	(11)
    15b4:	80 91 5b 2e 	lds	r24, 0x2E5B
    15b8:	87 30       	cpi	r24, 0x07	; 7
    15ba:	08 f4       	brcc	.+2      	; 0x15be <__vector_58+0xb8c>
    15bc:	11 c3       	rjmp	.+1570   	; 0x1be0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    15be:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				PORTC.OUT |= receiveArray[1] & receiveArray[2];	//izlazi + maska
    15c2:	e0 e4       	ldi	r30, 0x40	; 64
    15c4:	f6 e0       	ldi	r31, 0x06	; 6
    15c6:	94 81       	ldd	r25, Z+4	; 0x04
    15c8:	4f e6       	ldi	r20, 0x6F	; 111
    15ca:	59 e2       	ldi	r21, 0x29	; 41
    15cc:	da 01       	movw	r26, r20
    15ce:	8c 91       	ld	r24, X
    15d0:	60 e7       	ldi	r22, 0x70	; 112
    15d2:	79 e2       	ldi	r23, 0x29	; 41
    15d4:	db 01       	movw	r26, r22
    15d6:	2c 91       	ld	r18, X
    15d8:	82 23       	and	r24, r18
    15da:	89 2b       	or	r24, r25
    15dc:	84 83       	std	Z+4, r24	; 0x04
				PORTC.OUT &= ~(receiveArray[1] ^ receiveArray[2]);	//izlazi + maska
    15de:	94 81       	ldd	r25, Z+4	; 0x04
    15e0:	da 01       	movw	r26, r20
    15e2:	8c 91       	ld	r24, X
    15e4:	db 01       	movw	r26, r22
    15e6:	2c 91       	ld	r18, X
    15e8:	82 27       	eor	r24, r18
    15ea:	80 95       	com	r24
    15ec:	89 23       	and	r24, r25
    15ee:	84 83       	std	Z+4, r24	; 0x04
				
				//120 - nulti polozaj, 280 - krajnji polozaj
				TCF0.CCA = receiveArray[3] + 120;
    15f0:	80 91 71 29 	lds	r24, 0x2971
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	88 58       	subi	r24, 0x88	; 136
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	e0 e0       	ldi	r30, 0x00	; 0
    15fc:	fb e0       	ldi	r31, 0x0B	; 11
    15fe:	80 a7       	std	Z+40, r24	; 0x28
    1600:	91 a7       	std	Z+41, r25	; 0x29
				TCF0.CCB = receiveArray[4] + 120;
    1602:	80 91 72 29 	lds	r24, 0x2972
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	88 58       	subi	r24, 0x88	; 136
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	82 a7       	std	Z+42, r24	; 0x2a
    160e:	93 a7       	std	Z+43, r25	; 0x2b
				TCF0.CCC = receiveArray[5] + 120;
    1610:	80 91 73 29 	lds	r24, 0x2973
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	88 58       	subi	r24, 0x88	; 136
    1618:	9f 4f       	sbci	r25, 0xFF	; 255
    161a:	84 a7       	std	Z+44, r24	; 0x2c
    161c:	95 a7       	std	Z+45, r25	; 0x2d
				TCF0.CCD = receiveArray[6] + 120;
    161e:	80 91 74 29 	lds	r24, 0x2974
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	88 58       	subi	r24, 0x88	; 136
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	86 a7       	std	Z+46, r24	; 0x2e
    162a:	97 a7       	std	Z+47, r25	; 0x2f
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    162c:	80 91 6e 29 	lds	r24, 0x296E
    1630:	80 93 dd 28 	sts	0x28DD, r24
				TCF0.CCB = receiveArray[4] + 120;
				TCF0.CCC = receiveArray[5] + 120;
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
    1634:	00 e0       	ldi	r16, 0x00	; 0
    1636:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1638:	f8 01       	movw	r30, r16
    163a:	e3 52       	subi	r30, 0x23	; 35
    163c:	f7 4d       	sbci	r31, 0xD7	; 215
    163e:	60 81       	ld	r22, Z
    1640:	89 e1       	ldi	r24, 0x19	; 25
    1642:	93 e2       	ldi	r25, 0x23	; 35
    1644:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1648:	88 23       	and	r24, r24
    164a:	11 f0       	breq	.+4      	; 0x1650 <__vector_58+0xc1e>
					{
						i++;
    164c:	0f 5f       	subi	r16, 0xFF	; 255
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    1650:	10 16       	cp	r1, r16
    1652:	11 06       	cpc	r1, r17
    1654:	8c f7       	brge	.-30     	; 0x1638 <__vector_58+0xc06>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    1656:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;	//ako ne valja CHC ponistava se komanda
    165a:	10 92 5b 2e 	sts	0x2E5B, r1
    165e:	c0 c2       	rjmp	.+1408   	; 0x1be0 <__vector_58+0x11ae>
		}		
	}		
	//Upis trenutne pozicije - 7
	else if(receiveArray[0] == 7)					//provera funkcijskog bajta
    1660:	80 91 6e 29 	lds	r24, 0x296E
    1664:	87 30       	cpi	r24, 0x07	; 7
    1666:	09 f0       	breq	.+2      	; 0x166a <__vector_58+0xc38>
    1668:	7d c1       	rjmp	.+762    	; 0x1964 <__vector_58+0xf32>
	{
		if(RX_i_E0 >= 7)							//stigla je cela poruka	(11)
    166a:	80 91 5b 2e 	lds	r24, 0x2E5B
    166e:	87 30       	cpi	r24, 0x07	; 7
    1670:	08 f4       	brcc	.+2      	; 0x1674 <__vector_58+0xc42>
    1672:	b6 c2       	rjmp	.+1388   	; 0x1be0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1674:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//x_pos
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    1678:	80 91 6f 29 	lds	r24, 0x296F
    167c:	8f 3f       	cpi	r24, 0xFF	; 255
    167e:	29 f4       	brne	.+10     	; 0x168a <__vector_58+0xc58>
    1680:	80 91 70 29 	lds	r24, 0x2970
    1684:	8f 3f       	cpi	r24, 0xFF	; 255
    1686:	09 f4       	brne	.+2      	; 0x168a <__vector_58+0xc58>
    1688:	6d c0       	rjmp	.+218    	; 0x1764 <__vector_58+0xd32>
				{
					X_pos = 0;
    168a:	10 92 23 2e 	sts	0x2E23, r1
    168e:	10 92 24 2e 	sts	0x2E24, r1
    1692:	10 92 25 2e 	sts	0x2E25, r1
    1696:	10 92 26 2e 	sts	0x2E26, r1
					X_pos |= ((int)receiveArray[1]) << 8;
    169a:	20 91 6f 29 	lds	r18, 0x296F
    169e:	40 91 23 2e 	lds	r20, 0x2E23
    16a2:	50 91 24 2e 	lds	r21, 0x2E24
    16a6:	60 91 25 2e 	lds	r22, 0x2E25
    16aa:	70 91 26 2e 	lds	r23, 0x2E26
    16ae:	92 2f       	mov	r25, r18
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	aa 27       	eor	r26, r26
    16b4:	97 fd       	sbrc	r25, 7
    16b6:	a0 95       	com	r26
    16b8:	ba 2f       	mov	r27, r26
    16ba:	84 2b       	or	r24, r20
    16bc:	95 2b       	or	r25, r21
    16be:	a6 2b       	or	r26, r22
    16c0:	b7 2b       	or	r27, r23
    16c2:	80 93 23 2e 	sts	0x2E23, r24
    16c6:	90 93 24 2e 	sts	0x2E24, r25
    16ca:	a0 93 25 2e 	sts	0x2E25, r26
    16ce:	b0 93 26 2e 	sts	0x2E26, r27
					X_pos |= (int)receiveArray[2];
    16d2:	20 91 70 29 	lds	r18, 0x2970
    16d6:	80 91 23 2e 	lds	r24, 0x2E23
    16da:	90 91 24 2e 	lds	r25, 0x2E24
    16de:	a0 91 25 2e 	lds	r26, 0x2E25
    16e2:	b0 91 26 2e 	lds	r27, 0x2E26
    16e6:	82 2b       	or	r24, r18
    16e8:	80 93 23 2e 	sts	0x2E23, r24
    16ec:	90 93 24 2e 	sts	0x2E24, r25
    16f0:	a0 93 25 2e 	sts	0x2E25, r26
    16f4:	b0 93 26 2e 	sts	0x2E26, r27
					X_pos = (X_pos * scale_factor_for_mm);
    16f8:	a0 91 00 2e 	lds	r26, 0x2E00
    16fc:	b0 91 01 2e 	lds	r27, 0x2E01
    1700:	20 91 23 2e 	lds	r18, 0x2E23
    1704:	30 91 24 2e 	lds	r19, 0x2E24
    1708:	40 91 25 2e 	lds	r20, 0x2E25
    170c:	50 91 26 2e 	lds	r21, 0x2E26
    1710:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    1714:	60 93 23 2e 	sts	0x2E23, r22
    1718:	70 93 24 2e 	sts	0x2E24, r23
    171c:	80 93 25 2e 	sts	0x2E25, r24
    1720:	90 93 26 2e 	sts	0x2E26, r25
					X_cilj = X_pos;
    1724:	80 91 23 2e 	lds	r24, 0x2E23
    1728:	90 91 24 2e 	lds	r25, 0x2E24
    172c:	a0 91 25 2e 	lds	r26, 0x2E25
    1730:	b0 91 26 2e 	lds	r27, 0x2E26
    1734:	80 93 ae 24 	sts	0x24AE, r24
    1738:	90 93 af 24 	sts	0x24AF, r25
    173c:	a0 93 b0 24 	sts	0x24B0, r26
    1740:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj_stari = X_pos;
    1744:	80 91 23 2e 	lds	r24, 0x2E23
    1748:	90 91 24 2e 	lds	r25, 0x2E24
    174c:	a0 91 25 2e 	lds	r26, 0x2E25
    1750:	b0 91 26 2e 	lds	r27, 0x2E26
    1754:	80 93 31 2e 	sts	0x2E31, r24
    1758:	90 93 32 2e 	sts	0x2E32, r25
    175c:	a0 93 33 2e 	sts	0x2E33, r26
    1760:	b0 93 34 2e 	sts	0x2E34, r27
				}
				//Y_pos
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    1764:	80 91 71 29 	lds	r24, 0x2971
    1768:	8f 3f       	cpi	r24, 0xFF	; 255
    176a:	29 f4       	brne	.+10     	; 0x1776 <__vector_58+0xd44>
    176c:	80 91 72 29 	lds	r24, 0x2972
    1770:	8f 3f       	cpi	r24, 0xFF	; 255
    1772:	09 f4       	brne	.+2      	; 0x1776 <__vector_58+0xd44>
    1774:	6d c0       	rjmp	.+218    	; 0x1850 <__vector_58+0xe1e>
				{
					Y_pos = 0;
    1776:	10 92 02 2a 	sts	0x2A02, r1
    177a:	10 92 03 2a 	sts	0x2A03, r1
    177e:	10 92 04 2a 	sts	0x2A04, r1
    1782:	10 92 05 2a 	sts	0x2A05, r1
					Y_pos |= ((int)receiveArray[3]) << 8;
    1786:	20 91 71 29 	lds	r18, 0x2971
    178a:	40 91 02 2a 	lds	r20, 0x2A02
    178e:	50 91 03 2a 	lds	r21, 0x2A03
    1792:	60 91 04 2a 	lds	r22, 0x2A04
    1796:	70 91 05 2a 	lds	r23, 0x2A05
    179a:	92 2f       	mov	r25, r18
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	aa 27       	eor	r26, r26
    17a0:	97 fd       	sbrc	r25, 7
    17a2:	a0 95       	com	r26
    17a4:	ba 2f       	mov	r27, r26
    17a6:	84 2b       	or	r24, r20
    17a8:	95 2b       	or	r25, r21
    17aa:	a6 2b       	or	r26, r22
    17ac:	b7 2b       	or	r27, r23
    17ae:	80 93 02 2a 	sts	0x2A02, r24
    17b2:	90 93 03 2a 	sts	0x2A03, r25
    17b6:	a0 93 04 2a 	sts	0x2A04, r26
    17ba:	b0 93 05 2a 	sts	0x2A05, r27
					Y_pos |= (int)receiveArray[4];
    17be:	20 91 72 29 	lds	r18, 0x2972
    17c2:	80 91 02 2a 	lds	r24, 0x2A02
    17c6:	90 91 03 2a 	lds	r25, 0x2A03
    17ca:	a0 91 04 2a 	lds	r26, 0x2A04
    17ce:	b0 91 05 2a 	lds	r27, 0x2A05
    17d2:	82 2b       	or	r24, r18
    17d4:	80 93 02 2a 	sts	0x2A02, r24
    17d8:	90 93 03 2a 	sts	0x2A03, r25
    17dc:	a0 93 04 2a 	sts	0x2A04, r26
    17e0:	b0 93 05 2a 	sts	0x2A05, r27
					Y_pos = Y_pos * scale_factor_for_mm;
    17e4:	a0 91 00 2e 	lds	r26, 0x2E00
    17e8:	b0 91 01 2e 	lds	r27, 0x2E01
    17ec:	20 91 02 2a 	lds	r18, 0x2A02
    17f0:	30 91 03 2a 	lds	r19, 0x2A03
    17f4:	40 91 04 2a 	lds	r20, 0x2A04
    17f8:	50 91 05 2a 	lds	r21, 0x2A05
    17fc:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    1800:	60 93 02 2a 	sts	0x2A02, r22
    1804:	70 93 03 2a 	sts	0x2A03, r23
    1808:	80 93 04 2a 	sts	0x2A04, r24
    180c:	90 93 05 2a 	sts	0x2A05, r25
					Y_cilj = Y_pos;
    1810:	80 91 02 2a 	lds	r24, 0x2A02
    1814:	90 91 03 2a 	lds	r25, 0x2A03
    1818:	a0 91 04 2a 	lds	r26, 0x2A04
    181c:	b0 91 05 2a 	lds	r27, 0x2A05
    1820:	80 93 0b 2e 	sts	0x2E0B, r24
    1824:	90 93 0c 2e 	sts	0x2E0C, r25
    1828:	a0 93 0d 2e 	sts	0x2E0D, r26
    182c:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj_stari = Y_pos;
    1830:	80 91 02 2a 	lds	r24, 0x2A02
    1834:	90 91 03 2a 	lds	r25, 0x2A03
    1838:	a0 91 04 2a 	lds	r26, 0x2A04
    183c:	b0 91 05 2a 	lds	r27, 0x2A05
    1840:	80 93 70 2e 	sts	0x2E70, r24
    1844:	90 93 71 2e 	sts	0x2E71, r25
    1848:	a0 93 72 2e 	sts	0x2E72, r26
    184c:	b0 93 73 2e 	sts	0x2E73, r27
				}
				
				//teta
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    1850:	80 91 73 29 	lds	r24, 0x2973
    1854:	8f 3f       	cpi	r24, 0xFF	; 255
    1856:	29 f4       	brne	.+10     	; 0x1862 <__vector_58+0xe30>
    1858:	80 91 74 29 	lds	r24, 0x2974
    185c:	8f 3f       	cpi	r24, 0xFF	; 255
    185e:	09 f4       	brne	.+2      	; 0x1862 <__vector_58+0xe30>
    1860:	67 c0       	rjmp	.+206    	; 0x1930 <__vector_58+0xefe>
				{
					teta = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    1862:	10 92 83 32 	sts	0x3283, r1
    1866:	10 92 84 32 	sts	0x3284, r1
    186a:	10 92 85 32 	sts	0x3285, r1
    186e:	10 92 86 32 	sts	0x3286, r1
					teta |= ((int)receiveArray[5]) << 8;
    1872:	20 91 73 29 	lds	r18, 0x2973
    1876:	40 91 83 32 	lds	r20, 0x3283
    187a:	50 91 84 32 	lds	r21, 0x3284
    187e:	60 91 85 32 	lds	r22, 0x3285
    1882:	70 91 86 32 	lds	r23, 0x3286
    1886:	92 2f       	mov	r25, r18
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	aa 27       	eor	r26, r26
    188c:	97 fd       	sbrc	r25, 7
    188e:	a0 95       	com	r26
    1890:	ba 2f       	mov	r27, r26
    1892:	84 2b       	or	r24, r20
    1894:	95 2b       	or	r25, r21
    1896:	a6 2b       	or	r26, r22
    1898:	b7 2b       	or	r27, r23
    189a:	80 93 83 32 	sts	0x3283, r24
    189e:	90 93 84 32 	sts	0x3284, r25
    18a2:	a0 93 85 32 	sts	0x3285, r26
    18a6:	b0 93 86 32 	sts	0x3286, r27
					teta |= (int)receiveArray[6];
    18aa:	20 91 74 29 	lds	r18, 0x2974
    18ae:	80 91 83 32 	lds	r24, 0x3283
    18b2:	90 91 84 32 	lds	r25, 0x3284
    18b6:	a0 91 85 32 	lds	r26, 0x3285
    18ba:	b0 91 86 32 	lds	r27, 0x3286
    18be:	82 2b       	or	r24, r18
    18c0:	80 93 83 32 	sts	0x3283, r24
    18c4:	90 93 84 32 	sts	0x3284, r25
    18c8:	a0 93 85 32 	sts	0x3285, r26
    18cc:	b0 93 86 32 	sts	0x3286, r27
					teta = (teta * krug360) / 360;
    18d0:	20 91 83 32 	lds	r18, 0x3283
    18d4:	30 91 84 32 	lds	r19, 0x3284
    18d8:	40 91 85 32 	lds	r20, 0x3285
    18dc:	50 91 86 32 	lds	r21, 0x3286
    18e0:	60 91 75 32 	lds	r22, 0x3275
    18e4:	70 91 76 32 	lds	r23, 0x3276
    18e8:	80 91 77 32 	lds	r24, 0x3277
    18ec:	90 91 78 32 	lds	r25, 0x3278
    18f0:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__mulsi3>
    18f4:	28 e6       	ldi	r18, 0x68	; 104
    18f6:	31 e0       	ldi	r19, 0x01	; 1
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1900:	20 93 83 32 	sts	0x3283, r18
    1904:	30 93 84 32 	sts	0x3284, r19
    1908:	40 93 85 32 	sts	0x3285, r20
    190c:	50 93 86 32 	sts	0x3286, r21
					teta_cilj = teta;
    1910:	80 91 83 32 	lds	r24, 0x3283
    1914:	90 91 84 32 	lds	r25, 0x3284
    1918:	a0 91 85 32 	lds	r26, 0x3285
    191c:	b0 91 86 32 	lds	r27, 0x3286
    1920:	80 93 cc 24 	sts	0x24CC, r24
    1924:	90 93 cd 24 	sts	0x24CD, r25
    1928:	a0 93 ce 24 	sts	0x24CE, r26
    192c:	b0 93 cf 24 	sts	0x24CF, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    1930:	80 91 6e 29 	lds	r24, 0x296E
    1934:	80 93 dd 28 	sts	0x28DD, r24
					teta = (teta * krug360) / 360;
					teta_cilj = teta;
				}
				
				//slanje odgovora
				i = 0;
    1938:	00 e0       	ldi	r16, 0x00	; 0
    193a:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    193c:	f8 01       	movw	r30, r16
    193e:	e3 52       	subi	r30, 0x23	; 35
    1940:	f7 4d       	sbci	r31, 0xD7	; 215
    1942:	60 81       	ld	r22, Z
    1944:	89 e1       	ldi	r24, 0x19	; 25
    1946:	93 e2       	ldi	r25, 0x23	; 35
    1948:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    194c:	88 23       	and	r24, r24
    194e:	11 f0       	breq	.+4      	; 0x1954 <__vector_58+0xf22>
					{
						i++;
    1950:	0f 5f       	subi	r16, 0xFF	; 255
    1952:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    1954:	10 16       	cp	r1, r16
    1956:	11 06       	cpc	r1, r17
    1958:	8c f7       	brge	.-30     	; 0x193c <__vector_58+0xf0a>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    195a:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;	//ako ne valja CHC ponistava se komanda
    195e:	10 92 5b 2e 	sts	0x2E5B, r1
    1962:	3e c1       	rjmp	.+636    	; 0x1be0 <__vector_58+0x11ae>
		}
	}
	//Total Stop - 8
	else if(receiveArray[0] == 8)					//provera funkcijskog bajta
    1964:	80 91 6e 29 	lds	r24, 0x296E
    1968:	88 30       	cpi	r24, 0x08	; 8
    196a:	d9 f5       	brne	.+118    	; 0x19e2 <__vector_58+0xfb0>
	{
		if(RX_i_E0 >= 3)							//stigla je cela poruka
    196c:	80 91 5b 2e 	lds	r24, 0x2E5B
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	08 f4       	brcc	.+2      	; 0x1976 <__vector_58+0xf44>
    1974:	35 c1       	rjmp	.+618    	; 0x1be0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1976:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				
				if(receiveArray[1] == 0x01)
    197a:	80 91 6f 29 	lds	r24, 0x296F
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	39 f4       	brne	.+14     	; 0x1990 <__vector_58+0xf5e>
				{
					stop_PID_levi = 1;
    1982:	80 93 f2 2d 	sts	0x2DF2, r24
					PID_brzina_L = 0;
    1986:	10 92 7b 2e 	sts	0x2E7B, r1
    198a:	10 92 7c 2e 	sts	0x2E7C, r1
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <__vector_58+0xf62>
				}				
				else
					stop_PID_levi = 0;
    1990:	10 92 f2 2d 	sts	0x2DF2, r1
					
				if(receiveArray[2] == 0x01)
    1994:	80 91 70 29 	lds	r24, 0x2970
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	39 f4       	brne	.+14     	; 0x19aa <__vector_58+0xf78>
				{
					stop_PID_desni = 1;
    199c:	80 93 f4 29 	sts	0x29F4, r24
					PID_brzina_R = 0;
    19a0:	10 92 79 2e 	sts	0x2E79, r1
    19a4:	10 92 7a 2e 	sts	0x2E7A, r1
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <__vector_58+0xf7c>
				}					
				else
					stop_PID_desni = 0;
    19aa:	10 92 f4 29 	sts	0x29F4, r1
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    19ae:	80 91 6e 29 	lds	r24, 0x296E
    19b2:	80 93 dd 28 	sts	0x28DD, r24
				}					
				else
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
    19b6:	00 e0       	ldi	r16, 0x00	; 0
    19b8:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    19ba:	f8 01       	movw	r30, r16
    19bc:	e3 52       	subi	r30, 0x23	; 35
    19be:	f7 4d       	sbci	r31, 0xD7	; 215
    19c0:	60 81       	ld	r22, Z
    19c2:	89 e1       	ldi	r24, 0x19	; 25
    19c4:	93 e2       	ldi	r25, 0x23	; 35
    19c6:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    19ca:	88 23       	and	r24, r24
    19cc:	11 f0       	breq	.+4      	; 0x19d2 <__vector_58+0xfa0>
					{
						i++;
    19ce:	0f 5f       	subi	r16, 0xFF	; 255
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    19d2:	10 16       	cp	r1, r16
    19d4:	11 06       	cpc	r1, r17
    19d6:	8c f7       	brge	.-30     	; 0x19ba <__vector_58+0xf88>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E0 = 0;
    19d8:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda
    19dc:	10 92 5b 2e 	sts	0x2E5B, r1
    19e0:	ff c0       	rjmp	.+510    	; 0x1be0 <__vector_58+0x11ae>
		}
	}
	//citanje X koordinate
	else if(receiveArray[0] == 101)						//provera funkcijskog bajta >> 101-citanje X pozicije
    19e2:	80 91 6e 29 	lds	r24, 0x296E
    19e6:	85 36       	cpi	r24, 0x65	; 101
    19e8:	09 f0       	breq	.+2      	; 0x19ec <__vector_58+0xfba>
    19ea:	4b c0       	rjmp	.+150    	; 0x1a82 <__vector_58+0x1050>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
    19ec:	80 91 5b 2e 	lds	r24, 0x2E5B
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <__vector_58+0xfc4>
    19f4:	f5 c0       	rjmp	.+490    	; 0x1be0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    19f6:	10 92 fb 2d 	sts	0x2DFB, r1
			
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    19fa:	80 91 6e 29 	lds	r24, 0x296E
    19fe:	80 93 dd 28 	sts	0x28DD, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    1a02:	60 91 23 2e 	lds	r22, 0x2E23
    1a06:	70 91 24 2e 	lds	r23, 0x2E24
    1a0a:	80 91 25 2e 	lds	r24, 0x2E25
    1a0e:	90 91 26 2e 	lds	r25, 0x2E26
    1a12:	20 91 00 2e 	lds	r18, 0x2E00
    1a16:	30 91 01 2e 	lds	r19, 0x2E01
    1a1a:	40 e0       	ldi	r20, 0x00	; 0
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1a22:	bb 27       	eor	r27, r27
    1a24:	57 fd       	sbrc	r21, 7
    1a26:	ba 95       	dec	r27
    1a28:	a5 2f       	mov	r26, r21
    1a2a:	94 2f       	mov	r25, r20
    1a2c:	83 2f       	mov	r24, r19
    1a2e:	80 93 de 28 	sts	0x28DE, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    1a32:	60 91 23 2e 	lds	r22, 0x2E23
    1a36:	70 91 24 2e 	lds	r23, 0x2E24
    1a3a:	80 91 25 2e 	lds	r24, 0x2E25
    1a3e:	90 91 26 2e 	lds	r25, 0x2E26
    1a42:	20 91 00 2e 	lds	r18, 0x2E00
    1a46:	30 91 01 2e 	lds	r19, 0x2E01
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1a52:	20 93 df 28 	sts	0x28DF, r18
				
				i = 0;
    1a56:	00 e0       	ldi	r16, 0x00	; 0
    1a58:	10 e0       	ldi	r17, 0x00	; 0
				while (i < 3) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	e3 52       	subi	r30, 0x23	; 35
    1a5e:	f7 4d       	sbci	r31, 0xD7	; 215
    1a60:	60 81       	ld	r22, Z
    1a62:	89 e1       	ldi	r24, 0x19	; 25
    1a64:	93 e2       	ldi	r25, 0x23	; 35
    1a66:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1a6a:	88 23       	and	r24, r24
    1a6c:	11 f0       	breq	.+4      	; 0x1a72 <__vector_58+0x1040>
						i++;
    1a6e:	0f 5f       	subi	r16, 0xFF	; 255
    1a70:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
				
				i = 0;
				while (i < 3) 
    1a72:	03 30       	cpi	r16, 0x03	; 3
    1a74:	11 05       	cpc	r17, r1
    1a76:	8c f3       	brlt	.-30     	; 0x1a5a <__vector_58+0x1028>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
    1a78:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
    1a7c:	10 92 5b 2e 	sts	0x2E5B, r1
    1a80:	af c0       	rjmp	.+350    	; 0x1be0 <__vector_58+0x11ae>
		}		
	}
	//citanje Y koordinate
	else if(receiveArray[0] == 102)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    1a82:	80 91 6e 29 	lds	r24, 0x296E
    1a86:	86 36       	cpi	r24, 0x66	; 102
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <__vector_58+0x105a>
    1a8a:	4b c0       	rjmp	.+150    	; 0x1b22 <__vector_58+0x10f0>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
    1a8c:	80 91 5b 2e 	lds	r24, 0x2E5B
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <__vector_58+0x1064>
    1a94:	a5 c0       	rjmp	.+330    	; 0x1be0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1a96:	10 92 fb 2d 	sts	0x2DFB, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    1a9a:	80 91 6e 29 	lds	r24, 0x296E
    1a9e:	80 93 dd 28 	sts	0x28DD, r24
				sendArray[1] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    1aa2:	60 91 02 2a 	lds	r22, 0x2A02
    1aa6:	70 91 03 2a 	lds	r23, 0x2A03
    1aaa:	80 91 04 2a 	lds	r24, 0x2A04
    1aae:	90 91 05 2a 	lds	r25, 0x2A05
    1ab2:	20 91 00 2e 	lds	r18, 0x2E00
    1ab6:	30 91 01 2e 	lds	r19, 0x2E01
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1ac2:	bb 27       	eor	r27, r27
    1ac4:	57 fd       	sbrc	r21, 7
    1ac6:	ba 95       	dec	r27
    1ac8:	a5 2f       	mov	r26, r21
    1aca:	94 2f       	mov	r25, r20
    1acc:	83 2f       	mov	r24, r19
    1ace:	80 93 de 28 	sts	0x28DE, r24
				sendArray[2] = Y_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    1ad2:	60 91 02 2a 	lds	r22, 0x2A02
    1ad6:	70 91 03 2a 	lds	r23, 0x2A03
    1ada:	80 91 04 2a 	lds	r24, 0x2A04
    1ade:	90 91 05 2a 	lds	r25, 0x2A05
    1ae2:	20 91 00 2e 	lds	r18, 0x2E00
    1ae6:	30 91 01 2e 	lds	r19, 0x2E01
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1af2:	20 93 df 28 	sts	0x28DF, r18
				
				i = 0;
    1af6:	00 e0       	ldi	r16, 0x00	; 0
    1af8:	10 e0       	ldi	r17, 0x00	; 0
				while (i < 3) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1afa:	f8 01       	movw	r30, r16
    1afc:	e3 52       	subi	r30, 0x23	; 35
    1afe:	f7 4d       	sbci	r31, 0xD7	; 215
    1b00:	60 81       	ld	r22, Z
    1b02:	89 e1       	ldi	r24, 0x19	; 25
    1b04:	93 e2       	ldi	r25, 0x23	; 35
    1b06:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1b0a:	88 23       	and	r24, r24
    1b0c:	11 f0       	breq	.+4      	; 0x1b12 <__vector_58+0x10e0>
						i++;
    1b0e:	0f 5f       	subi	r16, 0xFF	; 255
    1b10:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
				sendArray[1] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
				sendArray[2] = Y_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
				
				i = 0;
				while (i < 3) 
    1b12:	03 30       	cpi	r16, 0x03	; 3
    1b14:	11 05       	cpc	r17, r1
    1b16:	8c f3       	brlt	.-30     	; 0x1afa <__vector_58+0x10c8>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
    1b18:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
    1b1c:	10 92 5b 2e 	sts	0x2E5B, r1
    1b20:	5f c0       	rjmp	.+190    	; 0x1be0 <__vector_58+0x11ae>
		}		
	}
	//citanje teta abs
	else if(receiveArray[0] == 103)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    1b22:	80 91 6e 29 	lds	r24, 0x296E
    1b26:	87 36       	cpi	r24, 0x67	; 103
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <__vector_58+0x10fa>
    1b2a:	5a c0       	rjmp	.+180    	; 0x1be0 <__vector_58+0x11ae>
	{
		if(RX_i_E0 == 1)								//stigla je cela poruka (2)
    1b2c:	80 91 5b 2e 	lds	r24, 0x2E5B
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <__vector_58+0x1104>
    1b34:	55 c0       	rjmp	.+170    	; 0x1be0 <__vector_58+0x11ae>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1b36:	10 92 fb 2d 	sts	0x2DFB, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    1b3a:	80 91 6e 29 	lds	r24, 0x296E
    1b3e:	80 93 dd 28 	sts	0x28DD, r24
				sendArray[1] = ((teta * 360) / krug360) >> 8;						//Teta HI
    1b42:	20 91 83 32 	lds	r18, 0x3283
    1b46:	30 91 84 32 	lds	r19, 0x3284
    1b4a:	40 91 85 32 	lds	r20, 0x3285
    1b4e:	50 91 86 32 	lds	r21, 0x3286
    1b52:	c0 90 75 32 	lds	r12, 0x3275
    1b56:	d0 90 76 32 	lds	r13, 0x3276
    1b5a:	e0 90 77 32 	lds	r14, 0x3277
    1b5e:	f0 90 78 32 	lds	r15, 0x3278
    1b62:	a8 e6       	ldi	r26, 0x68	; 104
    1b64:	b1 e0       	ldi	r27, 0x01	; 1
    1b66:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    1b6a:	a7 01       	movw	r20, r14
    1b6c:	96 01       	movw	r18, r12
    1b6e:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1b72:	bb 27       	eor	r27, r27
    1b74:	57 fd       	sbrc	r21, 7
    1b76:	ba 95       	dec	r27
    1b78:	a5 2f       	mov	r26, r21
    1b7a:	94 2f       	mov	r25, r20
    1b7c:	83 2f       	mov	r24, r19
    1b7e:	80 93 de 28 	sts	0x28DE, r24
				sendArray[2] = ((teta * 360) / krug360);							//Teta LOW
    1b82:	20 91 83 32 	lds	r18, 0x3283
    1b86:	30 91 84 32 	lds	r19, 0x3284
    1b8a:	40 91 85 32 	lds	r20, 0x3285
    1b8e:	50 91 86 32 	lds	r21, 0x3286
    1b92:	c0 90 75 32 	lds	r12, 0x3275
    1b96:	d0 90 76 32 	lds	r13, 0x3276
    1b9a:	e0 90 77 32 	lds	r14, 0x3277
    1b9e:	f0 90 78 32 	lds	r15, 0x3278
    1ba2:	a8 e6       	ldi	r26, 0x68	; 104
    1ba4:	b1 e0       	ldi	r27, 0x01	; 1
    1ba6:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    1baa:	a7 01       	movw	r20, r14
    1bac:	96 01       	movw	r18, r12
    1bae:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1bb2:	20 93 df 28 	sts	0x28DF, r18
				
				i = 0;
    1bb6:	00 e0       	ldi	r16, 0x00	; 0
    1bb8:	10 e0       	ldi	r17, 0x00	; 0
				while (i < 3) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
    1bba:	f8 01       	movw	r30, r16
    1bbc:	e3 52       	subi	r30, 0x23	; 35
    1bbe:	f7 4d       	sbci	r31, 0xD7	; 215
    1bc0:	60 81       	ld	r22, Z
    1bc2:	89 e1       	ldi	r24, 0x19	; 25
    1bc4:	93 e2       	ldi	r25, 0x23	; 35
    1bc6:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1bca:	88 23       	and	r24, r24
    1bcc:	11 f0       	breq	.+4      	; 0x1bd2 <__vector_58+0x11a0>
						i++;
    1bce:	0f 5f       	subi	r16, 0xFF	; 255
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
				sendArray[1] = ((teta * 360) / krug360) >> 8;						//Teta HI
				sendArray[2] = ((teta * 360) / krug360);							//Teta LOW
				
				i = 0;
				while (i < 3) 
    1bd2:	03 30       	cpi	r16, 0x03	; 3
    1bd4:	11 05       	cpc	r17, r1
    1bd6:	8c f3       	brlt	.-30     	; 0x1bba <__vector_58+0x1188>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E0 = 0;
    1bd8:	10 92 5b 2e 	sts	0x2E5B, r1
			}
			RX_i_E0 = 0;		//ako ne valja CHC ponistava se komanda				
    1bdc:	10 92 5b 2e 	sts	0x2E5B, r1
		}		
	}
}
    1be0:	28 96       	adiw	r28, 0x08	; 8
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	ff 91       	pop	r31
    1bec:	ef 91       	pop	r30
    1bee:	bf 91       	pop	r27
    1bf0:	af 91       	pop	r26
    1bf2:	9f 91       	pop	r25
    1bf4:	8f 91       	pop	r24
    1bf6:	7f 91       	pop	r23
    1bf8:	6f 91       	pop	r22
    1bfa:	5f 91       	pop	r21
    1bfc:	4f 91       	pop	r20
    1bfe:	3f 91       	pop	r19
    1c00:	2f 91       	pop	r18
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	df 90       	pop	r13
    1c0c:	cf 90       	pop	r12
    1c0e:	bf 90       	pop	r11
    1c10:	af 90       	pop	r10
    1c12:	9f 90       	pop	r9
    1c14:	8f 90       	pop	r8
    1c16:	7f 90       	pop	r7
    1c18:	6f 90       	pop	r6
    1c1a:	5f 90       	pop	r5
    1c1c:	4f 90       	pop	r4
    1c1e:	0f 90       	pop	r0
    1c20:	0b be       	out	0x3b, r0	; 59
    1c22:	0f 90       	pop	r0
    1c24:	0a be       	out	0x3a, r0	; 58
    1c26:	0f 90       	pop	r0
    1c28:	09 be       	out	0x39, r0	; 57
    1c2a:	0f 90       	pop	r0
    1c2c:	08 be       	out	0x38, r0	; 56
    1c2e:	0f 90       	pop	r0
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	0f 90       	pop	r0
    1c34:	1f 90       	pop	r1
    1c36:	18 95       	reti

00001c38 <__vector_61>:
//Serijska komunikacija USART_E1 - BT - bluetooth
ISR(USARTE1_RXC_vect)
{	
    1c38:	1f 92       	push	r1
    1c3a:	0f 92       	push	r0
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	0f 92       	push	r0
    1c40:	11 24       	eor	r1, r1
    1c42:	08 b6       	in	r0, 0x38	; 56
    1c44:	0f 92       	push	r0
    1c46:	18 be       	out	0x38, r1	; 56
    1c48:	09 b6       	in	r0, 0x39	; 57
    1c4a:	0f 92       	push	r0
    1c4c:	19 be       	out	0x39, r1	; 57
    1c4e:	0a b6       	in	r0, 0x3a	; 58
    1c50:	0f 92       	push	r0
    1c52:	1a be       	out	0x3a, r1	; 58
    1c54:	0b b6       	in	r0, 0x3b	; 59
    1c56:	0f 92       	push	r0
    1c58:	1b be       	out	0x3b, r1	; 59
    1c5a:	4f 92       	push	r4
    1c5c:	5f 92       	push	r5
    1c5e:	6f 92       	push	r6
    1c60:	7f 92       	push	r7
    1c62:	8f 92       	push	r8
    1c64:	9f 92       	push	r9
    1c66:	af 92       	push	r10
    1c68:	bf 92       	push	r11
    1c6a:	cf 92       	push	r12
    1c6c:	df 92       	push	r13
    1c6e:	ef 92       	push	r14
    1c70:	ff 92       	push	r15
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	2f 93       	push	r18
    1c78:	3f 93       	push	r19
    1c7a:	4f 93       	push	r20
    1c7c:	5f 93       	push	r21
    1c7e:	6f 93       	push	r22
    1c80:	7f 93       	push	r23
    1c82:	8f 93       	push	r24
    1c84:	9f 93       	push	r25
    1c86:	af 93       	push	r26
    1c88:	bf 93       	push	r27
    1c8a:	ef 93       	push	r30
    1c8c:	ff 93       	push	r31
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	28 97       	sbiw	r28, 0x08	; 8
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	de bf       	out	0x3e, r29	; 62
	int i;
	USART_RXComplete(&USART_E1_data);
    1c9c:	8b e0       	ldi	r24, 0x0B	; 11
    1c9e:	90 e2       	ldi	r25, 0x20	; 32
    1ca0:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <USART_RXComplete>
	receiveArray[RX_i_E1] = USART_RXBuffer_GetByte(&USART_E1_data);
    1ca4:	80 91 5d 29 	lds	r24, 0x295D
    1ca8:	08 2f       	mov	r16, r24
    1caa:	10 e0       	ldi	r17, 0x00	; 0
    1cac:	8b e0       	ldi	r24, 0x0B	; 11
    1cae:	90 e2       	ldi	r25, 0x20	; 32
    1cb0:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <USART_RXBuffer_GetByte>
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	e2 59       	subi	r30, 0x92	; 146
    1cb8:	f6 4d       	sbci	r31, 0xD6	; 214
    1cba:	80 83       	st	Z, r24
	//USART_TXBuffer_PutByte(&USART_E1_data, receiveArray[RX_i_E1]);	//echo
	RX_i_E1++;
    1cbc:	80 91 5d 29 	lds	r24, 0x295D
    1cc0:	8f 5f       	subi	r24, 0xFF	; 255
    1cc2:	80 93 5d 29 	sts	0x295D, r24
	
	//vremenska zastita
	if (RX_i_E1 >= 1)
    1cc6:	80 91 5d 29 	lds	r24, 0x295D
    1cca:	88 23       	and	r24, r24
    1ccc:	19 f0       	breq	.+6      	; 0x1cd4 <__vector_61+0x9c>
 		proveri_vreme_primanja = 1;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	80 93 fb 2d 	sts	0x2DFB, r24
	 
	//CITANJE PARAMETARA - 1
	if(receiveArray[0] == 1)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    1cd4:	80 91 6e 29 	lds	r24, 0x296E
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	09 f0       	breq	.+2      	; 0x1cde <__vector_61+0xa6>
    1cdc:	00 c1       	rjmp	.+512    	; 0x1ede <__vector_61+0x2a6>
	{
		if(RX_i_E1 == 1)								//stigla je cela poruka (2)
    1cde:	80 91 5d 29 	lds	r24, 0x295D
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	11 f0       	breq	.+4      	; 0x1cea <__vector_61+0xb2>
    1ce6:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1cea:	10 92 fb 2d 	sts	0x2DFB, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    1cee:	80 91 6e 29 	lds	r24, 0x296E
    1cf2:	80 93 dd 28 	sts	0x28DD, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    1cf6:	60 91 23 2e 	lds	r22, 0x2E23
    1cfa:	70 91 24 2e 	lds	r23, 0x2E24
    1cfe:	80 91 25 2e 	lds	r24, 0x2E25
    1d02:	90 91 26 2e 	lds	r25, 0x2E26
    1d06:	20 91 00 2e 	lds	r18, 0x2E00
    1d0a:	30 91 01 2e 	lds	r19, 0x2E01
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1d16:	bb 27       	eor	r27, r27
    1d18:	57 fd       	sbrc	r21, 7
    1d1a:	ba 95       	dec	r27
    1d1c:	a5 2f       	mov	r26, r21
    1d1e:	94 2f       	mov	r25, r20
    1d20:	83 2f       	mov	r24, r19
    1d22:	80 93 de 28 	sts	0x28DE, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    1d26:	60 91 23 2e 	lds	r22, 0x2E23
    1d2a:	70 91 24 2e 	lds	r23, 0x2E24
    1d2e:	80 91 25 2e 	lds	r24, 0x2E25
    1d32:	90 91 26 2e 	lds	r25, 0x2E26
    1d36:	20 91 00 2e 	lds	r18, 0x2E00
    1d3a:	30 91 01 2e 	lds	r19, 0x2E01
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1d46:	20 93 df 28 	sts	0x28DF, r18
				sendArray[3] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna Y pozicija HI
    1d4a:	60 91 02 2a 	lds	r22, 0x2A02
    1d4e:	70 91 03 2a 	lds	r23, 0x2A03
    1d52:	80 91 04 2a 	lds	r24, 0x2A04
    1d56:	90 91 05 2a 	lds	r25, 0x2A05
    1d5a:	20 91 00 2e 	lds	r18, 0x2E00
    1d5e:	30 91 01 2e 	lds	r19, 0x2E01
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1d6a:	bb 27       	eor	r27, r27
    1d6c:	57 fd       	sbrc	r21, 7
    1d6e:	ba 95       	dec	r27
    1d70:	a5 2f       	mov	r26, r21
    1d72:	94 2f       	mov	r25, r20
    1d74:	83 2f       	mov	r24, r19
    1d76:	80 93 e0 28 	sts	0x28E0, r24
				sendArray[4] = Y_pos / scale_factor_for_mm;							//Absolutna Y pozicija LO
    1d7a:	60 91 02 2a 	lds	r22, 0x2A02
    1d7e:	70 91 03 2a 	lds	r23, 0x2A03
    1d82:	80 91 04 2a 	lds	r24, 0x2A04
    1d86:	90 91 05 2a 	lds	r25, 0x2A05
    1d8a:	20 91 00 2e 	lds	r18, 0x2E00
    1d8e:	30 91 01 2e 	lds	r19, 0x2E01
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1d9a:	20 93 e1 28 	sts	0x28E1, r18
				sendArray[5] = ((teta * 360) / krug360) >> 8;						//Teta HI
    1d9e:	20 91 83 32 	lds	r18, 0x3283
    1da2:	30 91 84 32 	lds	r19, 0x3284
    1da6:	40 91 85 32 	lds	r20, 0x3285
    1daa:	50 91 86 32 	lds	r21, 0x3286
    1dae:	c0 90 75 32 	lds	r12, 0x3275
    1db2:	d0 90 76 32 	lds	r13, 0x3276
    1db6:	e0 90 77 32 	lds	r14, 0x3277
    1dba:	f0 90 78 32 	lds	r15, 0x3278
    1dbe:	a8 e6       	ldi	r26, 0x68	; 104
    1dc0:	b1 e0       	ldi	r27, 0x01	; 1
    1dc2:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    1dc6:	a7 01       	movw	r20, r14
    1dc8:	96 01       	movw	r18, r12
    1dca:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1dce:	bb 27       	eor	r27, r27
    1dd0:	57 fd       	sbrc	r21, 7
    1dd2:	ba 95       	dec	r27
    1dd4:	a5 2f       	mov	r26, r21
    1dd6:	94 2f       	mov	r25, r20
    1dd8:	83 2f       	mov	r24, r19
    1dda:	80 93 e2 28 	sts	0x28E2, r24
				sendArray[6] = ((teta * 360) / krug360);							//Teta LO	
    1dde:	20 91 83 32 	lds	r18, 0x3283
    1de2:	30 91 84 32 	lds	r19, 0x3284
    1de6:	40 91 85 32 	lds	r20, 0x3285
    1dea:	50 91 86 32 	lds	r21, 0x3286
    1dee:	c0 90 75 32 	lds	r12, 0x3275
    1df2:	d0 90 76 32 	lds	r13, 0x3276
    1df6:	e0 90 77 32 	lds	r14, 0x3277
    1dfa:	f0 90 78 32 	lds	r15, 0x3278
    1dfe:	a8 e6       	ldi	r26, 0x68	; 104
    1e00:	b1 e0       	ldi	r27, 0x01	; 1
    1e02:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    1e06:	a7 01       	movw	r20, r14
    1e08:	96 01       	movw	r18, r12
    1e0a:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1e0e:	20 93 e3 28 	sts	0x28E3, r18
				sendArray[7] = (rastojanje_cilj_temp / scale_factor_for_mm) >> 8;	//Rastojanje od zadate tacke HI
    1e12:	60 91 12 2e 	lds	r22, 0x2E12
    1e16:	70 91 13 2e 	lds	r23, 0x2E13
    1e1a:	80 91 14 2e 	lds	r24, 0x2E14
    1e1e:	90 91 15 2e 	lds	r25, 0x2E15
    1e22:	20 91 00 2e 	lds	r18, 0x2E00
    1e26:	30 91 01 2e 	lds	r19, 0x2E01
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1e32:	bb 27       	eor	r27, r27
    1e34:	57 fd       	sbrc	r21, 7
    1e36:	ba 95       	dec	r27
    1e38:	a5 2f       	mov	r26, r21
    1e3a:	94 2f       	mov	r25, r20
    1e3c:	83 2f       	mov	r24, r19
    1e3e:	80 93 e4 28 	sts	0x28E4, r24
				sendArray[8] = (rastojanje_cilj_temp / scale_factor_for_mm);		//Rastojanje od zadate tacke LO
    1e42:	60 91 12 2e 	lds	r22, 0x2E12
    1e46:	70 91 13 2e 	lds	r23, 0x2E13
    1e4a:	80 91 14 2e 	lds	r24, 0x2E14
    1e4e:	90 91 15 2e 	lds	r25, 0x2E15
    1e52:	20 91 00 2e 	lds	r18, 0x2E00
    1e56:	30 91 01 2e 	lds	r19, 0x2E01
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    1e62:	20 93 e5 28 	sts	0x28E5, r18
				sendArray[9] = stigao_flag;											//stigao flag
    1e66:	80 91 06 20 	lds	r24, 0x2006
    1e6a:	80 93 e6 28 	sts	0x28E6, r24
				sendArray[10] = sample_L16;											//trenutna brzina leva
    1e6e:	80 91 a0 24 	lds	r24, 0x24A0
    1e72:	90 91 a1 24 	lds	r25, 0x24A1
    1e76:	80 93 e7 28 	sts	0x28E7, r24
				sendArray[11] = sample_R16;											//trenutna brzina desna
    1e7a:	80 91 c0 24 	lds	r24, 0x24C0
    1e7e:	90 91 c1 24 	lds	r25, 0x24C1
    1e82:	80 93 e8 28 	sts	0x28E8, r24
				sendArray[12] =	ADC_ResultCh_GetWord(&ADCA.CH0, offset);			//struja motora 1
    1e86:	60 91 5a 2e 	lds	r22, 0x2E5A
    1e8a:	80 e2       	ldi	r24, 0x20	; 32
    1e8c:	92 e0       	ldi	r25, 0x02	; 2
    1e8e:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    1e92:	80 93 e9 28 	sts	0x28E9, r24
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
    1e96:	60 91 5a 2e 	lds	r22, 0x2E5A
    1e9a:	88 e2       	ldi	r24, 0x28	; 40
    1e9c:	92 e0       	ldi	r25, 0x02	; 2
    1e9e:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    1ea2:	80 93 ea 28 	sts	0x28EA, r24
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
    1ea6:	e0 e2       	ldi	r30, 0x20	; 32
    1ea8:	f6 e0       	ldi	r31, 0x06	; 6
    1eaa:	80 85       	ldd	r24, Z+8	; 0x08
    1eac:	80 93 eb 28 	sts	0x28EB, r24
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
    1eb0:	00 e0       	ldi	r16, 0x00	; 0
    1eb2:	10 e0       	ldi	r17, 0x00	; 0
				while (i <= 14) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	e3 52       	subi	r30, 0x23	; 35
    1eb8:	f7 4d       	sbci	r31, 0xD7	; 215
    1eba:	60 81       	ld	r22, Z
    1ebc:	8b e0       	ldi	r24, 0x0B	; 11
    1ebe:	90 e2       	ldi	r25, 0x20	; 32
    1ec0:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    1ec4:	88 23       	and	r24, r24
    1ec6:	11 f0       	breq	.+4      	; 0x1ecc <__vector_61+0x294>
						i++;
    1ec8:	0f 5f       	subi	r16, 0xFF	; 255
    1eca:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
				while (i <= 14) 
    1ecc:	0f 30       	cpi	r16, 0x0F	; 15
    1ece:	11 05       	cpc	r17, r1
    1ed0:	8c f3       	brlt	.-30     	; 0x1eb4 <__vector_61+0x27c>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_E1 = 0;
    1ed2:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda				
    1ed6:	10 92 5d 29 	sts	0x295D, r1
    1eda:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__vector_61+0x193a>
		}		
	}
	//ZADAVANJE X,Y KOORDINATA - 2
	else if(receiveArray[0] == 2)					//provera funkcijskog bajta >> 2-upis x,y koordinate
    1ede:	80 91 6e 29 	lds	r24, 0x296E
    1ee2:	82 30       	cpi	r24, 0x02	; 2
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <__vector_61+0x2b0>
    1ee6:	c1 c0       	rjmp	.+386    	; 0x206a <__vector_61+0x432>
	{
		if(RX_i_E1 >= 5)							//stigla je cela poruka	(5 bajtova)
    1ee8:	80 91 5d 29 	lds	r24, 0x295D
    1eec:	85 30       	cpi	r24, 0x05	; 5
    1eee:	10 f4       	brcc	.+4      	; 0x1ef4 <__vector_61+0x2bc>
    1ef0:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    1ef4:	10 92 fb 2d 	sts	0x2DFB, r1
			//ENABLE
			stop_PID_desni = 0;
    1ef8:	10 92 f4 29 	sts	0x29F4, r1
			stop_PID_levi = 0;
    1efc:	10 92 f2 2d 	sts	0x2DF2, r1
			set_direct_out = 0;
    1f00:	10 92 81 32 	sts	0x3281, r1
			
			X_cilj = 0;
    1f04:	10 92 ae 24 	sts	0x24AE, r1
    1f08:	10 92 af 24 	sts	0x24AF, r1
    1f0c:	10 92 b0 24 	sts	0x24B0, r1
    1f10:	10 92 b1 24 	sts	0x24B1, r1
			X_cilj |= (int)receiveArray[1] << 8;
    1f14:	20 91 6f 29 	lds	r18, 0x296F
    1f18:	40 91 ae 24 	lds	r20, 0x24AE
    1f1c:	50 91 af 24 	lds	r21, 0x24AF
    1f20:	60 91 b0 24 	lds	r22, 0x24B0
    1f24:	70 91 b1 24 	lds	r23, 0x24B1
    1f28:	92 2f       	mov	r25, r18
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	aa 27       	eor	r26, r26
    1f2e:	97 fd       	sbrc	r25, 7
    1f30:	a0 95       	com	r26
    1f32:	ba 2f       	mov	r27, r26
    1f34:	84 2b       	or	r24, r20
    1f36:	95 2b       	or	r25, r21
    1f38:	a6 2b       	or	r26, r22
    1f3a:	b7 2b       	or	r27, r23
    1f3c:	80 93 ae 24 	sts	0x24AE, r24
    1f40:	90 93 af 24 	sts	0x24AF, r25
    1f44:	a0 93 b0 24 	sts	0x24B0, r26
    1f48:	b0 93 b1 24 	sts	0x24B1, r27
			X_cilj |= (int)receiveArray[2];
    1f4c:	20 91 70 29 	lds	r18, 0x2970
    1f50:	80 91 ae 24 	lds	r24, 0x24AE
    1f54:	90 91 af 24 	lds	r25, 0x24AF
    1f58:	a0 91 b0 24 	lds	r26, 0x24B0
    1f5c:	b0 91 b1 24 	lds	r27, 0x24B1
    1f60:	82 2b       	or	r24, r18
    1f62:	80 93 ae 24 	sts	0x24AE, r24
    1f66:	90 93 af 24 	sts	0x24AF, r25
    1f6a:	a0 93 b0 24 	sts	0x24B0, r26
    1f6e:	b0 93 b1 24 	sts	0x24B1, r27
			X_cilj = (X_cilj * scale_factor_for_mm);
    1f72:	a0 91 00 2e 	lds	r26, 0x2E00
    1f76:	b0 91 01 2e 	lds	r27, 0x2E01
    1f7a:	20 91 ae 24 	lds	r18, 0x24AE
    1f7e:	30 91 af 24 	lds	r19, 0x24AF
    1f82:	40 91 b0 24 	lds	r20, 0x24B0
    1f86:	50 91 b1 24 	lds	r21, 0x24B1
    1f8a:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    1f8e:	60 93 ae 24 	sts	0x24AE, r22
    1f92:	70 93 af 24 	sts	0x24AF, r23
    1f96:	80 93 b0 24 	sts	0x24B0, r24
    1f9a:	90 93 b1 24 	sts	0x24B1, r25
			//Y_cilj
			Y_cilj = 0;
    1f9e:	10 92 0b 2e 	sts	0x2E0B, r1
    1fa2:	10 92 0c 2e 	sts	0x2E0C, r1
    1fa6:	10 92 0d 2e 	sts	0x2E0D, r1
    1faa:	10 92 0e 2e 	sts	0x2E0E, r1
			Y_cilj |= (int)receiveArray[3] << 8;
    1fae:	20 91 71 29 	lds	r18, 0x2971
    1fb2:	40 91 0b 2e 	lds	r20, 0x2E0B
    1fb6:	50 91 0c 2e 	lds	r21, 0x2E0C
    1fba:	60 91 0d 2e 	lds	r22, 0x2E0D
    1fbe:	70 91 0e 2e 	lds	r23, 0x2E0E
    1fc2:	92 2f       	mov	r25, r18
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	aa 27       	eor	r26, r26
    1fc8:	97 fd       	sbrc	r25, 7
    1fca:	a0 95       	com	r26
    1fcc:	ba 2f       	mov	r27, r26
    1fce:	84 2b       	or	r24, r20
    1fd0:	95 2b       	or	r25, r21
    1fd2:	a6 2b       	or	r26, r22
    1fd4:	b7 2b       	or	r27, r23
    1fd6:	80 93 0b 2e 	sts	0x2E0B, r24
    1fda:	90 93 0c 2e 	sts	0x2E0C, r25
    1fde:	a0 93 0d 2e 	sts	0x2E0D, r26
    1fe2:	b0 93 0e 2e 	sts	0x2E0E, r27
			Y_cilj |= (int)receiveArray[4];
    1fe6:	20 91 72 29 	lds	r18, 0x2972
    1fea:	80 91 0b 2e 	lds	r24, 0x2E0B
    1fee:	90 91 0c 2e 	lds	r25, 0x2E0C
    1ff2:	a0 91 0d 2e 	lds	r26, 0x2E0D
    1ff6:	b0 91 0e 2e 	lds	r27, 0x2E0E
    1ffa:	82 2b       	or	r24, r18
    1ffc:	80 93 0b 2e 	sts	0x2E0B, r24
    2000:	90 93 0c 2e 	sts	0x2E0C, r25
    2004:	a0 93 0d 2e 	sts	0x2E0D, r26
    2008:	b0 93 0e 2e 	sts	0x2E0E, r27
			Y_cilj = Y_cilj * scale_factor_for_mm;
    200c:	a0 91 00 2e 	lds	r26, 0x2E00
    2010:	b0 91 01 2e 	lds	r27, 0x2E01
    2014:	20 91 0b 2e 	lds	r18, 0x2E0B
    2018:	30 91 0c 2e 	lds	r19, 0x2E0C
    201c:	40 91 0d 2e 	lds	r20, 0x2E0D
    2020:	50 91 0e 2e 	lds	r21, 0x2E0E
    2024:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    2028:	60 93 0b 2e 	sts	0x2E0B, r22
    202c:	70 93 0c 2e 	sts	0x2E0C, r23
    2030:	80 93 0d 2e 	sts	0x2E0D, r24
    2034:	90 93 0e 2e 	sts	0x2E0E, r25
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
    2038:	80 91 6e 29 	lds	r24, 0x296E
    203c:	80 93 dd 28 	sts	0x28DD, r24
			i = 0;
    2040:	00 e0       	ldi	r16, 0x00	; 0
    2042:	10 e0       	ldi	r17, 0x00	; 0
			while (i < 1)
			{
				bool byteToBuffer;
				byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2044:	f8 01       	movw	r30, r16
    2046:	e3 52       	subi	r30, 0x23	; 35
    2048:	f7 4d       	sbci	r31, 0xD7	; 215
    204a:	60 81       	ld	r22, Z
    204c:	8b e0       	ldi	r24, 0x0B	; 11
    204e:	90 e2       	ldi	r25, 0x20	; 32
    2050:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
				if(byteToBuffer)
    2054:	88 23       	and	r24, r24
    2056:	11 f0       	breq	.+4      	; 0x205c <__vector_61+0x424>
				{
					i++;
    2058:	0f 5f       	subi	r16, 0xFF	; 255
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
			Y_cilj = Y_cilj * scale_factor_for_mm;
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
			i = 0;
			while (i < 1)
    205c:	10 16       	cp	r1, r16
    205e:	11 06       	cpc	r1, r17
    2060:	8c f7       	brge	.-30     	; 0x2044 <__vector_61+0x40c>
				if(byteToBuffer)
				{
					i++;
				}
			}
			RX_i_E1 = 0;
    2062:	10 92 5d 29 	sts	0x295D, r1
    2066:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__vector_61+0x193a>
		}
	}	
	//ZADAVANJE X,Y KOORDINATA I PARAMETRE KRETANJA - 3
	else if(receiveArray[0] == 3)					//provera funkcijskog bajta >> 3 - X,Y koordinate sa svim parametrima kretanja
    206a:	80 91 6e 29 	lds	r24, 0x296E
    206e:	83 30       	cpi	r24, 0x03	; 3
    2070:	09 f0       	breq	.+2      	; 0x2074 <__vector_61+0x43c>
    2072:	e5 c1       	rjmp	.+970    	; 0x243e <__vector_61+0x806>
	{
		if(RX_i_E1 >= 11)							//stigla je cela poruka	(11)
    2074:	80 91 5d 29 	lds	r24, 0x295D
    2078:	8b 30       	cpi	r24, 0x0B	; 11
    207a:	10 f4       	brcc	.+4      	; 0x2080 <__vector_61+0x448>
    207c:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2080:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//x_cilj
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2084:	80 91 6f 29 	lds	r24, 0x296F
    2088:	8f 3f       	cpi	r24, 0xFF	; 255
    208a:	29 f4       	brne	.+10     	; 0x2096 <__vector_61+0x45e>
    208c:	80 91 70 29 	lds	r24, 0x2970
    2090:	8f 3f       	cpi	r24, 0xFF	; 255
    2092:	09 f4       	brne	.+2      	; 0x2096 <__vector_61+0x45e>
    2094:	53 c0       	rjmp	.+166    	; 0x213c <__vector_61+0x504>
				{
					//ENABLE
					stop_PID_desni = 0;
    2096:	10 92 f4 29 	sts	0x29F4, r1
					stop_PID_levi = 0;
    209a:	10 92 f2 2d 	sts	0x2DF2, r1
					set_direct_out = 0;
    209e:	10 92 81 32 	sts	0x3281, r1
					
					X_cilj = 0;
    20a2:	10 92 ae 24 	sts	0x24AE, r1
    20a6:	10 92 af 24 	sts	0x24AF, r1
    20aa:	10 92 b0 24 	sts	0x24B0, r1
    20ae:	10 92 b1 24 	sts	0x24B1, r1
					X_cilj |= (int)receiveArray[1] << 8;
    20b2:	20 91 6f 29 	lds	r18, 0x296F
    20b6:	40 91 ae 24 	lds	r20, 0x24AE
    20ba:	50 91 af 24 	lds	r21, 0x24AF
    20be:	60 91 b0 24 	lds	r22, 0x24B0
    20c2:	70 91 b1 24 	lds	r23, 0x24B1
    20c6:	92 2f       	mov	r25, r18
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	aa 27       	eor	r26, r26
    20cc:	97 fd       	sbrc	r25, 7
    20ce:	a0 95       	com	r26
    20d0:	ba 2f       	mov	r27, r26
    20d2:	84 2b       	or	r24, r20
    20d4:	95 2b       	or	r25, r21
    20d6:	a6 2b       	or	r26, r22
    20d8:	b7 2b       	or	r27, r23
    20da:	80 93 ae 24 	sts	0x24AE, r24
    20de:	90 93 af 24 	sts	0x24AF, r25
    20e2:	a0 93 b0 24 	sts	0x24B0, r26
    20e6:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj |= (int)receiveArray[2];
    20ea:	20 91 70 29 	lds	r18, 0x2970
    20ee:	80 91 ae 24 	lds	r24, 0x24AE
    20f2:	90 91 af 24 	lds	r25, 0x24AF
    20f6:	a0 91 b0 24 	lds	r26, 0x24B0
    20fa:	b0 91 b1 24 	lds	r27, 0x24B1
    20fe:	82 2b       	or	r24, r18
    2100:	80 93 ae 24 	sts	0x24AE, r24
    2104:	90 93 af 24 	sts	0x24AF, r25
    2108:	a0 93 b0 24 	sts	0x24B0, r26
    210c:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj = (X_cilj * scale_factor_for_mm);	
    2110:	a0 91 00 2e 	lds	r26, 0x2E00
    2114:	b0 91 01 2e 	lds	r27, 0x2E01
    2118:	20 91 ae 24 	lds	r18, 0x24AE
    211c:	30 91 af 24 	lds	r19, 0x24AF
    2120:	40 91 b0 24 	lds	r20, 0x24B0
    2124:	50 91 b1 24 	lds	r21, 0x24B1
    2128:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    212c:	60 93 ae 24 	sts	0x24AE, r22
    2130:	70 93 af 24 	sts	0x24AF, r23
    2134:	80 93 b0 24 	sts	0x24B0, r24
    2138:	90 93 b1 24 	sts	0x24B1, r25
				}	
				//Y_cilj
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    213c:	80 91 71 29 	lds	r24, 0x2971
    2140:	8f 3f       	cpi	r24, 0xFF	; 255
    2142:	29 f4       	brne	.+10     	; 0x214e <__vector_61+0x516>
    2144:	80 91 72 29 	lds	r24, 0x2972
    2148:	8f 3f       	cpi	r24, 0xFF	; 255
    214a:	09 f4       	brne	.+2      	; 0x214e <__vector_61+0x516>
    214c:	53 c0       	rjmp	.+166    	; 0x21f4 <__vector_61+0x5bc>
				{		
					stop_PID_desni = 0;
    214e:	10 92 f4 29 	sts	0x29F4, r1
					stop_PID_levi = 0;	
    2152:	10 92 f2 2d 	sts	0x2DF2, r1
					set_direct_out = 0;
    2156:	10 92 81 32 	sts	0x3281, r1
					Y_cilj = 0;
    215a:	10 92 0b 2e 	sts	0x2E0B, r1
    215e:	10 92 0c 2e 	sts	0x2E0C, r1
    2162:	10 92 0d 2e 	sts	0x2E0D, r1
    2166:	10 92 0e 2e 	sts	0x2E0E, r1
					Y_cilj |= (int)receiveArray[3] << 8;
    216a:	20 91 71 29 	lds	r18, 0x2971
    216e:	40 91 0b 2e 	lds	r20, 0x2E0B
    2172:	50 91 0c 2e 	lds	r21, 0x2E0C
    2176:	60 91 0d 2e 	lds	r22, 0x2E0D
    217a:	70 91 0e 2e 	lds	r23, 0x2E0E
    217e:	92 2f       	mov	r25, r18
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	aa 27       	eor	r26, r26
    2184:	97 fd       	sbrc	r25, 7
    2186:	a0 95       	com	r26
    2188:	ba 2f       	mov	r27, r26
    218a:	84 2b       	or	r24, r20
    218c:	95 2b       	or	r25, r21
    218e:	a6 2b       	or	r26, r22
    2190:	b7 2b       	or	r27, r23
    2192:	80 93 0b 2e 	sts	0x2E0B, r24
    2196:	90 93 0c 2e 	sts	0x2E0C, r25
    219a:	a0 93 0d 2e 	sts	0x2E0D, r26
    219e:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj |= (int)receiveArray[4];
    21a2:	20 91 72 29 	lds	r18, 0x2972
    21a6:	80 91 0b 2e 	lds	r24, 0x2E0B
    21aa:	90 91 0c 2e 	lds	r25, 0x2E0C
    21ae:	a0 91 0d 2e 	lds	r26, 0x2E0D
    21b2:	b0 91 0e 2e 	lds	r27, 0x2E0E
    21b6:	82 2b       	or	r24, r18
    21b8:	80 93 0b 2e 	sts	0x2E0B, r24
    21bc:	90 93 0c 2e 	sts	0x2E0C, r25
    21c0:	a0 93 0d 2e 	sts	0x2E0D, r26
    21c4:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj = Y_cilj * scale_factor_for_mm;
    21c8:	a0 91 00 2e 	lds	r26, 0x2E00
    21cc:	b0 91 01 2e 	lds	r27, 0x2E01
    21d0:	20 91 0b 2e 	lds	r18, 0x2E0B
    21d4:	30 91 0c 2e 	lds	r19, 0x2E0C
    21d8:	40 91 0d 2e 	lds	r20, 0x2E0D
    21dc:	50 91 0e 2e 	lds	r21, 0x2E0E
    21e0:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    21e4:	60 93 0b 2e 	sts	0x2E0B, r22
    21e8:	70 93 0c 2e 	sts	0x2E0C, r23
    21ec:	80 93 0d 2e 	sts	0x2E0D, r24
    21f0:	90 93 0e 2e 	sts	0x2E0E, r25
				}	
				
				//teta_cilj_final_absolute
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    21f4:	80 91 73 29 	lds	r24, 0x2973
    21f8:	8f 3f       	cpi	r24, 0xFF	; 255
    21fa:	29 f4       	brne	.+10     	; 0x2206 <__vector_61+0x5ce>
    21fc:	80 91 74 29 	lds	r24, 0x2974
    2200:	8f 3f       	cpi	r24, 0xFF	; 255
    2202:	09 f4       	brne	.+2      	; 0x2206 <__vector_61+0x5ce>
    2204:	58 c0       	rjmp	.+176    	; 0x22b6 <__vector_61+0x67e>
				{
					teta_cilj_final = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    2206:	10 92 00 20 	sts	0x2000, r1
    220a:	10 92 01 20 	sts	0x2001, r1
    220e:	10 92 02 20 	sts	0x2002, r1
    2212:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= (int)receiveArray[5] << 8;
    2216:	20 91 73 29 	lds	r18, 0x2973
    221a:	40 91 00 20 	lds	r20, 0x2000
    221e:	50 91 01 20 	lds	r21, 0x2001
    2222:	60 91 02 20 	lds	r22, 0x2002
    2226:	70 91 03 20 	lds	r23, 0x2003
    222a:	92 2f       	mov	r25, r18
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	aa 27       	eor	r26, r26
    2230:	97 fd       	sbrc	r25, 7
    2232:	a0 95       	com	r26
    2234:	ba 2f       	mov	r27, r26
    2236:	84 2b       	or	r24, r20
    2238:	95 2b       	or	r25, r21
    223a:	a6 2b       	or	r26, r22
    223c:	b7 2b       	or	r27, r23
    223e:	80 93 00 20 	sts	0x2000, r24
    2242:	90 93 01 20 	sts	0x2001, r25
    2246:	a0 93 02 20 	sts	0x2002, r26
    224a:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[6];
    224e:	20 91 74 29 	lds	r18, 0x2974
    2252:	80 91 00 20 	lds	r24, 0x2000
    2256:	90 91 01 20 	lds	r25, 0x2001
    225a:	a0 91 02 20 	lds	r26, 0x2002
    225e:	b0 91 03 20 	lds	r27, 0x2003
    2262:	82 2b       	or	r24, r18
    2264:	80 93 00 20 	sts	0x2000, r24
    2268:	90 93 01 20 	sts	0x2001, r25
    226c:	a0 93 02 20 	sts	0x2002, r26
    2270:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = (teta_cilj_final * krug360) / 360;
    2274:	20 91 00 20 	lds	r18, 0x2000
    2278:	30 91 01 20 	lds	r19, 0x2001
    227c:	40 91 02 20 	lds	r20, 0x2002
    2280:	50 91 03 20 	lds	r21, 0x2003
    2284:	60 91 75 32 	lds	r22, 0x3275
    2288:	70 91 76 32 	lds	r23, 0x3276
    228c:	80 91 77 32 	lds	r24, 0x3277
    2290:	90 91 78 32 	lds	r25, 0x3278
    2294:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__mulsi3>
    2298:	28 e6       	ldi	r18, 0x68	; 104
    229a:	31 e0       	ldi	r19, 0x01	; 1
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    22a4:	20 93 00 20 	sts	0x2000, r18
    22a8:	30 93 01 20 	sts	0x2001, r19
    22ac:	40 93 02 20 	sts	0x2002, r20
    22b0:	50 93 03 20 	sts	0x2003, r21
    22b4:	78 c0       	rjmp	.+240    	; 0x23a6 <__vector_61+0x76e>
				}	
				//teta_cilj_final_relative
				else if(!(receiveArray[7] == 0xFF && receiveArray[8] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    22b6:	80 91 75 29 	lds	r24, 0x2975
    22ba:	8f 3f       	cpi	r24, 0xFF	; 255
    22bc:	29 f4       	brne	.+10     	; 0x22c8 <__vector_61+0x690>
    22be:	80 91 76 29 	lds	r24, 0x2976
    22c2:	8f 3f       	cpi	r24, 0xFF	; 255
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <__vector_61+0x690>
    22c6:	64 c0       	rjmp	.+200    	; 0x2390 <__vector_61+0x758>
				{
					teta_cilj_final = 0;
    22c8:	10 92 00 20 	sts	0x2000, r1
    22cc:	10 92 01 20 	sts	0x2001, r1
    22d0:	10 92 02 20 	sts	0x2002, r1
    22d4:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= (int)receiveArray[7] << 8;
    22d8:	20 91 75 29 	lds	r18, 0x2975
    22dc:	40 91 00 20 	lds	r20, 0x2000
    22e0:	50 91 01 20 	lds	r21, 0x2001
    22e4:	60 91 02 20 	lds	r22, 0x2002
    22e8:	70 91 03 20 	lds	r23, 0x2003
    22ec:	92 2f       	mov	r25, r18
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	aa 27       	eor	r26, r26
    22f2:	97 fd       	sbrc	r25, 7
    22f4:	a0 95       	com	r26
    22f6:	ba 2f       	mov	r27, r26
    22f8:	84 2b       	or	r24, r20
    22fa:	95 2b       	or	r25, r21
    22fc:	a6 2b       	or	r26, r22
    22fe:	b7 2b       	or	r27, r23
    2300:	80 93 00 20 	sts	0x2000, r24
    2304:	90 93 01 20 	sts	0x2001, r25
    2308:	a0 93 02 20 	sts	0x2002, r26
    230c:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[8];
    2310:	20 91 76 29 	lds	r18, 0x2976
    2314:	80 91 00 20 	lds	r24, 0x2000
    2318:	90 91 01 20 	lds	r25, 0x2001
    231c:	a0 91 02 20 	lds	r26, 0x2002
    2320:	b0 91 03 20 	lds	r27, 0x2003
    2324:	82 2b       	or	r24, r18
    2326:	80 93 00 20 	sts	0x2000, r24
    232a:	90 93 01 20 	sts	0x2001, r25
    232e:	a0 93 02 20 	sts	0x2002, r26
    2332:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = teta + (teta_cilj_final * krug360) / 360;
    2336:	20 91 00 20 	lds	r18, 0x2000
    233a:	30 91 01 20 	lds	r19, 0x2001
    233e:	40 91 02 20 	lds	r20, 0x2002
    2342:	50 91 03 20 	lds	r21, 0x2003
    2346:	60 91 75 32 	lds	r22, 0x3275
    234a:	70 91 76 32 	lds	r23, 0x3276
    234e:	80 91 77 32 	lds	r24, 0x3277
    2352:	90 91 78 32 	lds	r25, 0x3278
    2356:	c0 90 83 32 	lds	r12, 0x3283
    235a:	d0 90 84 32 	lds	r13, 0x3284
    235e:	e0 90 85 32 	lds	r14, 0x3285
    2362:	f0 90 86 32 	lds	r15, 0x3286
    2366:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__mulsi3>
    236a:	28 e6       	ldi	r18, 0x68	; 104
    236c:	31 e0       	ldi	r19, 0x01	; 1
    236e:	40 e0       	ldi	r20, 0x00	; 0
    2370:	50 e0       	ldi	r21, 0x00	; 0
    2372:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    2376:	c2 0e       	add	r12, r18
    2378:	d3 1e       	adc	r13, r19
    237a:	e4 1e       	adc	r14, r20
    237c:	f5 1e       	adc	r15, r21
    237e:	c0 92 00 20 	sts	0x2000, r12
    2382:	d0 92 01 20 	sts	0x2001, r13
    2386:	e0 92 02 20 	sts	0x2002, r14
    238a:	f0 92 03 20 	sts	0x2003, r15
    238e:	0b c0       	rjmp	.+22     	; 0x23a6 <__vector_61+0x76e>
				}
				else
					teta_cilj_final = 0xFFFFFFFF;				
    2390:	8f ef       	ldi	r24, 0xFF	; 255
    2392:	9f ef       	ldi	r25, 0xFF	; 255
    2394:	dc 01       	movw	r26, r24
    2396:	80 93 00 20 	sts	0x2000, r24
    239a:	90 93 01 20 	sts	0x2001, r25
    239e:	a0 93 02 20 	sts	0x2002, r26
    23a2:	b0 93 03 20 	sts	0x2003, r27
				//bzina
				if(receiveArray[9] != 0xFF)	// ako zadajemo 0xFF ne menja se brzina
    23a6:	80 91 77 29 	lds	r24, 0x2977
    23aa:	8f 3f       	cpi	r24, 0xFF	; 255
    23ac:	c9 f0       	breq	.+50     	; 0x23e0 <__vector_61+0x7a8>
				{
					zeljena_pravolinijska_brzina = receiveArray[9] * 3;	//podesiti faktor!
    23ae:	80 91 77 29 	lds	r24, 0x2977
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9c 01       	movw	r18, r24
    23b6:	22 0f       	add	r18, r18
    23b8:	33 1f       	adc	r19, r19
    23ba:	82 0f       	add	r24, r18
    23bc:	93 1f       	adc	r25, r19
    23be:	80 93 7f 32 	sts	0x327F, r24
    23c2:	90 93 80 32 	sts	0x3280, r25
					zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2;
    23c6:	80 91 7f 32 	lds	r24, 0x327F
    23ca:	90 91 80 32 	lds	r25, 0x3280
    23ce:	99 23       	and	r25, r25
    23d0:	0c f4       	brge	.+2      	; 0x23d4 <__vector_61+0x79c>
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	95 95       	asr	r25
    23d6:	87 95       	ror	r24
    23d8:	80 93 61 2e 	sts	0x2E61, r24
    23dc:	90 93 62 2e 	sts	0x2E62, r25
				}				
				//smer
				if(receiveArray[10] != 0xFF)	// ako zadajemo 0xFF ne menja se smer
    23e0:	80 91 78 29 	lds	r24, 0x2978
    23e4:	8f 3f       	cpi	r24, 0xFF	; 255
    23e6:	21 f0       	breq	.+8      	; 0x23f0 <__vector_61+0x7b8>
					smer_zadati = receiveArray[10];	
    23e8:	80 91 78 29 	lds	r24, 0x2978
    23ec:	80 93 5e 29 	sts	0x295E, r24
				
				//pokretanje snimanja u nizove
				sample_counter_niz_1 = 0;
    23f0:	10 92 58 2e 	sts	0x2E58, r1
				niz_counter_niz_1 = 0;	
    23f4:	10 92 59 2e 	sts	0x2E59, r1
				sample_counter_niz_2 = 0;
    23f8:	10 92 f9 2d 	sts	0x2DF9, r1
				niz_counter_niz_2 = 0;
    23fc:	10 92 fa 2d 	sts	0x2DFA, r1
				sample_counter_niz_3 = 0;
    2400:	10 92 5f 29 	sts	0x295F, r1
				niz_counter_niz_3 = 0;		
    2404:	10 92 c6 24 	sts	0x24C6, r1
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
    2408:	80 91 6e 29 	lds	r24, 0x296E
    240c:	80 93 dd 28 	sts	0x28DD, r24
				niz_counter_niz_2 = 0;
				sample_counter_niz_3 = 0;
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
    2410:	00 e0       	ldi	r16, 0x00	; 0
    2412:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];	
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2414:	f8 01       	movw	r30, r16
    2416:	e3 52       	subi	r30, 0x23	; 35
    2418:	f7 4d       	sbci	r31, 0xD7	; 215
    241a:	60 81       	ld	r22, Z
    241c:	8b e0       	ldi	r24, 0x0B	; 11
    241e:	90 e2       	ldi	r25, 0x20	; 32
    2420:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2424:	88 23       	and	r24, r24
    2426:	11 f0       	breq	.+4      	; 0x242c <__vector_61+0x7f4>
					{
						i++;
    2428:	0f 5f       	subi	r16, 0xFF	; 255
    242a:	1f 4f       	sbci	r17, 0xFF	; 255
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
				while (i < 1)
    242c:	10 16       	cp	r1, r16
    242e:	11 06       	cpc	r1, r17
    2430:	8c f7       	brge	.-30     	; 0x2414 <__vector_61+0x7dc>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2432:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    2436:	10 92 5d 29 	sts	0x295D, r1
    243a:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__vector_61+0x193a>
		}					
	}
	//RELATIVNA DISTANCA I UGAO - 4
	else if(receiveArray[0] == 4)					//provera funkcijskog bajta
    243e:	80 91 6e 29 	lds	r24, 0x296E
    2442:	84 30       	cpi	r24, 0x04	; 4
    2444:	09 f0       	breq	.+2      	; 0x2448 <__vector_61+0x810>
    2446:	96 c1       	rjmp	.+812    	; 0x2774 <__vector_61+0xb3c>
	{
		if(RX_i_E1 >= 5)								//stigla je cela poruka
    2448:	80 91 5d 29 	lds	r24, 0x295D
    244c:	85 30       	cpi	r24, 0x05	; 5
    244e:	10 f4       	brcc	.+4      	; 0x2454 <__vector_61+0x81c>
    2450:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2454:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//ENABLE
				stop_PID_desni = 0;
    2458:	10 92 f4 29 	sts	0x29F4, r1
				stop_PID_levi = 0;
    245c:	10 92 f2 2d 	sts	0x2DF2, r1
				set_direct_out = 0;
    2460:	10 92 81 32 	sts	0x3281, r1
				
				rel_distanca = 0;
    2464:	10 92 c5 28 	sts	0x28C5, r1
    2468:	10 92 c6 28 	sts	0x28C6, r1
    246c:	10 92 c7 28 	sts	0x28C7, r1
    2470:	10 92 c8 28 	sts	0x28C8, r1
				rel_distanca |= (int)receiveArray[1] << 8;
    2474:	20 91 6f 29 	lds	r18, 0x296F
    2478:	40 91 c5 28 	lds	r20, 0x28C5
    247c:	50 91 c6 28 	lds	r21, 0x28C6
    2480:	60 91 c7 28 	lds	r22, 0x28C7
    2484:	70 91 c8 28 	lds	r23, 0x28C8
    2488:	92 2f       	mov	r25, r18
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	aa 27       	eor	r26, r26
    248e:	97 fd       	sbrc	r25, 7
    2490:	a0 95       	com	r26
    2492:	ba 2f       	mov	r27, r26
    2494:	84 2b       	or	r24, r20
    2496:	95 2b       	or	r25, r21
    2498:	a6 2b       	or	r26, r22
    249a:	b7 2b       	or	r27, r23
    249c:	80 93 c5 28 	sts	0x28C5, r24
    24a0:	90 93 c6 28 	sts	0x28C6, r25
    24a4:	a0 93 c7 28 	sts	0x28C7, r26
    24a8:	b0 93 c8 28 	sts	0x28C8, r27
				rel_distanca |= (int)receiveArray[2];
    24ac:	20 91 70 29 	lds	r18, 0x2970
    24b0:	80 91 c5 28 	lds	r24, 0x28C5
    24b4:	90 91 c6 28 	lds	r25, 0x28C6
    24b8:	a0 91 c7 28 	lds	r26, 0x28C7
    24bc:	b0 91 c8 28 	lds	r27, 0x28C8
    24c0:	82 2b       	or	r24, r18
    24c2:	80 93 c5 28 	sts	0x28C5, r24
    24c6:	90 93 c6 28 	sts	0x28C6, r25
    24ca:	a0 93 c7 28 	sts	0x28C7, r26
    24ce:	b0 93 c8 28 	sts	0x28C8, r27
				rel_distanca = (rel_distanca * scale_factor_for_mm);
    24d2:	a0 91 00 2e 	lds	r26, 0x2E00
    24d6:	b0 91 01 2e 	lds	r27, 0x2E01
    24da:	20 91 c5 28 	lds	r18, 0x28C5
    24de:	30 91 c6 28 	lds	r19, 0x28C6
    24e2:	40 91 c7 28 	lds	r20, 0x28C7
    24e6:	50 91 c8 28 	lds	r21, 0x28C8
    24ea:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    24ee:	60 93 c5 28 	sts	0x28C5, r22
    24f2:	70 93 c6 28 	sts	0x28C6, r23
    24f6:	80 93 c7 28 	sts	0x28C7, r24
    24fa:	90 93 c8 28 	sts	0x28C8, r25

				rel_ugao = 0;
    24fe:	10 92 16 2e 	sts	0x2E16, r1
    2502:	10 92 17 2e 	sts	0x2E17, r1
    2506:	10 92 18 2e 	sts	0x2E18, r1
    250a:	10 92 19 2e 	sts	0x2E19, r1
				rel_ugao |= (int)receiveArray[3] << 8;
    250e:	20 91 71 29 	lds	r18, 0x2971
    2512:	40 91 16 2e 	lds	r20, 0x2E16
    2516:	50 91 17 2e 	lds	r21, 0x2E17
    251a:	60 91 18 2e 	lds	r22, 0x2E18
    251e:	70 91 19 2e 	lds	r23, 0x2E19
    2522:	92 2f       	mov	r25, r18
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	aa 27       	eor	r26, r26
    2528:	97 fd       	sbrc	r25, 7
    252a:	a0 95       	com	r26
    252c:	ba 2f       	mov	r27, r26
    252e:	84 2b       	or	r24, r20
    2530:	95 2b       	or	r25, r21
    2532:	a6 2b       	or	r26, r22
    2534:	b7 2b       	or	r27, r23
    2536:	80 93 16 2e 	sts	0x2E16, r24
    253a:	90 93 17 2e 	sts	0x2E17, r25
    253e:	a0 93 18 2e 	sts	0x2E18, r26
    2542:	b0 93 19 2e 	sts	0x2E19, r27
				rel_ugao |= (int)receiveArray[4];
    2546:	20 91 72 29 	lds	r18, 0x2972
    254a:	80 91 16 2e 	lds	r24, 0x2E16
    254e:	90 91 17 2e 	lds	r25, 0x2E17
    2552:	a0 91 18 2e 	lds	r26, 0x2E18
    2556:	b0 91 19 2e 	lds	r27, 0x2E19
    255a:	82 2b       	or	r24, r18
    255c:	80 93 16 2e 	sts	0x2E16, r24
    2560:	90 93 17 2e 	sts	0x2E17, r25
    2564:	a0 93 18 2e 	sts	0x2E18, r26
    2568:	b0 93 19 2e 	sts	0x2E19, r27
				rel_ugao = (rel_ugao * krug360) / 360;
    256c:	20 91 16 2e 	lds	r18, 0x2E16
    2570:	30 91 17 2e 	lds	r19, 0x2E17
    2574:	40 91 18 2e 	lds	r20, 0x2E18
    2578:	50 91 19 2e 	lds	r21, 0x2E19
    257c:	60 91 75 32 	lds	r22, 0x3275
    2580:	70 91 76 32 	lds	r23, 0x3276
    2584:	80 91 77 32 	lds	r24, 0x3277
    2588:	90 91 78 32 	lds	r25, 0x3278
    258c:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__mulsi3>
    2590:	28 e6       	ldi	r18, 0x68	; 104
    2592:	31 e0       	ldi	r19, 0x01	; 1
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    259c:	20 93 16 2e 	sts	0x2E16, r18
    25a0:	30 93 17 2e 	sts	0x2E17, r19
    25a4:	40 93 18 2e 	sts	0x2E18, r20
    25a8:	50 93 19 2e 	sts	0x2E19, r21
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    25ac:	40 91 83 32 	lds	r20, 0x3283
    25b0:	50 91 84 32 	lds	r21, 0x3284
    25b4:	60 91 85 32 	lds	r22, 0x3285
    25b8:	70 91 86 32 	lds	r23, 0x3286
    25bc:	80 91 16 2e 	lds	r24, 0x2E16
    25c0:	90 91 17 2e 	lds	r25, 0x2E17
    25c4:	a0 91 18 2e 	lds	r26, 0x2E18
    25c8:	b0 91 19 2e 	lds	r27, 0x2E19
    25cc:	c0 90 cf 28 	lds	r12, 0x28CF
    25d0:	d0 90 d0 28 	lds	r13, 0x28D0
    25d4:	e0 90 d1 28 	lds	r14, 0x28D1
    25d8:	f0 90 d2 28 	lds	r15, 0x28D2
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    25dc:	40 90 83 32 	lds	r4, 0x3283
    25e0:	50 90 84 32 	lds	r5, 0x3284
    25e4:	60 90 85 32 	lds	r6, 0x3285
    25e8:	70 90 86 32 	lds	r7, 0x3286
    25ec:	00 91 16 2e 	lds	r16, 0x2E16
    25f0:	10 91 17 2e 	lds	r17, 0x2E17
    25f4:	20 91 18 2e 	lds	r18, 0x2E18
    25f8:	30 91 19 2e 	lds	r19, 0x2E19
    25fc:	09 83       	std	Y+1, r16	; 0x01
    25fe:	1a 83       	std	Y+2, r17	; 0x02
    2600:	2b 83       	std	Y+3, r18	; 0x03
    2602:	3c 83       	std	Y+4, r19	; 0x04
    2604:	80 90 cf 28 	lds	r8, 0x28CF
    2608:	90 90 d0 28 	lds	r9, 0x28D0
    260c:	a0 90 d1 28 	lds	r10, 0x28D1
    2610:	b0 90 d2 28 	lds	r11, 0x28D2
				rel_ugao |= (int)receiveArray[4];
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
    2614:	8a 01       	movw	r16, r20
    2616:	9b 01       	movw	r18, r22
    2618:	08 0f       	add	r16, r24
    261a:	19 1f       	adc	r17, r25
    261c:	2a 1f       	adc	r18, r26
    261e:	3b 1f       	adc	r19, r27
    2620:	c9 01       	movw	r24, r18
    2622:	b8 01       	movw	r22, r16
    2624:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    2628:	6d 83       	std	Y+5, r22	; 0x05
    262a:	7e 83       	std	Y+6, r23	; 0x06
    262c:	8f 83       	std	Y+7, r24	; 0x07
    262e:	98 87       	std	Y+8, r25	; 0x08
    2630:	c7 01       	movw	r24, r14
    2632:	b6 01       	movw	r22, r12
    2634:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    2638:	9b 01       	movw	r18, r22
    263a:	ac 01       	movw	r20, r24
    263c:	6d 81       	ldd	r22, Y+5	; 0x05
    263e:	7e 81       	ldd	r23, Y+6	; 0x06
    2640:	8f 81       	ldd	r24, Y+7	; 0x07
    2642:	98 85       	ldd	r25, Y+8	; 0x08
    2644:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__divsf3>
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
    2648:	2b ed       	ldi	r18, 0xDB	; 219
    264a:	3f e0       	ldi	r19, 0x0F	; 15
    264c:	49 e4       	ldi	r20, 0x49	; 73
    264e:	50 e4       	ldi	r21, 0x40	; 64
    2650:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    2654:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <cos>
    2658:	6b 01       	movw	r12, r22
    265a:	7c 01       	movw	r14, r24
				rel_ugao = (rel_ugao * krug360) / 360;
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
    265c:	69 81       	ldd	r22, Y+1	; 0x01
    265e:	7a 81       	ldd	r23, Y+2	; 0x02
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	64 0d       	add	r22, r4
    2666:	75 1d       	adc	r23, r5
    2668:	86 1d       	adc	r24, r6
    266a:	97 1d       	adc	r25, r7
    266c:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    2670:	2b 01       	movw	r4, r22
    2672:	3c 01       	movw	r6, r24
    2674:	c5 01       	movw	r24, r10
    2676:	b4 01       	movw	r22, r8
    2678:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    267c:	9b 01       	movw	r18, r22
    267e:	ac 01       	movw	r20, r24
    2680:	c3 01       	movw	r24, r6
    2682:	b2 01       	movw	r22, r4
    2684:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__divsf3>
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
    2688:	2b ed       	ldi	r18, 0xDB	; 219
    268a:	3f e0       	ldi	r19, 0x0F	; 15
    268c:	49 e4       	ldi	r20, 0x49	; 73
    268e:	50 e4       	ldi	r21, 0x40	; 64
    2690:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    2694:	0e 94 78 38 	call	0x70f0	; 0x70f0 <sin>
    2698:	4b 01       	movw	r8, r22
    269a:	5c 01       	movw	r10, r24
				X_pos_cos = rel_distanca * X_pos_cos;
    269c:	60 91 c5 28 	lds	r22, 0x28C5
    26a0:	70 91 c6 28 	lds	r23, 0x28C6
    26a4:	80 91 c7 28 	lds	r24, 0x28C7
    26a8:	90 91 c8 28 	lds	r25, 0x28C8
				Y_pos_sin = rel_distanca * Y_pos_sin;
    26ac:	40 90 c5 28 	lds	r4, 0x28C5
    26b0:	50 90 c6 28 	lds	r5, 0x28C6
    26b4:	60 90 c7 28 	lds	r6, 0x28C7
    26b8:	70 90 c8 28 	lds	r7, 0x28C8
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    26bc:	20 91 23 2e 	lds	r18, 0x2E23
    26c0:	30 91 24 2e 	lds	r19, 0x2E24
    26c4:	40 91 25 2e 	lds	r20, 0x2E25
    26c8:	50 91 26 2e 	lds	r21, 0x2E26
    26cc:	29 83       	std	Y+1, r18	; 0x01
    26ce:	3a 83       	std	Y+2, r19	; 0x02
    26d0:	4b 83       	std	Y+3, r20	; 0x03
    26d2:	5c 83       	std	Y+4, r21	; 0x04
				double X_pos_cos, Y_pos_sin;
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
    26d4:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    26d8:	a7 01       	movw	r20, r14
    26da:	96 01       	movw	r18, r12
    26dc:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
				Y_pos_sin = rel_distanca * Y_pos_sin;
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    26e0:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <__fixsfsi>
    26e4:	09 81       	ldd	r16, Y+1	; 0x01
    26e6:	1a 81       	ldd	r17, Y+2	; 0x02
    26e8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ea:	3c 81       	ldd	r19, Y+4	; 0x04
    26ec:	06 0f       	add	r16, r22
    26ee:	17 1f       	adc	r17, r23
    26f0:	28 1f       	adc	r18, r24
    26f2:	39 1f       	adc	r19, r25
    26f4:	00 93 ae 24 	sts	0x24AE, r16
    26f8:	10 93 af 24 	sts	0x24AF, r17
    26fc:	20 93 b0 24 	sts	0x24B0, r18
    2700:	30 93 b1 24 	sts	0x24B1, r19
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    2704:	c0 90 02 2a 	lds	r12, 0x2A02
    2708:	d0 90 03 2a 	lds	r13, 0x2A03
    270c:	e0 90 04 2a 	lds	r14, 0x2A04
    2710:	f0 90 05 2a 	lds	r15, 0x2A05
				X_pos_cos = (double)(teta + rel_ugao) / krug180;
				Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(X_pos_cos * M_PI);
				Y_pos_sin = sin(Y_pos_sin * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
				Y_pos_sin = rel_distanca * Y_pos_sin;
    2714:	c3 01       	movw	r24, r6
    2716:	b2 01       	movw	r22, r4
    2718:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    271c:	a5 01       	movw	r20, r10
    271e:	94 01       	movw	r18, r8
    2720:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    2724:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <__fixsfsi>
    2728:	c6 0e       	add	r12, r22
    272a:	d7 1e       	adc	r13, r23
    272c:	e8 1e       	adc	r14, r24
    272e:	f9 1e       	adc	r15, r25
    2730:	c0 92 0b 2e 	sts	0x2E0B, r12
    2734:	d0 92 0c 2e 	sts	0x2E0C, r13
    2738:	e0 92 0d 2e 	sts	0x2E0D, r14
    273c:	f0 92 0e 2e 	sts	0x2E0E, r15
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2740:	80 91 6e 29 	lds	r24, 0x296E
    2744:	80 93 dd 28 	sts	0x28DD, r24
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
    2748:	00 e0       	ldi	r16, 0x00	; 0
    274a:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    274c:	f8 01       	movw	r30, r16
    274e:	e3 52       	subi	r30, 0x23	; 35
    2750:	f7 4d       	sbci	r31, 0xD7	; 215
    2752:	60 81       	ld	r22, Z
    2754:	8b e0       	ldi	r24, 0x0B	; 11
    2756:	90 e2       	ldi	r25, 0x20	; 32
    2758:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    275c:	88 23       	and	r24, r24
    275e:	11 f0       	breq	.+4      	; 0x2764 <__vector_61+0xb2c>
					{
						i++;
    2760:	0f 5f       	subi	r16, 0xFF	; 255
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2764:	10 16       	cp	r1, r16
    2766:	11 06       	cpc	r1, r17
    2768:	8c f7       	brge	.-30     	; 0x274c <__vector_61+0xb14>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    276a:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda
    276e:	10 92 5d 29 	sts	0x295D, r1
    2772:	ff c6       	rjmp	.+3582   	; 0x3572 <__vector_61+0x193a>
		}
	}
	//SET DIRECT OUT - 5
	else if(receiveArray[0] == 5)					//provera funkcijskog bajta
    2774:	80 91 6e 29 	lds	r24, 0x296E
    2778:	85 30       	cpi	r24, 0x05	; 5
    277a:	09 f0       	breq	.+2      	; 0x277e <__vector_61+0xb46>
    277c:	6e c0       	rjmp	.+220    	; 0x285a <__vector_61+0xc22>
	{
		if(RX_i_E1 >= 3)							//stigla je cela poruka
    277e:	80 91 5d 29 	lds	r24, 0x295D
    2782:	83 30       	cpi	r24, 0x03	; 3
    2784:	08 f4       	brcc	.+2      	; 0x2788 <__vector_61+0xb50>
    2786:	f5 c6       	rjmp	.+3562   	; 0x3572 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2788:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//ENABLE
				set_direct_out = 1;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	80 93 81 32 	sts	0x3281, r24
				
				if(receiveArray[1] >= 128)
    2792:	80 91 6f 29 	lds	r24, 0x296F
    2796:	88 23       	and	r24, r24
    2798:	8c f4       	brge	.+34     	; 0x27bc <__vector_61+0xb84>
					PID_brzina_L = (receiveArray[1] - 128) * 5;	//podesiti faktor!
    279a:	80 91 6f 29 	lds	r24, 0x296F
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9c 01       	movw	r18, r24
    27a2:	22 0f       	add	r18, r18
    27a4:	33 1f       	adc	r19, r19
    27a6:	22 0f       	add	r18, r18
    27a8:	33 1f       	adc	r19, r19
    27aa:	82 0f       	add	r24, r18
    27ac:	93 1f       	adc	r25, r19
    27ae:	80 58       	subi	r24, 0x80	; 128
    27b0:	92 40       	sbci	r25, 0x02	; 2
    27b2:	80 93 7b 2e 	sts	0x2E7B, r24
    27b6:	90 93 7c 2e 	sts	0x2E7C, r25
    27ba:	10 c0       	rjmp	.+32     	; 0x27dc <__vector_61+0xba4>
				else
					PID_brzina_L = (128 - receiveArray[1]) * (-5);
    27bc:	80 91 6f 29 	lds	r24, 0x296F
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	9c 01       	movw	r18, r24
    27c4:	22 0f       	add	r18, r18
    27c6:	33 1f       	adc	r19, r19
    27c8:	22 0f       	add	r18, r18
    27ca:	33 1f       	adc	r19, r19
    27cc:	82 0f       	add	r24, r18
    27ce:	93 1f       	adc	r25, r19
    27d0:	80 58       	subi	r24, 0x80	; 128
    27d2:	92 40       	sbci	r25, 0x02	; 2
    27d4:	80 93 7b 2e 	sts	0x2E7B, r24
    27d8:	90 93 7c 2e 	sts	0x2E7C, r25
					
				if(receiveArray[2] >= 128)
    27dc:	80 91 70 29 	lds	r24, 0x2970
    27e0:	88 23       	and	r24, r24
    27e2:	8c f4       	brge	.+34     	; 0x2806 <__vector_61+0xbce>
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
    27e4:	80 91 70 29 	lds	r24, 0x2970
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9c 01       	movw	r18, r24
    27ec:	22 0f       	add	r18, r18
    27ee:	33 1f       	adc	r19, r19
    27f0:	22 0f       	add	r18, r18
    27f2:	33 1f       	adc	r19, r19
    27f4:	82 0f       	add	r24, r18
    27f6:	93 1f       	adc	r25, r19
    27f8:	80 58       	subi	r24, 0x80	; 128
    27fa:	92 40       	sbci	r25, 0x02	; 2
    27fc:	80 93 79 2e 	sts	0x2E79, r24
    2800:	90 93 7a 2e 	sts	0x2E7A, r25
    2804:	10 c0       	rjmp	.+32     	; 0x2826 <__vector_61+0xbee>
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
    2806:	80 91 70 29 	lds	r24, 0x2970
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9c 01       	movw	r18, r24
    280e:	22 0f       	add	r18, r18
    2810:	33 1f       	adc	r19, r19
    2812:	22 0f       	add	r18, r18
    2814:	33 1f       	adc	r19, r19
    2816:	82 0f       	add	r24, r18
    2818:	93 1f       	adc	r25, r19
    281a:	80 58       	subi	r24, 0x80	; 128
    281c:	92 40       	sbci	r25, 0x02	; 2
    281e:	80 93 79 2e 	sts	0x2E79, r24
    2822:	90 93 7a 2e 	sts	0x2E7A, r25
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2826:	80 91 6e 29 	lds	r24, 0x296E
    282a:	80 93 dd 28 	sts	0x28DD, r24
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
    282e:	00 e0       	ldi	r16, 0x00	; 0
    2830:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2832:	f8 01       	movw	r30, r16
    2834:	e3 52       	subi	r30, 0x23	; 35
    2836:	f7 4d       	sbci	r31, 0xD7	; 215
    2838:	60 81       	ld	r22, Z
    283a:	8b e0       	ldi	r24, 0x0B	; 11
    283c:	90 e2       	ldi	r25, 0x20	; 32
    283e:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2842:	88 23       	and	r24, r24
    2844:	11 f0       	breq	.+4      	; 0x284a <__vector_61+0xc12>
					{
						i++;
    2846:	0f 5f       	subi	r16, 0xFF	; 255
    2848:	1f 4f       	sbci	r17, 0xFF	; 255
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    284a:	10 16       	cp	r1, r16
    284c:	11 06       	cpc	r1, r17
    284e:	8c f7       	brge	.-30     	; 0x2832 <__vector_61+0xbfa>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2850:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda
    2854:	10 92 5d 29 	sts	0x295D, r1
    2858:	8c c6       	rjmp	.+3352   	; 0x3572 <__vector_61+0x193a>
		}
	}			
	//PODESAVANJE FET izlaza i servoa - 6
	else if(receiveArray[0] == 6)					//provera funkcijskog bajta 
    285a:	80 91 6e 29 	lds	r24, 0x296E
    285e:	86 30       	cpi	r24, 0x06	; 6
    2860:	09 f0       	breq	.+2      	; 0x2864 <__vector_61+0xc2c>
    2862:	56 c0       	rjmp	.+172    	; 0x2910 <__vector_61+0xcd8>
	{
		if(RX_i_E1 >= 7)							//stigla je cela poruka	(11)
    2864:	80 91 5d 29 	lds	r24, 0x295D
    2868:	87 30       	cpi	r24, 0x07	; 7
    286a:	08 f4       	brcc	.+2      	; 0x286e <__vector_61+0xc36>
    286c:	82 c6       	rjmp	.+3332   	; 0x3572 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    286e:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				PORTC.OUT |= receiveArray[1] & receiveArray[2];	//izlazi + maska
    2872:	e0 e4       	ldi	r30, 0x40	; 64
    2874:	f6 e0       	ldi	r31, 0x06	; 6
    2876:	94 81       	ldd	r25, Z+4	; 0x04
    2878:	4f e6       	ldi	r20, 0x6F	; 111
    287a:	59 e2       	ldi	r21, 0x29	; 41
    287c:	da 01       	movw	r26, r20
    287e:	8c 91       	ld	r24, X
    2880:	60 e7       	ldi	r22, 0x70	; 112
    2882:	79 e2       	ldi	r23, 0x29	; 41
    2884:	db 01       	movw	r26, r22
    2886:	2c 91       	ld	r18, X
    2888:	82 23       	and	r24, r18
    288a:	89 2b       	or	r24, r25
    288c:	84 83       	std	Z+4, r24	; 0x04
				PORTC.OUT &= ~(receiveArray[1] ^ receiveArray[2]);	//izlazi + maska
    288e:	94 81       	ldd	r25, Z+4	; 0x04
    2890:	da 01       	movw	r26, r20
    2892:	8c 91       	ld	r24, X
    2894:	db 01       	movw	r26, r22
    2896:	2c 91       	ld	r18, X
    2898:	82 27       	eor	r24, r18
    289a:	80 95       	com	r24
    289c:	89 23       	and	r24, r25
    289e:	84 83       	std	Z+4, r24	; 0x04
				
				//120 - nulti polozaj, 280 - krajnji polozaj
				TCF0.CCA = receiveArray[3] + 120;
    28a0:	80 91 71 29 	lds	r24, 0x2971
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	88 58       	subi	r24, 0x88	; 136
    28a8:	9f 4f       	sbci	r25, 0xFF	; 255
    28aa:	e0 e0       	ldi	r30, 0x00	; 0
    28ac:	fb e0       	ldi	r31, 0x0B	; 11
    28ae:	80 a7       	std	Z+40, r24	; 0x28
    28b0:	91 a7       	std	Z+41, r25	; 0x29
				TCF0.CCB = receiveArray[4] + 120;
    28b2:	80 91 72 29 	lds	r24, 0x2972
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	88 58       	subi	r24, 0x88	; 136
    28ba:	9f 4f       	sbci	r25, 0xFF	; 255
    28bc:	82 a7       	std	Z+42, r24	; 0x2a
    28be:	93 a7       	std	Z+43, r25	; 0x2b
				TCF0.CCC = receiveArray[5] + 120;
    28c0:	80 91 73 29 	lds	r24, 0x2973
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	88 58       	subi	r24, 0x88	; 136
    28c8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ca:	84 a7       	std	Z+44, r24	; 0x2c
    28cc:	95 a7       	std	Z+45, r25	; 0x2d
				TCF0.CCD = receiveArray[6] + 120;
    28ce:	80 91 74 29 	lds	r24, 0x2974
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	88 58       	subi	r24, 0x88	; 136
    28d6:	9f 4f       	sbci	r25, 0xFF	; 255
    28d8:	86 a7       	std	Z+46, r24	; 0x2e
    28da:	97 a7       	std	Z+47, r25	; 0x2f
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    28dc:	80 91 6e 29 	lds	r24, 0x296E
    28e0:	80 93 dd 28 	sts	0x28DD, r24
				TCF0.CCB = receiveArray[4] + 120;
				TCF0.CCC = receiveArray[5] + 120;
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
    28e4:	00 e0       	ldi	r16, 0x00	; 0
    28e6:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    28e8:	f8 01       	movw	r30, r16
    28ea:	e3 52       	subi	r30, 0x23	; 35
    28ec:	f7 4d       	sbci	r31, 0xD7	; 215
    28ee:	60 81       	ld	r22, Z
    28f0:	8b e0       	ldi	r24, 0x0B	; 11
    28f2:	90 e2       	ldi	r25, 0x20	; 32
    28f4:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    28f8:	88 23       	and	r24, r24
    28fa:	11 f0       	breq	.+4      	; 0x2900 <__vector_61+0xcc8>
					{
						i++;
    28fc:	0f 5f       	subi	r16, 0xFF	; 255
    28fe:	1f 4f       	sbci	r17, 0xFF	; 255
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2900:	10 16       	cp	r1, r16
    2902:	11 06       	cpc	r1, r17
    2904:	8c f7       	brge	.-30     	; 0x28e8 <__vector_61+0xcb0>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2906:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
    290a:	10 92 5d 29 	sts	0x295D, r1
    290e:	31 c6       	rjmp	.+3170   	; 0x3572 <__vector_61+0x193a>
		}		
	}		
	//Upis trenutne pozicije - 7
	else if(receiveArray[0] == 7)					//provera funkcijskog bajta
    2910:	80 91 6e 29 	lds	r24, 0x296E
    2914:	87 30       	cpi	r24, 0x07	; 7
    2916:	09 f0       	breq	.+2      	; 0x291a <__vector_61+0xce2>
    2918:	7d c1       	rjmp	.+762    	; 0x2c14 <__vector_61+0xfdc>
	{
		if(RX_i_E1 >= 7)							//stigla je cela poruka	(11)
    291a:	80 91 5d 29 	lds	r24, 0x295D
    291e:	87 30       	cpi	r24, 0x07	; 7
    2920:	08 f4       	brcc	.+2      	; 0x2924 <__vector_61+0xcec>
    2922:	27 c6       	rjmp	.+3150   	; 0x3572 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2924:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//x_pos
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2928:	80 91 6f 29 	lds	r24, 0x296F
    292c:	8f 3f       	cpi	r24, 0xFF	; 255
    292e:	29 f4       	brne	.+10     	; 0x293a <__vector_61+0xd02>
    2930:	80 91 70 29 	lds	r24, 0x2970
    2934:	8f 3f       	cpi	r24, 0xFF	; 255
    2936:	09 f4       	brne	.+2      	; 0x293a <__vector_61+0xd02>
    2938:	6d c0       	rjmp	.+218    	; 0x2a14 <__vector_61+0xddc>
				{
					X_pos = 0;
    293a:	10 92 23 2e 	sts	0x2E23, r1
    293e:	10 92 24 2e 	sts	0x2E24, r1
    2942:	10 92 25 2e 	sts	0x2E25, r1
    2946:	10 92 26 2e 	sts	0x2E26, r1
					X_pos |= (int)receiveArray[1] << 8;
    294a:	20 91 6f 29 	lds	r18, 0x296F
    294e:	40 91 23 2e 	lds	r20, 0x2E23
    2952:	50 91 24 2e 	lds	r21, 0x2E24
    2956:	60 91 25 2e 	lds	r22, 0x2E25
    295a:	70 91 26 2e 	lds	r23, 0x2E26
    295e:	92 2f       	mov	r25, r18
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	aa 27       	eor	r26, r26
    2964:	97 fd       	sbrc	r25, 7
    2966:	a0 95       	com	r26
    2968:	ba 2f       	mov	r27, r26
    296a:	84 2b       	or	r24, r20
    296c:	95 2b       	or	r25, r21
    296e:	a6 2b       	or	r26, r22
    2970:	b7 2b       	or	r27, r23
    2972:	80 93 23 2e 	sts	0x2E23, r24
    2976:	90 93 24 2e 	sts	0x2E24, r25
    297a:	a0 93 25 2e 	sts	0x2E25, r26
    297e:	b0 93 26 2e 	sts	0x2E26, r27
					X_pos |= (int)receiveArray[2];
    2982:	20 91 70 29 	lds	r18, 0x2970
    2986:	80 91 23 2e 	lds	r24, 0x2E23
    298a:	90 91 24 2e 	lds	r25, 0x2E24
    298e:	a0 91 25 2e 	lds	r26, 0x2E25
    2992:	b0 91 26 2e 	lds	r27, 0x2E26
    2996:	82 2b       	or	r24, r18
    2998:	80 93 23 2e 	sts	0x2E23, r24
    299c:	90 93 24 2e 	sts	0x2E24, r25
    29a0:	a0 93 25 2e 	sts	0x2E25, r26
    29a4:	b0 93 26 2e 	sts	0x2E26, r27
					X_pos = (X_pos * scale_factor_for_mm);
    29a8:	a0 91 00 2e 	lds	r26, 0x2E00
    29ac:	b0 91 01 2e 	lds	r27, 0x2E01
    29b0:	20 91 23 2e 	lds	r18, 0x2E23
    29b4:	30 91 24 2e 	lds	r19, 0x2E24
    29b8:	40 91 25 2e 	lds	r20, 0x2E25
    29bc:	50 91 26 2e 	lds	r21, 0x2E26
    29c0:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    29c4:	60 93 23 2e 	sts	0x2E23, r22
    29c8:	70 93 24 2e 	sts	0x2E24, r23
    29cc:	80 93 25 2e 	sts	0x2E25, r24
    29d0:	90 93 26 2e 	sts	0x2E26, r25
					X_cilj = X_pos;
    29d4:	80 91 23 2e 	lds	r24, 0x2E23
    29d8:	90 91 24 2e 	lds	r25, 0x2E24
    29dc:	a0 91 25 2e 	lds	r26, 0x2E25
    29e0:	b0 91 26 2e 	lds	r27, 0x2E26
    29e4:	80 93 ae 24 	sts	0x24AE, r24
    29e8:	90 93 af 24 	sts	0x24AF, r25
    29ec:	a0 93 b0 24 	sts	0x24B0, r26
    29f0:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj_stari = X_pos;
    29f4:	80 91 23 2e 	lds	r24, 0x2E23
    29f8:	90 91 24 2e 	lds	r25, 0x2E24
    29fc:	a0 91 25 2e 	lds	r26, 0x2E25
    2a00:	b0 91 26 2e 	lds	r27, 0x2E26
    2a04:	80 93 31 2e 	sts	0x2E31, r24
    2a08:	90 93 32 2e 	sts	0x2E32, r25
    2a0c:	a0 93 33 2e 	sts	0x2E33, r26
    2a10:	b0 93 34 2e 	sts	0x2E34, r27
				}
				//Y_pos
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2a14:	80 91 71 29 	lds	r24, 0x2971
    2a18:	8f 3f       	cpi	r24, 0xFF	; 255
    2a1a:	29 f4       	brne	.+10     	; 0x2a26 <__vector_61+0xdee>
    2a1c:	80 91 72 29 	lds	r24, 0x2972
    2a20:	8f 3f       	cpi	r24, 0xFF	; 255
    2a22:	09 f4       	brne	.+2      	; 0x2a26 <__vector_61+0xdee>
    2a24:	6d c0       	rjmp	.+218    	; 0x2b00 <__vector_61+0xec8>
				{
					Y_pos = 0;
    2a26:	10 92 02 2a 	sts	0x2A02, r1
    2a2a:	10 92 03 2a 	sts	0x2A03, r1
    2a2e:	10 92 04 2a 	sts	0x2A04, r1
    2a32:	10 92 05 2a 	sts	0x2A05, r1
					Y_pos |= (int)receiveArray[3] << 8;
    2a36:	20 91 71 29 	lds	r18, 0x2971
    2a3a:	40 91 02 2a 	lds	r20, 0x2A02
    2a3e:	50 91 03 2a 	lds	r21, 0x2A03
    2a42:	60 91 04 2a 	lds	r22, 0x2A04
    2a46:	70 91 05 2a 	lds	r23, 0x2A05
    2a4a:	92 2f       	mov	r25, r18
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	aa 27       	eor	r26, r26
    2a50:	97 fd       	sbrc	r25, 7
    2a52:	a0 95       	com	r26
    2a54:	ba 2f       	mov	r27, r26
    2a56:	84 2b       	or	r24, r20
    2a58:	95 2b       	or	r25, r21
    2a5a:	a6 2b       	or	r26, r22
    2a5c:	b7 2b       	or	r27, r23
    2a5e:	80 93 02 2a 	sts	0x2A02, r24
    2a62:	90 93 03 2a 	sts	0x2A03, r25
    2a66:	a0 93 04 2a 	sts	0x2A04, r26
    2a6a:	b0 93 05 2a 	sts	0x2A05, r27
					Y_pos |= (int)receiveArray[4];
    2a6e:	20 91 72 29 	lds	r18, 0x2972
    2a72:	80 91 02 2a 	lds	r24, 0x2A02
    2a76:	90 91 03 2a 	lds	r25, 0x2A03
    2a7a:	a0 91 04 2a 	lds	r26, 0x2A04
    2a7e:	b0 91 05 2a 	lds	r27, 0x2A05
    2a82:	82 2b       	or	r24, r18
    2a84:	80 93 02 2a 	sts	0x2A02, r24
    2a88:	90 93 03 2a 	sts	0x2A03, r25
    2a8c:	a0 93 04 2a 	sts	0x2A04, r26
    2a90:	b0 93 05 2a 	sts	0x2A05, r27
					Y_pos = Y_cilj * scale_factor_for_mm;
    2a94:	a0 91 00 2e 	lds	r26, 0x2E00
    2a98:	b0 91 01 2e 	lds	r27, 0x2E01
    2a9c:	20 91 0b 2e 	lds	r18, 0x2E0B
    2aa0:	30 91 0c 2e 	lds	r19, 0x2E0C
    2aa4:	40 91 0d 2e 	lds	r20, 0x2E0D
    2aa8:	50 91 0e 2e 	lds	r21, 0x2E0E
    2aac:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    2ab0:	60 93 02 2a 	sts	0x2A02, r22
    2ab4:	70 93 03 2a 	sts	0x2A03, r23
    2ab8:	80 93 04 2a 	sts	0x2A04, r24
    2abc:	90 93 05 2a 	sts	0x2A05, r25
					Y_cilj = Y_pos;
    2ac0:	80 91 02 2a 	lds	r24, 0x2A02
    2ac4:	90 91 03 2a 	lds	r25, 0x2A03
    2ac8:	a0 91 04 2a 	lds	r26, 0x2A04
    2acc:	b0 91 05 2a 	lds	r27, 0x2A05
    2ad0:	80 93 0b 2e 	sts	0x2E0B, r24
    2ad4:	90 93 0c 2e 	sts	0x2E0C, r25
    2ad8:	a0 93 0d 2e 	sts	0x2E0D, r26
    2adc:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj_stari = Y_pos;
    2ae0:	80 91 02 2a 	lds	r24, 0x2A02
    2ae4:	90 91 03 2a 	lds	r25, 0x2A03
    2ae8:	a0 91 04 2a 	lds	r26, 0x2A04
    2aec:	b0 91 05 2a 	lds	r27, 0x2A05
    2af0:	80 93 70 2e 	sts	0x2E70, r24
    2af4:	90 93 71 2e 	sts	0x2E71, r25
    2af8:	a0 93 72 2e 	sts	0x2E72, r26
    2afc:	b0 93 73 2e 	sts	0x2E73, r27
				}
				
				//teta
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    2b00:	80 91 73 29 	lds	r24, 0x2973
    2b04:	8f 3f       	cpi	r24, 0xFF	; 255
    2b06:	29 f4       	brne	.+10     	; 0x2b12 <__vector_61+0xeda>
    2b08:	80 91 74 29 	lds	r24, 0x2974
    2b0c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <__vector_61+0xeda>
    2b10:	67 c0       	rjmp	.+206    	; 0x2be0 <__vector_61+0xfa8>
				{
					teta = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    2b12:	10 92 83 32 	sts	0x3283, r1
    2b16:	10 92 84 32 	sts	0x3284, r1
    2b1a:	10 92 85 32 	sts	0x3285, r1
    2b1e:	10 92 86 32 	sts	0x3286, r1
					teta |= (int)receiveArray[5] << 8;
    2b22:	20 91 73 29 	lds	r18, 0x2973
    2b26:	40 91 83 32 	lds	r20, 0x3283
    2b2a:	50 91 84 32 	lds	r21, 0x3284
    2b2e:	60 91 85 32 	lds	r22, 0x3285
    2b32:	70 91 86 32 	lds	r23, 0x3286
    2b36:	92 2f       	mov	r25, r18
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	aa 27       	eor	r26, r26
    2b3c:	97 fd       	sbrc	r25, 7
    2b3e:	a0 95       	com	r26
    2b40:	ba 2f       	mov	r27, r26
    2b42:	84 2b       	or	r24, r20
    2b44:	95 2b       	or	r25, r21
    2b46:	a6 2b       	or	r26, r22
    2b48:	b7 2b       	or	r27, r23
    2b4a:	80 93 83 32 	sts	0x3283, r24
    2b4e:	90 93 84 32 	sts	0x3284, r25
    2b52:	a0 93 85 32 	sts	0x3285, r26
    2b56:	b0 93 86 32 	sts	0x3286, r27
					teta |= (int)receiveArray[6];
    2b5a:	20 91 74 29 	lds	r18, 0x2974
    2b5e:	80 91 83 32 	lds	r24, 0x3283
    2b62:	90 91 84 32 	lds	r25, 0x3284
    2b66:	a0 91 85 32 	lds	r26, 0x3285
    2b6a:	b0 91 86 32 	lds	r27, 0x3286
    2b6e:	82 2b       	or	r24, r18
    2b70:	80 93 83 32 	sts	0x3283, r24
    2b74:	90 93 84 32 	sts	0x3284, r25
    2b78:	a0 93 85 32 	sts	0x3285, r26
    2b7c:	b0 93 86 32 	sts	0x3286, r27
					teta = (teta * krug360) / 360;
    2b80:	20 91 83 32 	lds	r18, 0x3283
    2b84:	30 91 84 32 	lds	r19, 0x3284
    2b88:	40 91 85 32 	lds	r20, 0x3285
    2b8c:	50 91 86 32 	lds	r21, 0x3286
    2b90:	60 91 75 32 	lds	r22, 0x3275
    2b94:	70 91 76 32 	lds	r23, 0x3276
    2b98:	80 91 77 32 	lds	r24, 0x3277
    2b9c:	90 91 78 32 	lds	r25, 0x3278
    2ba0:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__mulsi3>
    2ba4:	28 e6       	ldi	r18, 0x68	; 104
    2ba6:	31 e0       	ldi	r19, 0x01	; 1
    2ba8:	40 e0       	ldi	r20, 0x00	; 0
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    2bb0:	20 93 83 32 	sts	0x3283, r18
    2bb4:	30 93 84 32 	sts	0x3284, r19
    2bb8:	40 93 85 32 	sts	0x3285, r20
    2bbc:	50 93 86 32 	sts	0x3286, r21
					teta_cilj = teta;
    2bc0:	80 91 83 32 	lds	r24, 0x3283
    2bc4:	90 91 84 32 	lds	r25, 0x3284
    2bc8:	a0 91 85 32 	lds	r26, 0x3285
    2bcc:	b0 91 86 32 	lds	r27, 0x3286
    2bd0:	80 93 cc 24 	sts	0x24CC, r24
    2bd4:	90 93 cd 24 	sts	0x24CD, r25
    2bd8:	a0 93 ce 24 	sts	0x24CE, r26
    2bdc:	b0 93 cf 24 	sts	0x24CF, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2be0:	80 91 6e 29 	lds	r24, 0x296E
    2be4:	80 93 dd 28 	sts	0x28DD, r24
					teta = (teta * krug360) / 360;
					teta_cilj = teta;
				}
				
				//slanje odgovora
				i = 0;
    2be8:	00 e0       	ldi	r16, 0x00	; 0
    2bea:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2bec:	f8 01       	movw	r30, r16
    2bee:	e3 52       	subi	r30, 0x23	; 35
    2bf0:	f7 4d       	sbci	r31, 0xD7	; 215
    2bf2:	60 81       	ld	r22, Z
    2bf4:	8b e0       	ldi	r24, 0x0B	; 11
    2bf6:	90 e2       	ldi	r25, 0x20	; 32
    2bf8:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2bfc:	88 23       	and	r24, r24
    2bfe:	11 f0       	breq	.+4      	; 0x2c04 <__vector_61+0xfcc>
					{
						i++;
    2c00:	0f 5f       	subi	r16, 0xFF	; 255
    2c02:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2c04:	10 16       	cp	r1, r16
    2c06:	11 06       	cpc	r1, r17
    2c08:	8c f7       	brge	.-30     	; 0x2bec <__vector_61+0xfb4>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2c0a:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
    2c0e:	10 92 5d 29 	sts	0x295D, r1
    2c12:	af c4       	rjmp	.+2398   	; 0x3572 <__vector_61+0x193a>
		}
	}
	//Total Stop - 8
	else if(receiveArray[0] == 8)					//provera funkcijskog bajta
    2c14:	80 91 6e 29 	lds	r24, 0x296E
    2c18:	88 30       	cpi	r24, 0x08	; 8
    2c1a:	d9 f5       	brne	.+118    	; 0x2c92 <__vector_61+0x105a>
	{
		if(RX_i_E1 >= 3)							//stigla je cela poruka
    2c1c:	80 91 5d 29 	lds	r24, 0x295D
    2c20:	83 30       	cpi	r24, 0x03	; 3
    2c22:	08 f4       	brcc	.+2      	; 0x2c26 <__vector_61+0xfee>
    2c24:	a6 c4       	rjmp	.+2380   	; 0x3572 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2c26:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				
				if(receiveArray[1] == 0x01)
    2c2a:	80 91 6f 29 	lds	r24, 0x296F
    2c2e:	81 30       	cpi	r24, 0x01	; 1
    2c30:	39 f4       	brne	.+14     	; 0x2c40 <__vector_61+0x1008>
				{
					stop_PID_levi = 1;
    2c32:	80 93 f2 2d 	sts	0x2DF2, r24
					PID_brzina_L = 0;
    2c36:	10 92 7b 2e 	sts	0x2E7B, r1
    2c3a:	10 92 7c 2e 	sts	0x2E7C, r1
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <__vector_61+0x100c>
				}				
				else
					stop_PID_levi = 0;
    2c40:	10 92 f2 2d 	sts	0x2DF2, r1
					
				if(receiveArray[2] == 0x01)
    2c44:	80 91 70 29 	lds	r24, 0x2970
    2c48:	81 30       	cpi	r24, 0x01	; 1
    2c4a:	39 f4       	brne	.+14     	; 0x2c5a <__vector_61+0x1022>
				{
					stop_PID_desni = 1;
    2c4c:	80 93 f4 29 	sts	0x29F4, r24
					PID_brzina_R = 0;
    2c50:	10 92 79 2e 	sts	0x2E79, r1
    2c54:	10 92 7a 2e 	sts	0x2E7A, r1
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <__vector_61+0x1026>
				}					
				else
					stop_PID_desni = 0;
    2c5a:	10 92 f4 29 	sts	0x29F4, r1
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2c5e:	80 91 6e 29 	lds	r24, 0x296E
    2c62:	80 93 dd 28 	sts	0x28DD, r24
				}					
				else
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
    2c66:	00 e0       	ldi	r16, 0x00	; 0
    2c68:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2c6a:	f8 01       	movw	r30, r16
    2c6c:	e3 52       	subi	r30, 0x23	; 35
    2c6e:	f7 4d       	sbci	r31, 0xD7	; 215
    2c70:	60 81       	ld	r22, Z
    2c72:	8b e0       	ldi	r24, 0x0B	; 11
    2c74:	90 e2       	ldi	r25, 0x20	; 32
    2c76:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2c7a:	88 23       	and	r24, r24
    2c7c:	11 f0       	breq	.+4      	; 0x2c82 <__vector_61+0x104a>
					{
						i++;
    2c7e:	0f 5f       	subi	r16, 0xFF	; 255
    2c80:	1f 4f       	sbci	r17, 0xFF	; 255
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    2c82:	10 16       	cp	r1, r16
    2c84:	11 06       	cpc	r1, r17
    2c86:	8c f7       	brge	.-30     	; 0x2c6a <__vector_61+0x1032>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2c88:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda
    2c8c:	10 92 5d 29 	sts	0x295D, r1
    2c90:	70 c4       	rjmp	.+2272   	; 0x3572 <__vector_61+0x193a>
		}
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//CIATNJE ADRESIRANOG PARAMETRA - 9
	else if(receiveArray[0] == 9)					//provera funkcijskog bajta
    2c92:	80 91 6e 29 	lds	r24, 0x296E
    2c96:	89 30       	cpi	r24, 0x09	; 9
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <__vector_61+0x1064>
    2c9a:	03 c1       	rjmp	.+518    	; 0x2ea2 <__vector_61+0x126a>
	{
		if(RX_i_E1 >= 6)								//stigla je cela poruka (7)
    2c9c:	80 91 5d 29 	lds	r24, 0x295D
    2ca0:	86 30       	cpi	r24, 0x06	; 6
    2ca2:	08 f4       	brcc	.+2      	; 0x2ca6 <__vector_61+0x106e>
    2ca4:	66 c4       	rjmp	.+2252   	; 0x3572 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena		
    2ca6:	10 92 fb 2d 	sts	0x2DFB, r1
// 			for(i=0; i<=4; i++)						//racunanje CHC
// 				CHC ^= receiveArray[i];

			//if(receiveArray[x] == CHC)			//CHC ok
			{
				adresa_long = 0;
    2caa:	10 92 66 29 	sts	0x2966, r1
    2cae:	10 92 67 29 	sts	0x2967, r1
    2cb2:	10 92 68 29 	sts	0x2968, r1
    2cb6:	10 92 69 29 	sts	0x2969, r1
				adresa_long |= (long)receiveArray[2] << 24;
    2cba:	20 91 70 29 	lds	r18, 0x2970
    2cbe:	80 91 66 29 	lds	r24, 0x2966
    2cc2:	90 91 67 29 	lds	r25, 0x2967
    2cc6:	a0 91 68 29 	lds	r26, 0x2968
    2cca:	b0 91 69 29 	lds	r27, 0x2969
    2cce:	b2 2b       	or	r27, r18
    2cd0:	80 93 66 29 	sts	0x2966, r24
    2cd4:	90 93 67 29 	sts	0x2967, r25
    2cd8:	a0 93 68 29 	sts	0x2968, r26
    2cdc:	b0 93 69 29 	sts	0x2969, r27
				adresa_long |= (long)receiveArray[3] << 16;
    2ce0:	20 91 71 29 	lds	r18, 0x2971
    2ce4:	80 91 66 29 	lds	r24, 0x2966
    2ce8:	90 91 67 29 	lds	r25, 0x2967
    2cec:	a0 91 68 29 	lds	r26, 0x2968
    2cf0:	b0 91 69 29 	lds	r27, 0x2969
    2cf4:	a2 2b       	or	r26, r18
    2cf6:	80 93 66 29 	sts	0x2966, r24
    2cfa:	90 93 67 29 	sts	0x2967, r25
    2cfe:	a0 93 68 29 	sts	0x2968, r26
    2d02:	b0 93 69 29 	sts	0x2969, r27
				adresa_long |= (long)receiveArray[4] << 8;
    2d06:	20 91 72 29 	lds	r18, 0x2972
    2d0a:	80 91 66 29 	lds	r24, 0x2966
    2d0e:	90 91 67 29 	lds	r25, 0x2967
    2d12:	a0 91 68 29 	lds	r26, 0x2968
    2d16:	b0 91 69 29 	lds	r27, 0x2969
    2d1a:	92 2b       	or	r25, r18
    2d1c:	80 93 66 29 	sts	0x2966, r24
    2d20:	90 93 67 29 	sts	0x2967, r25
    2d24:	a0 93 68 29 	sts	0x2968, r26
    2d28:	b0 93 69 29 	sts	0x2969, r27
				adresa_long |= (long)receiveArray[5];
    2d2c:	20 91 73 29 	lds	r18, 0x2973
    2d30:	80 91 66 29 	lds	r24, 0x2966
    2d34:	90 91 67 29 	lds	r25, 0x2967
    2d38:	a0 91 68 29 	lds	r26, 0x2968
    2d3c:	b0 91 69 29 	lds	r27, 0x2969
    2d40:	82 2b       	or	r24, r18
    2d42:	80 93 66 29 	sts	0x2966, r24
    2d46:	90 93 67 29 	sts	0x2967, r25
    2d4a:	a0 93 68 29 	sts	0x2968, r26
    2d4e:	b0 93 69 29 	sts	0x2969, r27
	
				//unsigned long registerValue = mmio32(adresa_long);		// read
					
				if (receiveArray[1] == 1)	//jednobajtna promenljiva
    2d52:	80 91 6f 29 	lds	r24, 0x296F
    2d56:	81 30       	cpi	r24, 0x01	; 1
    2d58:	b1 f4       	brne	.+44     	; 0x2d86 <__vector_61+0x114e>
				{
					sendArray[4] = mmio32(adresa_long);
    2d5a:	80 91 66 29 	lds	r24, 0x2966
    2d5e:	90 91 67 29 	lds	r25, 0x2967
    2d62:	a0 91 68 29 	lds	r26, 0x2968
    2d66:	b0 91 69 29 	lds	r27, 0x2969
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	a2 81       	ldd	r26, Z+2	; 0x02
    2d72:	b3 81       	ldd	r27, Z+3	; 0x03
    2d74:	80 93 e1 28 	sts	0x28E1, r24
					sendArray[3] = 0;
    2d78:	10 92 e0 28 	sts	0x28E0, r1
					sendArray[2] = 0;
    2d7c:	10 92 df 28 	sts	0x28DF, r1
					sendArray[1] = 0;
    2d80:	10 92 de 28 	sts	0x28DE, r1
    2d84:	74 c0       	rjmp	.+232    	; 0x2e6e <__vector_61+0x1236>
				}
				else if (receiveArray[1] == 2) //dvobajtna promenljiva
    2d86:	80 91 6f 29 	lds	r24, 0x296F
    2d8a:	82 30       	cpi	r24, 0x02	; 2
    2d8c:	31 f5       	brne	.+76     	; 0x2dda <__vector_61+0x11a2>
				{
					sendArray[4] = mmio32(adresa_long);
    2d8e:	80 91 66 29 	lds	r24, 0x2966
    2d92:	90 91 67 29 	lds	r25, 0x2967
    2d96:	a0 91 68 29 	lds	r26, 0x2968
    2d9a:	b0 91 69 29 	lds	r27, 0x2969
    2d9e:	fc 01       	movw	r30, r24
    2da0:	80 81       	ld	r24, Z
    2da2:	91 81       	ldd	r25, Z+1	; 0x01
    2da4:	a2 81       	ldd	r26, Z+2	; 0x02
    2da6:	b3 81       	ldd	r27, Z+3	; 0x03
    2da8:	80 93 e1 28 	sts	0x28E1, r24
					sendArray[3] = mmio32(adresa_long+1);
    2dac:	80 91 66 29 	lds	r24, 0x2966
    2db0:	90 91 67 29 	lds	r25, 0x2967
    2db4:	a0 91 68 29 	lds	r26, 0x2968
    2db8:	b0 91 69 29 	lds	r27, 0x2969
    2dbc:	01 96       	adiw	r24, 0x01	; 1
    2dbe:	a1 1d       	adc	r26, r1
    2dc0:	b1 1d       	adc	r27, r1
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	a2 81       	ldd	r26, Z+2	; 0x02
    2dca:	b3 81       	ldd	r27, Z+3	; 0x03
    2dcc:	80 93 e0 28 	sts	0x28E0, r24
					sendArray[2] = 0;
    2dd0:	10 92 df 28 	sts	0x28DF, r1
					sendArray[1] = 0;
    2dd4:	10 92 de 28 	sts	0x28DE, r1
    2dd8:	4a c0       	rjmp	.+148    	; 0x2e6e <__vector_61+0x1236>
				}
				else if (receiveArray[1] == 4)	//cetvorobajtna promenljiva
    2dda:	80 91 6f 29 	lds	r24, 0x296F
    2dde:	84 30       	cpi	r24, 0x04	; 4
    2de0:	09 f0       	breq	.+2      	; 0x2de4 <__vector_61+0x11ac>
    2de2:	45 c0       	rjmp	.+138    	; 0x2e6e <__vector_61+0x1236>
				{
					sendArray[4] = mmio32(adresa_long);
    2de4:	80 91 66 29 	lds	r24, 0x2966
    2de8:	90 91 67 29 	lds	r25, 0x2967
    2dec:	a0 91 68 29 	lds	r26, 0x2968
    2df0:	b0 91 69 29 	lds	r27, 0x2969
    2df4:	fc 01       	movw	r30, r24
    2df6:	80 81       	ld	r24, Z
    2df8:	91 81       	ldd	r25, Z+1	; 0x01
    2dfa:	a2 81       	ldd	r26, Z+2	; 0x02
    2dfc:	b3 81       	ldd	r27, Z+3	; 0x03
    2dfe:	80 93 e1 28 	sts	0x28E1, r24
					sendArray[3] = mmio32(adresa_long+1);
    2e02:	80 91 66 29 	lds	r24, 0x2966
    2e06:	90 91 67 29 	lds	r25, 0x2967
    2e0a:	a0 91 68 29 	lds	r26, 0x2968
    2e0e:	b0 91 69 29 	lds	r27, 0x2969
    2e12:	01 96       	adiw	r24, 0x01	; 1
    2e14:	a1 1d       	adc	r26, r1
    2e16:	b1 1d       	adc	r27, r1
    2e18:	fc 01       	movw	r30, r24
    2e1a:	80 81       	ld	r24, Z
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e20:	b3 81       	ldd	r27, Z+3	; 0x03
    2e22:	80 93 e0 28 	sts	0x28E0, r24
					sendArray[2] = mmio32(adresa_long+2);
    2e26:	80 91 66 29 	lds	r24, 0x2966
    2e2a:	90 91 67 29 	lds	r25, 0x2967
    2e2e:	a0 91 68 29 	lds	r26, 0x2968
    2e32:	b0 91 69 29 	lds	r27, 0x2969
    2e36:	02 96       	adiw	r24, 0x02	; 2
    2e38:	a1 1d       	adc	r26, r1
    2e3a:	b1 1d       	adc	r27, r1
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	80 81       	ld	r24, Z
    2e40:	91 81       	ldd	r25, Z+1	; 0x01
    2e42:	a2 81       	ldd	r26, Z+2	; 0x02
    2e44:	b3 81       	ldd	r27, Z+3	; 0x03
    2e46:	80 93 df 28 	sts	0x28DF, r24
					sendArray[1] = mmio32(adresa_long+3);
    2e4a:	80 91 66 29 	lds	r24, 0x2966
    2e4e:	90 91 67 29 	lds	r25, 0x2967
    2e52:	a0 91 68 29 	lds	r26, 0x2968
    2e56:	b0 91 69 29 	lds	r27, 0x2969
    2e5a:	03 96       	adiw	r24, 0x03	; 3
    2e5c:	a1 1d       	adc	r26, r1
    2e5e:	b1 1d       	adc	r27, r1
    2e60:	fc 01       	movw	r30, r24
    2e62:	80 81       	ld	r24, Z
    2e64:	91 81       	ldd	r25, Z+1	; 0x01
    2e66:	a2 81       	ldd	r26, Z+2	; 0x02
    2e68:	b3 81       	ldd	r27, Z+3	; 0x03
    2e6a:	80 93 de 28 	sts	0x28DE, r24
				}
								
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    2e6e:	80 91 6e 29 	lds	r24, 0x296E
    2e72:	80 93 dd 28 	sts	0x28DD, r24
					sendArray[2] = mmio32(adresa_long+2);
					sendArray[1] = mmio32(adresa_long+3);
				}
								
				//slanje odgovora
				i = 0;
    2e76:	00 e0       	ldi	r16, 0x00	; 0
    2e78:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i <= 4)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    2e7a:	f8 01       	movw	r30, r16
    2e7c:	e3 52       	subi	r30, 0x23	; 35
    2e7e:	f7 4d       	sbci	r31, 0xD7	; 215
    2e80:	60 81       	ld	r22, Z
    2e82:	8b e0       	ldi	r24, 0x0B	; 11
    2e84:	90 e2       	ldi	r25, 0x20	; 32
    2e86:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[5] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    2e8a:	88 23       	and	r24, r24
    2e8c:	11 f0       	breq	.+4      	; 0x2e92 <__vector_61+0x125a>
					{
						i++;
    2e8e:	0f 5f       	subi	r16, 0xFF	; 255
    2e90:	1f 4f       	sbci	r17, 0xFF	; 255
				}
								
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i <= 4)
    2e92:	05 30       	cpi	r16, 0x05	; 5
    2e94:	11 05       	cpc	r17, r1
    2e96:	8c f3       	brlt	.-30     	; 0x2e7a <__vector_61+0x1242>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    2e98:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    2e9c:	10 92 5d 29 	sts	0x295D, r1
    2ea0:	68 c3       	rjmp	.+1744   	; 0x3572 <__vector_61+0x193a>
		}					
	}
	//UPIS U ADRESIRANU PROMENLJIVU - 10
	else if(receiveArray[0] == 10)					//provera funkcijskog bajta
    2ea2:	80 91 6e 29 	lds	r24, 0x296E
    2ea6:	8a 30       	cpi	r24, 0x0A	; 10
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <__vector_61+0x1274>
    2eaa:	8e c1       	rjmp	.+796    	; 0x31c8 <__vector_61+0x1590>
	{
		if(RX_i_E1 >= 10)								//stigla je cela poruka (1+1+4+4+1)
    2eac:	80 91 5d 29 	lds	r24, 0x295D
    2eb0:	8a 30       	cpi	r24, 0x0A	; 10
    2eb2:	08 f4       	brcc	.+2      	; 0x2eb6 <__vector_61+0x127e>
    2eb4:	5e c3       	rjmp	.+1724   	; 0x3572 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    2eb6:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				adresa_long = 0;
    2eba:	10 92 66 29 	sts	0x2966, r1
    2ebe:	10 92 67 29 	sts	0x2967, r1
    2ec2:	10 92 68 29 	sts	0x2968, r1
    2ec6:	10 92 69 29 	sts	0x2969, r1
				adresa_long |= (long)receiveArray[2] << 24;
    2eca:	20 91 70 29 	lds	r18, 0x2970
    2ece:	80 91 66 29 	lds	r24, 0x2966
    2ed2:	90 91 67 29 	lds	r25, 0x2967
    2ed6:	a0 91 68 29 	lds	r26, 0x2968
    2eda:	b0 91 69 29 	lds	r27, 0x2969
    2ede:	b2 2b       	or	r27, r18
    2ee0:	80 93 66 29 	sts	0x2966, r24
    2ee4:	90 93 67 29 	sts	0x2967, r25
    2ee8:	a0 93 68 29 	sts	0x2968, r26
    2eec:	b0 93 69 29 	sts	0x2969, r27
				adresa_long |= (long)receiveArray[3] << 16;
    2ef0:	20 91 71 29 	lds	r18, 0x2971
    2ef4:	80 91 66 29 	lds	r24, 0x2966
    2ef8:	90 91 67 29 	lds	r25, 0x2967
    2efc:	a0 91 68 29 	lds	r26, 0x2968
    2f00:	b0 91 69 29 	lds	r27, 0x2969
    2f04:	a2 2b       	or	r26, r18
    2f06:	80 93 66 29 	sts	0x2966, r24
    2f0a:	90 93 67 29 	sts	0x2967, r25
    2f0e:	a0 93 68 29 	sts	0x2968, r26
    2f12:	b0 93 69 29 	sts	0x2969, r27
				adresa_long |= (long)receiveArray[4] << 8;
    2f16:	20 91 72 29 	lds	r18, 0x2972
    2f1a:	80 91 66 29 	lds	r24, 0x2966
    2f1e:	90 91 67 29 	lds	r25, 0x2967
    2f22:	a0 91 68 29 	lds	r26, 0x2968
    2f26:	b0 91 69 29 	lds	r27, 0x2969
    2f2a:	92 2b       	or	r25, r18
    2f2c:	80 93 66 29 	sts	0x2966, r24
    2f30:	90 93 67 29 	sts	0x2967, r25
    2f34:	a0 93 68 29 	sts	0x2968, r26
    2f38:	b0 93 69 29 	sts	0x2969, r27
				adresa_long |= (long)receiveArray[5];
    2f3c:	20 91 73 29 	lds	r18, 0x2973
    2f40:	80 91 66 29 	lds	r24, 0x2966
    2f44:	90 91 67 29 	lds	r25, 0x2967
    2f48:	a0 91 68 29 	lds	r26, 0x2968
    2f4c:	b0 91 69 29 	lds	r27, 0x2969
    2f50:	82 2b       	or	r24, r18
    2f52:	80 93 66 29 	sts	0x2966, r24
    2f56:	90 93 67 29 	sts	0x2967, r25
    2f5a:	a0 93 68 29 	sts	0x2968, r26
    2f5e:	b0 93 69 29 	sts	0x2969, r27

				// write
				if (receiveArray[1] == 4)	//cetvorobajtna promenljiva
    2f62:	80 91 6f 29 	lds	r24, 0x296F
    2f66:	84 30       	cpi	r24, 0x04	; 4
    2f68:	09 f0       	breq	.+2      	; 0x2f6c <__vector_61+0x1334>
    2f6a:	97 c0       	rjmp	.+302    	; 0x309a <__vector_61+0x1462>
				{
					mmio32(adresa_long) = receiveArray[9];                     
    2f6c:	80 91 66 29 	lds	r24, 0x2966
    2f70:	90 91 67 29 	lds	r25, 0x2967
    2f74:	a0 91 68 29 	lds	r26, 0x2968
    2f78:	b0 91 69 29 	lds	r27, 0x2969
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	80 91 77 29 	lds	r24, 0x2977
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	a0 e0       	ldi	r26, 0x00	; 0
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	80 83       	st	Z, r24
    2f8a:	91 83       	std	Z+1, r25	; 0x01
    2f8c:	a2 83       	std	Z+2, r26	; 0x02
    2f8e:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+1) = receiveArray[8];					
    2f90:	80 91 66 29 	lds	r24, 0x2966
    2f94:	90 91 67 29 	lds	r25, 0x2967
    2f98:	a0 91 68 29 	lds	r26, 0x2968
    2f9c:	b0 91 69 29 	lds	r27, 0x2969
    2fa0:	01 96       	adiw	r24, 0x01	; 1
    2fa2:	a1 1d       	adc	r26, r1
    2fa4:	b1 1d       	adc	r27, r1
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	80 91 76 29 	lds	r24, 0x2976
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a0 e0       	ldi	r26, 0x00	; 0
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	80 83       	st	Z, r24
    2fb4:	91 83       	std	Z+1, r25	; 0x01
    2fb6:	a2 83       	std	Z+2, r26	; 0x02
    2fb8:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+2) = receiveArray[7];
    2fba:	80 91 66 29 	lds	r24, 0x2966
    2fbe:	90 91 67 29 	lds	r25, 0x2967
    2fc2:	a0 91 68 29 	lds	r26, 0x2968
    2fc6:	b0 91 69 29 	lds	r27, 0x2969
    2fca:	02 96       	adiw	r24, 0x02	; 2
    2fcc:	a1 1d       	adc	r26, r1
    2fce:	b1 1d       	adc	r27, r1
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	80 91 75 29 	lds	r24, 0x2975
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	a0 e0       	ldi	r26, 0x00	; 0
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	80 83       	st	Z, r24
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	a2 83       	std	Z+2, r26	; 0x02
    2fe2:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+3) = receiveArray[6];   
    2fe4:	80 91 66 29 	lds	r24, 0x2966
    2fe8:	90 91 67 29 	lds	r25, 0x2967
    2fec:	a0 91 68 29 	lds	r26, 0x2968
    2ff0:	b0 91 69 29 	lds	r27, 0x2969
    2ff4:	03 96       	adiw	r24, 0x03	; 3
    2ff6:	a1 1d       	adc	r26, r1
    2ff8:	b1 1d       	adc	r27, r1
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	80 91 74 29 	lds	r24, 0x2974
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	a0 e0       	ldi	r26, 0x00	; 0
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	80 83       	st	Z, r24
    3008:	91 83       	std	Z+1, r25	; 0x01
    300a:	a2 83       	std	Z+2, r26	; 0x02
    300c:	b3 83       	std	Z+3, r27	; 0x03
					
					sendArray[1] = mmio32(adresa_long+3);
    300e:	80 91 66 29 	lds	r24, 0x2966
    3012:	90 91 67 29 	lds	r25, 0x2967
    3016:	a0 91 68 29 	lds	r26, 0x2968
    301a:	b0 91 69 29 	lds	r27, 0x2969
    301e:	03 96       	adiw	r24, 0x03	; 3
    3020:	a1 1d       	adc	r26, r1
    3022:	b1 1d       	adc	r27, r1
    3024:	fc 01       	movw	r30, r24
    3026:	80 81       	ld	r24, Z
    3028:	91 81       	ldd	r25, Z+1	; 0x01
    302a:	a2 81       	ldd	r26, Z+2	; 0x02
    302c:	b3 81       	ldd	r27, Z+3	; 0x03
    302e:	80 93 de 28 	sts	0x28DE, r24
					sendArray[2] = mmio32(adresa_long+2);
    3032:	80 91 66 29 	lds	r24, 0x2966
    3036:	90 91 67 29 	lds	r25, 0x2967
    303a:	a0 91 68 29 	lds	r26, 0x2968
    303e:	b0 91 69 29 	lds	r27, 0x2969
    3042:	02 96       	adiw	r24, 0x02	; 2
    3044:	a1 1d       	adc	r26, r1
    3046:	b1 1d       	adc	r27, r1
    3048:	fc 01       	movw	r30, r24
    304a:	80 81       	ld	r24, Z
    304c:	91 81       	ldd	r25, Z+1	; 0x01
    304e:	a2 81       	ldd	r26, Z+2	; 0x02
    3050:	b3 81       	ldd	r27, Z+3	; 0x03
    3052:	80 93 df 28 	sts	0x28DF, r24
					sendArray[3] = mmio32(adresa_long+1);
    3056:	80 91 66 29 	lds	r24, 0x2966
    305a:	90 91 67 29 	lds	r25, 0x2967
    305e:	a0 91 68 29 	lds	r26, 0x2968
    3062:	b0 91 69 29 	lds	r27, 0x2969
    3066:	01 96       	adiw	r24, 0x01	; 1
    3068:	a1 1d       	adc	r26, r1
    306a:	b1 1d       	adc	r27, r1
    306c:	fc 01       	movw	r30, r24
    306e:	80 81       	ld	r24, Z
    3070:	91 81       	ldd	r25, Z+1	; 0x01
    3072:	a2 81       	ldd	r26, Z+2	; 0x02
    3074:	b3 81       	ldd	r27, Z+3	; 0x03
    3076:	80 93 e0 28 	sts	0x28E0, r24
					sendArray[4] = mmio32(adresa_long);  
    307a:	80 91 66 29 	lds	r24, 0x2966
    307e:	90 91 67 29 	lds	r25, 0x2967
    3082:	a0 91 68 29 	lds	r26, 0x2968
    3086:	b0 91 69 29 	lds	r27, 0x2969
    308a:	fc 01       	movw	r30, r24
    308c:	80 81       	ld	r24, Z
    308e:	91 81       	ldd	r25, Z+1	; 0x01
    3090:	a2 81       	ldd	r26, Z+2	; 0x02
    3092:	b3 81       	ldd	r27, Z+3	; 0x03
    3094:	80 93 e1 28 	sts	0x28E1, r24
    3098:	7d c0       	rjmp	.+250    	; 0x3194 <__vector_61+0x155c>
				}	
				else if (receiveArray[1] == 2)	//dvobajtna promenljiva
    309a:	80 91 6f 29 	lds	r24, 0x296F
    309e:	82 30       	cpi	r24, 0x02	; 2
    30a0:	09 f0       	breq	.+2      	; 0x30a4 <__vector_61+0x146c>
    30a2:	4d c0       	rjmp	.+154    	; 0x313e <__vector_61+0x1506>
				{
					mmio32(adresa_long) = receiveArray[9];                     
    30a4:	80 91 66 29 	lds	r24, 0x2966
    30a8:	90 91 67 29 	lds	r25, 0x2967
    30ac:	a0 91 68 29 	lds	r26, 0x2968
    30b0:	b0 91 69 29 	lds	r27, 0x2969
    30b4:	fc 01       	movw	r30, r24
    30b6:	80 91 77 29 	lds	r24, 0x2977
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	a0 e0       	ldi	r26, 0x00	; 0
    30be:	b0 e0       	ldi	r27, 0x00	; 0
    30c0:	80 83       	st	Z, r24
    30c2:	91 83       	std	Z+1, r25	; 0x01
    30c4:	a2 83       	std	Z+2, r26	; 0x02
    30c6:	b3 83       	std	Z+3, r27	; 0x03
					mmio32(adresa_long+1) = receiveArray[8];					
    30c8:	80 91 66 29 	lds	r24, 0x2966
    30cc:	90 91 67 29 	lds	r25, 0x2967
    30d0:	a0 91 68 29 	lds	r26, 0x2968
    30d4:	b0 91 69 29 	lds	r27, 0x2969
    30d8:	01 96       	adiw	r24, 0x01	; 1
    30da:	a1 1d       	adc	r26, r1
    30dc:	b1 1d       	adc	r27, r1
    30de:	fc 01       	movw	r30, r24
    30e0:	80 91 76 29 	lds	r24, 0x2976
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	a0 e0       	ldi	r26, 0x00	; 0
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	80 83       	st	Z, r24
    30ec:	91 83       	std	Z+1, r25	; 0x01
    30ee:	a2 83       	std	Z+2, r26	; 0x02
    30f0:	b3 83       	std	Z+3, r27	; 0x03
					
					sendArray[1] = 0;
    30f2:	10 92 de 28 	sts	0x28DE, r1
					sendArray[2] = 0;
    30f6:	10 92 df 28 	sts	0x28DF, r1
					sendArray[3] = mmio32(adresa_long+1);
    30fa:	80 91 66 29 	lds	r24, 0x2966
    30fe:	90 91 67 29 	lds	r25, 0x2967
    3102:	a0 91 68 29 	lds	r26, 0x2968
    3106:	b0 91 69 29 	lds	r27, 0x2969
    310a:	01 96       	adiw	r24, 0x01	; 1
    310c:	a1 1d       	adc	r26, r1
    310e:	b1 1d       	adc	r27, r1
    3110:	fc 01       	movw	r30, r24
    3112:	80 81       	ld	r24, Z
    3114:	91 81       	ldd	r25, Z+1	; 0x01
    3116:	a2 81       	ldd	r26, Z+2	; 0x02
    3118:	b3 81       	ldd	r27, Z+3	; 0x03
    311a:	80 93 e0 28 	sts	0x28E0, r24
					sendArray[4] = mmio32(adresa_long);  
    311e:	80 91 66 29 	lds	r24, 0x2966
    3122:	90 91 67 29 	lds	r25, 0x2967
    3126:	a0 91 68 29 	lds	r26, 0x2968
    312a:	b0 91 69 29 	lds	r27, 0x2969
    312e:	fc 01       	movw	r30, r24
    3130:	80 81       	ld	r24, Z
    3132:	91 81       	ldd	r25, Z+1	; 0x01
    3134:	a2 81       	ldd	r26, Z+2	; 0x02
    3136:	b3 81       	ldd	r27, Z+3	; 0x03
    3138:	80 93 e1 28 	sts	0x28E1, r24
    313c:	2b c0       	rjmp	.+86     	; 0x3194 <__vector_61+0x155c>
				}	
				else if (receiveArray[1] == 1)	//jednobajtna promenljiva
    313e:	80 91 6f 29 	lds	r24, 0x296F
    3142:	81 30       	cpi	r24, 0x01	; 1
    3144:	39 f5       	brne	.+78     	; 0x3194 <__vector_61+0x155c>
				{
					mmio32(adresa_long) = receiveArray[9];                        
    3146:	80 91 66 29 	lds	r24, 0x2966
    314a:	90 91 67 29 	lds	r25, 0x2967
    314e:	a0 91 68 29 	lds	r26, 0x2968
    3152:	b0 91 69 29 	lds	r27, 0x2969
    3156:	fc 01       	movw	r30, r24
    3158:	80 91 77 29 	lds	r24, 0x2977
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	a0 e0       	ldi	r26, 0x00	; 0
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	80 83       	st	Z, r24
    3164:	91 83       	std	Z+1, r25	; 0x01
    3166:	a2 83       	std	Z+2, r26	; 0x02
    3168:	b3 83       	std	Z+3, r27	; 0x03
					
					sendArray[1] = 0;
    316a:	10 92 de 28 	sts	0x28DE, r1
					sendArray[2] = 0;
    316e:	10 92 df 28 	sts	0x28DF, r1
					sendArray[3] = 0;
    3172:	10 92 e0 28 	sts	0x28E0, r1
					sendArray[4] = mmio32(adresa_long);  
    3176:	80 91 66 29 	lds	r24, 0x2966
    317a:	90 91 67 29 	lds	r25, 0x2967
    317e:	a0 91 68 29 	lds	r26, 0x2968
    3182:	b0 91 69 29 	lds	r27, 0x2969
    3186:	fc 01       	movw	r30, r24
    3188:	80 81       	ld	r24, Z
    318a:	91 81       	ldd	r25, Z+1	; 0x01
    318c:	a2 81       	ldd	r26, Z+2	; 0x02
    318e:	b3 81       	ldd	r27, Z+3	; 0x03
    3190:	80 93 e1 28 	sts	0x28E1, r24
				}						               
									
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    3194:	80 91 6e 29 	lds	r24, 0x296E
    3198:	80 93 dd 28 	sts	0x28DD, r24
					sendArray[3] = 0;
					sendArray[4] = mmio32(adresa_long);  
				}						               
									
				//slanje odgovora
				i = 0;
    319c:	00 e0       	ldi	r16, 0x00	; 0
    319e:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i <= 4)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    31a0:	f8 01       	movw	r30, r16
    31a2:	e3 52       	subi	r30, 0x23	; 35
    31a4:	f7 4d       	sbci	r31, 0xD7	; 215
    31a6:	60 81       	ld	r22, Z
    31a8:	8b e0       	ldi	r24, 0x0B	; 11
    31aa:	90 e2       	ldi	r25, 0x20	; 32
    31ac:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[5] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    31b0:	88 23       	and	r24, r24
    31b2:	11 f0       	breq	.+4      	; 0x31b8 <__vector_61+0x1580>
					{
						i++;
    31b4:	0f 5f       	subi	r16, 0xFF	; 255
    31b6:	1f 4f       	sbci	r17, 0xFF	; 255
				}						               
									
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i <= 4)
    31b8:	05 30       	cpi	r16, 0x05	; 5
    31ba:	11 05       	cpc	r17, r1
    31bc:	8c f3       	brlt	.-30     	; 0x31a0 <__vector_61+0x1568>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    31be:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    31c2:	10 92 5d 29 	sts	0x295D, r1
    31c6:	d5 c1       	rjmp	.+938    	; 0x3572 <__vector_61+0x193a>
		}					
	}
	//PODESAVANJE NIZA ZA SNIMANJE - 11
	else if(receiveArray[0] == 11)					//provera funkcijskog bajta
    31c8:	80 91 6e 29 	lds	r24, 0x296E
    31cc:	8b 30       	cpi	r24, 0x0B	; 11
    31ce:	09 f0       	breq	.+2      	; 0x31d2 <__vector_61+0x159a>
    31d0:	44 c1       	rjmp	.+648    	; 0x345a <__vector_61+0x1822>
	{
		if(RX_i_E1 >= 7)							//stigla je cela poruka (3)
    31d2:	80 91 5d 29 	lds	r24, 0x295D
    31d6:	87 30       	cpi	r24, 0x07	; 7
    31d8:	08 f4       	brcc	.+2      	; 0x31dc <__vector_61+0x15a4>
    31da:	cb c1       	rjmp	.+918    	; 0x3572 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    31dc:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				if (receiveArray[1] == 1)	//niz_1
    31e0:	80 91 6f 29 	lds	r24, 0x296F
    31e4:	81 30       	cpi	r24, 0x01	; 1
    31e6:	09 f0       	breq	.+2      	; 0x31ea <__vector_61+0x15b2>
    31e8:	5c c0       	rjmp	.+184    	; 0x32a2 <__vector_61+0x166a>
				{
					sample_time_niz_1 = receiveArray[2];
    31ea:	80 91 70 29 	lds	r24, 0x2970
    31ee:	80 93 72 32 	sts	0x3272, r24
					velicina_niz_1 = receiveArray[3];
    31f2:	80 91 71 29 	lds	r24, 0x2971
    31f6:	80 93 82 32 	sts	0x3282, r24
					adresa_niz_1 = 0;
    31fa:	10 92 fa 29 	sts	0x29FA, r1
    31fe:	10 92 fb 29 	sts	0x29FB, r1
    3202:	10 92 fc 29 	sts	0x29FC, r1
    3206:	10 92 fd 29 	sts	0x29FD, r1
					adresa_niz_1 |= (long)receiveArray[4] << 24;
    320a:	20 91 72 29 	lds	r18, 0x2972
    320e:	80 91 fa 29 	lds	r24, 0x29FA
    3212:	90 91 fb 29 	lds	r25, 0x29FB
    3216:	a0 91 fc 29 	lds	r26, 0x29FC
    321a:	b0 91 fd 29 	lds	r27, 0x29FD
    321e:	b2 2b       	or	r27, r18
    3220:	80 93 fa 29 	sts	0x29FA, r24
    3224:	90 93 fb 29 	sts	0x29FB, r25
    3228:	a0 93 fc 29 	sts	0x29FC, r26
    322c:	b0 93 fd 29 	sts	0x29FD, r27
					adresa_niz_1 |= (long)receiveArray[5] << 16;
    3230:	20 91 73 29 	lds	r18, 0x2973
    3234:	80 91 fa 29 	lds	r24, 0x29FA
    3238:	90 91 fb 29 	lds	r25, 0x29FB
    323c:	a0 91 fc 29 	lds	r26, 0x29FC
    3240:	b0 91 fd 29 	lds	r27, 0x29FD
    3244:	a2 2b       	or	r26, r18
    3246:	80 93 fa 29 	sts	0x29FA, r24
    324a:	90 93 fb 29 	sts	0x29FB, r25
    324e:	a0 93 fc 29 	sts	0x29FC, r26
    3252:	b0 93 fd 29 	sts	0x29FD, r27
					adresa_niz_1 |= (long)receiveArray[6] << 8;
    3256:	20 91 74 29 	lds	r18, 0x2974
    325a:	80 91 fa 29 	lds	r24, 0x29FA
    325e:	90 91 fb 29 	lds	r25, 0x29FB
    3262:	a0 91 fc 29 	lds	r26, 0x29FC
    3266:	b0 91 fd 29 	lds	r27, 0x29FD
    326a:	92 2b       	or	r25, r18
    326c:	80 93 fa 29 	sts	0x29FA, r24
    3270:	90 93 fb 29 	sts	0x29FB, r25
    3274:	a0 93 fc 29 	sts	0x29FC, r26
    3278:	b0 93 fd 29 	sts	0x29FD, r27
					adresa_niz_1 |= (long)receiveArray[7];  
    327c:	20 91 75 29 	lds	r18, 0x2975
    3280:	80 91 fa 29 	lds	r24, 0x29FA
    3284:	90 91 fb 29 	lds	r25, 0x29FB
    3288:	a0 91 fc 29 	lds	r26, 0x29FC
    328c:	b0 91 fd 29 	lds	r27, 0x29FD
    3290:	82 2b       	or	r24, r18
    3292:	80 93 fa 29 	sts	0x29FA, r24
    3296:	90 93 fb 29 	sts	0x29FB, r25
    329a:	a0 93 fc 29 	sts	0x29FC, r26
    329e:	b0 93 fd 29 	sts	0x29FD, r27
				}
				if (receiveArray[1] == 2)	//niz_2
    32a2:	80 91 6f 29 	lds	r24, 0x296F
    32a6:	82 30       	cpi	r24, 0x02	; 2
    32a8:	09 f0       	breq	.+2      	; 0x32ac <__vector_61+0x1674>
    32aa:	5c c0       	rjmp	.+184    	; 0x3364 <__vector_61+0x172c>
				{
					sample_time_niz_2 = receiveArray[2];
    32ac:	80 91 70 29 	lds	r24, 0x2970
    32b0:	80 93 7d 2e 	sts	0x2E7D, r24
					velicina_niz_2 = receiveArray[3];
    32b4:	80 91 71 29 	lds	r24, 0x2971
    32b8:	80 93 60 2e 	sts	0x2E60, r24
					adresa_niz_2 = 0;
    32bc:	10 92 bc 24 	sts	0x24BC, r1
    32c0:	10 92 bd 24 	sts	0x24BD, r1
    32c4:	10 92 be 24 	sts	0x24BE, r1
    32c8:	10 92 bf 24 	sts	0x24BF, r1
					adresa_niz_2 |= (long)receiveArray[4] << 24;
    32cc:	20 91 72 29 	lds	r18, 0x2972
    32d0:	80 91 bc 24 	lds	r24, 0x24BC
    32d4:	90 91 bd 24 	lds	r25, 0x24BD
    32d8:	a0 91 be 24 	lds	r26, 0x24BE
    32dc:	b0 91 bf 24 	lds	r27, 0x24BF
    32e0:	b2 2b       	or	r27, r18
    32e2:	80 93 bc 24 	sts	0x24BC, r24
    32e6:	90 93 bd 24 	sts	0x24BD, r25
    32ea:	a0 93 be 24 	sts	0x24BE, r26
    32ee:	b0 93 bf 24 	sts	0x24BF, r27
					adresa_niz_2 |= (long)receiveArray[5] << 16;
    32f2:	20 91 73 29 	lds	r18, 0x2973
    32f6:	80 91 bc 24 	lds	r24, 0x24BC
    32fa:	90 91 bd 24 	lds	r25, 0x24BD
    32fe:	a0 91 be 24 	lds	r26, 0x24BE
    3302:	b0 91 bf 24 	lds	r27, 0x24BF
    3306:	a2 2b       	or	r26, r18
    3308:	80 93 bc 24 	sts	0x24BC, r24
    330c:	90 93 bd 24 	sts	0x24BD, r25
    3310:	a0 93 be 24 	sts	0x24BE, r26
    3314:	b0 93 bf 24 	sts	0x24BF, r27
					adresa_niz_2 |= (long)receiveArray[6] << 8;
    3318:	20 91 74 29 	lds	r18, 0x2974
    331c:	80 91 bc 24 	lds	r24, 0x24BC
    3320:	90 91 bd 24 	lds	r25, 0x24BD
    3324:	a0 91 be 24 	lds	r26, 0x24BE
    3328:	b0 91 bf 24 	lds	r27, 0x24BF
    332c:	92 2b       	or	r25, r18
    332e:	80 93 bc 24 	sts	0x24BC, r24
    3332:	90 93 bd 24 	sts	0x24BD, r25
    3336:	a0 93 be 24 	sts	0x24BE, r26
    333a:	b0 93 bf 24 	sts	0x24BF, r27
					adresa_niz_2 |= (long)receiveArray[7];
    333e:	20 91 75 29 	lds	r18, 0x2975
    3342:	80 91 bc 24 	lds	r24, 0x24BC
    3346:	90 91 bd 24 	lds	r25, 0x24BD
    334a:	a0 91 be 24 	lds	r26, 0x24BE
    334e:	b0 91 bf 24 	lds	r27, 0x24BF
    3352:	82 2b       	or	r24, r18
    3354:	80 93 bc 24 	sts	0x24BC, r24
    3358:	90 93 bd 24 	sts	0x24BD, r25
    335c:	a0 93 be 24 	sts	0x24BE, r26
    3360:	b0 93 bf 24 	sts	0x24BF, r27
				}
				
				if (receiveArray[1] == 3)	//niz_3
    3364:	80 91 6f 29 	lds	r24, 0x296F
    3368:	83 30       	cpi	r24, 0x03	; 3
    336a:	09 f0       	breq	.+2      	; 0x336e <__vector_61+0x1736>
    336c:	5c c0       	rjmp	.+184    	; 0x3426 <__vector_61+0x17ee>
				{
					sample_time_niz_3 = receiveArray[2];
    336e:	80 91 70 29 	lds	r24, 0x2970
    3372:	80 93 11 2e 	sts	0x2E11, r24
					velicina_niz_3 = receiveArray[3];
    3376:	80 91 71 29 	lds	r24, 0x2971
    337a:	80 93 d2 24 	sts	0x24D2, r24
					adresa_niz_3 = 0;
    337e:	10 92 40 2e 	sts	0x2E40, r1
    3382:	10 92 41 2e 	sts	0x2E41, r1
    3386:	10 92 42 2e 	sts	0x2E42, r1
    338a:	10 92 43 2e 	sts	0x2E43, r1
					adresa_niz_3 |= (long)receiveArray[4] << 24;
    338e:	20 91 72 29 	lds	r18, 0x2972
    3392:	80 91 40 2e 	lds	r24, 0x2E40
    3396:	90 91 41 2e 	lds	r25, 0x2E41
    339a:	a0 91 42 2e 	lds	r26, 0x2E42
    339e:	b0 91 43 2e 	lds	r27, 0x2E43
    33a2:	b2 2b       	or	r27, r18
    33a4:	80 93 40 2e 	sts	0x2E40, r24
    33a8:	90 93 41 2e 	sts	0x2E41, r25
    33ac:	a0 93 42 2e 	sts	0x2E42, r26
    33b0:	b0 93 43 2e 	sts	0x2E43, r27
					adresa_niz_3 |= (long)receiveArray[5] << 16;
    33b4:	20 91 73 29 	lds	r18, 0x2973
    33b8:	80 91 40 2e 	lds	r24, 0x2E40
    33bc:	90 91 41 2e 	lds	r25, 0x2E41
    33c0:	a0 91 42 2e 	lds	r26, 0x2E42
    33c4:	b0 91 43 2e 	lds	r27, 0x2E43
    33c8:	a2 2b       	or	r26, r18
    33ca:	80 93 40 2e 	sts	0x2E40, r24
    33ce:	90 93 41 2e 	sts	0x2E41, r25
    33d2:	a0 93 42 2e 	sts	0x2E42, r26
    33d6:	b0 93 43 2e 	sts	0x2E43, r27
					adresa_niz_3 |= (long)receiveArray[6] << 8;
    33da:	20 91 74 29 	lds	r18, 0x2974
    33de:	80 91 40 2e 	lds	r24, 0x2E40
    33e2:	90 91 41 2e 	lds	r25, 0x2E41
    33e6:	a0 91 42 2e 	lds	r26, 0x2E42
    33ea:	b0 91 43 2e 	lds	r27, 0x2E43
    33ee:	92 2b       	or	r25, r18
    33f0:	80 93 40 2e 	sts	0x2E40, r24
    33f4:	90 93 41 2e 	sts	0x2E41, r25
    33f8:	a0 93 42 2e 	sts	0x2E42, r26
    33fc:	b0 93 43 2e 	sts	0x2E43, r27
					adresa_niz_3 |= (long)receiveArray[7];
    3400:	20 91 75 29 	lds	r18, 0x2975
    3404:	80 91 40 2e 	lds	r24, 0x2E40
    3408:	90 91 41 2e 	lds	r25, 0x2E41
    340c:	a0 91 42 2e 	lds	r26, 0x2E42
    3410:	b0 91 43 2e 	lds	r27, 0x2E43
    3414:	82 2b       	or	r24, r18
    3416:	80 93 40 2e 	sts	0x2E40, r24
    341a:	90 93 41 2e 	sts	0x2E41, r25
    341e:	a0 93 42 2e 	sts	0x2E42, r26
    3422:	b0 93 43 2e 	sts	0x2E43, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    3426:	80 91 6e 29 	lds	r24, 0x296E
    342a:	80 93 dd 28 	sts	0x28DD, r24
					adresa_niz_3 |= (long)receiveArray[6] << 8;
					adresa_niz_3 |= (long)receiveArray[7];
				}
				
				//slanje odgovora
				i = 0;
    342e:	00 e0       	ldi	r16, 0x00	; 0
    3430:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    3432:	f8 01       	movw	r30, r16
    3434:	e3 52       	subi	r30, 0x23	; 35
    3436:	f7 4d       	sbci	r31, 0xD7	; 215
    3438:	60 81       	ld	r22, Z
    343a:	8b e0       	ldi	r24, 0x0B	; 11
    343c:	90 e2       	ldi	r25, 0x20	; 32
    343e:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    3442:	88 23       	and	r24, r24
    3444:	11 f0       	breq	.+4      	; 0x344a <__vector_61+0x1812>
					{
						i++;
    3446:	0f 5f       	subi	r16, 0xFF	; 255
    3448:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    344a:	10 16       	cp	r1, r16
    344c:	11 06       	cpc	r1, r17
    344e:	8c f7       	brge	.-30     	; 0x3432 <__vector_61+0x17fa>
					if(byteToBuffer)
					{
						i++;
					}
				}			
				RX_i_E1 = 0;
    3450:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;		//ako ne valja CHC ponistava se komanda	
    3454:	10 92 5d 29 	sts	0x295D, r1
    3458:	8c c0       	rjmp	.+280    	; 0x3572 <__vector_61+0x193a>
		}					
	}
	//CITANJE SNIMLJENOG NIZA - 12
	else if(receiveArray[0] == 12)					//provera funkcijskog bajta
    345a:	80 91 6e 29 	lds	r24, 0x296E
    345e:	8c 30       	cpi	r24, 0x0C	; 12
    3460:	09 f0       	breq	.+2      	; 0x3464 <__vector_61+0x182c>
    3462:	87 c0       	rjmp	.+270    	; 0x3572 <__vector_61+0x193a>
	{
		if(RX_i_E1 >= 2)							//stigla je cela poruka (3)
    3464:	80 91 5d 29 	lds	r24, 0x295D
    3468:	82 30       	cpi	r24, 0x02	; 2
    346a:	08 f4       	brcc	.+2      	; 0x346e <__vector_61+0x1836>
    346c:	82 c0       	rjmp	.+260    	; 0x3572 <__vector_61+0x193a>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    346e:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				if (receiveArray[1] == 1)			//niz_1
    3472:	80 91 6f 29 	lds	r24, 0x296F
    3476:	81 30       	cpi	r24, 0x01	; 1
    3478:	f9 f4       	brne	.+62     	; 0x34b8 <__vector_61+0x1880>
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	90 e0       	ldi	r25, 0x00	; 0
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
					{
						sendArray[j] = niz_1[k]>>8;
    3482:	fc 01       	movw	r30, r24
    3484:	ee 0f       	add	r30, r30
    3486:	ff 1f       	adc	r31, r31
    3488:	ea 5f       	subi	r30, 0xFA	; 250
    348a:	f5 4d       	sbci	r31, 0xD5	; 213
    348c:	40 81       	ld	r20, Z
    348e:	51 81       	ldd	r21, Z+1	; 0x01
    3490:	45 2f       	mov	r20, r21
    3492:	55 0f       	add	r21, r21
    3494:	55 0b       	sbc	r21, r21
    3496:	d9 01       	movw	r26, r18
    3498:	a3 52       	subi	r26, 0x23	; 35
    349a:	b7 4d       	sbci	r27, 0xD7	; 215
    349c:	4c 93       	st	X, r20
						j++;
						sendArray[j] = niz_1[k];
    349e:	40 81       	ld	r20, Z
    34a0:	51 81       	ldd	r21, Z+1	; 0x01
    34a2:	f9 01       	movw	r30, r18
    34a4:	e2 52       	subi	r30, 0x22	; 34
    34a6:	f7 4d       	sbci	r31, 0xD7	; 215
    34a8:	40 83       	st	Z, r20
						j++;
    34aa:	2e 5f       	subi	r18, 0xFE	; 254
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
			proveri_vreme_primanja = 0;				//zastita iskljucena
			{
				if (receiveArray[1] == 1)			//niz_1
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
    34ae:	01 96       	adiw	r24, 0x01	; 1
    34b0:	8f 37       	cpi	r24, 0x7F	; 127
    34b2:	91 05       	cpc	r25, r1
    34b4:	31 f7       	brne	.-52     	; 0x3482 <__vector_61+0x184a>
    34b6:	5a c0       	rjmp	.+180    	; 0x356c <__vector_61+0x1934>
						j++;
						sendArray[j] = niz_1[k];
						j++;
					}
				}
				else if (receiveArray[1] == 2)			//niz_2
    34b8:	80 91 6f 29 	lds	r24, 0x296F
    34bc:	82 30       	cpi	r24, 0x02	; 2
    34be:	f9 f4       	brne	.+62     	; 0x34fe <__vector_61+0x18c6>
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
					{
						sendArray[j] = niz_2[k]>>8;
    34c8:	fc 01       	movw	r30, r24
    34ca:	ee 0f       	add	r30, r30
    34cc:	ff 1f       	adc	r31, r31
    34ce:	e6 57       	subi	r30, 0x76	; 118
    34d0:	f1 4d       	sbci	r31, 0xD1	; 209
    34d2:	40 81       	ld	r20, Z
    34d4:	51 81       	ldd	r21, Z+1	; 0x01
    34d6:	45 2f       	mov	r20, r21
    34d8:	55 0f       	add	r21, r21
    34da:	55 0b       	sbc	r21, r21
    34dc:	d9 01       	movw	r26, r18
    34de:	a3 52       	subi	r26, 0x23	; 35
    34e0:	b7 4d       	sbci	r27, 0xD7	; 215
    34e2:	4c 93       	st	X, r20
						j++;
						sendArray[j] = niz_2[k];
    34e4:	40 81       	ld	r20, Z
    34e6:	51 81       	ldd	r21, Z+1	; 0x01
    34e8:	f9 01       	movw	r30, r18
    34ea:	e2 52       	subi	r30, 0x22	; 34
    34ec:	f7 4d       	sbci	r31, 0xD7	; 215
    34ee:	40 83       	st	Z, r20
						j++;
    34f0:	2e 5f       	subi	r18, 0xFE	; 254
    34f2:	3f 4f       	sbci	r19, 0xFF	; 255
					}
				}
				else if (receiveArray[1] == 2)			//niz_2
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
    34f4:	01 96       	adiw	r24, 0x01	; 1
    34f6:	8f 37       	cpi	r24, 0x7F	; 127
    34f8:	91 05       	cpc	r25, r1
    34fa:	31 f7       	brne	.-52     	; 0x34c8 <__vector_61+0x1890>
    34fc:	37 c0       	rjmp	.+110    	; 0x356c <__vector_61+0x1934>
						j++;
						sendArray[j] = niz_2[k];
						j++;
					}
				}
				else if (receiveArray[1] == 3)			//niz_3
    34fe:	80 91 6f 29 	lds	r24, 0x296F
    3502:	83 30       	cpi	r24, 0x03	; 3
    3504:	99 f5       	brne	.+102    	; 0x356c <__vector_61+0x1934>
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	90 e0       	ldi	r25, 0x00	; 0
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
					{
						sendArray[j] = niz_3[k]>>8;
    350e:	fc 01       	movw	r30, r24
    3510:	ee 0f       	add	r30, r30
    3512:	ff 1f       	adc	r31, r31
    3514:	e9 52       	subi	r30, 0x29	; 41
    3516:	fb 4d       	sbci	r31, 0xDB	; 219
    3518:	40 81       	ld	r20, Z
    351a:	51 81       	ldd	r21, Z+1	; 0x01
    351c:	45 2f       	mov	r20, r21
    351e:	55 0f       	add	r21, r21
    3520:	55 0b       	sbc	r21, r21
    3522:	d9 01       	movw	r26, r18
    3524:	a3 52       	subi	r26, 0x23	; 35
    3526:	b7 4d       	sbci	r27, 0xD7	; 215
    3528:	4c 93       	st	X, r20
						j++;
						sendArray[j] = niz_3[k];
    352a:	40 81       	ld	r20, Z
    352c:	51 81       	ldd	r21, Z+1	; 0x01
    352e:	f9 01       	movw	r30, r18
    3530:	e2 52       	subi	r30, 0x22	; 34
    3532:	f7 4d       	sbci	r31, 0xD7	; 215
    3534:	40 83       	st	Z, r20
						j++;
    3536:	2e 5f       	subi	r18, 0xFE	; 254
    3538:	3f 4f       	sbci	r19, 0xFF	; 255
					}
				}
				else if (receiveArray[1] == 3)			//niz_3
				{
					uint16_t k = 0, j = 0;
					for(k=0;k<127;k++)	//imamo 500 merenja
    353a:	01 96       	adiw	r24, 0x01	; 1
    353c:	8f 37       	cpi	r24, 0x7F	; 127
    353e:	91 05       	cpc	r25, r1
    3540:	31 f7       	brne	.-52     	; 0x350e <__vector_61+0x18d6>
    3542:	14 c0       	rjmp	.+40     	; 0x356c <__vector_61+0x1934>
				//slanje odgovora
				i = 0;
				while (i < 254)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_E1_data, sendArray[i]);
    3544:	f8 01       	movw	r30, r16
    3546:	e3 52       	subi	r30, 0x23	; 35
    3548:	f7 4d       	sbci	r31, 0xD7	; 215
    354a:	60 81       	ld	r22, Z
    354c:	8b e0       	ldi	r24, 0x0B	; 11
    354e:	90 e2       	ldi	r25, 0x20	; 32
    3550:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					if(byteToBuffer)
    3554:	88 23       	and	r24, r24
    3556:	11 f0       	breq	.+4      	; 0x355c <__vector_61+0x1924>
					{
						i++;
    3558:	0f 5f       	subi	r16, 0xFF	; 255
    355a:	1f 4f       	sbci	r17, 0xFF	; 255
					}
				}
				
				//slanje odgovora
				i = 0;
				while (i < 254)
    355c:	0e 3f       	cpi	r16, 0xFE	; 254
    355e:	11 05       	cpc	r17, r1
    3560:	8c f3       	brlt	.-30     	; 0x3544 <__vector_61+0x190c>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_E1 = 0;
    3562:	10 92 5d 29 	sts	0x295D, r1
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
    3566:	10 92 5d 29 	sts	0x295D, r1
    356a:	03 c0       	rjmp	.+6      	; 0x3572 <__vector_61+0x193a>
						j++;
						sendArray[j] = niz_2[k];
						j++;
					}
				}
				else if (receiveArray[1] == 3)			//niz_3
    356c:	00 e0       	ldi	r16, 0x00	; 0
    356e:	10 e0       	ldi	r17, 0x00	; 0
    3570:	e9 cf       	rjmp	.-46     	; 0x3544 <__vector_61+0x190c>
				RX_i_E1 = 0;
			}
			RX_i_E1 = 0;	//ako ne valja CHC ponistava se komanda
		}
	}	
}
    3572:	28 96       	adiw	r28, 0x08	; 8
    3574:	cd bf       	out	0x3d, r28	; 61
    3576:	de bf       	out	0x3e, r29	; 62
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	ff 91       	pop	r31
    357e:	ef 91       	pop	r30
    3580:	bf 91       	pop	r27
    3582:	af 91       	pop	r26
    3584:	9f 91       	pop	r25
    3586:	8f 91       	pop	r24
    3588:	7f 91       	pop	r23
    358a:	6f 91       	pop	r22
    358c:	5f 91       	pop	r21
    358e:	4f 91       	pop	r20
    3590:	3f 91       	pop	r19
    3592:	2f 91       	pop	r18
    3594:	1f 91       	pop	r17
    3596:	0f 91       	pop	r16
    3598:	ff 90       	pop	r15
    359a:	ef 90       	pop	r14
    359c:	df 90       	pop	r13
    359e:	cf 90       	pop	r12
    35a0:	bf 90       	pop	r11
    35a2:	af 90       	pop	r10
    35a4:	9f 90       	pop	r9
    35a6:	8f 90       	pop	r8
    35a8:	7f 90       	pop	r7
    35aa:	6f 90       	pop	r6
    35ac:	5f 90       	pop	r5
    35ae:	4f 90       	pop	r4
    35b0:	0f 90       	pop	r0
    35b2:	0b be       	out	0x3b, r0	; 59
    35b4:	0f 90       	pop	r0
    35b6:	0a be       	out	0x3a, r0	; 58
    35b8:	0f 90       	pop	r0
    35ba:	09 be       	out	0x39, r0	; 57
    35bc:	0f 90       	pop	r0
    35be:	08 be       	out	0x38, r0	; 56
    35c0:	0f 90       	pop	r0
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	0f 90       	pop	r0
    35c6:	1f 90       	pop	r1
    35c8:	18 95       	reti

000035ca <__vector_25>:
//Serijska komunikacija USART_C0 - BT - XmegaUSB		
ISR(USARTC0_RXC_vect)
{
    35ca:	1f 92       	push	r1
    35cc:	0f 92       	push	r0
    35ce:	0f b6       	in	r0, 0x3f	; 63
    35d0:	0f 92       	push	r0
    35d2:	11 24       	eor	r1, r1
    35d4:	08 b6       	in	r0, 0x38	; 56
    35d6:	0f 92       	push	r0
    35d8:	18 be       	out	0x38, r1	; 56
    35da:	09 b6       	in	r0, 0x39	; 57
    35dc:	0f 92       	push	r0
    35de:	19 be       	out	0x39, r1	; 57
    35e0:	0a b6       	in	r0, 0x3a	; 58
    35e2:	0f 92       	push	r0
    35e4:	1a be       	out	0x3a, r1	; 58
    35e6:	0b b6       	in	r0, 0x3b	; 59
    35e8:	0f 92       	push	r0
    35ea:	1b be       	out	0x3b, r1	; 59
    35ec:	4f 92       	push	r4
    35ee:	5f 92       	push	r5
    35f0:	6f 92       	push	r6
    35f2:	7f 92       	push	r7
    35f4:	8f 92       	push	r8
    35f6:	9f 92       	push	r9
    35f8:	af 92       	push	r10
    35fa:	bf 92       	push	r11
    35fc:	cf 92       	push	r12
    35fe:	df 92       	push	r13
    3600:	ef 92       	push	r14
    3602:	ff 92       	push	r15
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    3608:	2f 93       	push	r18
    360a:	3f 93       	push	r19
    360c:	4f 93       	push	r20
    360e:	5f 93       	push	r21
    3610:	6f 93       	push	r22
    3612:	7f 93       	push	r23
    3614:	8f 93       	push	r24
    3616:	9f 93       	push	r25
    3618:	af 93       	push	r26
    361a:	bf 93       	push	r27
    361c:	ef 93       	push	r30
    361e:	ff 93       	push	r31
    3620:	cf 93       	push	r28
    3622:	df 93       	push	r29
    3624:	00 d0       	rcall	.+0      	; 0x3626 <__vector_25+0x5c>
    3626:	1f 92       	push	r1
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
	int i;
	USART_RXComplete(&USART_C0_data);
    362c:	82 e9       	ldi	r24, 0x92	; 146
    362e:	91 e2       	ldi	r25, 0x21	; 33
    3630:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <USART_RXComplete>
	receiveArray[RX_i_C0] = USART_RXBuffer_GetByte(&USART_C0_data);
    3634:	80 91 3f 2e 	lds	r24, 0x2E3F
    3638:	08 2f       	mov	r16, r24
    363a:	10 e0       	ldi	r17, 0x00	; 0
    363c:	82 e9       	ldi	r24, 0x92	; 146
    363e:	91 e2       	ldi	r25, 0x21	; 33
    3640:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <USART_RXBuffer_GetByte>
    3644:	f8 01       	movw	r30, r16
    3646:	e2 59       	subi	r30, 0x92	; 146
    3648:	f6 4d       	sbci	r31, 0xD6	; 214
    364a:	80 83       	st	Z, r24
	//USART_TXBuffer_PutByte(&USART_C0_data, receiveArray[RX_i_C0]);	//echo
	RX_i_C0++;
    364c:	80 91 3f 2e 	lds	r24, 0x2E3F
    3650:	8f 5f       	subi	r24, 0xFF	; 255
    3652:	80 93 3f 2e 	sts	0x2E3F, r24
	
	//vremenska zastita
	if (RX_i_C0 >= 1)
    3656:	80 91 3f 2e 	lds	r24, 0x2E3F
    365a:	88 23       	and	r24, r24
    365c:	19 f0       	breq	.+6      	; 0x3664 <__vector_25+0x9a>
 		proveri_vreme_primanja = 1;
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	80 93 fb 2d 	sts	0x2DFB, r24
	 
	//CITANJE PARAMETARA - 1
	if(receiveArray[0] == 1)						//provera funkcijskog bajta >> 1-citanje osnovnih parametara
    3664:	80 91 6e 29 	lds	r24, 0x296E
    3668:	81 30       	cpi	r24, 0x01	; 1
    366a:	09 f0       	breq	.+2      	; 0x366e <__vector_25+0xa4>
    366c:	fe c0       	rjmp	.+508    	; 0x386a <__vector_25+0x2a0>
	{
		if(RX_i_C0 == 1)								//stigla je cela poruka (2)
    366e:	80 91 3f 2e 	lds	r24, 0x2E3F
    3672:	81 30       	cpi	r24, 0x01	; 1
    3674:	09 f0       	breq	.+2      	; 0x3678 <__vector_25+0xae>
    3676:	ac c7       	rjmp	.+3928   	; 0x45d0 <__stack+0x5d1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    3678:	10 92 fb 2d 	sts	0x2DFB, r1
			
			//if(receiveArray[1] == 1)				//CHC ok
			{
				//Slanje		
				sendArray[0] = receiveArray[0];										//vracamo funkcijski broj
    367c:	80 91 6e 29 	lds	r24, 0x296E
    3680:	80 93 dd 28 	sts	0x28DD, r24
				sendArray[1] = (X_pos / scale_factor_for_mm) >> 8;					//Absolutna X pozicija HI
    3684:	60 91 23 2e 	lds	r22, 0x2E23
    3688:	70 91 24 2e 	lds	r23, 0x2E24
    368c:	80 91 25 2e 	lds	r24, 0x2E25
    3690:	90 91 26 2e 	lds	r25, 0x2E26
    3694:	20 91 00 2e 	lds	r18, 0x2E00
    3698:	30 91 01 2e 	lds	r19, 0x2E01
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    36a4:	bb 27       	eor	r27, r27
    36a6:	57 fd       	sbrc	r21, 7
    36a8:	ba 95       	dec	r27
    36aa:	a5 2f       	mov	r26, r21
    36ac:	94 2f       	mov	r25, r20
    36ae:	83 2f       	mov	r24, r19
    36b0:	80 93 de 28 	sts	0x28DE, r24
				sendArray[2] = X_pos / scale_factor_for_mm;							//Absolutna X pozicija LO
    36b4:	60 91 23 2e 	lds	r22, 0x2E23
    36b8:	70 91 24 2e 	lds	r23, 0x2E24
    36bc:	80 91 25 2e 	lds	r24, 0x2E25
    36c0:	90 91 26 2e 	lds	r25, 0x2E26
    36c4:	20 91 00 2e 	lds	r18, 0x2E00
    36c8:	30 91 01 2e 	lds	r19, 0x2E01
    36cc:	40 e0       	ldi	r20, 0x00	; 0
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    36d4:	20 93 df 28 	sts	0x28DF, r18
				sendArray[3] = (Y_pos / scale_factor_for_mm) >> 8;					//Absolutna Y pozicija HI
    36d8:	60 91 02 2a 	lds	r22, 0x2A02
    36dc:	70 91 03 2a 	lds	r23, 0x2A03
    36e0:	80 91 04 2a 	lds	r24, 0x2A04
    36e4:	90 91 05 2a 	lds	r25, 0x2A05
    36e8:	20 91 00 2e 	lds	r18, 0x2E00
    36ec:	30 91 01 2e 	lds	r19, 0x2E01
    36f0:	40 e0       	ldi	r20, 0x00	; 0
    36f2:	50 e0       	ldi	r21, 0x00	; 0
    36f4:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    36f8:	bb 27       	eor	r27, r27
    36fa:	57 fd       	sbrc	r21, 7
    36fc:	ba 95       	dec	r27
    36fe:	a5 2f       	mov	r26, r21
    3700:	94 2f       	mov	r25, r20
    3702:	83 2f       	mov	r24, r19
    3704:	80 93 e0 28 	sts	0x28E0, r24
				sendArray[4] = Y_pos / scale_factor_for_mm;							//Absolutna Y pozicija LO
    3708:	60 91 02 2a 	lds	r22, 0x2A02
    370c:	70 91 03 2a 	lds	r23, 0x2A03
    3710:	80 91 04 2a 	lds	r24, 0x2A04
    3714:	90 91 05 2a 	lds	r25, 0x2A05
    3718:	20 91 00 2e 	lds	r18, 0x2E00
    371c:	30 91 01 2e 	lds	r19, 0x2E01
    3720:	40 e0       	ldi	r20, 0x00	; 0
    3722:	50 e0       	ldi	r21, 0x00	; 0
    3724:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    3728:	20 93 e1 28 	sts	0x28E1, r18
				sendArray[5] = ((teta * 360) / krug360) >> 8;						//Teta HI
    372c:	20 91 83 32 	lds	r18, 0x3283
    3730:	30 91 84 32 	lds	r19, 0x3284
    3734:	40 91 85 32 	lds	r20, 0x3285
    3738:	50 91 86 32 	lds	r21, 0x3286
    373c:	c0 90 75 32 	lds	r12, 0x3275
    3740:	d0 90 76 32 	lds	r13, 0x3276
    3744:	e0 90 77 32 	lds	r14, 0x3277
    3748:	f0 90 78 32 	lds	r15, 0x3278
    374c:	a8 e6       	ldi	r26, 0x68	; 104
    374e:	b1 e0       	ldi	r27, 0x01	; 1
    3750:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    3754:	a7 01       	movw	r20, r14
    3756:	96 01       	movw	r18, r12
    3758:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    375c:	bb 27       	eor	r27, r27
    375e:	57 fd       	sbrc	r21, 7
    3760:	ba 95       	dec	r27
    3762:	a5 2f       	mov	r26, r21
    3764:	94 2f       	mov	r25, r20
    3766:	83 2f       	mov	r24, r19
    3768:	80 93 e2 28 	sts	0x28E2, r24
				sendArray[6] = ((teta * 360) / krug360);							//Teta LO	
    376c:	20 91 83 32 	lds	r18, 0x3283
    3770:	30 91 84 32 	lds	r19, 0x3284
    3774:	40 91 85 32 	lds	r20, 0x3285
    3778:	50 91 86 32 	lds	r21, 0x3286
    377c:	c0 90 75 32 	lds	r12, 0x3275
    3780:	d0 90 76 32 	lds	r13, 0x3276
    3784:	e0 90 77 32 	lds	r14, 0x3277
    3788:	f0 90 78 32 	lds	r15, 0x3278
    378c:	a8 e6       	ldi	r26, 0x68	; 104
    378e:	b1 e0       	ldi	r27, 0x01	; 1
    3790:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    3794:	a7 01       	movw	r20, r14
    3796:	96 01       	movw	r18, r12
    3798:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    379c:	20 93 e3 28 	sts	0x28E3, r18
				sendArray[7] = (rastojanje_cilj_temp / scale_factor_for_mm) >> 8;	//Rastojanje od zadate tacke HI
    37a0:	60 91 12 2e 	lds	r22, 0x2E12
    37a4:	70 91 13 2e 	lds	r23, 0x2E13
    37a8:	80 91 14 2e 	lds	r24, 0x2E14
    37ac:	90 91 15 2e 	lds	r25, 0x2E15
    37b0:	20 91 00 2e 	lds	r18, 0x2E00
    37b4:	30 91 01 2e 	lds	r19, 0x2E01
    37b8:	40 e0       	ldi	r20, 0x00	; 0
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    37c0:	bb 27       	eor	r27, r27
    37c2:	57 fd       	sbrc	r21, 7
    37c4:	ba 95       	dec	r27
    37c6:	a5 2f       	mov	r26, r21
    37c8:	94 2f       	mov	r25, r20
    37ca:	83 2f       	mov	r24, r19
    37cc:	80 93 e4 28 	sts	0x28E4, r24
				sendArray[8] = (rastojanje_cilj_temp / scale_factor_for_mm);		//Rastojanje od zadate tacke LO
    37d0:	60 91 12 2e 	lds	r22, 0x2E12
    37d4:	70 91 13 2e 	lds	r23, 0x2E13
    37d8:	80 91 14 2e 	lds	r24, 0x2E14
    37dc:	90 91 15 2e 	lds	r25, 0x2E15
    37e0:	20 91 00 2e 	lds	r18, 0x2E00
    37e4:	30 91 01 2e 	lds	r19, 0x2E01
    37e8:	40 e0       	ldi	r20, 0x00	; 0
    37ea:	50 e0       	ldi	r21, 0x00	; 0
    37ec:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    37f0:	20 93 e5 28 	sts	0x28E5, r18
				sendArray[9] = stigao_flag;											//stigao flag
    37f4:	80 91 06 20 	lds	r24, 0x2006
    37f8:	80 93 e6 28 	sts	0x28E6, r24
				sendArray[10] = sample_L16;											//trenutna brzina leva
    37fc:	80 91 a0 24 	lds	r24, 0x24A0
    3800:	90 91 a1 24 	lds	r25, 0x24A1
    3804:	80 93 e7 28 	sts	0x28E7, r24
				sendArray[11] = sample_R16;											//trenutna brzina desna
    3808:	80 91 c0 24 	lds	r24, 0x24C0
    380c:	90 91 c1 24 	lds	r25, 0x24C1
    3810:	80 93 e8 28 	sts	0x28E8, r24
				sendArray[12] =	ADC_ResultCh_GetWord(&ADCA.CH0, offset);			//struja motora 1
    3814:	60 91 5a 2e 	lds	r22, 0x2E5A
    3818:	80 e2       	ldi	r24, 0x20	; 32
    381a:	92 e0       	ldi	r25, 0x02	; 2
    381c:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    3820:	80 93 e9 28 	sts	0x28E9, r24
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
    3824:	60 91 5a 2e 	lds	r22, 0x2E5A
    3828:	88 e2       	ldi	r24, 0x28	; 40
    382a:	92 e0       	ldi	r25, 0x02	; 2
    382c:	0e 94 47 01 	call	0x28e	; 0x28e <ADC_ResultCh_GetWord>
    3830:	80 93 ea 28 	sts	0x28EA, r24
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
    3834:	e0 e2       	ldi	r30, 0x20	; 32
    3836:	f6 e0       	ldi	r31, 0x06	; 6
    3838:	80 85       	ldd	r24, Z+8	; 0x08
    383a:	80 93 eb 28 	sts	0x28EB, r24
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
    383e:	00 e0       	ldi	r16, 0x00	; 0
    3840:	10 e0       	ldi	r17, 0x00	; 0
				while (i <= 14) 
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    3842:	f8 01       	movw	r30, r16
    3844:	e3 52       	subi	r30, 0x23	; 35
    3846:	f7 4d       	sbci	r31, 0xD7	; 215
    3848:	60 81       	ld	r22, Z
    384a:	82 e9       	ldi	r24, 0x92	; 146
    384c:	91 e2       	ldi	r25, 0x21	; 33
    384e:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    3852:	88 23       	and	r24, r24
    3854:	11 f0       	breq	.+4      	; 0x385a <__vector_25+0x290>
						i++;
    3856:	0f 5f       	subi	r16, 0xFF	; 255
    3858:	1f 4f       	sbci	r17, 0xFF	; 255
				sendArray[13] =	ADC_ResultCh_GetWord(&ADCA.CH1, offset);			//struja motora 2
				sendArray[14] =	PORTB.IN;											//digitalni ulazi
				
				//sendArray[15] = 0;													//nuliramo CHC
				i = 0;
				while (i <= 14) 
    385a:	0f 30       	cpi	r16, 0x0F	; 15
    385c:	11 05       	cpc	r17, r1
    385e:	8c f3       	brlt	.-30     	; 0x3842 <__vector_25+0x278>
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
					//sendArray[15] ^= sendArray[i];	//CHC
					if(byteToBuffer)
						i++;
				}
				RX_i_C0 = 0;
    3860:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda				
    3864:	10 92 3f 2e 	sts	0x2E3F, r1
    3868:	b3 c6       	rjmp	.+3430   	; 0x45d0 <__stack+0x5d1>
		}		
	}
	//ZADAVANJE X,Y KOORDINATA - 2
	else if(receiveArray[0] == 2)					//provera funkcijskog bajta >> 2-upis x,y koordinate
    386a:	80 91 6e 29 	lds	r24, 0x296E
    386e:	82 30       	cpi	r24, 0x02	; 2
    3870:	09 f0       	breq	.+2      	; 0x3874 <__vector_25+0x2aa>
    3872:	bf c0       	rjmp	.+382    	; 0x39f2 <__vector_25+0x428>
	{
		if(RX_i_C0 >= 5)							//stigla je cela poruka	(5 bajtova)
    3874:	80 91 3f 2e 	lds	r24, 0x2E3F
    3878:	85 30       	cpi	r24, 0x05	; 5
    387a:	08 f4       	brcc	.+2      	; 0x387e <__vector_25+0x2b4>
    387c:	a9 c6       	rjmp	.+3410   	; 0x45d0 <__stack+0x5d1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    387e:	10 92 fb 2d 	sts	0x2DFB, r1
			//ENABLE
			stop_PID_desni = 0;
    3882:	10 92 f4 29 	sts	0x29F4, r1
			stop_PID_levi = 0;
    3886:	10 92 f2 2d 	sts	0x2DF2, r1
			set_direct_out = 0;
    388a:	10 92 81 32 	sts	0x3281, r1
			
			X_cilj = 0;
    388e:	10 92 ae 24 	sts	0x24AE, r1
    3892:	10 92 af 24 	sts	0x24AF, r1
    3896:	10 92 b0 24 	sts	0x24B0, r1
    389a:	10 92 b1 24 	sts	0x24B1, r1
			X_cilj |= ((int)receiveArray[1]) << 8;
    389e:	20 91 6f 29 	lds	r18, 0x296F
    38a2:	40 91 ae 24 	lds	r20, 0x24AE
    38a6:	50 91 af 24 	lds	r21, 0x24AF
    38aa:	60 91 b0 24 	lds	r22, 0x24B0
    38ae:	70 91 b1 24 	lds	r23, 0x24B1
    38b2:	92 2f       	mov	r25, r18
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	aa 27       	eor	r26, r26
    38b8:	97 fd       	sbrc	r25, 7
    38ba:	a0 95       	com	r26
    38bc:	ba 2f       	mov	r27, r26
    38be:	84 2b       	or	r24, r20
    38c0:	95 2b       	or	r25, r21
    38c2:	a6 2b       	or	r26, r22
    38c4:	b7 2b       	or	r27, r23
    38c6:	80 93 ae 24 	sts	0x24AE, r24
    38ca:	90 93 af 24 	sts	0x24AF, r25
    38ce:	a0 93 b0 24 	sts	0x24B0, r26
    38d2:	b0 93 b1 24 	sts	0x24B1, r27
			X_cilj |= (int)receiveArray[2];
    38d6:	20 91 70 29 	lds	r18, 0x2970
    38da:	80 91 ae 24 	lds	r24, 0x24AE
    38de:	90 91 af 24 	lds	r25, 0x24AF
    38e2:	a0 91 b0 24 	lds	r26, 0x24B0
    38e6:	b0 91 b1 24 	lds	r27, 0x24B1
    38ea:	82 2b       	or	r24, r18
    38ec:	80 93 ae 24 	sts	0x24AE, r24
    38f0:	90 93 af 24 	sts	0x24AF, r25
    38f4:	a0 93 b0 24 	sts	0x24B0, r26
    38f8:	b0 93 b1 24 	sts	0x24B1, r27
			X_cilj = (X_cilj * scale_factor_for_mm);
    38fc:	a0 91 00 2e 	lds	r26, 0x2E00
    3900:	b0 91 01 2e 	lds	r27, 0x2E01
    3904:	20 91 ae 24 	lds	r18, 0x24AE
    3908:	30 91 af 24 	lds	r19, 0x24AF
    390c:	40 91 b0 24 	lds	r20, 0x24B0
    3910:	50 91 b1 24 	lds	r21, 0x24B1
    3914:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    3918:	60 93 ae 24 	sts	0x24AE, r22
    391c:	70 93 af 24 	sts	0x24AF, r23
    3920:	80 93 b0 24 	sts	0x24B0, r24
    3924:	90 93 b1 24 	sts	0x24B1, r25
			//Y_cilj
			Y_cilj = 0;
    3928:	10 92 0b 2e 	sts	0x2E0B, r1
    392c:	10 92 0c 2e 	sts	0x2E0C, r1
    3930:	10 92 0d 2e 	sts	0x2E0D, r1
    3934:	10 92 0e 2e 	sts	0x2E0E, r1
			Y_cilj |= ((int)receiveArray[3]) << 8;
    3938:	20 91 71 29 	lds	r18, 0x2971
    393c:	40 91 0b 2e 	lds	r20, 0x2E0B
    3940:	50 91 0c 2e 	lds	r21, 0x2E0C
    3944:	60 91 0d 2e 	lds	r22, 0x2E0D
    3948:	70 91 0e 2e 	lds	r23, 0x2E0E
    394c:	92 2f       	mov	r25, r18
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	aa 27       	eor	r26, r26
    3952:	97 fd       	sbrc	r25, 7
    3954:	a0 95       	com	r26
    3956:	ba 2f       	mov	r27, r26
    3958:	84 2b       	or	r24, r20
    395a:	95 2b       	or	r25, r21
    395c:	a6 2b       	or	r26, r22
    395e:	b7 2b       	or	r27, r23
    3960:	80 93 0b 2e 	sts	0x2E0B, r24
    3964:	90 93 0c 2e 	sts	0x2E0C, r25
    3968:	a0 93 0d 2e 	sts	0x2E0D, r26
    396c:	b0 93 0e 2e 	sts	0x2E0E, r27
			Y_cilj |= (int)receiveArray[4];
    3970:	20 91 72 29 	lds	r18, 0x2972
    3974:	80 91 0b 2e 	lds	r24, 0x2E0B
    3978:	90 91 0c 2e 	lds	r25, 0x2E0C
    397c:	a0 91 0d 2e 	lds	r26, 0x2E0D
    3980:	b0 91 0e 2e 	lds	r27, 0x2E0E
    3984:	82 2b       	or	r24, r18
    3986:	80 93 0b 2e 	sts	0x2E0B, r24
    398a:	90 93 0c 2e 	sts	0x2E0C, r25
    398e:	a0 93 0d 2e 	sts	0x2E0D, r26
    3992:	b0 93 0e 2e 	sts	0x2E0E, r27
			Y_cilj = Y_cilj * scale_factor_for_mm;
    3996:	a0 91 00 2e 	lds	r26, 0x2E00
    399a:	b0 91 01 2e 	lds	r27, 0x2E01
    399e:	20 91 0b 2e 	lds	r18, 0x2E0B
    39a2:	30 91 0c 2e 	lds	r19, 0x2E0C
    39a6:	40 91 0d 2e 	lds	r20, 0x2E0D
    39aa:	50 91 0e 2e 	lds	r21, 0x2E0E
    39ae:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    39b2:	60 93 0b 2e 	sts	0x2E0B, r22
    39b6:	70 93 0c 2e 	sts	0x2E0C, r23
    39ba:	80 93 0d 2e 	sts	0x2E0D, r24
    39be:	90 93 0e 2e 	sts	0x2E0E, r25
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
    39c2:	80 91 6e 29 	lds	r24, 0x296E
    39c6:	80 93 dd 28 	sts	0x28DD, r24
			i = 0;
    39ca:	00 e0       	ldi	r16, 0x00	; 0
    39cc:	10 e0       	ldi	r17, 0x00	; 0
			while (i < 1)
			{
				bool byteToBuffer;
				byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    39ce:	f8 01       	movw	r30, r16
    39d0:	e3 52       	subi	r30, 0x23	; 35
    39d2:	f7 4d       	sbci	r31, 0xD7	; 215
    39d4:	60 81       	ld	r22, Z
    39d6:	82 e9       	ldi	r24, 0x92	; 146
    39d8:	91 e2       	ldi	r25, 0x21	; 33
    39da:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
				if(byteToBuffer)
    39de:	88 23       	and	r24, r24
    39e0:	11 f0       	breq	.+4      	; 0x39e6 <__vector_25+0x41c>
				{
					i++;
    39e2:	0f 5f       	subi	r16, 0xFF	; 255
    39e4:	1f 4f       	sbci	r17, 0xFF	; 255
			Y_cilj = Y_cilj * scale_factor_for_mm;
			
			//slanje odgovora
			sendArray[0] = receiveArray[0];	
			i = 0;
			while (i < 1)
    39e6:	10 16       	cp	r1, r16
    39e8:	11 06       	cpc	r1, r17
    39ea:	8c f7       	brge	.-30     	; 0x39ce <__vector_25+0x404>
				if(byteToBuffer)
				{
					i++;
				}
			}
			RX_i_C0 = 0;
    39ec:	10 92 3f 2e 	sts	0x2E3F, r1
    39f0:	ef c5       	rjmp	.+3038   	; 0x45d0 <__stack+0x5d1>
		}
	}	
	//ZADAVANJE X,Y KOORDINATA I PARAMETRE KRETANJA - 3
	else if(receiveArray[0] == 3)					//provera funkcijskog bajta >> 3 - X,Y koordinate sa svim parametrima kretanja
    39f2:	80 91 6e 29 	lds	r24, 0x296E
    39f6:	83 30       	cpi	r24, 0x03	; 3
    39f8:	09 f0       	breq	.+2      	; 0x39fc <__vector_25+0x432>
    39fa:	e3 c1       	rjmp	.+966    	; 0x3dc2 <__vector_25+0x7f8>
	{
		if(RX_i_C0 >= 11)							//stigla je cela poruka	(11)
    39fc:	80 91 3f 2e 	lds	r24, 0x2E3F
    3a00:	8b 30       	cpi	r24, 0x0B	; 11
    3a02:	08 f4       	brcc	.+2      	; 0x3a06 <__vector_25+0x43c>
    3a04:	e5 c5       	rjmp	.+3018   	; 0x45d0 <__stack+0x5d1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    3a06:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//x_cilj
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3a0a:	80 91 6f 29 	lds	r24, 0x296F
    3a0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3a10:	29 f4       	brne	.+10     	; 0x3a1c <__vector_25+0x452>
    3a12:	80 91 70 29 	lds	r24, 0x2970
    3a16:	8f 3f       	cpi	r24, 0xFF	; 255
    3a18:	09 f4       	brne	.+2      	; 0x3a1c <__vector_25+0x452>
    3a1a:	53 c0       	rjmp	.+166    	; 0x3ac2 <__vector_25+0x4f8>
				{
					//ENABLE
					stop_PID_desni = 0;
    3a1c:	10 92 f4 29 	sts	0x29F4, r1
					stop_PID_levi = 0;
    3a20:	10 92 f2 2d 	sts	0x2DF2, r1
					set_direct_out = 0;
    3a24:	10 92 81 32 	sts	0x3281, r1
					
					X_cilj = 0;
    3a28:	10 92 ae 24 	sts	0x24AE, r1
    3a2c:	10 92 af 24 	sts	0x24AF, r1
    3a30:	10 92 b0 24 	sts	0x24B0, r1
    3a34:	10 92 b1 24 	sts	0x24B1, r1
					X_cilj |= ((int)receiveArray[1]) << 8;
    3a38:	20 91 6f 29 	lds	r18, 0x296F
    3a3c:	40 91 ae 24 	lds	r20, 0x24AE
    3a40:	50 91 af 24 	lds	r21, 0x24AF
    3a44:	60 91 b0 24 	lds	r22, 0x24B0
    3a48:	70 91 b1 24 	lds	r23, 0x24B1
    3a4c:	92 2f       	mov	r25, r18
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	aa 27       	eor	r26, r26
    3a52:	97 fd       	sbrc	r25, 7
    3a54:	a0 95       	com	r26
    3a56:	ba 2f       	mov	r27, r26
    3a58:	84 2b       	or	r24, r20
    3a5a:	95 2b       	or	r25, r21
    3a5c:	a6 2b       	or	r26, r22
    3a5e:	b7 2b       	or	r27, r23
    3a60:	80 93 ae 24 	sts	0x24AE, r24
    3a64:	90 93 af 24 	sts	0x24AF, r25
    3a68:	a0 93 b0 24 	sts	0x24B0, r26
    3a6c:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj |= (int)receiveArray[2];
    3a70:	20 91 70 29 	lds	r18, 0x2970
    3a74:	80 91 ae 24 	lds	r24, 0x24AE
    3a78:	90 91 af 24 	lds	r25, 0x24AF
    3a7c:	a0 91 b0 24 	lds	r26, 0x24B0
    3a80:	b0 91 b1 24 	lds	r27, 0x24B1
    3a84:	82 2b       	or	r24, r18
    3a86:	80 93 ae 24 	sts	0x24AE, r24
    3a8a:	90 93 af 24 	sts	0x24AF, r25
    3a8e:	a0 93 b0 24 	sts	0x24B0, r26
    3a92:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj = (X_cilj * scale_factor_for_mm);	
    3a96:	a0 91 00 2e 	lds	r26, 0x2E00
    3a9a:	b0 91 01 2e 	lds	r27, 0x2E01
    3a9e:	20 91 ae 24 	lds	r18, 0x24AE
    3aa2:	30 91 af 24 	lds	r19, 0x24AF
    3aa6:	40 91 b0 24 	lds	r20, 0x24B0
    3aaa:	50 91 b1 24 	lds	r21, 0x24B1
    3aae:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    3ab2:	60 93 ae 24 	sts	0x24AE, r22
    3ab6:	70 93 af 24 	sts	0x24AF, r23
    3aba:	80 93 b0 24 	sts	0x24B0, r24
    3abe:	90 93 b1 24 	sts	0x24B1, r25
				}	
				//Y_cilj
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3ac2:	80 91 71 29 	lds	r24, 0x2971
    3ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ac8:	29 f4       	brne	.+10     	; 0x3ad4 <__vector_25+0x50a>
    3aca:	80 91 72 29 	lds	r24, 0x2972
    3ace:	8f 3f       	cpi	r24, 0xFF	; 255
    3ad0:	09 f4       	brne	.+2      	; 0x3ad4 <__vector_25+0x50a>
    3ad2:	53 c0       	rjmp	.+166    	; 0x3b7a <__vector_25+0x5b0>
				{		
					stop_PID_desni = 0;
    3ad4:	10 92 f4 29 	sts	0x29F4, r1
					stop_PID_levi = 0;	
    3ad8:	10 92 f2 2d 	sts	0x2DF2, r1
					set_direct_out = 0;
    3adc:	10 92 81 32 	sts	0x3281, r1
					Y_cilj = 0;
    3ae0:	10 92 0b 2e 	sts	0x2E0B, r1
    3ae4:	10 92 0c 2e 	sts	0x2E0C, r1
    3ae8:	10 92 0d 2e 	sts	0x2E0D, r1
    3aec:	10 92 0e 2e 	sts	0x2E0E, r1
					Y_cilj |= ((int)receiveArray[3]) << 8;
    3af0:	20 91 71 29 	lds	r18, 0x2971
    3af4:	40 91 0b 2e 	lds	r20, 0x2E0B
    3af8:	50 91 0c 2e 	lds	r21, 0x2E0C
    3afc:	60 91 0d 2e 	lds	r22, 0x2E0D
    3b00:	70 91 0e 2e 	lds	r23, 0x2E0E
    3b04:	92 2f       	mov	r25, r18
    3b06:	80 e0       	ldi	r24, 0x00	; 0
    3b08:	aa 27       	eor	r26, r26
    3b0a:	97 fd       	sbrc	r25, 7
    3b0c:	a0 95       	com	r26
    3b0e:	ba 2f       	mov	r27, r26
    3b10:	84 2b       	or	r24, r20
    3b12:	95 2b       	or	r25, r21
    3b14:	a6 2b       	or	r26, r22
    3b16:	b7 2b       	or	r27, r23
    3b18:	80 93 0b 2e 	sts	0x2E0B, r24
    3b1c:	90 93 0c 2e 	sts	0x2E0C, r25
    3b20:	a0 93 0d 2e 	sts	0x2E0D, r26
    3b24:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj |= (int)receiveArray[4];
    3b28:	20 91 72 29 	lds	r18, 0x2972
    3b2c:	80 91 0b 2e 	lds	r24, 0x2E0B
    3b30:	90 91 0c 2e 	lds	r25, 0x2E0C
    3b34:	a0 91 0d 2e 	lds	r26, 0x2E0D
    3b38:	b0 91 0e 2e 	lds	r27, 0x2E0E
    3b3c:	82 2b       	or	r24, r18
    3b3e:	80 93 0b 2e 	sts	0x2E0B, r24
    3b42:	90 93 0c 2e 	sts	0x2E0C, r25
    3b46:	a0 93 0d 2e 	sts	0x2E0D, r26
    3b4a:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj = Y_cilj * scale_factor_for_mm;
    3b4e:	a0 91 00 2e 	lds	r26, 0x2E00
    3b52:	b0 91 01 2e 	lds	r27, 0x2E01
    3b56:	20 91 0b 2e 	lds	r18, 0x2E0B
    3b5a:	30 91 0c 2e 	lds	r19, 0x2E0C
    3b5e:	40 91 0d 2e 	lds	r20, 0x2E0D
    3b62:	50 91 0e 2e 	lds	r21, 0x2E0E
    3b66:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    3b6a:	60 93 0b 2e 	sts	0x2E0B, r22
    3b6e:	70 93 0c 2e 	sts	0x2E0C, r23
    3b72:	80 93 0d 2e 	sts	0x2E0D, r24
    3b76:	90 93 0e 2e 	sts	0x2E0E, r25
				}	
				
				//teta_cilj_final_absolute
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3b7a:	80 91 73 29 	lds	r24, 0x2973
    3b7e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b80:	29 f4       	brne	.+10     	; 0x3b8c <__vector_25+0x5c2>
    3b82:	80 91 74 29 	lds	r24, 0x2974
    3b86:	8f 3f       	cpi	r24, 0xFF	; 255
    3b88:	09 f4       	brne	.+2      	; 0x3b8c <__vector_25+0x5c2>
    3b8a:	58 c0       	rjmp	.+176    	; 0x3c3c <__vector_25+0x672>
				{
					teta_cilj_final = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    3b8c:	10 92 00 20 	sts	0x2000, r1
    3b90:	10 92 01 20 	sts	0x2001, r1
    3b94:	10 92 02 20 	sts	0x2002, r1
    3b98:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[5]) << 8;
    3b9c:	20 91 73 29 	lds	r18, 0x2973
    3ba0:	40 91 00 20 	lds	r20, 0x2000
    3ba4:	50 91 01 20 	lds	r21, 0x2001
    3ba8:	60 91 02 20 	lds	r22, 0x2002
    3bac:	70 91 03 20 	lds	r23, 0x2003
    3bb0:	92 2f       	mov	r25, r18
    3bb2:	80 e0       	ldi	r24, 0x00	; 0
    3bb4:	aa 27       	eor	r26, r26
    3bb6:	97 fd       	sbrc	r25, 7
    3bb8:	a0 95       	com	r26
    3bba:	ba 2f       	mov	r27, r26
    3bbc:	84 2b       	or	r24, r20
    3bbe:	95 2b       	or	r25, r21
    3bc0:	a6 2b       	or	r26, r22
    3bc2:	b7 2b       	or	r27, r23
    3bc4:	80 93 00 20 	sts	0x2000, r24
    3bc8:	90 93 01 20 	sts	0x2001, r25
    3bcc:	a0 93 02 20 	sts	0x2002, r26
    3bd0:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[6];
    3bd4:	20 91 74 29 	lds	r18, 0x2974
    3bd8:	80 91 00 20 	lds	r24, 0x2000
    3bdc:	90 91 01 20 	lds	r25, 0x2001
    3be0:	a0 91 02 20 	lds	r26, 0x2002
    3be4:	b0 91 03 20 	lds	r27, 0x2003
    3be8:	82 2b       	or	r24, r18
    3bea:	80 93 00 20 	sts	0x2000, r24
    3bee:	90 93 01 20 	sts	0x2001, r25
    3bf2:	a0 93 02 20 	sts	0x2002, r26
    3bf6:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = (teta_cilj_final * krug360) / 360;
    3bfa:	20 91 00 20 	lds	r18, 0x2000
    3bfe:	30 91 01 20 	lds	r19, 0x2001
    3c02:	40 91 02 20 	lds	r20, 0x2002
    3c06:	50 91 03 20 	lds	r21, 0x2003
    3c0a:	60 91 75 32 	lds	r22, 0x3275
    3c0e:	70 91 76 32 	lds	r23, 0x3276
    3c12:	80 91 77 32 	lds	r24, 0x3277
    3c16:	90 91 78 32 	lds	r25, 0x3278
    3c1a:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__mulsi3>
    3c1e:	28 e6       	ldi	r18, 0x68	; 104
    3c20:	31 e0       	ldi	r19, 0x01	; 1
    3c22:	40 e0       	ldi	r20, 0x00	; 0
    3c24:	50 e0       	ldi	r21, 0x00	; 0
    3c26:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    3c2a:	20 93 00 20 	sts	0x2000, r18
    3c2e:	30 93 01 20 	sts	0x2001, r19
    3c32:	40 93 02 20 	sts	0x2002, r20
    3c36:	50 93 03 20 	sts	0x2003, r21
    3c3a:	78 c0       	rjmp	.+240    	; 0x3d2c <__vector_25+0x762>
				}	
				//teta_cilj_final_relative
				else if(!(receiveArray[7] == 0xFF && receiveArray[8] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    3c3c:	80 91 75 29 	lds	r24, 0x2975
    3c40:	8f 3f       	cpi	r24, 0xFF	; 255
    3c42:	29 f4       	brne	.+10     	; 0x3c4e <__vector_25+0x684>
    3c44:	80 91 76 29 	lds	r24, 0x2976
    3c48:	8f 3f       	cpi	r24, 0xFF	; 255
    3c4a:	09 f4       	brne	.+2      	; 0x3c4e <__vector_25+0x684>
    3c4c:	64 c0       	rjmp	.+200    	; 0x3d16 <__vector_25+0x74c>
				{
					teta_cilj_final = 0;
    3c4e:	10 92 00 20 	sts	0x2000, r1
    3c52:	10 92 01 20 	sts	0x2001, r1
    3c56:	10 92 02 20 	sts	0x2002, r1
    3c5a:	10 92 03 20 	sts	0x2003, r1
					teta_cilj_final |= ((int)receiveArray[7]) << 8;
    3c5e:	20 91 75 29 	lds	r18, 0x2975
    3c62:	40 91 00 20 	lds	r20, 0x2000
    3c66:	50 91 01 20 	lds	r21, 0x2001
    3c6a:	60 91 02 20 	lds	r22, 0x2002
    3c6e:	70 91 03 20 	lds	r23, 0x2003
    3c72:	92 2f       	mov	r25, r18
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	aa 27       	eor	r26, r26
    3c78:	97 fd       	sbrc	r25, 7
    3c7a:	a0 95       	com	r26
    3c7c:	ba 2f       	mov	r27, r26
    3c7e:	84 2b       	or	r24, r20
    3c80:	95 2b       	or	r25, r21
    3c82:	a6 2b       	or	r26, r22
    3c84:	b7 2b       	or	r27, r23
    3c86:	80 93 00 20 	sts	0x2000, r24
    3c8a:	90 93 01 20 	sts	0x2001, r25
    3c8e:	a0 93 02 20 	sts	0x2002, r26
    3c92:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final |= (int)receiveArray[8];
    3c96:	20 91 76 29 	lds	r18, 0x2976
    3c9a:	80 91 00 20 	lds	r24, 0x2000
    3c9e:	90 91 01 20 	lds	r25, 0x2001
    3ca2:	a0 91 02 20 	lds	r26, 0x2002
    3ca6:	b0 91 03 20 	lds	r27, 0x2003
    3caa:	82 2b       	or	r24, r18
    3cac:	80 93 00 20 	sts	0x2000, r24
    3cb0:	90 93 01 20 	sts	0x2001, r25
    3cb4:	a0 93 02 20 	sts	0x2002, r26
    3cb8:	b0 93 03 20 	sts	0x2003, r27
					teta_cilj_final = teta + (teta_cilj_final * krug360) / 360;
    3cbc:	20 91 00 20 	lds	r18, 0x2000
    3cc0:	30 91 01 20 	lds	r19, 0x2001
    3cc4:	40 91 02 20 	lds	r20, 0x2002
    3cc8:	50 91 03 20 	lds	r21, 0x2003
    3ccc:	60 91 75 32 	lds	r22, 0x3275
    3cd0:	70 91 76 32 	lds	r23, 0x3276
    3cd4:	80 91 77 32 	lds	r24, 0x3277
    3cd8:	90 91 78 32 	lds	r25, 0x3278
    3cdc:	c0 90 83 32 	lds	r12, 0x3283
    3ce0:	d0 90 84 32 	lds	r13, 0x3284
    3ce4:	e0 90 85 32 	lds	r14, 0x3285
    3ce8:	f0 90 86 32 	lds	r15, 0x3286
    3cec:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__mulsi3>
    3cf0:	28 e6       	ldi	r18, 0x68	; 104
    3cf2:	31 e0       	ldi	r19, 0x01	; 1
    3cf4:	40 e0       	ldi	r20, 0x00	; 0
    3cf6:	50 e0       	ldi	r21, 0x00	; 0
    3cf8:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    3cfc:	c2 0e       	add	r12, r18
    3cfe:	d3 1e       	adc	r13, r19
    3d00:	e4 1e       	adc	r14, r20
    3d02:	f5 1e       	adc	r15, r21
    3d04:	c0 92 00 20 	sts	0x2000, r12
    3d08:	d0 92 01 20 	sts	0x2001, r13
    3d0c:	e0 92 02 20 	sts	0x2002, r14
    3d10:	f0 92 03 20 	sts	0x2003, r15
    3d14:	0b c0       	rjmp	.+22     	; 0x3d2c <__vector_25+0x762>
				}
				else
					teta_cilj_final = 0xFFFFFFFF;				
    3d16:	8f ef       	ldi	r24, 0xFF	; 255
    3d18:	9f ef       	ldi	r25, 0xFF	; 255
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	80 93 00 20 	sts	0x2000, r24
    3d20:	90 93 01 20 	sts	0x2001, r25
    3d24:	a0 93 02 20 	sts	0x2002, r26
    3d28:	b0 93 03 20 	sts	0x2003, r27
				//bzina
				if(receiveArray[9] != 0xFF)	// ako zadajemo 0xFF ne menja se brzina
    3d2c:	80 91 77 29 	lds	r24, 0x2977
    3d30:	8f 3f       	cpi	r24, 0xFF	; 255
    3d32:	c9 f0       	breq	.+50     	; 0x3d66 <__vector_25+0x79c>
				{
					zeljena_pravolinijska_brzina = receiveArray[9] * 3;	//podesiti faktor!
    3d34:	80 91 77 29 	lds	r24, 0x2977
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	9c 01       	movw	r18, r24
    3d3c:	22 0f       	add	r18, r18
    3d3e:	33 1f       	adc	r19, r19
    3d40:	82 0f       	add	r24, r18
    3d42:	93 1f       	adc	r25, r19
    3d44:	80 93 7f 32 	sts	0x327F, r24
    3d48:	90 93 80 32 	sts	0x3280, r25
					zeljena_brzina_okretanja = zeljena_pravolinijska_brzina / 2;
    3d4c:	80 91 7f 32 	lds	r24, 0x327F
    3d50:	90 91 80 32 	lds	r25, 0x3280
    3d54:	99 23       	and	r25, r25
    3d56:	0c f4       	brge	.+2      	; 0x3d5a <__vector_25+0x790>
    3d58:	01 96       	adiw	r24, 0x01	; 1
    3d5a:	95 95       	asr	r25
    3d5c:	87 95       	ror	r24
    3d5e:	80 93 61 2e 	sts	0x2E61, r24
    3d62:	90 93 62 2e 	sts	0x2E62, r25
				}				
				//smer
				if(receiveArray[10] != 0xFF)	// ako zadajemo 0xFF ne menja se smer
    3d66:	80 91 78 29 	lds	r24, 0x2978
    3d6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d6c:	21 f0       	breq	.+8      	; 0x3d76 <__vector_25+0x7ac>
					smer_zadati = receiveArray[10];	
    3d6e:	80 91 78 29 	lds	r24, 0x2978
    3d72:	80 93 5e 29 	sts	0x295E, r24
				
				//pokretanje snimanja u nizove
				sample_counter_niz_1 = 0;
    3d76:	10 92 58 2e 	sts	0x2E58, r1
				niz_counter_niz_1 = 0;	
    3d7a:	10 92 59 2e 	sts	0x2E59, r1
				sample_counter_niz_2 = 0;
    3d7e:	10 92 f9 2d 	sts	0x2DF9, r1
				niz_counter_niz_2 = 0;
    3d82:	10 92 fa 2d 	sts	0x2DFA, r1
				sample_counter_niz_3 = 0;
    3d86:	10 92 5f 29 	sts	0x295F, r1
				niz_counter_niz_3 = 0;		
    3d8a:	10 92 c6 24 	sts	0x24C6, r1
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
    3d8e:	80 91 6e 29 	lds	r24, 0x296E
    3d92:	80 93 dd 28 	sts	0x28DD, r24
				niz_counter_niz_2 = 0;
				sample_counter_niz_3 = 0;
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
    3d96:	00 e0       	ldi	r16, 0x00	; 0
    3d98:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];	
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    3d9a:	f8 01       	movw	r30, r16
    3d9c:	e3 52       	subi	r30, 0x23	; 35
    3d9e:	f7 4d       	sbci	r31, 0xD7	; 215
    3da0:	60 81       	ld	r22, Z
    3da2:	82 e9       	ldi	r24, 0x92	; 146
    3da4:	91 e2       	ldi	r25, 0x21	; 33
    3da6:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    3daa:	88 23       	and	r24, r24
    3dac:	11 f0       	breq	.+4      	; 0x3db2 <__vector_25+0x7e8>
					{
						i++;
    3dae:	0f 5f       	subi	r16, 0xFF	; 255
    3db0:	1f 4f       	sbci	r17, 0xFF	; 255
				niz_counter_niz_3 = 0;		
	
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];	
				while (i < 1)
    3db2:	10 16       	cp	r1, r16
    3db4:	11 06       	cpc	r1, r17
    3db6:	8c f7       	brge	.-30     	; 0x3d9a <__vector_25+0x7d0>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    3db8:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda	
    3dbc:	10 92 3f 2e 	sts	0x2E3F, r1
    3dc0:	07 c4       	rjmp	.+2062   	; 0x45d0 <__stack+0x5d1>
		}					
	}
	//RELATIVNA DISTANCA I UGAO - 4
	else if(receiveArray[0] == 4)					//provera funkcijskog bajta
    3dc2:	80 91 6e 29 	lds	r24, 0x296E
    3dc6:	84 30       	cpi	r24, 0x04	; 4
    3dc8:	09 f0       	breq	.+2      	; 0x3dcc <__vector_25+0x802>
    3dca:	75 c1       	rjmp	.+746    	; 0x40b6 <__stack+0xb7>
	{
		if(RX_i_C0 >= 5)								//stigla je cela poruka
    3dcc:	80 91 3f 2e 	lds	r24, 0x2E3F
    3dd0:	85 30       	cpi	r24, 0x05	; 5
    3dd2:	08 f4       	brcc	.+2      	; 0x3dd6 <__vector_25+0x80c>
    3dd4:	fd c3       	rjmp	.+2042   	; 0x45d0 <__stack+0x5d1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    3dd6:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//ENABLE
				stop_PID_desni = 0;
    3dda:	10 92 f4 29 	sts	0x29F4, r1
				stop_PID_levi = 0;
    3dde:	10 92 f2 2d 	sts	0x2DF2, r1
				set_direct_out = 0;
    3de2:	10 92 81 32 	sts	0x3281, r1
				
				rel_distanca = 0;
    3de6:	10 92 c5 28 	sts	0x28C5, r1
    3dea:	10 92 c6 28 	sts	0x28C6, r1
    3dee:	10 92 c7 28 	sts	0x28C7, r1
    3df2:	10 92 c8 28 	sts	0x28C8, r1
				rel_distanca |= ((int)receiveArray[1]) << 8;
    3df6:	20 91 6f 29 	lds	r18, 0x296F
    3dfa:	40 91 c5 28 	lds	r20, 0x28C5
    3dfe:	50 91 c6 28 	lds	r21, 0x28C6
    3e02:	60 91 c7 28 	lds	r22, 0x28C7
    3e06:	70 91 c8 28 	lds	r23, 0x28C8
    3e0a:	92 2f       	mov	r25, r18
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	aa 27       	eor	r26, r26
    3e10:	97 fd       	sbrc	r25, 7
    3e12:	a0 95       	com	r26
    3e14:	ba 2f       	mov	r27, r26
    3e16:	84 2b       	or	r24, r20
    3e18:	95 2b       	or	r25, r21
    3e1a:	a6 2b       	or	r26, r22
    3e1c:	b7 2b       	or	r27, r23
    3e1e:	80 93 c5 28 	sts	0x28C5, r24
    3e22:	90 93 c6 28 	sts	0x28C6, r25
    3e26:	a0 93 c7 28 	sts	0x28C7, r26
    3e2a:	b0 93 c8 28 	sts	0x28C8, r27
				rel_distanca |= (int)receiveArray[2];
    3e2e:	20 91 70 29 	lds	r18, 0x2970
    3e32:	80 91 c5 28 	lds	r24, 0x28C5
    3e36:	90 91 c6 28 	lds	r25, 0x28C6
    3e3a:	a0 91 c7 28 	lds	r26, 0x28C7
    3e3e:	b0 91 c8 28 	lds	r27, 0x28C8
    3e42:	82 2b       	or	r24, r18
    3e44:	80 93 c5 28 	sts	0x28C5, r24
    3e48:	90 93 c6 28 	sts	0x28C6, r25
    3e4c:	a0 93 c7 28 	sts	0x28C7, r26
    3e50:	b0 93 c8 28 	sts	0x28C8, r27
				rel_distanca = (rel_distanca * scale_factor_for_mm);
    3e54:	a0 91 00 2e 	lds	r26, 0x2E00
    3e58:	b0 91 01 2e 	lds	r27, 0x2E01
    3e5c:	20 91 c5 28 	lds	r18, 0x28C5
    3e60:	30 91 c6 28 	lds	r19, 0x28C6
    3e64:	40 91 c7 28 	lds	r20, 0x28C7
    3e68:	50 91 c8 28 	lds	r21, 0x28C8
    3e6c:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    3e70:	60 93 c5 28 	sts	0x28C5, r22
    3e74:	70 93 c6 28 	sts	0x28C6, r23
    3e78:	80 93 c7 28 	sts	0x28C7, r24
    3e7c:	90 93 c8 28 	sts	0x28C8, r25

				rel_ugao = 0;
    3e80:	10 92 16 2e 	sts	0x2E16, r1
    3e84:	10 92 17 2e 	sts	0x2E17, r1
    3e88:	10 92 18 2e 	sts	0x2E18, r1
    3e8c:	10 92 19 2e 	sts	0x2E19, r1
				rel_ugao |= ((int)receiveArray[3]) << 8;
    3e90:	20 91 71 29 	lds	r18, 0x2971
    3e94:	40 91 16 2e 	lds	r20, 0x2E16
    3e98:	50 91 17 2e 	lds	r21, 0x2E17
    3e9c:	60 91 18 2e 	lds	r22, 0x2E18
    3ea0:	70 91 19 2e 	lds	r23, 0x2E19
    3ea4:	92 2f       	mov	r25, r18
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	aa 27       	eor	r26, r26
    3eaa:	97 fd       	sbrc	r25, 7
    3eac:	a0 95       	com	r26
    3eae:	ba 2f       	mov	r27, r26
    3eb0:	84 2b       	or	r24, r20
    3eb2:	95 2b       	or	r25, r21
    3eb4:	a6 2b       	or	r26, r22
    3eb6:	b7 2b       	or	r27, r23
    3eb8:	80 93 16 2e 	sts	0x2E16, r24
    3ebc:	90 93 17 2e 	sts	0x2E17, r25
    3ec0:	a0 93 18 2e 	sts	0x2E18, r26
    3ec4:	b0 93 19 2e 	sts	0x2E19, r27
				rel_ugao |= (int)receiveArray[4];
    3ec8:	20 91 72 29 	lds	r18, 0x2972
    3ecc:	80 91 16 2e 	lds	r24, 0x2E16
    3ed0:	90 91 17 2e 	lds	r25, 0x2E17
    3ed4:	a0 91 18 2e 	lds	r26, 0x2E18
    3ed8:	b0 91 19 2e 	lds	r27, 0x2E19
    3edc:	82 2b       	or	r24, r18
    3ede:	80 93 16 2e 	sts	0x2E16, r24
    3ee2:	90 93 17 2e 	sts	0x2E17, r25
    3ee6:	a0 93 18 2e 	sts	0x2E18, r26
    3eea:	b0 93 19 2e 	sts	0x2E19, r27
				rel_ugao = (rel_ugao * krug360) / 360;
    3eee:	20 91 16 2e 	lds	r18, 0x2E16
    3ef2:	30 91 17 2e 	lds	r19, 0x2E17
    3ef6:	40 91 18 2e 	lds	r20, 0x2E18
    3efa:	50 91 19 2e 	lds	r21, 0x2E19
    3efe:	60 91 75 32 	lds	r22, 0x3275
    3f02:	70 91 76 32 	lds	r23, 0x3276
    3f06:	80 91 77 32 	lds	r24, 0x3277
    3f0a:	90 91 78 32 	lds	r25, 0x3278
    3f0e:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__mulsi3>
    3f12:	28 e6       	ldi	r18, 0x68	; 104
    3f14:	31 e0       	ldi	r19, 0x01	; 1
    3f16:	40 e0       	ldi	r20, 0x00	; 0
    3f18:	50 e0       	ldi	r21, 0x00	; 0
    3f1a:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    3f1e:	20 93 16 2e 	sts	0x2E16, r18
    3f22:	30 93 17 2e 	sts	0x2E17, r19
    3f26:	40 93 18 2e 	sts	0x2E18, r20
    3f2a:	50 93 19 2e 	sts	0x2E19, r21
		
				//racunanje koordinate
				double X_pos_cos, Y_pos_sin;
				//X_pos_cos = (double)(teta + rel_ugao) / krug180;
				//Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(((teta + rel_ugao) / krug180) * M_PI);
    3f2e:	c0 90 83 32 	lds	r12, 0x3283
    3f32:	d0 90 84 32 	lds	r13, 0x3284
    3f36:	e0 90 85 32 	lds	r14, 0x3285
    3f3a:	f0 90 86 32 	lds	r15, 0x3286
    3f3e:	80 91 16 2e 	lds	r24, 0x2E16
    3f42:	90 91 17 2e 	lds	r25, 0x2E17
    3f46:	a0 91 18 2e 	lds	r26, 0x2E18
    3f4a:	b0 91 19 2e 	lds	r27, 0x2E19
    3f4e:	20 91 cf 28 	lds	r18, 0x28CF
    3f52:	30 91 d0 28 	lds	r19, 0x28D0
    3f56:	40 91 d1 28 	lds	r20, 0x28D1
    3f5a:	50 91 d2 28 	lds	r21, 0x28D2
    3f5e:	bc 01       	movw	r22, r24
    3f60:	cd 01       	movw	r24, r26
    3f62:	6c 0d       	add	r22, r12
    3f64:	7d 1d       	adc	r23, r13
    3f66:	8e 1d       	adc	r24, r14
    3f68:	9f 1d       	adc	r25, r15
    3f6a:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    3f6e:	ca 01       	movw	r24, r20
    3f70:	b9 01       	movw	r22, r18
    3f72:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    3f76:	2b ed       	ldi	r18, 0xDB	; 219
    3f78:	3f e0       	ldi	r19, 0x0F	; 15
    3f7a:	49 e4       	ldi	r20, 0x49	; 73
    3f7c:	50 e4       	ldi	r21, 0x40	; 64
    3f7e:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    3f82:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <cos>
    3f86:	69 83       	std	Y+1, r22	; 0x01
    3f88:	7a 83       	std	Y+2, r23	; 0x02
    3f8a:	8b 83       	std	Y+3, r24	; 0x03
    3f8c:	9c 83       	std	Y+4, r25	; 0x04
				Y_pos_sin = sin(((teta + rel_ugao) / krug180) * M_PI);
    3f8e:	c0 90 83 32 	lds	r12, 0x3283
    3f92:	d0 90 84 32 	lds	r13, 0x3284
    3f96:	e0 90 85 32 	lds	r14, 0x3285
    3f9a:	f0 90 86 32 	lds	r15, 0x3286
    3f9e:	80 91 16 2e 	lds	r24, 0x2E16
    3fa2:	90 91 17 2e 	lds	r25, 0x2E17
    3fa6:	a0 91 18 2e 	lds	r26, 0x2E18
    3faa:	b0 91 19 2e 	lds	r27, 0x2E19
    3fae:	20 91 cf 28 	lds	r18, 0x28CF
    3fb2:	30 91 d0 28 	lds	r19, 0x28D0
    3fb6:	40 91 d1 28 	lds	r20, 0x28D1
    3fba:	50 91 d2 28 	lds	r21, 0x28D2
    3fbe:	bc 01       	movw	r22, r24
    3fc0:	cd 01       	movw	r24, r26
    3fc2:	6c 0d       	add	r22, r12
    3fc4:	7d 1d       	adc	r23, r13
    3fc6:	8e 1d       	adc	r24, r14
    3fc8:	9f 1d       	adc	r25, r15
    3fca:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    3fce:	ca 01       	movw	r24, r20
    3fd0:	b9 01       	movw	r22, r18
    3fd2:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    3fd6:	2b ed       	ldi	r18, 0xDB	; 219
    3fd8:	3f e0       	ldi	r19, 0x0F	; 15
    3fda:	49 e4       	ldi	r20, 0x49	; 73
    3fdc:	50 e4       	ldi	r21, 0x40	; 64
    3fde:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    3fe2:	0e 94 78 38 	call	0x70f0	; 0x70f0 <sin>
    3fe6:	4b 01       	movw	r8, r22
    3fe8:	5c 01       	movw	r10, r24
				X_pos_cos = rel_distanca * X_pos_cos;
    3fea:	60 91 c5 28 	lds	r22, 0x28C5
    3fee:	70 91 c6 28 	lds	r23, 0x28C6
    3ff2:	80 91 c7 28 	lds	r24, 0x28C7
    3ff6:	90 91 c8 28 	lds	r25, 0x28C8
				Y_pos_sin = rel_distanca * Y_pos_sin;
    3ffa:	40 90 c5 28 	lds	r4, 0x28C5
    3ffe:	50 90 c6 28 	lds	r5, 0x28C6
    4002:	60 90 c7 28 	lds	r6, 0x28C7
    4006:	70 90 c8 28 	lds	r7, 0x28C8
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    400a:	c0 90 23 2e 	lds	r12, 0x2E23
    400e:	d0 90 24 2e 	lds	r13, 0x2E24
    4012:	e0 90 25 2e 	lds	r14, 0x2E25
    4016:	f0 90 26 2e 	lds	r15, 0x2E26
				double X_pos_cos, Y_pos_sin;
				//X_pos_cos = (double)(teta + rel_ugao) / krug180;
				//Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(((teta + rel_ugao) / krug180) * M_PI);
				Y_pos_sin = sin(((teta + rel_ugao) / krug180) * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
    401a:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    401e:	29 81       	ldd	r18, Y+1	; 0x01
    4020:	3a 81       	ldd	r19, Y+2	; 0x02
    4022:	4b 81       	ldd	r20, Y+3	; 0x03
    4024:	5c 81       	ldd	r21, Y+4	; 0x04
    4026:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
				Y_pos_sin = rel_distanca * Y_pos_sin;
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
    402a:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <__fixsfsi>
    402e:	c6 0e       	add	r12, r22
    4030:	d7 1e       	adc	r13, r23
    4032:	e8 1e       	adc	r14, r24
    4034:	f9 1e       	adc	r15, r25
    4036:	c0 92 ae 24 	sts	0x24AE, r12
    403a:	d0 92 af 24 	sts	0x24AF, r13
    403e:	e0 92 b0 24 	sts	0x24B0, r14
    4042:	f0 92 b1 24 	sts	0x24B1, r15
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    4046:	c0 90 02 2a 	lds	r12, 0x2A02
    404a:	d0 90 03 2a 	lds	r13, 0x2A03
    404e:	e0 90 04 2a 	lds	r14, 0x2A04
    4052:	f0 90 05 2a 	lds	r15, 0x2A05
				//X_pos_cos = (double)(teta + rel_ugao) / krug180;
				//Y_pos_sin = (double)(teta + rel_ugao) / krug180;
				X_pos_cos = cos(((teta + rel_ugao) / krug180) * M_PI);
				Y_pos_sin = sin(((teta + rel_ugao) / krug180) * M_PI);
				X_pos_cos = rel_distanca * X_pos_cos;
				Y_pos_sin = rel_distanca * Y_pos_sin;
    4056:	c3 01       	movw	r24, r6
    4058:	b2 01       	movw	r22, r4
    405a:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    405e:	a5 01       	movw	r20, r10
    4060:	94 01       	movw	r18, r8
    4062:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
    4066:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <__fixsfsi>
    406a:	c6 0e       	add	r12, r22
    406c:	d7 1e       	adc	r13, r23
    406e:	e8 1e       	adc	r14, r24
    4070:	f9 1e       	adc	r15, r25
    4072:	c0 92 0b 2e 	sts	0x2E0B, r12
    4076:	d0 92 0c 2e 	sts	0x2E0C, r13
    407a:	e0 92 0d 2e 	sts	0x2E0D, r14
    407e:	f0 92 0e 2e 	sts	0x2E0E, r15
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4082:	80 91 6e 29 	lds	r24, 0x296E
    4086:	80 93 dd 28 	sts	0x28DD, r24
		
				X_cilj = X_pos + (signed long)(X_pos_cos);
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
    408a:	00 e0       	ldi	r16, 0x00	; 0
    408c:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    408e:	f8 01       	movw	r30, r16
    4090:	e3 52       	subi	r30, 0x23	; 35
    4092:	f7 4d       	sbci	r31, 0xD7	; 215
    4094:	60 81       	ld	r22, Z
    4096:	82 e9       	ldi	r24, 0x92	; 146
    4098:	91 e2       	ldi	r25, 0x21	; 33
    409a:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    409e:	88 23       	and	r24, r24
    40a0:	11 f0       	breq	.+4      	; 0x40a6 <__stack+0xa7>
					{
						i++;
    40a2:	0f 5f       	subi	r16, 0xFF	; 255
    40a4:	1f 4f       	sbci	r17, 0xFF	; 255
				Y_cilj = Y_pos + (signed long)(Y_pos_sin);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    40a6:	10 16       	cp	r1, r16
    40a8:	11 06       	cpc	r1, r17
    40aa:	8c f7       	brge	.-30     	; 0x408e <__stack+0x8f>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    40ac:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda
    40b0:	10 92 3f 2e 	sts	0x2E3F, r1
    40b4:	8d c2       	rjmp	.+1306   	; 0x45d0 <__stack+0x5d1>
		}
	}
	//SET DIRECT OUT - 5
	else if(receiveArray[0] == 5)					//provera funkcijskog bajta
    40b6:	80 91 6e 29 	lds	r24, 0x296E
    40ba:	85 30       	cpi	r24, 0x05	; 5
    40bc:	09 f0       	breq	.+2      	; 0x40c0 <__stack+0xc1>
    40be:	6e c0       	rjmp	.+220    	; 0x419c <__stack+0x19d>
	{
		if(RX_i_C0 >= 3)							//stigla je cela poruka
    40c0:	80 91 3f 2e 	lds	r24, 0x2E3F
    40c4:	83 30       	cpi	r24, 0x03	; 3
    40c6:	08 f4       	brcc	.+2      	; 0x40ca <__stack+0xcb>
    40c8:	83 c2       	rjmp	.+1286   	; 0x45d0 <__stack+0x5d1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    40ca:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//ENABLE
				set_direct_out = 1;
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	80 93 81 32 	sts	0x3281, r24
				
				if(receiveArray[1] >= 128)
    40d4:	80 91 6f 29 	lds	r24, 0x296F
    40d8:	88 23       	and	r24, r24
    40da:	8c f4       	brge	.+34     	; 0x40fe <__stack+0xff>
					PID_brzina_L = (receiveArray[1] - 128) * 5;	//podesiti faktor!
    40dc:	80 91 6f 29 	lds	r24, 0x296F
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	9c 01       	movw	r18, r24
    40e4:	22 0f       	add	r18, r18
    40e6:	33 1f       	adc	r19, r19
    40e8:	22 0f       	add	r18, r18
    40ea:	33 1f       	adc	r19, r19
    40ec:	82 0f       	add	r24, r18
    40ee:	93 1f       	adc	r25, r19
    40f0:	80 58       	subi	r24, 0x80	; 128
    40f2:	92 40       	sbci	r25, 0x02	; 2
    40f4:	80 93 7b 2e 	sts	0x2E7B, r24
    40f8:	90 93 7c 2e 	sts	0x2E7C, r25
    40fc:	10 c0       	rjmp	.+32     	; 0x411e <__stack+0x11f>
				else
					PID_brzina_L = (128 - receiveArray[1]) * (-5);
    40fe:	80 91 6f 29 	lds	r24, 0x296F
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	9c 01       	movw	r18, r24
    4106:	22 0f       	add	r18, r18
    4108:	33 1f       	adc	r19, r19
    410a:	22 0f       	add	r18, r18
    410c:	33 1f       	adc	r19, r19
    410e:	82 0f       	add	r24, r18
    4110:	93 1f       	adc	r25, r19
    4112:	80 58       	subi	r24, 0x80	; 128
    4114:	92 40       	sbci	r25, 0x02	; 2
    4116:	80 93 7b 2e 	sts	0x2E7B, r24
    411a:	90 93 7c 2e 	sts	0x2E7C, r25
					
				if(receiveArray[2] >= 128)
    411e:	80 91 70 29 	lds	r24, 0x2970
    4122:	88 23       	and	r24, r24
    4124:	8c f4       	brge	.+34     	; 0x4148 <__stack+0x149>
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
    4126:	80 91 70 29 	lds	r24, 0x2970
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	9c 01       	movw	r18, r24
    412e:	22 0f       	add	r18, r18
    4130:	33 1f       	adc	r19, r19
    4132:	22 0f       	add	r18, r18
    4134:	33 1f       	adc	r19, r19
    4136:	82 0f       	add	r24, r18
    4138:	93 1f       	adc	r25, r19
    413a:	80 58       	subi	r24, 0x80	; 128
    413c:	92 40       	sbci	r25, 0x02	; 2
    413e:	80 93 79 2e 	sts	0x2E79, r24
    4142:	90 93 7a 2e 	sts	0x2E7A, r25
    4146:	10 c0       	rjmp	.+32     	; 0x4168 <__stack+0x169>
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
    4148:	80 91 70 29 	lds	r24, 0x2970
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	9c 01       	movw	r18, r24
    4150:	22 0f       	add	r18, r18
    4152:	33 1f       	adc	r19, r19
    4154:	22 0f       	add	r18, r18
    4156:	33 1f       	adc	r19, r19
    4158:	82 0f       	add	r24, r18
    415a:	93 1f       	adc	r25, r19
    415c:	80 58       	subi	r24, 0x80	; 128
    415e:	92 40       	sbci	r25, 0x02	; 2
    4160:	80 93 79 2e 	sts	0x2E79, r24
    4164:	90 93 7a 2e 	sts	0x2E7A, r25
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4168:	80 91 6e 29 	lds	r24, 0x296E
    416c:	80 93 dd 28 	sts	0x28DD, r24
					PID_brzina_R = (receiveArray[2] - 128) * 5;	//podesiti faktor!
				else
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
    4170:	00 e0       	ldi	r16, 0x00	; 0
    4172:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    4174:	f8 01       	movw	r30, r16
    4176:	e3 52       	subi	r30, 0x23	; 35
    4178:	f7 4d       	sbci	r31, 0xD7	; 215
    417a:	60 81       	ld	r22, Z
    417c:	82 e9       	ldi	r24, 0x92	; 146
    417e:	91 e2       	ldi	r25, 0x21	; 33
    4180:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    4184:	88 23       	and	r24, r24
    4186:	11 f0       	breq	.+4      	; 0x418c <__stack+0x18d>
					{
						i++;
    4188:	0f 5f       	subi	r16, 0xFF	; 255
    418a:	1f 4f       	sbci	r17, 0xFF	; 255
					PID_brzina_R = (128 - receiveArray[2]) * (-5);
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    418c:	10 16       	cp	r1, r16
    418e:	11 06       	cpc	r1, r17
    4190:	8c f7       	brge	.-30     	; 0x4174 <__stack+0x175>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    4192:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda
    4196:	10 92 3f 2e 	sts	0x2E3F, r1
    419a:	1a c2       	rjmp	.+1076   	; 0x45d0 <__stack+0x5d1>
		}
	}			
	//PODESAVANJE FET izlaza i servoa - 6
	else if(receiveArray[0] == 6)					//provera funkcijskog bajta 
    419c:	80 91 6e 29 	lds	r24, 0x296E
    41a0:	86 30       	cpi	r24, 0x06	; 6
    41a2:	09 f0       	breq	.+2      	; 0x41a6 <__stack+0x1a7>
    41a4:	56 c0       	rjmp	.+172    	; 0x4252 <__stack+0x253>
	{
		if(RX_i_C0 >= 7)							//stigla je cela poruka	(11)
    41a6:	80 91 3f 2e 	lds	r24, 0x2E3F
    41aa:	87 30       	cpi	r24, 0x07	; 7
    41ac:	08 f4       	brcc	.+2      	; 0x41b0 <__stack+0x1b1>
    41ae:	10 c2       	rjmp	.+1056   	; 0x45d0 <__stack+0x5d1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    41b0:	10 92 fb 2d 	sts	0x2DFB, r1
// 			for(i=0; i<= 4; i++)					//racunanje CHC
// 			CHC ^= receiveArray[i];

			//if(receiveArray[x] == CHC)				//CHC ok
			{
				PORTC.OUT |= receiveArray[1] & receiveArray[2];	//izlazi + maska
    41b4:	e0 e4       	ldi	r30, 0x40	; 64
    41b6:	f6 e0       	ldi	r31, 0x06	; 6
    41b8:	94 81       	ldd	r25, Z+4	; 0x04
    41ba:	4f e6       	ldi	r20, 0x6F	; 111
    41bc:	59 e2       	ldi	r21, 0x29	; 41
    41be:	da 01       	movw	r26, r20
    41c0:	8c 91       	ld	r24, X
    41c2:	60 e7       	ldi	r22, 0x70	; 112
    41c4:	79 e2       	ldi	r23, 0x29	; 41
    41c6:	db 01       	movw	r26, r22
    41c8:	2c 91       	ld	r18, X
    41ca:	82 23       	and	r24, r18
    41cc:	89 2b       	or	r24, r25
    41ce:	84 83       	std	Z+4, r24	; 0x04
				PORTC.OUT &= ~(receiveArray[1] ^ receiveArray[2]);	//izlazi + maska
    41d0:	94 81       	ldd	r25, Z+4	; 0x04
    41d2:	da 01       	movw	r26, r20
    41d4:	8c 91       	ld	r24, X
    41d6:	db 01       	movw	r26, r22
    41d8:	2c 91       	ld	r18, X
    41da:	82 27       	eor	r24, r18
    41dc:	80 95       	com	r24
    41de:	89 23       	and	r24, r25
    41e0:	84 83       	std	Z+4, r24	; 0x04
				
				//120 - nulti polozaj, 280 - krajnji polozaj
				TCF0.CCA = receiveArray[3] + 120;
    41e2:	80 91 71 29 	lds	r24, 0x2971
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	88 58       	subi	r24, 0x88	; 136
    41ea:	9f 4f       	sbci	r25, 0xFF	; 255
    41ec:	e0 e0       	ldi	r30, 0x00	; 0
    41ee:	fb e0       	ldi	r31, 0x0B	; 11
    41f0:	80 a7       	std	Z+40, r24	; 0x28
    41f2:	91 a7       	std	Z+41, r25	; 0x29
				TCF0.CCB = receiveArray[4] + 120;
    41f4:	80 91 72 29 	lds	r24, 0x2972
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	88 58       	subi	r24, 0x88	; 136
    41fc:	9f 4f       	sbci	r25, 0xFF	; 255
    41fe:	82 a7       	std	Z+42, r24	; 0x2a
    4200:	93 a7       	std	Z+43, r25	; 0x2b
				TCF0.CCC = receiveArray[5] + 120;
    4202:	80 91 73 29 	lds	r24, 0x2973
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	88 58       	subi	r24, 0x88	; 136
    420a:	9f 4f       	sbci	r25, 0xFF	; 255
    420c:	84 a7       	std	Z+44, r24	; 0x2c
    420e:	95 a7       	std	Z+45, r25	; 0x2d
				TCF0.CCD = receiveArray[6] + 120;
    4210:	80 91 74 29 	lds	r24, 0x2974
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	88 58       	subi	r24, 0x88	; 136
    4218:	9f 4f       	sbci	r25, 0xFF	; 255
    421a:	86 a7       	std	Z+46, r24	; 0x2e
    421c:	97 a7       	std	Z+47, r25	; 0x2f
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    421e:	80 91 6e 29 	lds	r24, 0x296E
    4222:	80 93 dd 28 	sts	0x28DD, r24
				TCF0.CCB = receiveArray[4] + 120;
				TCF0.CCC = receiveArray[5] + 120;
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
    4226:	00 e0       	ldi	r16, 0x00	; 0
    4228:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    422a:	f8 01       	movw	r30, r16
    422c:	e3 52       	subi	r30, 0x23	; 35
    422e:	f7 4d       	sbci	r31, 0xD7	; 215
    4230:	60 81       	ld	r22, Z
    4232:	82 e9       	ldi	r24, 0x92	; 146
    4234:	91 e2       	ldi	r25, 0x21	; 33
    4236:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    423a:	88 23       	and	r24, r24
    423c:	11 f0       	breq	.+4      	; 0x4242 <__stack+0x243>
					{
						i++;
    423e:	0f 5f       	subi	r16, 0xFF	; 255
    4240:	1f 4f       	sbci	r17, 0xFF	; 255
				TCF0.CCD = receiveArray[6] + 120;
			
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    4242:	10 16       	cp	r1, r16
    4244:	11 06       	cpc	r1, r17
    4246:	8c f7       	brge	.-30     	; 0x422a <__stack+0x22b>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    4248:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;	//ako ne valja CHC ponistava se komanda
    424c:	10 92 3f 2e 	sts	0x2E3F, r1
    4250:	bf c1       	rjmp	.+894    	; 0x45d0 <__stack+0x5d1>
		}		
	}		
	//Upis trenutne pozicije - 7
	else if(receiveArray[0] == 7)					//provera funkcijskog bajta
    4252:	80 91 6e 29 	lds	r24, 0x296E
    4256:	87 30       	cpi	r24, 0x07	; 7
    4258:	09 f0       	breq	.+2      	; 0x425c <__stack+0x25d>
    425a:	7d c1       	rjmp	.+762    	; 0x4556 <__stack+0x557>
	{
		if(RX_i_C0 >= 7)							//stigla je cela poruka	(11)
    425c:	80 91 3f 2e 	lds	r24, 0x2E3F
    4260:	87 30       	cpi	r24, 0x07	; 7
    4262:	08 f4       	brcc	.+2      	; 0x4266 <__stack+0x267>
    4264:	b5 c1       	rjmp	.+874    	; 0x45d0 <__stack+0x5d1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    4266:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				//x_pos
				if(!(receiveArray[1] == 0xFF && receiveArray[2] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    426a:	80 91 6f 29 	lds	r24, 0x296F
    426e:	8f 3f       	cpi	r24, 0xFF	; 255
    4270:	29 f4       	brne	.+10     	; 0x427c <__stack+0x27d>
    4272:	80 91 70 29 	lds	r24, 0x2970
    4276:	8f 3f       	cpi	r24, 0xFF	; 255
    4278:	09 f4       	brne	.+2      	; 0x427c <__stack+0x27d>
    427a:	6d c0       	rjmp	.+218    	; 0x4356 <__stack+0x357>
				{
					X_pos = 0;
    427c:	10 92 23 2e 	sts	0x2E23, r1
    4280:	10 92 24 2e 	sts	0x2E24, r1
    4284:	10 92 25 2e 	sts	0x2E25, r1
    4288:	10 92 26 2e 	sts	0x2E26, r1
					X_pos |= ((int)receiveArray[1]) << 8;
    428c:	20 91 6f 29 	lds	r18, 0x296F
    4290:	40 91 23 2e 	lds	r20, 0x2E23
    4294:	50 91 24 2e 	lds	r21, 0x2E24
    4298:	60 91 25 2e 	lds	r22, 0x2E25
    429c:	70 91 26 2e 	lds	r23, 0x2E26
    42a0:	92 2f       	mov	r25, r18
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	aa 27       	eor	r26, r26
    42a6:	97 fd       	sbrc	r25, 7
    42a8:	a0 95       	com	r26
    42aa:	ba 2f       	mov	r27, r26
    42ac:	84 2b       	or	r24, r20
    42ae:	95 2b       	or	r25, r21
    42b0:	a6 2b       	or	r26, r22
    42b2:	b7 2b       	or	r27, r23
    42b4:	80 93 23 2e 	sts	0x2E23, r24
    42b8:	90 93 24 2e 	sts	0x2E24, r25
    42bc:	a0 93 25 2e 	sts	0x2E25, r26
    42c0:	b0 93 26 2e 	sts	0x2E26, r27
					X_pos |= (int)receiveArray[2];
    42c4:	20 91 70 29 	lds	r18, 0x2970
    42c8:	80 91 23 2e 	lds	r24, 0x2E23
    42cc:	90 91 24 2e 	lds	r25, 0x2E24
    42d0:	a0 91 25 2e 	lds	r26, 0x2E25
    42d4:	b0 91 26 2e 	lds	r27, 0x2E26
    42d8:	82 2b       	or	r24, r18
    42da:	80 93 23 2e 	sts	0x2E23, r24
    42de:	90 93 24 2e 	sts	0x2E24, r25
    42e2:	a0 93 25 2e 	sts	0x2E25, r26
    42e6:	b0 93 26 2e 	sts	0x2E26, r27
					X_pos = (X_pos * scale_factor_for_mm);
    42ea:	a0 91 00 2e 	lds	r26, 0x2E00
    42ee:	b0 91 01 2e 	lds	r27, 0x2E01
    42f2:	20 91 23 2e 	lds	r18, 0x2E23
    42f6:	30 91 24 2e 	lds	r19, 0x2E24
    42fa:	40 91 25 2e 	lds	r20, 0x2E25
    42fe:	50 91 26 2e 	lds	r21, 0x2E26
    4302:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    4306:	60 93 23 2e 	sts	0x2E23, r22
    430a:	70 93 24 2e 	sts	0x2E24, r23
    430e:	80 93 25 2e 	sts	0x2E25, r24
    4312:	90 93 26 2e 	sts	0x2E26, r25
					X_cilj = X_pos;
    4316:	80 91 23 2e 	lds	r24, 0x2E23
    431a:	90 91 24 2e 	lds	r25, 0x2E24
    431e:	a0 91 25 2e 	lds	r26, 0x2E25
    4322:	b0 91 26 2e 	lds	r27, 0x2E26
    4326:	80 93 ae 24 	sts	0x24AE, r24
    432a:	90 93 af 24 	sts	0x24AF, r25
    432e:	a0 93 b0 24 	sts	0x24B0, r26
    4332:	b0 93 b1 24 	sts	0x24B1, r27
					X_cilj_stari = X_pos;
    4336:	80 91 23 2e 	lds	r24, 0x2E23
    433a:	90 91 24 2e 	lds	r25, 0x2E24
    433e:	a0 91 25 2e 	lds	r26, 0x2E25
    4342:	b0 91 26 2e 	lds	r27, 0x2E26
    4346:	80 93 31 2e 	sts	0x2E31, r24
    434a:	90 93 32 2e 	sts	0x2E32, r25
    434e:	a0 93 33 2e 	sts	0x2E33, r26
    4352:	b0 93 34 2e 	sts	0x2E34, r27
				}
				//Y_pos
				if(!(receiveArray[3] == 0xFF && receiveArray[4] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    4356:	80 91 71 29 	lds	r24, 0x2971
    435a:	8f 3f       	cpi	r24, 0xFF	; 255
    435c:	29 f4       	brne	.+10     	; 0x4368 <__stack+0x369>
    435e:	80 91 72 29 	lds	r24, 0x2972
    4362:	8f 3f       	cpi	r24, 0xFF	; 255
    4364:	09 f4       	brne	.+2      	; 0x4368 <__stack+0x369>
    4366:	6d c0       	rjmp	.+218    	; 0x4442 <__stack+0x443>
				{
					Y_pos = 0;
    4368:	10 92 02 2a 	sts	0x2A02, r1
    436c:	10 92 03 2a 	sts	0x2A03, r1
    4370:	10 92 04 2a 	sts	0x2A04, r1
    4374:	10 92 05 2a 	sts	0x2A05, r1
					Y_pos |= ((int)receiveArray[3]) << 8;
    4378:	20 91 71 29 	lds	r18, 0x2971
    437c:	40 91 02 2a 	lds	r20, 0x2A02
    4380:	50 91 03 2a 	lds	r21, 0x2A03
    4384:	60 91 04 2a 	lds	r22, 0x2A04
    4388:	70 91 05 2a 	lds	r23, 0x2A05
    438c:	92 2f       	mov	r25, r18
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	aa 27       	eor	r26, r26
    4392:	97 fd       	sbrc	r25, 7
    4394:	a0 95       	com	r26
    4396:	ba 2f       	mov	r27, r26
    4398:	84 2b       	or	r24, r20
    439a:	95 2b       	or	r25, r21
    439c:	a6 2b       	or	r26, r22
    439e:	b7 2b       	or	r27, r23
    43a0:	80 93 02 2a 	sts	0x2A02, r24
    43a4:	90 93 03 2a 	sts	0x2A03, r25
    43a8:	a0 93 04 2a 	sts	0x2A04, r26
    43ac:	b0 93 05 2a 	sts	0x2A05, r27
					Y_pos |= (int)receiveArray[4];
    43b0:	20 91 72 29 	lds	r18, 0x2972
    43b4:	80 91 02 2a 	lds	r24, 0x2A02
    43b8:	90 91 03 2a 	lds	r25, 0x2A03
    43bc:	a0 91 04 2a 	lds	r26, 0x2A04
    43c0:	b0 91 05 2a 	lds	r27, 0x2A05
    43c4:	82 2b       	or	r24, r18
    43c6:	80 93 02 2a 	sts	0x2A02, r24
    43ca:	90 93 03 2a 	sts	0x2A03, r25
    43ce:	a0 93 04 2a 	sts	0x2A04, r26
    43d2:	b0 93 05 2a 	sts	0x2A05, r27
					Y_pos = Y_cilj * scale_factor_for_mm;
    43d6:	a0 91 00 2e 	lds	r26, 0x2E00
    43da:	b0 91 01 2e 	lds	r27, 0x2E01
    43de:	20 91 0b 2e 	lds	r18, 0x2E0B
    43e2:	30 91 0c 2e 	lds	r19, 0x2E0C
    43e6:	40 91 0d 2e 	lds	r20, 0x2E0D
    43ea:	50 91 0e 2e 	lds	r21, 0x2E0E
    43ee:	0e 94 48 39 	call	0x7290	; 0x7290 <__muluhisi3>
    43f2:	60 93 02 2a 	sts	0x2A02, r22
    43f6:	70 93 03 2a 	sts	0x2A03, r23
    43fa:	80 93 04 2a 	sts	0x2A04, r24
    43fe:	90 93 05 2a 	sts	0x2A05, r25
					Y_cilj = Y_pos;
    4402:	80 91 02 2a 	lds	r24, 0x2A02
    4406:	90 91 03 2a 	lds	r25, 0x2A03
    440a:	a0 91 04 2a 	lds	r26, 0x2A04
    440e:	b0 91 05 2a 	lds	r27, 0x2A05
    4412:	80 93 0b 2e 	sts	0x2E0B, r24
    4416:	90 93 0c 2e 	sts	0x2E0C, r25
    441a:	a0 93 0d 2e 	sts	0x2E0D, r26
    441e:	b0 93 0e 2e 	sts	0x2E0E, r27
					Y_cilj_stari = Y_pos;
    4422:	80 91 02 2a 	lds	r24, 0x2A02
    4426:	90 91 03 2a 	lds	r25, 0x2A03
    442a:	a0 91 04 2a 	lds	r26, 0x2A04
    442e:	b0 91 05 2a 	lds	r27, 0x2A05
    4432:	80 93 70 2e 	sts	0x2E70, r24
    4436:	90 93 71 2e 	sts	0x2E71, r25
    443a:	a0 93 72 2e 	sts	0x2E72, r26
    443e:	b0 93 73 2e 	sts	0x2E73, r27
				}
				
				//teta
				if(!(receiveArray[5] == 0xFF && receiveArray[6] == 0xFF))	//FF se koristi ako ne zelimo da menjamo parametar
    4442:	80 91 73 29 	lds	r24, 0x2973
    4446:	8f 3f       	cpi	r24, 0xFF	; 255
    4448:	29 f4       	brne	.+10     	; 0x4454 <__stack+0x455>
    444a:	80 91 74 29 	lds	r24, 0x2974
    444e:	8f 3f       	cpi	r24, 0xFF	; 255
    4450:	09 f4       	brne	.+2      	; 0x4454 <__stack+0x455>
    4452:	67 c0       	rjmp	.+206    	; 0x4522 <__stack+0x523>
				{
					teta = 0;	//i ovde ako se zadaje 0xFF nece se uvazavati ovaj parametar
    4454:	10 92 83 32 	sts	0x3283, r1
    4458:	10 92 84 32 	sts	0x3284, r1
    445c:	10 92 85 32 	sts	0x3285, r1
    4460:	10 92 86 32 	sts	0x3286, r1
					teta |= ((int)receiveArray[5]) << 8;
    4464:	20 91 73 29 	lds	r18, 0x2973
    4468:	40 91 83 32 	lds	r20, 0x3283
    446c:	50 91 84 32 	lds	r21, 0x3284
    4470:	60 91 85 32 	lds	r22, 0x3285
    4474:	70 91 86 32 	lds	r23, 0x3286
    4478:	92 2f       	mov	r25, r18
    447a:	80 e0       	ldi	r24, 0x00	; 0
    447c:	aa 27       	eor	r26, r26
    447e:	97 fd       	sbrc	r25, 7
    4480:	a0 95       	com	r26
    4482:	ba 2f       	mov	r27, r26
    4484:	84 2b       	or	r24, r20
    4486:	95 2b       	or	r25, r21
    4488:	a6 2b       	or	r26, r22
    448a:	b7 2b       	or	r27, r23
    448c:	80 93 83 32 	sts	0x3283, r24
    4490:	90 93 84 32 	sts	0x3284, r25
    4494:	a0 93 85 32 	sts	0x3285, r26
    4498:	b0 93 86 32 	sts	0x3286, r27
					teta |= (int)receiveArray[6];
    449c:	20 91 74 29 	lds	r18, 0x2974
    44a0:	80 91 83 32 	lds	r24, 0x3283
    44a4:	90 91 84 32 	lds	r25, 0x3284
    44a8:	a0 91 85 32 	lds	r26, 0x3285
    44ac:	b0 91 86 32 	lds	r27, 0x3286
    44b0:	82 2b       	or	r24, r18
    44b2:	80 93 83 32 	sts	0x3283, r24
    44b6:	90 93 84 32 	sts	0x3284, r25
    44ba:	a0 93 85 32 	sts	0x3285, r26
    44be:	b0 93 86 32 	sts	0x3286, r27
					teta = (teta * krug360) / 360;
    44c2:	20 91 83 32 	lds	r18, 0x3283
    44c6:	30 91 84 32 	lds	r19, 0x3284
    44ca:	40 91 85 32 	lds	r20, 0x3285
    44ce:	50 91 86 32 	lds	r21, 0x3286
    44d2:	60 91 75 32 	lds	r22, 0x3275
    44d6:	70 91 76 32 	lds	r23, 0x3276
    44da:	80 91 77 32 	lds	r24, 0x3277
    44de:	90 91 78 32 	lds	r25, 0x3278
    44e2:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <__mulsi3>
    44e6:	28 e6       	ldi	r18, 0x68	; 104
    44e8:	31 e0       	ldi	r19, 0x01	; 1
    44ea:	40 e0       	ldi	r20, 0x00	; 0
    44ec:	50 e0       	ldi	r21, 0x00	; 0
    44ee:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    44f2:	20 93 83 32 	sts	0x3283, r18
    44f6:	30 93 84 32 	sts	0x3284, r19
    44fa:	40 93 85 32 	sts	0x3285, r20
    44fe:	50 93 86 32 	sts	0x3286, r21
					teta_cilj = teta;
    4502:	80 91 83 32 	lds	r24, 0x3283
    4506:	90 91 84 32 	lds	r25, 0x3284
    450a:	a0 91 85 32 	lds	r26, 0x3285
    450e:	b0 91 86 32 	lds	r27, 0x3286
    4512:	80 93 cc 24 	sts	0x24CC, r24
    4516:	90 93 cd 24 	sts	0x24CD, r25
    451a:	a0 93 ce 24 	sts	0x24CE, r26
    451e:	b0 93 cf 24 	sts	0x24CF, r27
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    4522:	80 91 6e 29 	lds	r24, 0x296E
    4526:	80 93 dd 28 	sts	0x28DD, r24
					teta = (teta * krug360) / 360;
					teta_cilj = teta;
				}
				
				//slanje odgovora
				i = 0;
    452a:	00 e0       	ldi	r16, 0x00	; 0
    452c:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    452e:	f8 01       	movw	r30, r16
    4530:	e3 52       	subi	r30, 0x23	; 35
    4532:	f7 4d       	sbci	r31, 0xD7	; 215
    4534:	60 81       	ld	r22, Z
    4536:	82 e9       	ldi	r24, 0x92	; 146
    4538:	91 e2       	ldi	r25, 0x21	; 33
    453a:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    453e:	88 23       	and	r24, r24
    4540:	11 f0       	breq	.+4      	; 0x4546 <__stack+0x547>
					{
						i++;
    4542:	0f 5f       	subi	r16, 0xFF	; 255
    4544:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    4546:	10 16       	cp	r1, r16
    4548:	11 06       	cpc	r1, r17
    454a:	8c f7       	brge	.-30     	; 0x452e <__stack+0x52f>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    454c:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;	//ako ne valja CHC ponistava se komanda
    4550:	10 92 3f 2e 	sts	0x2E3F, r1
    4554:	3d c0       	rjmp	.+122    	; 0x45d0 <__stack+0x5d1>
		}
	}
	//Total Stop - 8
	else if(receiveArray[0] == 8)					//provera funkcijskog bajta
    4556:	80 91 6e 29 	lds	r24, 0x296E
    455a:	88 30       	cpi	r24, 0x08	; 8
    455c:	c9 f5       	brne	.+114    	; 0x45d0 <__stack+0x5d1>
	{
		if(RX_i_C0 >= 3)							//stigla je cela poruka
    455e:	80 91 3f 2e 	lds	r24, 0x2E3F
    4562:	83 30       	cpi	r24, 0x03	; 3
    4564:	a8 f1       	brcs	.+106    	; 0x45d0 <__stack+0x5d1>
		{
			proveri_vreme_primanja = 0;				//zastita iskljucena
    4566:	10 92 fb 2d 	sts	0x2DFB, r1
			{
				
				if(receiveArray[1] == 0x01)
    456a:	80 91 6f 29 	lds	r24, 0x296F
    456e:	81 30       	cpi	r24, 0x01	; 1
    4570:	39 f4       	brne	.+14     	; 0x4580 <__stack+0x581>
				{
					stop_PID_levi = 1;
    4572:	80 93 f2 2d 	sts	0x2DF2, r24
					PID_brzina_L = 0;
    4576:	10 92 7b 2e 	sts	0x2E7B, r1
    457a:	10 92 7c 2e 	sts	0x2E7C, r1
    457e:	02 c0       	rjmp	.+4      	; 0x4584 <__stack+0x585>
				}				
				else
					stop_PID_levi = 0;
    4580:	10 92 f2 2d 	sts	0x2DF2, r1
					
				if(receiveArray[2] == 0x01)
    4584:	80 91 70 29 	lds	r24, 0x2970
    4588:	81 30       	cpi	r24, 0x01	; 1
    458a:	39 f4       	brne	.+14     	; 0x459a <__stack+0x59b>
				{
					stop_PID_desni = 1;
    458c:	80 93 f4 29 	sts	0x29F4, r24
					PID_brzina_R = 0;
    4590:	10 92 79 2e 	sts	0x2E79, r1
    4594:	10 92 7a 2e 	sts	0x2E7A, r1
    4598:	02 c0       	rjmp	.+4      	; 0x459e <__stack+0x59f>
				}					
				else
					stop_PID_desni = 0;
    459a:	10 92 f4 29 	sts	0x29F4, r1
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
    459e:	80 91 6e 29 	lds	r24, 0x296E
    45a2:	80 93 dd 28 	sts	0x28DD, r24
				}					
				else
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
    45a6:	00 e0       	ldi	r16, 0x00	; 0
    45a8:	10 e0       	ldi	r17, 0x00	; 0
				sendArray[0] = receiveArray[0];
				while (i < 1)
				{
					bool byteToBuffer;
					byteToBuffer = USART_TXBuffer_PutByte(&USART_C0_data, sendArray[i]);
    45aa:	f8 01       	movw	r30, r16
    45ac:	e3 52       	subi	r30, 0x23	; 35
    45ae:	f7 4d       	sbci	r31, 0xD7	; 215
    45b0:	60 81       	ld	r22, Z
    45b2:	82 e9       	ldi	r24, 0x92	; 146
    45b4:	91 e2       	ldi	r25, 0x21	; 33
    45b6:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
					//sendArray[1] ^= sendArray[i];	//CHC
					if(byteToBuffer)
    45ba:	88 23       	and	r24, r24
    45bc:	11 f0       	breq	.+4      	; 0x45c2 <__stack+0x5c3>
					{
						i++;
    45be:	0f 5f       	subi	r16, 0xFF	; 255
    45c0:	1f 4f       	sbci	r17, 0xFF	; 255
					stop_PID_desni = 0;
				
				//slanje odgovora
				i = 0;
				sendArray[0] = receiveArray[0];
				while (i < 1)
    45c2:	10 16       	cp	r1, r16
    45c4:	11 06       	cpc	r1, r17
    45c6:	8c f7       	brge	.-30     	; 0x45aa <__stack+0x5ab>
					if(byteToBuffer)
					{
						i++;
					}
				}
				RX_i_C0 = 0;
    45c8:	10 92 3f 2e 	sts	0x2E3F, r1
			}
			RX_i_C0 = 0;		//ako ne valja CHC ponistava se komanda
    45cc:	10 92 3f 2e 	sts	0x2E3F, r1
		}
	}
}
    45d0:	24 96       	adiw	r28, 0x04	; 4
    45d2:	cd bf       	out	0x3d, r28	; 61
    45d4:	de bf       	out	0x3e, r29	; 62
    45d6:	df 91       	pop	r29
    45d8:	cf 91       	pop	r28
    45da:	ff 91       	pop	r31
    45dc:	ef 91       	pop	r30
    45de:	bf 91       	pop	r27
    45e0:	af 91       	pop	r26
    45e2:	9f 91       	pop	r25
    45e4:	8f 91       	pop	r24
    45e6:	7f 91       	pop	r23
    45e8:	6f 91       	pop	r22
    45ea:	5f 91       	pop	r21
    45ec:	4f 91       	pop	r20
    45ee:	3f 91       	pop	r19
    45f0:	2f 91       	pop	r18
    45f2:	1f 91       	pop	r17
    45f4:	0f 91       	pop	r16
    45f6:	ff 90       	pop	r15
    45f8:	ef 90       	pop	r14
    45fa:	df 90       	pop	r13
    45fc:	cf 90       	pop	r12
    45fe:	bf 90       	pop	r11
    4600:	af 90       	pop	r10
    4602:	9f 90       	pop	r9
    4604:	8f 90       	pop	r8
    4606:	7f 90       	pop	r7
    4608:	6f 90       	pop	r6
    460a:	5f 90       	pop	r5
    460c:	4f 90       	pop	r4
    460e:	0f 90       	pop	r0
    4610:	0b be       	out	0x3b, r0	; 59
    4612:	0f 90       	pop	r0
    4614:	0a be       	out	0x3a, r0	; 58
    4616:	0f 90       	pop	r0
    4618:	09 be       	out	0x39, r0	; 57
    461a:	0f 90       	pop	r0
    461c:	08 be       	out	0x38, r0	; 56
    461e:	0f 90       	pop	r0
    4620:	0f be       	out	0x3f, r0	; 63
    4622:	0f 90       	pop	r0
    4624:	1f 90       	pop	r1
    4626:	18 95       	reti

00004628 <__vector_77>:

//DESNI PASIVNi QDEC
ISR(TCD0_OVF_vect)
{
    4628:	1f 92       	push	r1
    462a:	0f 92       	push	r0
    462c:	0f b6       	in	r0, 0x3f	; 63
    462e:	0f 92       	push	r0
    4630:	11 24       	eor	r1, r1
    4632:	08 b6       	in	r0, 0x38	; 56
    4634:	0f 92       	push	r0
    4636:	18 be       	out	0x38, r1	; 56
    4638:	0b b6       	in	r0, 0x3b	; 59
    463a:	0f 92       	push	r0
    463c:	1b be       	out	0x3b, r1	; 59
    463e:	8f 93       	push	r24
    4640:	ef 93       	push	r30
    4642:	ff 93       	push	r31
	if((TCD0.CTRLFSET & TC0_DIR_bm) == 0)
    4644:	e0 e0       	ldi	r30, 0x00	; 0
    4646:	f9 e0       	ldi	r31, 0x09	; 9
    4648:	81 85       	ldd	r24, Z+9	; 0x09
    464a:	80 fd       	sbrc	r24, 0
    464c:	03 c0       	rjmp	.+6      	; 0x4654 <__vector_77+0x2c>
		PASIVNI_QDEC_OWF_R = 1;
    464e:	81 e0       	ldi	r24, 0x01	; 1
    4650:	80 93 f7 2d 	sts	0x2DF7, r24
	
	if((TCD0.CTRLFSET & TC0_DIR_bm) == 1)
    4654:	e0 e0       	ldi	r30, 0x00	; 0
    4656:	f9 e0       	ldi	r31, 0x09	; 9
    4658:	81 85       	ldd	r24, Z+9	; 0x09
    465a:	80 ff       	sbrs	r24, 0
    465c:	03 c0       	rjmp	.+6      	; 0x4664 <__vector_77+0x3c>
		PASIVNI_QDEC_OWF_R = 2;
    465e:	82 e0       	ldi	r24, 0x02	; 2
    4660:	80 93 f7 2d 	sts	0x2DF7, r24
}
    4664:	ff 91       	pop	r31
    4666:	ef 91       	pop	r30
    4668:	8f 91       	pop	r24
    466a:	0f 90       	pop	r0
    466c:	0b be       	out	0x3b, r0	; 59
    466e:	0f 90       	pop	r0
    4670:	08 be       	out	0x38, r0	; 56
    4672:	0f 90       	pop	r0
    4674:	0f be       	out	0x3f, r0	; 63
    4676:	0f 90       	pop	r0
    4678:	1f 90       	pop	r1
    467a:	18 95       	reti

0000467c <__vector_83>:
//LEVI PASIVNI QDEC
ISR(TCD1_OVF_vect)
{
    467c:	1f 92       	push	r1
    467e:	0f 92       	push	r0
    4680:	0f b6       	in	r0, 0x3f	; 63
    4682:	0f 92       	push	r0
    4684:	11 24       	eor	r1, r1
    4686:	08 b6       	in	r0, 0x38	; 56
    4688:	0f 92       	push	r0
    468a:	18 be       	out	0x38, r1	; 56
    468c:	0b b6       	in	r0, 0x3b	; 59
    468e:	0f 92       	push	r0
    4690:	1b be       	out	0x3b, r1	; 59
    4692:	8f 93       	push	r24
    4694:	ef 93       	push	r30
    4696:	ff 93       	push	r31
	if((TCD1.CTRLFSET & TC1_DIR_bm) == 0)
    4698:	e0 e4       	ldi	r30, 0x40	; 64
    469a:	f9 e0       	ldi	r31, 0x09	; 9
    469c:	81 85       	ldd	r24, Z+9	; 0x09
    469e:	80 fd       	sbrc	r24, 0
    46a0:	03 c0       	rjmp	.+6      	; 0x46a8 <__vector_83+0x2c>
		PASIVNI_QDEC_OWF_L = 1;
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	80 93 22 2e 	sts	0x2E22, r24
	
	if((TCD1.CTRLFSET & TC1_DIR_bm) == 1)
    46a8:	e0 e4       	ldi	r30, 0x40	; 64
    46aa:	f9 e0       	ldi	r31, 0x09	; 9
    46ac:	81 85       	ldd	r24, Z+9	; 0x09
    46ae:	80 ff       	sbrs	r24, 0
    46b0:	03 c0       	rjmp	.+6      	; 0x46b8 <__vector_83+0x3c>
		PASIVNI_QDEC_OWF_L = 2;
    46b2:	82 e0       	ldi	r24, 0x02	; 2
    46b4:	80 93 22 2e 	sts	0x2E22, r24
}
    46b8:	ff 91       	pop	r31
    46ba:	ef 91       	pop	r30
    46bc:	8f 91       	pop	r24
    46be:	0f 90       	pop	r0
    46c0:	0b be       	out	0x3b, r0	; 59
    46c2:	0f 90       	pop	r0
    46c4:	08 be       	out	0x38, r0	; 56
    46c6:	0f 90       	pop	r0
    46c8:	0f be       	out	0x3f, r0	; 63
    46ca:	0f 90       	pop	r0
    46cc:	1f 90       	pop	r1
    46ce:	18 95       	reti

000046d0 <__vector_59>:
	//return;
//}


ISR(USARTE0_DRE_vect)
{
    46d0:	1f 92       	push	r1
    46d2:	0f 92       	push	r0
    46d4:	0f b6       	in	r0, 0x3f	; 63
    46d6:	0f 92       	push	r0
    46d8:	11 24       	eor	r1, r1
    46da:	08 b6       	in	r0, 0x38	; 56
    46dc:	0f 92       	push	r0
    46de:	18 be       	out	0x38, r1	; 56
    46e0:	09 b6       	in	r0, 0x39	; 57
    46e2:	0f 92       	push	r0
    46e4:	19 be       	out	0x39, r1	; 57
    46e6:	0b b6       	in	r0, 0x3b	; 59
    46e8:	0f 92       	push	r0
    46ea:	1b be       	out	0x3b, r1	; 59
    46ec:	2f 93       	push	r18
    46ee:	3f 93       	push	r19
    46f0:	4f 93       	push	r20
    46f2:	5f 93       	push	r21
    46f4:	6f 93       	push	r22
    46f6:	7f 93       	push	r23
    46f8:	8f 93       	push	r24
    46fa:	9f 93       	push	r25
    46fc:	af 93       	push	r26
    46fe:	bf 93       	push	r27
    4700:	ef 93       	push	r30
    4702:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_E0_data);
    4704:	89 e1       	ldi	r24, 0x19	; 25
    4706:	93 e2       	ldi	r25, 0x23	; 35
    4708:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <USART_DataRegEmpty>
}
    470c:	ff 91       	pop	r31
    470e:	ef 91       	pop	r30
    4710:	bf 91       	pop	r27
    4712:	af 91       	pop	r26
    4714:	9f 91       	pop	r25
    4716:	8f 91       	pop	r24
    4718:	7f 91       	pop	r23
    471a:	6f 91       	pop	r22
    471c:	5f 91       	pop	r21
    471e:	4f 91       	pop	r20
    4720:	3f 91       	pop	r19
    4722:	2f 91       	pop	r18
    4724:	0f 90       	pop	r0
    4726:	0b be       	out	0x3b, r0	; 59
    4728:	0f 90       	pop	r0
    472a:	09 be       	out	0x39, r0	; 57
    472c:	0f 90       	pop	r0
    472e:	08 be       	out	0x38, r0	; 56
    4730:	0f 90       	pop	r0
    4732:	0f be       	out	0x3f, r0	; 63
    4734:	0f 90       	pop	r0
    4736:	1f 90       	pop	r1
    4738:	18 95       	reti

0000473a <__vector_62>:
ISR(USARTE1_DRE_vect)
{
    473a:	1f 92       	push	r1
    473c:	0f 92       	push	r0
    473e:	0f b6       	in	r0, 0x3f	; 63
    4740:	0f 92       	push	r0
    4742:	11 24       	eor	r1, r1
    4744:	08 b6       	in	r0, 0x38	; 56
    4746:	0f 92       	push	r0
    4748:	18 be       	out	0x38, r1	; 56
    474a:	09 b6       	in	r0, 0x39	; 57
    474c:	0f 92       	push	r0
    474e:	19 be       	out	0x39, r1	; 57
    4750:	0b b6       	in	r0, 0x3b	; 59
    4752:	0f 92       	push	r0
    4754:	1b be       	out	0x3b, r1	; 59
    4756:	2f 93       	push	r18
    4758:	3f 93       	push	r19
    475a:	4f 93       	push	r20
    475c:	5f 93       	push	r21
    475e:	6f 93       	push	r22
    4760:	7f 93       	push	r23
    4762:	8f 93       	push	r24
    4764:	9f 93       	push	r25
    4766:	af 93       	push	r26
    4768:	bf 93       	push	r27
    476a:	ef 93       	push	r30
    476c:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_E1_data);
    476e:	8b e0       	ldi	r24, 0x0B	; 11
    4770:	90 e2       	ldi	r25, 0x20	; 32
    4772:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <USART_DataRegEmpty>
}
    4776:	ff 91       	pop	r31
    4778:	ef 91       	pop	r30
    477a:	bf 91       	pop	r27
    477c:	af 91       	pop	r26
    477e:	9f 91       	pop	r25
    4780:	8f 91       	pop	r24
    4782:	7f 91       	pop	r23
    4784:	6f 91       	pop	r22
    4786:	5f 91       	pop	r21
    4788:	4f 91       	pop	r20
    478a:	3f 91       	pop	r19
    478c:	2f 91       	pop	r18
    478e:	0f 90       	pop	r0
    4790:	0b be       	out	0x3b, r0	; 59
    4792:	0f 90       	pop	r0
    4794:	09 be       	out	0x39, r0	; 57
    4796:	0f 90       	pop	r0
    4798:	08 be       	out	0x38, r0	; 56
    479a:	0f 90       	pop	r0
    479c:	0f be       	out	0x3f, r0	; 63
    479e:	0f 90       	pop	r0
    47a0:	1f 90       	pop	r1
    47a2:	18 95       	reti

000047a4 <__vector_26>:
ISR(USARTC0_DRE_vect)
{
    47a4:	1f 92       	push	r1
    47a6:	0f 92       	push	r0
    47a8:	0f b6       	in	r0, 0x3f	; 63
    47aa:	0f 92       	push	r0
    47ac:	11 24       	eor	r1, r1
    47ae:	08 b6       	in	r0, 0x38	; 56
    47b0:	0f 92       	push	r0
    47b2:	18 be       	out	0x38, r1	; 56
    47b4:	09 b6       	in	r0, 0x39	; 57
    47b6:	0f 92       	push	r0
    47b8:	19 be       	out	0x39, r1	; 57
    47ba:	0b b6       	in	r0, 0x3b	; 59
    47bc:	0f 92       	push	r0
    47be:	1b be       	out	0x3b, r1	; 59
    47c0:	2f 93       	push	r18
    47c2:	3f 93       	push	r19
    47c4:	4f 93       	push	r20
    47c6:	5f 93       	push	r21
    47c8:	6f 93       	push	r22
    47ca:	7f 93       	push	r23
    47cc:	8f 93       	push	r24
    47ce:	9f 93       	push	r25
    47d0:	af 93       	push	r26
    47d2:	bf 93       	push	r27
    47d4:	ef 93       	push	r30
    47d6:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_C0_data);
    47d8:	82 e9       	ldi	r24, 0x92	; 146
    47da:	91 e2       	ldi	r25, 0x21	; 33
    47dc:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <USART_DataRegEmpty>
}
    47e0:	ff 91       	pop	r31
    47e2:	ef 91       	pop	r30
    47e4:	bf 91       	pop	r27
    47e6:	af 91       	pop	r26
    47e8:	9f 91       	pop	r25
    47ea:	8f 91       	pop	r24
    47ec:	7f 91       	pop	r23
    47ee:	6f 91       	pop	r22
    47f0:	5f 91       	pop	r21
    47f2:	4f 91       	pop	r20
    47f4:	3f 91       	pop	r19
    47f6:	2f 91       	pop	r18
    47f8:	0f 90       	pop	r0
    47fa:	0b be       	out	0x3b, r0	; 59
    47fc:	0f 90       	pop	r0
    47fe:	09 be       	out	0x39, r0	; 57
    4800:	0f 90       	pop	r0
    4802:	08 be       	out	0x38, r0	; 56
    4804:	0f 90       	pop	r0
    4806:	0f be       	out	0x3f, r0	; 63
    4808:	0f 90       	pop	r0
    480a:	1f 90       	pop	r1
    480c:	18 95       	reti

0000480e <__vector_34>:

//Interrupt na taster
ISR(PORTB_INT0_vect)
{
    480e:	1f 92       	push	r1
    4810:	0f 92       	push	r0
    4812:	0f b6       	in	r0, 0x3f	; 63
    4814:	0f 92       	push	r0
    4816:	11 24       	eor	r1, r1
    4818:	08 b6       	in	r0, 0x38	; 56
    481a:	0f 92       	push	r0
    481c:	18 be       	out	0x38, r1	; 56
    481e:	09 b6       	in	r0, 0x39	; 57
    4820:	0f 92       	push	r0
    4822:	19 be       	out	0x39, r1	; 57
    4824:	0b b6       	in	r0, 0x3b	; 59
    4826:	0f 92       	push	r0
    4828:	1b be       	out	0x3b, r1	; 59
    482a:	2f 93       	push	r18
    482c:	3f 93       	push	r19
    482e:	4f 93       	push	r20
    4830:	5f 93       	push	r21
    4832:	6f 93       	push	r22
    4834:	7f 93       	push	r23
    4836:	8f 93       	push	r24
    4838:	9f 93       	push	r25
    483a:	af 93       	push	r26
    483c:	bf 93       	push	r27
    483e:	ef 93       	push	r30
    4840:	ff 93       	push	r31
	PORT_TogglePins(&PORTC, 0xFF);
    4842:	8f ef       	ldi	r24, 0xFF	; 255
    4844:	e0 e4       	ldi	r30, 0x40	; 64
    4846:	f6 e0       	ldi	r31, 0x06	; 6
    4848:	87 83       	std	Z+7, r24	; 0x07
	//PORT_TogglePins(&PORTF, 0x08);
	//USART_TXBuffer_PutByte(&USART_C0_data, 43);	//+
	
	broj = motor_sample_L16; //ispis zeljene promenljive
    484a:	80 91 4a 2e 	lds	r24, 0x2E4A
    484e:	90 91 4b 2e 	lds	r25, 0x2E4B
    4852:	80 93 08 2e 	sts	0x2E08, r24
    4856:	90 93 09 2e 	sts	0x2E09, r25
	
	if(broj	> 0)	
    485a:	80 91 08 2e 	lds	r24, 0x2E08
    485e:	90 91 09 2e 	lds	r25, 0x2E09
    4862:	18 16       	cp	r1, r24
    4864:	19 06       	cpc	r1, r25
    4866:	34 f4       	brge	.+12     	; 0x4874 <__vector_34+0x66>
		USART_TXBuffer_PutByte(&USART_E1_data, 43);	//+
    4868:	6b e2       	ldi	r22, 0x2B	; 43
    486a:	8b e0       	ldi	r24, 0x0B	; 11
    486c:	90 e2       	ldi	r25, 0x20	; 32
    486e:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
    4872:	11 c0       	rjmp	.+34     	; 0x4896 <__vector_34+0x88>
	else if(broj < 0)	
    4874:	80 91 08 2e 	lds	r24, 0x2E08
    4878:	90 91 09 2e 	lds	r25, 0x2E09
    487c:	99 23       	and	r25, r25
    487e:	34 f4       	brge	.+12     	; 0x488c <__vector_34+0x7e>
		USART_TXBuffer_PutByte(&USART_E1_data, 45);	//-
    4880:	6d e2       	ldi	r22, 0x2D	; 45
    4882:	8b e0       	ldi	r24, 0x0B	; 11
    4884:	90 e2       	ldi	r25, 0x20	; 32
    4886:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
    488a:	05 c0       	rjmp	.+10     	; 0x4896 <__vector_34+0x88>
	else
		USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space		
    488c:	60 e2       	ldi	r22, 0x20	; 32
    488e:	8b e0       	ldi	r24, 0x0B	; 11
    4890:	90 e2       	ldi	r25, 0x20	; 32
    4892:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	if(broj < 0)	//pozitiviziramo broj
    4896:	80 91 08 2e 	lds	r24, 0x2E08
    489a:	90 91 09 2e 	lds	r25, 0x2E09
    489e:	99 23       	and	r25, r25
    48a0:	5c f4       	brge	.+22     	; 0x48b8 <__vector_34+0xaa>
		broj = broj * (-1);	
    48a2:	80 91 08 2e 	lds	r24, 0x2E08
    48a6:	90 91 09 2e 	lds	r25, 0x2E09
    48aa:	91 95       	neg	r25
    48ac:	81 95       	neg	r24
    48ae:	91 09       	sbc	r25, r1
    48b0:	80 93 08 2e 	sts	0x2E08, r24
    48b4:	90 93 09 2e 	sts	0x2E09, r25
	broj1 = broj % 10 | 0x30;	
    48b8:	80 91 08 2e 	lds	r24, 0x2E08
    48bc:	90 91 09 2e 	lds	r25, 0x2E09
    48c0:	2a e0       	ldi	r18, 0x0A	; 10
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	b9 01       	movw	r22, r18
    48c6:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    48ca:	80 63       	ori	r24, 0x30	; 48
    48cc:	80 93 44 2e 	sts	0x2E44, r24
    48d0:	90 93 45 2e 	sts	0x2E45, r25
	broj = broj / 10;
    48d4:	80 91 08 2e 	lds	r24, 0x2E08
    48d8:	90 91 09 2e 	lds	r25, 0x2E09
    48dc:	b9 01       	movw	r22, r18
    48de:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    48e2:	60 93 08 2e 	sts	0x2E08, r22
    48e6:	70 93 09 2e 	sts	0x2E09, r23
	broj10 = broj % 10 | 0x30;
    48ea:	80 91 08 2e 	lds	r24, 0x2E08
    48ee:	90 91 09 2e 	lds	r25, 0x2E09
    48f2:	b9 01       	movw	r22, r18
    48f4:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    48f8:	80 63       	ori	r24, 0x30	; 48
    48fa:	80 93 73 32 	sts	0x3273, r24
    48fe:	90 93 74 32 	sts	0x3274, r25
	broj = broj / 10;
    4902:	80 91 08 2e 	lds	r24, 0x2E08
    4906:	90 91 09 2e 	lds	r25, 0x2E09
    490a:	b9 01       	movw	r22, r18
    490c:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4910:	60 93 08 2e 	sts	0x2E08, r22
    4914:	70 93 09 2e 	sts	0x2E09, r23
	broj100 = broj % 10 | 0x30;
    4918:	80 91 08 2e 	lds	r24, 0x2E08
    491c:	90 91 09 2e 	lds	r25, 0x2E09
    4920:	b9 01       	movw	r22, r18
    4922:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4926:	80 63       	ori	r24, 0x30	; 48
    4928:	80 93 37 2e 	sts	0x2E37, r24
    492c:	90 93 38 2e 	sts	0x2E38, r25
	broj = broj / 10;
    4930:	80 91 08 2e 	lds	r24, 0x2E08
    4934:	90 91 09 2e 	lds	r25, 0x2E09
    4938:	b9 01       	movw	r22, r18
    493a:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    493e:	60 93 08 2e 	sts	0x2E08, r22
    4942:	70 93 09 2e 	sts	0x2E09, r23
	broj1000 = broj % 10 | 0x30;
    4946:	80 91 08 2e 	lds	r24, 0x2E08
    494a:	90 91 09 2e 	lds	r25, 0x2E09
    494e:	b9 01       	movw	r22, r18
    4950:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4954:	80 63       	ori	r24, 0x30	; 48
    4956:	80 93 d7 28 	sts	0x28D7, r24
    495a:	90 93 d8 28 	sts	0x28D8, r25
	broj = broj / 10;
    495e:	80 91 08 2e 	lds	r24, 0x2E08
    4962:	90 91 09 2e 	lds	r25, 0x2E09
    4966:	b9 01       	movw	r22, r18
    4968:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    496c:	60 93 08 2e 	sts	0x2E08, r22
    4970:	70 93 09 2e 	sts	0x2E09, r23
	broj10000 = broj % 10 | 0x30;
    4974:	80 91 08 2e 	lds	r24, 0x2E08
    4978:	90 91 09 2e 	lds	r25, 0x2E09
    497c:	b9 01       	movw	r22, r18
    497e:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4982:	80 63       	ori	r24, 0x30	; 48
    4984:	80 93 c3 28 	sts	0x28C3, r24
    4988:	90 93 c4 28 	sts	0x28C4, r25
	USART_TXBuffer_PutByte(&USART_E1_data, broj10000);
    498c:	60 91 c3 28 	lds	r22, 0x28C3
    4990:	70 91 c4 28 	lds	r23, 0x28C4
    4994:	8b e0       	ldi	r24, 0x0B	; 11
    4996:	90 e2       	ldi	r25, 0x20	; 32
    4998:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1000);
    499c:	60 91 d7 28 	lds	r22, 0x28D7
    49a0:	70 91 d8 28 	lds	r23, 0x28D8
    49a4:	8b e0       	ldi	r24, 0x0B	; 11
    49a6:	90 e2       	ldi	r25, 0x20	; 32
    49a8:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj100);
    49ac:	60 91 37 2e 	lds	r22, 0x2E37
    49b0:	70 91 38 2e 	lds	r23, 0x2E38
    49b4:	8b e0       	ldi	r24, 0x0B	; 11
    49b6:	90 e2       	ldi	r25, 0x20	; 32
    49b8:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj10);
    49bc:	60 91 73 32 	lds	r22, 0x3273
    49c0:	70 91 74 32 	lds	r23, 0x3274
    49c4:	8b e0       	ldi	r24, 0x0B	; 11
    49c6:	90 e2       	ldi	r25, 0x20	; 32
    49c8:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1);
    49cc:	60 91 44 2e 	lds	r22, 0x2E44
    49d0:	70 91 45 2e 	lds	r23, 0x2E45
    49d4:	8b e0       	ldi	r24, 0x0B	; 11
    49d6:	90 e2       	ldi	r25, 0x20	; 32
    49d8:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space		
    49dc:	60 e2       	ldi	r22, 0x20	; 32
    49de:	8b e0       	ldi	r24, 0x0B	; 11
    49e0:	90 e2       	ldi	r25, 0x20	; 32
    49e2:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 0x3A);	//:
    49e6:	6a e3       	ldi	r22, 0x3A	; 58
    49e8:	8b e0       	ldi	r24, 0x0B	; 11
    49ea:	90 e2       	ldi	r25, 0x20	; 32
    49ec:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space		
    49f0:	60 e2       	ldi	r22, 0x20	; 32
    49f2:	8b e0       	ldi	r24, 0x0B	; 11
    49f4:	90 e2       	ldi	r25, 0x20	; 32
    49f6:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	
	
	broj = motor_sample_R16;	//ispis zeljene promenljive
    49fa:	80 91 63 2e 	lds	r24, 0x2E63
    49fe:	90 91 64 2e 	lds	r25, 0x2E64
    4a02:	80 93 08 2e 	sts	0x2E08, r24
    4a06:	90 93 09 2e 	sts	0x2E09, r25
	
	if(broj	> 0)	
    4a0a:	80 91 08 2e 	lds	r24, 0x2E08
    4a0e:	90 91 09 2e 	lds	r25, 0x2E09
    4a12:	18 16       	cp	r1, r24
    4a14:	19 06       	cpc	r1, r25
    4a16:	34 f4       	brge	.+12     	; 0x4a24 <__vector_34+0x216>
		USART_TXBuffer_PutByte(&USART_E1_data, 43);	//+
    4a18:	6b e2       	ldi	r22, 0x2B	; 43
    4a1a:	8b e0       	ldi	r24, 0x0B	; 11
    4a1c:	90 e2       	ldi	r25, 0x20	; 32
    4a1e:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
    4a22:	11 c0       	rjmp	.+34     	; 0x4a46 <__vector_34+0x238>
	else if(broj < 0)	
    4a24:	80 91 08 2e 	lds	r24, 0x2E08
    4a28:	90 91 09 2e 	lds	r25, 0x2E09
    4a2c:	99 23       	and	r25, r25
    4a2e:	34 f4       	brge	.+12     	; 0x4a3c <__vector_34+0x22e>
		USART_TXBuffer_PutByte(&USART_E1_data, 45);	//-
    4a30:	6d e2       	ldi	r22, 0x2D	; 45
    4a32:	8b e0       	ldi	r24, 0x0B	; 11
    4a34:	90 e2       	ldi	r25, 0x20	; 32
    4a36:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
    4a3a:	05 c0       	rjmp	.+10     	; 0x4a46 <__vector_34+0x238>
	else
		USART_TXBuffer_PutByte(&USART_E1_data, 32);	//space	
    4a3c:	60 e2       	ldi	r22, 0x20	; 32
    4a3e:	8b e0       	ldi	r24, 0x0B	; 11
    4a40:	90 e2       	ldi	r25, 0x20	; 32
    4a42:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	if(broj < 0)	//pozitiviramo broj
    4a46:	80 91 08 2e 	lds	r24, 0x2E08
    4a4a:	90 91 09 2e 	lds	r25, 0x2E09
    4a4e:	99 23       	and	r25, r25
    4a50:	5c f4       	brge	.+22     	; 0x4a68 <__vector_34+0x25a>
		broj = broj * (-1);
    4a52:	80 91 08 2e 	lds	r24, 0x2E08
    4a56:	90 91 09 2e 	lds	r25, 0x2E09
    4a5a:	91 95       	neg	r25
    4a5c:	81 95       	neg	r24
    4a5e:	91 09       	sbc	r25, r1
    4a60:	80 93 08 2e 	sts	0x2E08, r24
    4a64:	90 93 09 2e 	sts	0x2E09, r25
	broj1 = broj % 10 | 0x30;	
    4a68:	80 91 08 2e 	lds	r24, 0x2E08
    4a6c:	90 91 09 2e 	lds	r25, 0x2E09
    4a70:	2a e0       	ldi	r18, 0x0A	; 10
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	b9 01       	movw	r22, r18
    4a76:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4a7a:	80 63       	ori	r24, 0x30	; 48
    4a7c:	80 93 44 2e 	sts	0x2E44, r24
    4a80:	90 93 45 2e 	sts	0x2E45, r25
	broj = broj / 10;
    4a84:	80 91 08 2e 	lds	r24, 0x2E08
    4a88:	90 91 09 2e 	lds	r25, 0x2E09
    4a8c:	b9 01       	movw	r22, r18
    4a8e:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4a92:	60 93 08 2e 	sts	0x2E08, r22
    4a96:	70 93 09 2e 	sts	0x2E09, r23
	broj10 = broj % 10 | 0x30;
    4a9a:	80 91 08 2e 	lds	r24, 0x2E08
    4a9e:	90 91 09 2e 	lds	r25, 0x2E09
    4aa2:	b9 01       	movw	r22, r18
    4aa4:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4aa8:	80 63       	ori	r24, 0x30	; 48
    4aaa:	80 93 73 32 	sts	0x3273, r24
    4aae:	90 93 74 32 	sts	0x3274, r25
	broj = broj / 10;	
    4ab2:	80 91 08 2e 	lds	r24, 0x2E08
    4ab6:	90 91 09 2e 	lds	r25, 0x2E09
    4aba:	b9 01       	movw	r22, r18
    4abc:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4ac0:	60 93 08 2e 	sts	0x2E08, r22
    4ac4:	70 93 09 2e 	sts	0x2E09, r23
	broj100 = broj % 10 | 0x30;
    4ac8:	80 91 08 2e 	lds	r24, 0x2E08
    4acc:	90 91 09 2e 	lds	r25, 0x2E09
    4ad0:	b9 01       	movw	r22, r18
    4ad2:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4ad6:	80 63       	ori	r24, 0x30	; 48
    4ad8:	80 93 37 2e 	sts	0x2E37, r24
    4adc:	90 93 38 2e 	sts	0x2E38, r25
	broj = broj / 10;
    4ae0:	80 91 08 2e 	lds	r24, 0x2E08
    4ae4:	90 91 09 2e 	lds	r25, 0x2E09
    4ae8:	b9 01       	movw	r22, r18
    4aea:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4aee:	60 93 08 2e 	sts	0x2E08, r22
    4af2:	70 93 09 2e 	sts	0x2E09, r23
	broj1000 = broj % 10 | 0x30;
    4af6:	80 91 08 2e 	lds	r24, 0x2E08
    4afa:	90 91 09 2e 	lds	r25, 0x2E09
    4afe:	b9 01       	movw	r22, r18
    4b00:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4b04:	80 63       	ori	r24, 0x30	; 48
    4b06:	80 93 d7 28 	sts	0x28D7, r24
    4b0a:	90 93 d8 28 	sts	0x28D8, r25
	broj = broj / 10;
    4b0e:	80 91 08 2e 	lds	r24, 0x2E08
    4b12:	90 91 09 2e 	lds	r25, 0x2E09
    4b16:	b9 01       	movw	r22, r18
    4b18:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4b1c:	60 93 08 2e 	sts	0x2E08, r22
    4b20:	70 93 09 2e 	sts	0x2E09, r23
	broj10000 = broj % 10 | 0x30;
    4b24:	80 91 08 2e 	lds	r24, 0x2E08
    4b28:	90 91 09 2e 	lds	r25, 0x2E09
    4b2c:	b9 01       	movw	r22, r18
    4b2e:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__divmodhi4>
    4b32:	80 63       	ori	r24, 0x30	; 48
    4b34:	80 93 c3 28 	sts	0x28C3, r24
    4b38:	90 93 c4 28 	sts	0x28C4, r25
	USART_TXBuffer_PutByte(&USART_E1_data, broj10000);
    4b3c:	60 91 c3 28 	lds	r22, 0x28C3
    4b40:	70 91 c4 28 	lds	r23, 0x28C4
    4b44:	8b e0       	ldi	r24, 0x0B	; 11
    4b46:	90 e2       	ldi	r25, 0x20	; 32
    4b48:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1000);
    4b4c:	60 91 d7 28 	lds	r22, 0x28D7
    4b50:	70 91 d8 28 	lds	r23, 0x28D8
    4b54:	8b e0       	ldi	r24, 0x0B	; 11
    4b56:	90 e2       	ldi	r25, 0x20	; 32
    4b58:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj100);
    4b5c:	60 91 37 2e 	lds	r22, 0x2E37
    4b60:	70 91 38 2e 	lds	r23, 0x2E38
    4b64:	8b e0       	ldi	r24, 0x0B	; 11
    4b66:	90 e2       	ldi	r25, 0x20	; 32
    4b68:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj10);
    4b6c:	60 91 73 32 	lds	r22, 0x3273
    4b70:	70 91 74 32 	lds	r23, 0x3274
    4b74:	8b e0       	ldi	r24, 0x0B	; 11
    4b76:	90 e2       	ldi	r25, 0x20	; 32
    4b78:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, broj1);
    4b7c:	60 91 44 2e 	lds	r22, 0x2E44
    4b80:	70 91 45 2e 	lds	r23, 0x2E45
    4b84:	8b e0       	ldi	r24, 0x0B	; 11
    4b86:	90 e2       	ldi	r25, 0x20	; 32
    4b88:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
	USART_TXBuffer_PutByte(&USART_E1_data, 13);	//CR
    4b8c:	6d e0       	ldi	r22, 0x0D	; 13
    4b8e:	8b e0       	ldi	r24, 0x0B	; 11
    4b90:	90 e2       	ldi	r25, 0x20	; 32
    4b92:	0e 94 ef 34 	call	0x69de	; 0x69de <USART_TXBuffer_PutByte>
}
    4b96:	ff 91       	pop	r31
    4b98:	ef 91       	pop	r30
    4b9a:	bf 91       	pop	r27
    4b9c:	af 91       	pop	r26
    4b9e:	9f 91       	pop	r25
    4ba0:	8f 91       	pop	r24
    4ba2:	7f 91       	pop	r23
    4ba4:	6f 91       	pop	r22
    4ba6:	5f 91       	pop	r21
    4ba8:	4f 91       	pop	r20
    4baa:	3f 91       	pop	r19
    4bac:	2f 91       	pop	r18
    4bae:	0f 90       	pop	r0
    4bb0:	0b be       	out	0x3b, r0	; 59
    4bb2:	0f 90       	pop	r0
    4bb4:	09 be       	out	0x39, r0	; 57
    4bb6:	0f 90       	pop	r0
    4bb8:	08 be       	out	0x38, r0	; 56
    4bba:	0f 90       	pop	r0
    4bbc:	0f be       	out	0x3f, r0	; 63
    4bbe:	0f 90       	pop	r0
    4bc0:	1f 90       	pop	r1
    4bc2:	18 95       	reti

00004bc4 <Racunanje_trenutne_pozicije>:
krug180,
krug360;


void Racunanje_trenutne_pozicije(void)
{
    4bc4:	4f 92       	push	r4
    4bc6:	5f 92       	push	r5
    4bc8:	6f 92       	push	r6
    4bca:	7f 92       	push	r7
    4bcc:	8f 92       	push	r8
    4bce:	9f 92       	push	r9
    4bd0:	af 92       	push	r10
    4bd2:	bf 92       	push	r11
    4bd4:	cf 92       	push	r12
    4bd6:	df 92       	push	r13
    4bd8:	ef 92       	push	r14
    4bda:	ff 92       	push	r15
	//uzimanje stanja enkodera
	count_L = TCD1.CNT;
    4bdc:	e0 e4       	ldi	r30, 0x40	; 64
    4bde:	f9 e0       	ldi	r31, 0x09	; 9
    4be0:	80 a1       	ldd	r24, Z+32	; 0x20
    4be2:	91 a1       	ldd	r25, Z+33	; 0x21
    4be4:	80 93 7d 32 	sts	0x327D, r24
    4be8:	90 93 7e 32 	sts	0x327E, r25
	count_R = TCD0.CNT;
    4bec:	e0 e0       	ldi	r30, 0x00	; 0
    4bee:	f9 e0       	ldi	r31, 0x09	; 9
    4bf0:	80 a1       	ldd	r24, Z+32	; 0x20
    4bf2:	91 a1       	ldd	r25, Z+33	; 0x21
    4bf4:	a0 e0       	ldi	r26, 0x00	; 0
    4bf6:	b0 e0       	ldi	r27, 0x00	; 0
    4bf8:	80 93 1e 2e 	sts	0x2E1E, r24
    4bfc:	90 93 1f 2e 	sts	0x2E1F, r25
    4c00:	a0 93 20 2e 	sts	0x2E20, r26
    4c04:	b0 93 21 2e 	sts	0x2E21, r27
	
	//desni enkoder
	if(PASIVNI_QDEC_OWF_R == 0)
    4c08:	80 91 f7 2d 	lds	r24, 0x2DF7
    4c0c:	81 11       	cpse	r24, r1
    4c0e:	17 c0       	rjmp	.+46     	; 0x4c3e <Racunanje_trenutne_pozicije+0x7a>
	{
		sample_R16 = (count_R - last_count_R);
    4c10:	40 91 1e 2e 	lds	r20, 0x2E1E
    4c14:	50 91 1f 2e 	lds	r21, 0x2E1F
    4c18:	60 91 20 2e 	lds	r22, 0x2E20
    4c1c:	70 91 21 2e 	lds	r23, 0x2E21
    4c20:	80 91 ee 29 	lds	r24, 0x29EE
    4c24:	90 91 ef 29 	lds	r25, 0x29EF
    4c28:	a0 91 f0 29 	lds	r26, 0x29F0
    4c2c:	b0 91 f1 29 	lds	r27, 0x29F1
    4c30:	48 1b       	sub	r20, r24
    4c32:	59 0b       	sbc	r21, r25
    4c34:	40 93 c0 24 	sts	0x24C0, r20
    4c38:	50 93 c1 24 	sts	0x24C1, r21
    4c3c:	3b c0       	rjmp	.+118    	; 0x4cb4 <Racunanje_trenutne_pozicije+0xf0>
	}
	else
	{
		if(PASIVNI_QDEC_OWF_R == 1)
    4c3e:	80 91 f7 2d 	lds	r24, 0x2DF7
    4c42:	81 30       	cpi	r24, 0x01	; 1
    4c44:	c9 f4       	brne	.+50     	; 0x4c78 <Racunanje_trenutne_pozicije+0xb4>
		{
			sample_R16 = count_R + ~(last_count_R);
    4c46:	40 91 ee 29 	lds	r20, 0x29EE
    4c4a:	50 91 ef 29 	lds	r21, 0x29EF
    4c4e:	60 91 f0 29 	lds	r22, 0x29F0
    4c52:	70 91 f1 29 	lds	r23, 0x29F1
    4c56:	80 91 1e 2e 	lds	r24, 0x2E1E
    4c5a:	90 91 1f 2e 	lds	r25, 0x2E1F
    4c5e:	a0 91 20 2e 	lds	r26, 0x2E20
    4c62:	b0 91 21 2e 	lds	r27, 0x2E21
    4c66:	40 95       	com	r20
    4c68:	50 95       	com	r21
    4c6a:	84 0f       	add	r24, r20
    4c6c:	95 1f       	adc	r25, r21
    4c6e:	80 93 c0 24 	sts	0x24C0, r24
    4c72:	90 93 c1 24 	sts	0x24C1, r25
    4c76:	1c c0       	rjmp	.+56     	; 0x4cb0 <Racunanje_trenutne_pozicije+0xec>
		}
		else if(PASIVNI_QDEC_OWF_R == 2)
    4c78:	80 91 f7 2d 	lds	r24, 0x2DF7
    4c7c:	82 30       	cpi	r24, 0x02	; 2
    4c7e:	c1 f4       	brne	.+48     	; 0x4cb0 <Racunanje_trenutne_pozicije+0xec>
		{
			sample_R16 = -(last_count_R + ~(count_R));
    4c80:	40 91 1e 2e 	lds	r20, 0x2E1E
    4c84:	50 91 1f 2e 	lds	r21, 0x2E1F
    4c88:	60 91 20 2e 	lds	r22, 0x2E20
    4c8c:	70 91 21 2e 	lds	r23, 0x2E21
    4c90:	80 91 ee 29 	lds	r24, 0x29EE
    4c94:	90 91 ef 29 	lds	r25, 0x29EF
    4c98:	a0 91 f0 29 	lds	r26, 0x29F0
    4c9c:	b0 91 f1 29 	lds	r27, 0x29F1
    4ca0:	4f 5f       	subi	r20, 0xFF	; 255
    4ca2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ca4:	48 1b       	sub	r20, r24
    4ca6:	59 0b       	sbc	r21, r25
    4ca8:	40 93 c0 24 	sts	0x24C0, r20
    4cac:	50 93 c1 24 	sts	0x24C1, r21
		}
		
		PASIVNI_QDEC_OWF_R = 0;
    4cb0:	10 92 f7 2d 	sts	0x2DF7, r1
	}
	
	//levi enkoder
	if(PASIVNI_QDEC_OWF_L == 0)
    4cb4:	80 91 22 2e 	lds	r24, 0x2E22
    4cb8:	81 11       	cpse	r24, r1
    4cba:	0f c0       	rjmp	.+30     	; 0x4cda <Racunanje_trenutne_pozicije+0x116>
	{
		sample_L16 = (count_L - last_count_L);
    4cbc:	80 91 7d 32 	lds	r24, 0x327D
    4cc0:	90 91 7e 32 	lds	r25, 0x327E
    4cc4:	20 91 2d 2e 	lds	r18, 0x2E2D
    4cc8:	30 91 2e 2e 	lds	r19, 0x2E2E
    4ccc:	82 1b       	sub	r24, r18
    4cce:	93 0b       	sbc	r25, r19
    4cd0:	80 93 a0 24 	sts	0x24A0, r24
    4cd4:	90 93 a1 24 	sts	0x24A1, r25
    4cd8:	2a c0       	rjmp	.+84     	; 0x4d2e <Racunanje_trenutne_pozicije+0x16a>
	}
	else
	{
		if(PASIVNI_QDEC_OWF_L == 1)
    4cda:	80 91 22 2e 	lds	r24, 0x2E22
    4cde:	81 30       	cpi	r24, 0x01	; 1
    4ce0:	89 f4       	brne	.+34     	; 0x4d04 <Racunanje_trenutne_pozicije+0x140>
		{
			sample_L16 = count_L + ~(last_count_L);
    4ce2:	80 91 2d 2e 	lds	r24, 0x2E2D
    4ce6:	90 91 2e 2e 	lds	r25, 0x2E2E
    4cea:	20 91 7d 32 	lds	r18, 0x327D
    4cee:	30 91 7e 32 	lds	r19, 0x327E
    4cf2:	80 95       	com	r24
    4cf4:	90 95       	com	r25
    4cf6:	82 0f       	add	r24, r18
    4cf8:	93 1f       	adc	r25, r19
    4cfa:	80 93 a0 24 	sts	0x24A0, r24
    4cfe:	90 93 a1 24 	sts	0x24A1, r25
    4d02:	13 c0       	rjmp	.+38     	; 0x4d2a <Racunanje_trenutne_pozicije+0x166>
		} 
		else if(PASIVNI_QDEC_OWF_L == 2)
    4d04:	80 91 22 2e 	lds	r24, 0x2E22
    4d08:	82 30       	cpi	r24, 0x02	; 2
    4d0a:	79 f4       	brne	.+30     	; 0x4d2a <Racunanje_trenutne_pozicije+0x166>
		{
			sample_L16 = -(last_count_L + ~(count_L));
    4d0c:	80 91 7d 32 	lds	r24, 0x327D
    4d10:	90 91 7e 32 	lds	r25, 0x327E
    4d14:	20 91 2d 2e 	lds	r18, 0x2E2D
    4d18:	30 91 2e 2e 	lds	r19, 0x2E2E
    4d1c:	01 96       	adiw	r24, 0x01	; 1
    4d1e:	82 1b       	sub	r24, r18
    4d20:	93 0b       	sbc	r25, r19
    4d22:	80 93 a0 24 	sts	0x24A0, r24
    4d26:	90 93 a1 24 	sts	0x24A1, r25
		}
		
		PASIVNI_QDEC_OWF_L = 0;
    4d2a:	10 92 22 2e 	sts	0x2E22, r1
	}
	
	
	//osvezavanje last_ promenjive
	last_count_R = count_R;
    4d2e:	80 91 1e 2e 	lds	r24, 0x2E1E
    4d32:	90 91 1f 2e 	lds	r25, 0x2E1F
    4d36:	a0 91 20 2e 	lds	r26, 0x2E20
    4d3a:	b0 91 21 2e 	lds	r27, 0x2E21
    4d3e:	80 93 ee 29 	sts	0x29EE, r24
    4d42:	90 93 ef 29 	sts	0x29EF, r25
    4d46:	a0 93 f0 29 	sts	0x29F0, r26
    4d4a:	b0 93 f1 29 	sts	0x29F1, r27
	last_count_L = count_L;
    4d4e:	80 91 7d 32 	lds	r24, 0x327D
    4d52:	90 91 7e 32 	lds	r25, 0x327E
    4d56:	80 93 2d 2e 	sts	0x2E2D, r24
    4d5a:	90 93 2e 2e 	sts	0x2E2E, r25
	
	//potrebne vrednosti za trigonometriju
	translacija_10ms = (sample_R16 + sample_L16);
    4d5e:	20 91 c0 24 	lds	r18, 0x24C0
    4d62:	30 91 c1 24 	lds	r19, 0x24C1
    4d66:	80 91 a0 24 	lds	r24, 0x24A0
    4d6a:	90 91 a1 24 	lds	r25, 0x24A1
    4d6e:	82 0f       	add	r24, r18
    4d70:	93 1f       	adc	r25, r19
    4d72:	80 93 f2 29 	sts	0x29F2, r24
    4d76:	90 93 f3 29 	sts	0x29F3, r25
	rotacija_10ms = (sample_R16 - sample_L16);
    4d7a:	80 91 c0 24 	lds	r24, 0x24C0
    4d7e:	90 91 c1 24 	lds	r25, 0x24C1
    4d82:	20 91 a0 24 	lds	r18, 0x24A0
    4d86:	30 91 a1 24 	lds	r19, 0x24A1
    4d8a:	82 1b       	sub	r24, r18
    4d8c:	93 0b       	sbc	r25, r19
    4d8e:	80 93 87 32 	sts	0x3287, r24
    4d92:	90 93 88 32 	sts	0x3288, r25
	teta += rotacija_10ms;
    4d96:	80 91 87 32 	lds	r24, 0x3287
    4d9a:	90 91 88 32 	lds	r25, 0x3288
    4d9e:	40 91 83 32 	lds	r20, 0x3283
    4da2:	50 91 84 32 	lds	r21, 0x3284
    4da6:	60 91 85 32 	lds	r22, 0x3285
    4daa:	70 91 86 32 	lds	r23, 0x3286
    4dae:	aa 27       	eor	r26, r26
    4db0:	97 fd       	sbrc	r25, 7
    4db2:	a0 95       	com	r26
    4db4:	ba 2f       	mov	r27, r26
    4db6:	84 0f       	add	r24, r20
    4db8:	95 1f       	adc	r25, r21
    4dba:	a6 1f       	adc	r26, r22
    4dbc:	b7 1f       	adc	r27, r23
    4dbe:	80 93 83 32 	sts	0x3283, r24
    4dc2:	90 93 84 32 	sts	0x3284, r25
    4dc6:	a0 93 85 32 	sts	0x3285, r26
    4dca:	b0 93 86 32 	sts	0x3286, r27
	translacija += ((long)(translacija_10ms));
    4dce:	80 91 f2 29 	lds	r24, 0x29F2
    4dd2:	90 91 f3 29 	lds	r25, 0x29F3
    4dd6:	40 91 b4 24 	lds	r20, 0x24B4
    4dda:	50 91 b5 24 	lds	r21, 0x24B5
    4dde:	60 91 b6 24 	lds	r22, 0x24B6
    4de2:	70 91 b7 24 	lds	r23, 0x24B7
    4de6:	aa 27       	eor	r26, r26
    4de8:	97 fd       	sbrc	r25, 7
    4dea:	a0 95       	com	r26
    4dec:	ba 2f       	mov	r27, r26
    4dee:	84 0f       	add	r24, r20
    4df0:	95 1f       	adc	r25, r21
    4df2:	a6 1f       	adc	r26, r22
    4df4:	b7 1f       	adc	r27, r23
    4df6:	80 93 b4 24 	sts	0x24B4, r24
    4dfa:	90 93 b5 24 	sts	0x24B5, r25
    4dfe:	a0 93 b6 24 	sts	0x24B6, r26
    4e02:	b0 93 b7 24 	sts	0x24B7, r27
	
	//ako predje ceo krug u pozitivnom smeru  //PROVERI OVO
	if(teta >= krug360)
    4e06:	40 91 83 32 	lds	r20, 0x3283
    4e0a:	50 91 84 32 	lds	r21, 0x3284
    4e0e:	60 91 85 32 	lds	r22, 0x3285
    4e12:	70 91 86 32 	lds	r23, 0x3286
    4e16:	80 91 75 32 	lds	r24, 0x3275
    4e1a:	90 91 76 32 	lds	r25, 0x3276
    4e1e:	a0 91 77 32 	lds	r26, 0x3277
    4e22:	b0 91 78 32 	lds	r27, 0x3278
    4e26:	48 17       	cp	r20, r24
    4e28:	59 07       	cpc	r21, r25
    4e2a:	6a 07       	cpc	r22, r26
    4e2c:	7b 07       	cpc	r23, r27
    4e2e:	e4 f0       	brlt	.+56     	; 0x4e68 <Racunanje_trenutne_pozicije+0x2a4>
		teta -= krug360;
    4e30:	80 91 83 32 	lds	r24, 0x3283
    4e34:	90 91 84 32 	lds	r25, 0x3284
    4e38:	a0 91 85 32 	lds	r26, 0x3285
    4e3c:	b0 91 86 32 	lds	r27, 0x3286
    4e40:	40 91 75 32 	lds	r20, 0x3275
    4e44:	50 91 76 32 	lds	r21, 0x3276
    4e48:	60 91 77 32 	lds	r22, 0x3277
    4e4c:	70 91 78 32 	lds	r23, 0x3278
    4e50:	84 1b       	sub	r24, r20
    4e52:	95 0b       	sbc	r25, r21
    4e54:	a6 0b       	sbc	r26, r22
    4e56:	b7 0b       	sbc	r27, r23
    4e58:	80 93 83 32 	sts	0x3283, r24
    4e5c:	90 93 84 32 	sts	0x3284, r25
    4e60:	a0 93 85 32 	sts	0x3285, r26
    4e64:	b0 93 86 32 	sts	0x3286, r27
	
	//ako predje u negativan smer
	if(teta < 0)
    4e68:	80 91 83 32 	lds	r24, 0x3283
    4e6c:	90 91 84 32 	lds	r25, 0x3284
    4e70:	a0 91 85 32 	lds	r26, 0x3285
    4e74:	b0 91 86 32 	lds	r27, 0x3286
    4e78:	bb 23       	and	r27, r27
    4e7a:	e4 f4       	brge	.+56     	; 0x4eb4 <Racunanje_trenutne_pozicije+0x2f0>
		teta += krug360;	
    4e7c:	40 91 83 32 	lds	r20, 0x3283
    4e80:	50 91 84 32 	lds	r21, 0x3284
    4e84:	60 91 85 32 	lds	r22, 0x3285
    4e88:	70 91 86 32 	lds	r23, 0x3286
    4e8c:	80 91 75 32 	lds	r24, 0x3275
    4e90:	90 91 76 32 	lds	r25, 0x3276
    4e94:	a0 91 77 32 	lds	r26, 0x3277
    4e98:	b0 91 78 32 	lds	r27, 0x3278
    4e9c:	84 0f       	add	r24, r20
    4e9e:	95 1f       	adc	r25, r21
    4ea0:	a6 1f       	adc	r26, r22
    4ea2:	b7 1f       	adc	r27, r23
    4ea4:	80 93 83 32 	sts	0x3283, r24
    4ea8:	90 93 84 32 	sts	0x3284, r25
    4eac:	a0 93 85 32 	sts	0x3285, r26
    4eb0:	b0 93 86 32 	sts	0x3286, r27
	
	//racunanje pozicije
	double X_pos_cos, Y_pos_sin;
	X_pos_cos = cos(((double)teta / krug180) * M_PI);
    4eb4:	60 91 83 32 	lds	r22, 0x3283
    4eb8:	70 91 84 32 	lds	r23, 0x3284
    4ebc:	80 91 85 32 	lds	r24, 0x3285
    4ec0:	90 91 86 32 	lds	r25, 0x3286
    4ec4:	c0 90 cf 28 	lds	r12, 0x28CF
    4ec8:	d0 90 d0 28 	lds	r13, 0x28D0
    4ecc:	e0 90 d1 28 	lds	r14, 0x28D1
    4ed0:	f0 90 d2 28 	lds	r15, 0x28D2
    4ed4:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    4ed8:	4b 01       	movw	r8, r22
    4eda:	5c 01       	movw	r10, r24
    4edc:	c7 01       	movw	r24, r14
    4ede:	b6 01       	movw	r22, r12
    4ee0:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    4ee4:	9b 01       	movw	r18, r22
    4ee6:	ac 01       	movw	r20, r24
    4ee8:	c5 01       	movw	r24, r10
    4eea:	b4 01       	movw	r22, r8
    4eec:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__divsf3>
    4ef0:	2b ed       	ldi	r18, 0xDB	; 219
    4ef2:	3f e0       	ldi	r19, 0x0F	; 15
    4ef4:	49 e4       	ldi	r20, 0x49	; 73
    4ef6:	50 e4       	ldi	r21, 0x40	; 64
    4ef8:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    4efc:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <cos>
    4f00:	2b 01       	movw	r4, r22
    4f02:	3c 01       	movw	r6, r24
	Y_pos_sin = sin(((double)teta / krug180) * M_PI);
    4f04:	60 91 83 32 	lds	r22, 0x3283
    4f08:	70 91 84 32 	lds	r23, 0x3284
    4f0c:	80 91 85 32 	lds	r24, 0x3285
    4f10:	90 91 86 32 	lds	r25, 0x3286
    4f14:	c0 90 cf 28 	lds	r12, 0x28CF
    4f18:	d0 90 d0 28 	lds	r13, 0x28D0
    4f1c:	e0 90 d1 28 	lds	r14, 0x28D1
    4f20:	f0 90 d2 28 	lds	r15, 0x28D2
    4f24:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    4f28:	4b 01       	movw	r8, r22
    4f2a:	5c 01       	movw	r10, r24
    4f2c:	c7 01       	movw	r24, r14
    4f2e:	b6 01       	movw	r22, r12
    4f30:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    4f34:	9b 01       	movw	r18, r22
    4f36:	ac 01       	movw	r20, r24
    4f38:	c5 01       	movw	r24, r10
    4f3a:	b4 01       	movw	r22, r8
    4f3c:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__divsf3>
    4f40:	2b ed       	ldi	r18, 0xDB	; 219
    4f42:	3f e0       	ldi	r19, 0x0F	; 15
    4f44:	49 e4       	ldi	r20, 0x49	; 73
    4f46:	50 e4       	ldi	r21, 0x40	; 64
    4f48:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    4f4c:	0e 94 78 38 	call	0x70f0	; 0x70f0 <sin>
    4f50:	4b 01       	movw	r8, r22
    4f52:	5c 01       	movw	r10, r24
	X_pos += (int)(((double)translacija_10ms * X_pos_cos));
    4f54:	60 91 f2 29 	lds	r22, 0x29F2
    4f58:	70 91 f3 29 	lds	r23, 0x29F3
    4f5c:	c0 90 23 2e 	lds	r12, 0x2E23
    4f60:	d0 90 24 2e 	lds	r13, 0x2E24
    4f64:	e0 90 25 2e 	lds	r14, 0x2E25
    4f68:	f0 90 26 2e 	lds	r15, 0x2E26
    4f6c:	88 27       	eor	r24, r24
    4f6e:	77 fd       	sbrc	r23, 7
    4f70:	80 95       	com	r24
    4f72:	98 2f       	mov	r25, r24
    4f74:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    4f78:	a3 01       	movw	r20, r6
    4f7a:	92 01       	movw	r18, r4
    4f7c:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    4f80:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <__fixsfsi>
    4f84:	cb 01       	movw	r24, r22
    4f86:	aa 27       	eor	r26, r26
    4f88:	97 fd       	sbrc	r25, 7
    4f8a:	a0 95       	com	r26
    4f8c:	ba 2f       	mov	r27, r26
    4f8e:	c8 0e       	add	r12, r24
    4f90:	d9 1e       	adc	r13, r25
    4f92:	ea 1e       	adc	r14, r26
    4f94:	fb 1e       	adc	r15, r27
    4f96:	c0 92 23 2e 	sts	0x2E23, r12
    4f9a:	d0 92 24 2e 	sts	0x2E24, r13
    4f9e:	e0 92 25 2e 	sts	0x2E25, r14
    4fa2:	f0 92 26 2e 	sts	0x2E26, r15
	Y_pos += (int)(((double)translacija_10ms * Y_pos_sin));
    4fa6:	60 91 f2 29 	lds	r22, 0x29F2
    4faa:	70 91 f3 29 	lds	r23, 0x29F3
    4fae:	c0 90 02 2a 	lds	r12, 0x2A02
    4fb2:	d0 90 03 2a 	lds	r13, 0x2A03
    4fb6:	e0 90 04 2a 	lds	r14, 0x2A04
    4fba:	f0 90 05 2a 	lds	r15, 0x2A05
    4fbe:	88 27       	eor	r24, r24
    4fc0:	77 fd       	sbrc	r23, 7
    4fc2:	80 95       	com	r24
    4fc4:	98 2f       	mov	r25, r24
    4fc6:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    4fca:	a5 01       	movw	r20, r10
    4fcc:	94 01       	movw	r18, r8
    4fce:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    4fd2:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <__fixsfsi>
    4fd6:	cb 01       	movw	r24, r22
    4fd8:	aa 27       	eor	r26, r26
    4fda:	97 fd       	sbrc	r25, 7
    4fdc:	a0 95       	com	r26
    4fde:	ba 2f       	mov	r27, r26
    4fe0:	c8 0e       	add	r12, r24
    4fe2:	d9 1e       	adc	r13, r25
    4fe4:	ea 1e       	adc	r14, r26
    4fe6:	fb 1e       	adc	r15, r27
    4fe8:	c0 92 02 2a 	sts	0x2A02, r12
    4fec:	d0 92 03 2a 	sts	0x2A03, r13
    4ff0:	e0 92 04 2a 	sts	0x2A04, r14
    4ff4:	f0 92 05 2a 	sts	0x2A05, r15
}
    4ff8:	ff 90       	pop	r15
    4ffa:	ef 90       	pop	r14
    4ffc:	df 90       	pop	r13
    4ffe:	cf 90       	pop	r12
    5000:	bf 90       	pop	r11
    5002:	af 90       	pop	r10
    5004:	9f 90       	pop	r9
    5006:	8f 90       	pop	r8
    5008:	7f 90       	pop	r7
    500a:	6f 90       	pop	r6
    500c:	5f 90       	pop	r5
    500e:	4f 90       	pop	r4
    5010:	08 95       	ret

00005012 <Pracenje_pravca>:

void Pracenje_pravca(void) 
{
    5012:	4f 92       	push	r4
    5014:	5f 92       	push	r5
    5016:	6f 92       	push	r6
    5018:	7f 92       	push	r7
    501a:	8f 92       	push	r8
    501c:	9f 92       	push	r9
    501e:	af 92       	push	r10
    5020:	bf 92       	push	r11
    5022:	cf 92       	push	r12
    5024:	df 92       	push	r13
    5026:	ef 92       	push	r14
    5028:	ff 92       	push	r15
    502a:	0f 93       	push	r16
    502c:	1f 93       	push	r17
    502e:	cf 93       	push	r28
    5030:	df 93       	push	r29
	//Ulaz X_cilj i Y_cilj
	//Izlaz je teta_cilj i rastojanje_cilj
	double X_razlika, Y_razlika, XY_zbir, teta_razlika, teta_cilj_radian;
	
	//ako stignu nove zadate koordinate
	if (X_cilj_stari != X_cilj || Y_cilj_stari != Y_cilj)	
    5032:	40 91 31 2e 	lds	r20, 0x2E31
    5036:	50 91 32 2e 	lds	r21, 0x2E32
    503a:	60 91 33 2e 	lds	r22, 0x2E33
    503e:	70 91 34 2e 	lds	r23, 0x2E34
    5042:	80 91 ae 24 	lds	r24, 0x24AE
    5046:	90 91 af 24 	lds	r25, 0x24AF
    504a:	a0 91 b0 24 	lds	r26, 0x24B0
    504e:	b0 91 b1 24 	lds	r27, 0x24B1
    5052:	48 17       	cp	r20, r24
    5054:	59 07       	cpc	r21, r25
    5056:	6a 07       	cpc	r22, r26
    5058:	7b 07       	cpc	r23, r27
    505a:	a9 f4       	brne	.+42     	; 0x5086 <Pracenje_pravca+0x74>
    505c:	40 91 70 2e 	lds	r20, 0x2E70
    5060:	50 91 71 2e 	lds	r21, 0x2E71
    5064:	60 91 72 2e 	lds	r22, 0x2E72
    5068:	70 91 73 2e 	lds	r23, 0x2E73
    506c:	80 91 0b 2e 	lds	r24, 0x2E0B
    5070:	90 91 0c 2e 	lds	r25, 0x2E0C
    5074:	a0 91 0d 2e 	lds	r26, 0x2E0D
    5078:	b0 91 0e 2e 	lds	r27, 0x2E0E
    507c:	48 17       	cp	r20, r24
    507e:	59 07       	cpc	r21, r25
    5080:	6a 07       	cpc	r22, r26
    5082:	7b 07       	cpc	r23, r27
    5084:	71 f0       	breq	.+28     	; 0x50a2 <Pracenje_pravca+0x90>
	{
		rezervni_ugao = krug45;	//precizno se pozicioniramo u mestu
    5086:	80 91 c8 24 	lds	r24, 0x24C8
    508a:	90 91 c9 24 	lds	r25, 0x24C9
    508e:	a0 91 ca 24 	lds	r26, 0x24CA
    5092:	b0 91 cb 24 	lds	r27, 0x24CB
    5096:	80 93 2f 2e 	sts	0x2E2F, r24
    509a:	90 93 30 2e 	sts	0x2E30, r25
		stigao_flag = 0;
    509e:	10 92 06 20 	sts	0x2006, r1
	}
	X_cilj_stari = X_cilj;
    50a2:	80 91 ae 24 	lds	r24, 0x24AE
    50a6:	90 91 af 24 	lds	r25, 0x24AF
    50aa:	a0 91 b0 24 	lds	r26, 0x24B0
    50ae:	b0 91 b1 24 	lds	r27, 0x24B1
    50b2:	80 93 31 2e 	sts	0x2E31, r24
    50b6:	90 93 32 2e 	sts	0x2E32, r25
    50ba:	a0 93 33 2e 	sts	0x2E33, r26
    50be:	b0 93 34 2e 	sts	0x2E34, r27
	Y_cilj_stari = Y_cilj;
    50c2:	80 91 0b 2e 	lds	r24, 0x2E0B
    50c6:	90 91 0c 2e 	lds	r25, 0x2E0C
    50ca:	a0 91 0d 2e 	lds	r26, 0x2E0D
    50ce:	b0 91 0e 2e 	lds	r27, 0x2E0E
    50d2:	80 93 70 2e 	sts	0x2E70, r24
    50d6:	90 93 71 2e 	sts	0x2E71, r25
    50da:	a0 93 72 2e 	sts	0x2E72, r26
    50de:	b0 93 73 2e 	sts	0x2E73, r27
	
	X_razlika = (X_cilj - X_pos);
    50e2:	40 91 ae 24 	lds	r20, 0x24AE
    50e6:	50 91 af 24 	lds	r21, 0x24AF
    50ea:	60 91 b0 24 	lds	r22, 0x24B0
    50ee:	70 91 b1 24 	lds	r23, 0x24B1
    50f2:	80 91 23 2e 	lds	r24, 0x2E23
    50f6:	90 91 24 2e 	lds	r25, 0x2E24
    50fa:	a0 91 25 2e 	lds	r26, 0x2E25
    50fe:	b0 91 26 2e 	lds	r27, 0x2E26
    5102:	8a 01       	movw	r16, r20
    5104:	9b 01       	movw	r18, r22
    5106:	08 1b       	sub	r16, r24
    5108:	19 0b       	sbc	r17, r25
    510a:	2a 0b       	sbc	r18, r26
    510c:	3b 0b       	sbc	r19, r27
    510e:	c9 01       	movw	r24, r18
    5110:	b8 01       	movw	r22, r16
    5112:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    5116:	c6 2e       	mov	r12, r22
    5118:	d7 2e       	mov	r13, r23
    511a:	e8 2e       	mov	r14, r24
    511c:	f9 2e       	mov	r15, r25
	Y_razlika = (Y_cilj - Y_pos);
    511e:	40 91 0b 2e 	lds	r20, 0x2E0B
    5122:	50 91 0c 2e 	lds	r21, 0x2E0C
    5126:	60 91 0d 2e 	lds	r22, 0x2E0D
    512a:	70 91 0e 2e 	lds	r23, 0x2E0E
    512e:	80 91 02 2a 	lds	r24, 0x2A02
    5132:	90 91 03 2a 	lds	r25, 0x2A03
    5136:	a0 91 04 2a 	lds	r26, 0x2A04
    513a:	b0 91 05 2a 	lds	r27, 0x2A05
    513e:	8a 01       	movw	r16, r20
    5140:	9b 01       	movw	r18, r22
    5142:	08 1b       	sub	r16, r24
    5144:	19 0b       	sbc	r17, r25
    5146:	2a 0b       	sbc	r18, r26
    5148:	3b 0b       	sbc	r19, r27
    514a:	c9 01       	movw	r24, r18
    514c:	b8 01       	movw	r22, r16
    514e:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    5152:	06 2f       	mov	r16, r22
    5154:	17 2f       	mov	r17, r23
    5156:	d8 2f       	mov	r29, r24
    5158:	c9 2f       	mov	r28, r25
	X_razlika *= X_razlika;
    515a:	2c 2d       	mov	r18, r12
    515c:	3d 2d       	mov	r19, r13
    515e:	4e 2d       	mov	r20, r14
    5160:	5f 2d       	mov	r21, r15
    5162:	6c 2d       	mov	r22, r12
    5164:	7d 2d       	mov	r23, r13
    5166:	8e 2d       	mov	r24, r14
    5168:	9f 2d       	mov	r25, r15
    516a:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    516e:	6b 01       	movw	r12, r22
    5170:	7c 01       	movw	r14, r24
	Y_razlika *= Y_razlika;
    5172:	20 2f       	mov	r18, r16
    5174:	31 2f       	mov	r19, r17
    5176:	4d 2f       	mov	r20, r29
    5178:	5c 2f       	mov	r21, r28
    517a:	60 2f       	mov	r22, r16
    517c:	71 2f       	mov	r23, r17
    517e:	8d 2f       	mov	r24, r29
    5180:	9c 2f       	mov	r25, r28
    5182:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    5186:	9b 01       	movw	r18, r22
    5188:	ac 01       	movw	r20, r24
	XY_zbir = X_razlika + Y_razlika;
    518a:	c7 01       	movw	r24, r14
    518c:	b6 01       	movw	r22, r12
    518e:	0e 94 94 35 	call	0x6b28	; 0x6b28 <__addsf3>
	rastojanje_cilj_temp = sqrt(XY_zbir);
    5192:	0e 94 82 38 	call	0x7104	; 0x7104 <sqrt>
    5196:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <__fixsfsi>
    519a:	60 93 12 2e 	sts	0x2E12, r22
    519e:	70 93 13 2e 	sts	0x2E13, r23
    51a2:	80 93 14 2e 	sts	0x2E14, r24
    51a6:	90 93 15 2e 	sts	0x2E15, r25
	
	//ako je veca preostala distanca veca od 10 cm onda se radi korrekcija
	if(rastojanje_cilj_temp > (metar / 10))  // metar/12
    51aa:	60 91 d3 24 	lds	r22, 0x24D3
    51ae:	70 91 d4 24 	lds	r23, 0x24D4
    51b2:	80 91 d5 24 	lds	r24, 0x24D5
    51b6:	90 91 d6 24 	lds	r25, 0x24D6
    51ba:	c0 90 12 2e 	lds	r12, 0x2E12
    51be:	d0 90 13 2e 	lds	r13, 0x2E13
    51c2:	e0 90 14 2e 	lds	r14, 0x2E14
    51c6:	f0 90 15 2e 	lds	r15, 0x2E15
    51ca:	2a e0       	ldi	r18, 0x0A	; 10
    51cc:	30 e0       	ldi	r19, 0x00	; 0
    51ce:	40 e0       	ldi	r20, 0x00	; 0
    51d0:	50 e0       	ldi	r21, 0x00	; 0
    51d2:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    51d6:	2c 15       	cp	r18, r12
    51d8:	3d 05       	cpc	r19, r13
    51da:	4e 05       	cpc	r20, r14
    51dc:	5f 05       	cpc	r21, r15
    51de:	0c f0       	brlt	.+2      	; 0x51e2 <Pracenje_pravca+0x1d0>
    51e0:	3f c1       	rjmp	.+638    	; 0x5460 <Pracenje_pravca+0x44e>
	{
		rastojanje_cilj = rastojanje_cilj_temp;
    51e2:	80 91 12 2e 	lds	r24, 0x2E12
    51e6:	90 91 13 2e 	lds	r25, 0x2E13
    51ea:	a0 91 14 2e 	lds	r26, 0x2E14
    51ee:	b0 91 15 2e 	lds	r27, 0x2E15
    51f2:	80 93 69 2e 	sts	0x2E69, r24
    51f6:	90 93 6a 2e 	sts	0x2E6A, r25
    51fa:	a0 93 6b 2e 	sts	0x2E6B, r26
    51fe:	b0 93 6c 2e 	sts	0x2E6C, r27
		translacija = 0;
    5202:	10 92 b4 24 	sts	0x24B4, r1
    5206:	10 92 b5 24 	sts	0x24B5, r1
    520a:	10 92 b6 24 	sts	0x24B6, r1
    520e:	10 92 b7 24 	sts	0x24B7, r1
		vreme_pozicioniranja = 0;
    5212:	10 92 5c 2e 	sts	0x2E5C, r1
    5216:	10 92 5d 2e 	sts	0x2E5D, r1
		stigao_flag = 0;
    521a:	10 92 06 20 	sts	0x2006, r1
		
		X_razlika = (X_cilj - X_pos);
    521e:	40 91 ae 24 	lds	r20, 0x24AE
    5222:	50 91 af 24 	lds	r21, 0x24AF
    5226:	60 91 b0 24 	lds	r22, 0x24B0
    522a:	70 91 b1 24 	lds	r23, 0x24B1
    522e:	80 91 23 2e 	lds	r24, 0x2E23
    5232:	90 91 24 2e 	lds	r25, 0x2E24
    5236:	a0 91 25 2e 	lds	r26, 0x2E25
    523a:	b0 91 26 2e 	lds	r27, 0x2E26
		Y_razlika = (Y_cilj - Y_pos);
    523e:	40 90 0b 2e 	lds	r4, 0x2E0B
    5242:	50 90 0c 2e 	lds	r5, 0x2E0C
    5246:	60 90 0d 2e 	lds	r6, 0x2E0D
    524a:	70 90 0e 2e 	lds	r7, 0x2E0E
    524e:	80 90 02 2a 	lds	r8, 0x2A02
    5252:	90 90 03 2a 	lds	r9, 0x2A03
    5256:	a0 90 04 2a 	lds	r10, 0x2A04
    525a:	b0 90 05 2a 	lds	r11, 0x2A05
		rastojanje_cilj = rastojanje_cilj_temp;
		translacija = 0;
		vreme_pozicioniranja = 0;
		stigao_flag = 0;
		
		X_razlika = (X_cilj - X_pos);
    525e:	8a 01       	movw	r16, r20
    5260:	9b 01       	movw	r18, r22
    5262:	08 1b       	sub	r16, r24
    5264:	19 0b       	sbc	r17, r25
    5266:	2a 0b       	sbc	r18, r26
    5268:	3b 0b       	sbc	r19, r27
    526a:	c9 01       	movw	r24, r18
    526c:	b8 01       	movw	r22, r16
    526e:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    5272:	6b 01       	movw	r12, r22
    5274:	7c 01       	movw	r14, r24
		Y_razlika = (Y_cilj - Y_pos);
    5276:	c3 01       	movw	r24, r6
    5278:	b2 01       	movw	r22, r4
    527a:	68 19       	sub	r22, r8
    527c:	79 09       	sbc	r23, r9
    527e:	8a 09       	sbc	r24, r10
    5280:	9b 09       	sbc	r25, r11
    5282:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
		teta_cilj_radian = atan2((double)(Y_razlika), (double)(X_razlika));
    5286:	a7 01       	movw	r20, r14
    5288:	96 01       	movw	r18, r12
    528a:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <atan2>
    528e:	6b 01       	movw	r12, r22
    5290:	7c 01       	movw	r14, r24
		
		teta_cilj = (signed long)((teta_cilj_radian * krug180) / M_PI);
    5292:	60 91 cf 28 	lds	r22, 0x28CF
    5296:	70 91 d0 28 	lds	r23, 0x28D0
    529a:	80 91 d1 28 	lds	r24, 0x28D1
    529e:	90 91 d2 28 	lds	r25, 0x28D2
    52a2:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    52a6:	a7 01       	movw	r20, r14
    52a8:	96 01       	movw	r18, r12
    52aa:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    52ae:	2b ed       	ldi	r18, 0xDB	; 219
    52b0:	3f e0       	ldi	r19, 0x0F	; 15
    52b2:	49 e4       	ldi	r20, 0x49	; 73
    52b4:	50 e4       	ldi	r21, 0x40	; 64
    52b6:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__divsf3>
    52ba:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <__fixsfsi>
    52be:	60 93 cc 24 	sts	0x24CC, r22
    52c2:	70 93 cd 24 	sts	0x24CD, r23
    52c6:	80 93 ce 24 	sts	0x24CE, r24
    52ca:	90 93 cf 24 	sts	0x24CF, r25
		
		//Za automatsko kontanje rikverca po uglu
		if((smer_zadati) == 0)	//Sam bira smer
    52ce:	80 91 5e 29 	lds	r24, 0x295E
    52d2:	81 11       	cpse	r24, r1
    52d4:	73 c0       	rjmp	.+230    	; 0x53bc <Pracenje_pravca+0x3aa>
		{
			teta_razlika = teta - teta_cilj;
    52d6:	40 91 83 32 	lds	r20, 0x3283
    52da:	50 91 84 32 	lds	r21, 0x3284
    52de:	60 91 85 32 	lds	r22, 0x3285
    52e2:	70 91 86 32 	lds	r23, 0x3286
    52e6:	80 91 cc 24 	lds	r24, 0x24CC
    52ea:	90 91 cd 24 	lds	r25, 0x24CD
    52ee:	a0 91 ce 24 	lds	r26, 0x24CE
    52f2:	b0 91 cf 24 	lds	r27, 0x24CF
    52f6:	8a 01       	movw	r16, r20
    52f8:	9b 01       	movw	r18, r22
    52fa:	08 1b       	sub	r16, r24
    52fc:	19 0b       	sbc	r17, r25
    52fe:	2a 0b       	sbc	r18, r26
    5300:	3b 0b       	sbc	r19, r27
    5302:	c9 01       	movw	r24, r18
    5304:	b8 01       	movw	r22, r16
    5306:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    530a:	06 2f       	mov	r16, r22
    530c:	17 2f       	mov	r17, r23
    530e:	d8 2f       	mov	r29, r24
    5310:	c9 2f       	mov	r28, r25
			if(teta_razlika > (krug90) || teta_razlika < (-krug90))
    5312:	60 91 7e 2e 	lds	r22, 0x2E7E
    5316:	70 91 7f 2e 	lds	r23, 0x2E7F
    531a:	80 91 80 2e 	lds	r24, 0x2E80
    531e:	90 91 81 2e 	lds	r25, 0x2E81
    5322:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    5326:	9b 01       	movw	r18, r22
    5328:	ac 01       	movw	r20, r24
    532a:	60 2f       	mov	r22, r16
    532c:	71 2f       	mov	r23, r17
    532e:	8d 2f       	mov	r24, r29
    5330:	9c 2f       	mov	r25, r28
    5332:	0e 94 0a 38 	call	0x7014	; 0x7014 <__gesf2>
    5336:	18 16       	cp	r1, r24
    5338:	ec f0       	brlt	.+58     	; 0x5374 <Pracenje_pravca+0x362>
    533a:	80 91 7e 2e 	lds	r24, 0x2E7E
    533e:	90 91 7f 2e 	lds	r25, 0x2E7F
    5342:	a0 91 80 2e 	lds	r26, 0x2E80
    5346:	b0 91 81 2e 	lds	r27, 0x2E81
    534a:	9c 01       	movw	r18, r24
    534c:	ad 01       	movw	r20, r26
    534e:	66 27       	eor	r22, r22
    5350:	77 27       	eor	r23, r23
    5352:	cb 01       	movw	r24, r22
    5354:	62 1b       	sub	r22, r18
    5356:	73 0b       	sbc	r23, r19
    5358:	84 0b       	sbc	r24, r20
    535a:	95 0b       	sbc	r25, r21
    535c:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    5360:	9b 01       	movw	r18, r22
    5362:	ac 01       	movw	r20, r24
    5364:	60 2f       	mov	r22, r16
    5366:	71 2f       	mov	r23, r17
    5368:	8d 2f       	mov	r24, r29
    536a:	9c 2f       	mov	r25, r28
    536c:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <__cmpsf2>
    5370:	88 23       	and	r24, r24
    5372:	04 f5       	brge	.+64     	; 0x53b4 <Pracenje_pravca+0x3a2>
			{
				smer_trenutni = -1;
    5374:	8f ef       	ldi	r24, 0xFF	; 255
    5376:	80 93 78 2e 	sts	0x2E78, r24
				teta_cilj -= krug180;
    537a:	80 91 cc 24 	lds	r24, 0x24CC
    537e:	90 91 cd 24 	lds	r25, 0x24CD
    5382:	a0 91 ce 24 	lds	r26, 0x24CE
    5386:	b0 91 cf 24 	lds	r27, 0x24CF
    538a:	40 91 cf 28 	lds	r20, 0x28CF
    538e:	50 91 d0 28 	lds	r21, 0x28D0
    5392:	60 91 d1 28 	lds	r22, 0x28D1
    5396:	70 91 d2 28 	lds	r23, 0x28D2
    539a:	84 1b       	sub	r24, r20
    539c:	95 0b       	sbc	r25, r21
    539e:	a6 0b       	sbc	r26, r22
    53a0:	b7 0b       	sbc	r27, r23
    53a2:	80 93 cc 24 	sts	0x24CC, r24
    53a6:	90 93 cd 24 	sts	0x24CD, r25
    53aa:	a0 93 ce 24 	sts	0x24CE, r26
    53ae:	b0 93 cf 24 	sts	0x24CF, r27
    53b2:	2e c0       	rjmp	.+92     	; 0x5410 <Pracenje_pravca+0x3fe>
			}	
			else
			{
				smer_trenutni = 1;
    53b4:	81 e0       	ldi	r24, 0x01	; 1
    53b6:	80 93 78 2e 	sts	0x2E78, r24
    53ba:	2a c0       	rjmp	.+84     	; 0x5410 <Pracenje_pravca+0x3fe>
			}
		}
		else if(smer_zadati == 1)	//Samo napred
    53bc:	80 91 5e 29 	lds	r24, 0x295E
    53c0:	81 30       	cpi	r24, 0x01	; 1
    53c2:	19 f4       	brne	.+6      	; 0x53ca <Pracenje_pravca+0x3b8>
		{
			smer_trenutni = 1; //1
    53c4:	80 93 78 2e 	sts	0x2E78, r24
    53c8:	23 c0       	rjmp	.+70     	; 0x5410 <Pracenje_pravca+0x3fe>
		}
		else if(smer_zadati == 2)	//Samo nazad
    53ca:	80 91 5e 29 	lds	r24, 0x295E
    53ce:	82 30       	cpi	r24, 0x02	; 2
    53d0:	f9 f4       	brne	.+62     	; 0x5410 <Pracenje_pravca+0x3fe>
		{
			smer_trenutni = -1; //-1
    53d2:	8f ef       	ldi	r24, 0xFF	; 255
    53d4:	80 93 78 2e 	sts	0x2E78, r24
			teta_cilj -= krug180;
    53d8:	80 91 cc 24 	lds	r24, 0x24CC
    53dc:	90 91 cd 24 	lds	r25, 0x24CD
    53e0:	a0 91 ce 24 	lds	r26, 0x24CE
    53e4:	b0 91 cf 24 	lds	r27, 0x24CF
    53e8:	40 91 cf 28 	lds	r20, 0x28CF
    53ec:	50 91 d0 28 	lds	r21, 0x28D0
    53f0:	60 91 d1 28 	lds	r22, 0x28D1
    53f4:	70 91 d2 28 	lds	r23, 0x28D2
    53f8:	84 1b       	sub	r24, r20
    53fa:	95 0b       	sbc	r25, r21
    53fc:	a6 0b       	sbc	r26, r22
    53fe:	b7 0b       	sbc	r27, r23
    5400:	80 93 cc 24 	sts	0x24CC, r24
    5404:	90 93 cd 24 	sts	0x24CD, r25
    5408:	a0 93 ce 24 	sts	0x24CE, r26
    540c:	b0 93 cf 24 	sts	0x24CF, r27
		}
	
		if(teta_cilj < 0)
    5410:	80 91 cc 24 	lds	r24, 0x24CC
    5414:	90 91 cd 24 	lds	r25, 0x24CD
    5418:	a0 91 ce 24 	lds	r26, 0x24CE
    541c:	b0 91 cf 24 	lds	r27, 0x24CF
    5420:	bb 23       	and	r27, r27
    5422:	0c f0       	brlt	.+2      	; 0x5426 <Pracenje_pravca+0x414>
    5424:	53 c0       	rjmp	.+166    	; 0x54cc <Pracenje_pravca+0x4ba>
			teta_cilj += krug360;
    5426:	40 91 cc 24 	lds	r20, 0x24CC
    542a:	50 91 cd 24 	lds	r21, 0x24CD
    542e:	60 91 ce 24 	lds	r22, 0x24CE
    5432:	70 91 cf 24 	lds	r23, 0x24CF
    5436:	80 91 75 32 	lds	r24, 0x3275
    543a:	90 91 76 32 	lds	r25, 0x3276
    543e:	a0 91 77 32 	lds	r26, 0x3277
    5442:	b0 91 78 32 	lds	r27, 0x3278
    5446:	84 0f       	add	r24, r20
    5448:	95 1f       	adc	r25, r21
    544a:	a6 1f       	adc	r26, r22
    544c:	b7 1f       	adc	r27, r23
    544e:	80 93 cc 24 	sts	0x24CC, r24
    5452:	90 93 cd 24 	sts	0x24CD, r25
    5456:	a0 93 ce 24 	sts	0x24CE, r26
    545a:	b0 93 cf 24 	sts	0x24CF, r27
    545e:	36 c0       	rjmp	.+108    	; 0x54cc <Pracenje_pravca+0x4ba>
	}
	else if (vreme_pozicioniranja >= 300)	//stigli smo do cilja
    5460:	80 91 5c 2e 	lds	r24, 0x2E5C
    5464:	90 91 5d 2e 	lds	r25, 0x2E5D
    5468:	8c 32       	cpi	r24, 0x2C	; 44
    546a:	91 40       	sbci	r25, 0x01	; 1
    546c:	78 f1       	brcs	.+94     	; 0x54cc <Pracenje_pravca+0x4ba>
	{
		if (stigao_flag == 0)
    546e:	80 91 06 20 	lds	r24, 0x2006
    5472:	81 11       	cpse	r24, r1
    5474:	03 c0       	rjmp	.+6      	; 0x547c <Pracenje_pravca+0x46a>
		{
			stigao_flag = 1;
    5476:	81 e0       	ldi	r24, 0x01	; 1
    5478:	80 93 06 20 	sts	0x2006, r24
//  			USART_TXBuffer_PutByte(&USART_E1_data, 79);	//O
//  			USART_TXBuffer_PutByte(&USART_E1_data, 75);	//K
//  			USART_TXBuffer_PutByte(&USART_E1_data, 33);	//!
		}
		
		if (teta_cilj_final != 0xFFFFFFFF)	//ako treba zauzmemo krajnji ugao
    547c:	80 91 00 20 	lds	r24, 0x2000
    5480:	90 91 01 20 	lds	r25, 0x2001
    5484:	a0 91 02 20 	lds	r26, 0x2002
    5488:	b0 91 03 20 	lds	r27, 0x2003
    548c:	8f 3f       	cpi	r24, 0xFF	; 255
    548e:	9f 4f       	sbci	r25, 0xFF	; 255
    5490:	af 4f       	sbci	r26, 0xFF	; 255
    5492:	bf 4f       	sbci	r27, 0xFF	; 255
    5494:	d9 f0       	breq	.+54     	; 0x54cc <Pracenje_pravca+0x4ba>
		{
			teta_cilj = teta_cilj_final;
    5496:	80 91 00 20 	lds	r24, 0x2000
    549a:	90 91 01 20 	lds	r25, 0x2001
    549e:	a0 91 02 20 	lds	r26, 0x2002
    54a2:	b0 91 03 20 	lds	r27, 0x2003
    54a6:	80 93 cc 24 	sts	0x24CC, r24
    54aa:	90 93 cd 24 	sts	0x24CD, r25
    54ae:	a0 93 ce 24 	sts	0x24CE, r26
    54b2:	b0 93 cf 24 	sts	0x24CF, r27
			teta_cilj_final = 0xFFFFFFFF;	//postavlja se na FF, da sledeci put ne bi se izvrsavao
    54b6:	8f ef       	ldi	r24, 0xFF	; 255
    54b8:	9f ef       	ldi	r25, 0xFF	; 255
    54ba:	dc 01       	movw	r26, r24
    54bc:	80 93 00 20 	sts	0x2000, r24
    54c0:	90 93 01 20 	sts	0x2001, r25
    54c4:	a0 93 02 20 	sts	0x2002, r26
    54c8:	b0 93 03 20 	sts	0x2003, r27
		}		
	}
}
    54cc:	df 91       	pop	r29
    54ce:	cf 91       	pop	r28
    54d0:	1f 91       	pop	r17
    54d2:	0f 91       	pop	r16
    54d4:	ff 90       	pop	r15
    54d6:	ef 90       	pop	r14
    54d8:	df 90       	pop	r13
    54da:	cf 90       	pop	r12
    54dc:	bf 90       	pop	r11
    54de:	af 90       	pop	r10
    54e0:	9f 90       	pop	r9
    54e2:	8f 90       	pop	r8
    54e4:	7f 90       	pop	r7
    54e6:	6f 90       	pop	r6
    54e8:	5f 90       	pop	r5
    54ea:	4f 90       	pop	r4
    54ec:	08 95       	ret

000054ee <PID_pravolinijski>:

void PID_pravolinijski(void)
{	
    54ee:	4f 92       	push	r4
    54f0:	5f 92       	push	r5
    54f2:	6f 92       	push	r6
    54f4:	7f 92       	push	r7
    54f6:	8f 92       	push	r8
    54f8:	9f 92       	push	r9
    54fa:	af 92       	push	r10
    54fc:	bf 92       	push	r11
    54fe:	cf 92       	push	r12
    5500:	df 92       	push	r13
    5502:	ef 92       	push	r14
    5504:	ff 92       	push	r15
    5506:	0f 93       	push	r16
    5508:	1f 93       	push	r17
    550a:	cf 93       	push	r28
    550c:	df 93       	push	r29
    550e:	cd b7       	in	r28, 0x3d	; 61
    5510:	de b7       	in	r29, 0x3e	; 62
    5512:	2c 97       	sbiw	r28, 0x0c	; 12
    5514:	cd bf       	out	0x3d, r28	; 61
    5516:	de bf       	out	0x3e, r29	; 62
	pozicija_greska = rastojanje_cilj * smer_trenutni - translacija;
    5518:	a0 91 78 2e 	lds	r26, 0x2E78
    551c:	20 91 69 2e 	lds	r18, 0x2E69
    5520:	30 91 6a 2e 	lds	r19, 0x2E6A
    5524:	40 91 6b 2e 	lds	r20, 0x2E6B
    5528:	50 91 6c 2e 	lds	r21, 0x2E6C
    552c:	c0 90 b4 24 	lds	r12, 0x24B4
    5530:	d0 90 b5 24 	lds	r13, 0x24B5
    5534:	e0 90 b6 24 	lds	r14, 0x24B6
    5538:	f0 90 b7 24 	lds	r15, 0x24B7
    553c:	bb 27       	eor	r27, r27
    553e:	a7 fd       	sbrc	r26, 7
    5540:	b0 95       	com	r27
    5542:	0e 94 52 39 	call	0x72a4	; 0x72a4 <__mulshisi3>
    5546:	dc 01       	movw	r26, r24
    5548:	cb 01       	movw	r24, r22
    554a:	8c 19       	sub	r24, r12
    554c:	9d 09       	sbc	r25, r13
    554e:	ae 09       	sbc	r26, r14
    5550:	bf 09       	sbc	r27, r15
    5552:	80 93 4c 2e 	sts	0x2E4C, r24
    5556:	90 93 4d 2e 	sts	0x2E4D, r25
    555a:	a0 93 4e 2e 	sts	0x2E4E, r26
    555e:	b0 93 4f 2e 	sts	0x2E4F, r27
	dif_error_pravolinijski = PID_pozicija - PID_pozicija_pret;	
    5562:	80 91 fe 29 	lds	r24, 0x29FE
    5566:	90 91 ff 29 	lds	r25, 0x29FF
    556a:	a0 91 00 2a 	lds	r26, 0x2A00
    556e:	b0 91 01 2a 	lds	r27, 0x2A01
    5572:	40 91 cb 28 	lds	r20, 0x28CB
    5576:	50 91 cc 28 	lds	r21, 0x28CC
    557a:	60 91 cd 28 	lds	r22, 0x28CD
    557e:	70 91 ce 28 	lds	r23, 0x28CE
    5582:	84 1b       	sub	r24, r20
    5584:	95 0b       	sbc	r25, r21
    5586:	a6 0b       	sbc	r26, r22
    5588:	b7 0b       	sbc	r27, r23
    558a:	80 93 f3 2d 	sts	0x2DF3, r24
    558e:	90 93 f4 2d 	sts	0x2DF4, r25
    5592:	a0 93 f5 2d 	sts	0x2DF5, r26
    5596:	b0 93 f6 2d 	sts	0x2DF6, r27
	pozicija_greska_sum += pozicija_greska;
    559a:	40 91 02 2e 	lds	r20, 0x2E02
    559e:	50 91 03 2e 	lds	r21, 0x2E03
    55a2:	60 91 04 2e 	lds	r22, 0x2E04
    55a6:	70 91 05 2e 	lds	r23, 0x2E05
    55aa:	80 91 4c 2e 	lds	r24, 0x2E4C
    55ae:	90 91 4d 2e 	lds	r25, 0x2E4D
    55b2:	a0 91 4e 2e 	lds	r26, 0x2E4E
    55b6:	b0 91 4f 2e 	lds	r27, 0x2E4F
    55ba:	84 0f       	add	r24, r20
    55bc:	95 1f       	adc	r25, r21
    55be:	a6 1f       	adc	r26, r22
    55c0:	b7 1f       	adc	r27, r23
    55c2:	80 93 02 2e 	sts	0x2E02, r24
    55c6:	90 93 03 2e 	sts	0x2E03, r25
    55ca:	a0 93 04 2e 	sts	0x2E04, r26
    55ce:	b0 93 05 2e 	sts	0x2E05, r27
	
	//anti wind-up
	if(pozicija_greska_sum > 200)
    55d2:	80 91 02 2e 	lds	r24, 0x2E02
    55d6:	90 91 03 2e 	lds	r25, 0x2E03
    55da:	a0 91 04 2e 	lds	r26, 0x2E04
    55de:	b0 91 05 2e 	lds	r27, 0x2E05
    55e2:	89 3c       	cpi	r24, 0xC9	; 201
    55e4:	91 05       	cpc	r25, r1
    55e6:	a1 05       	cpc	r26, r1
    55e8:	b1 05       	cpc	r27, r1
    55ea:	6c f0       	brlt	.+26     	; 0x5606 <PID_pravolinijski+0x118>
		pozicija_greska_sum = 200;
    55ec:	88 ec       	ldi	r24, 0xC8	; 200
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	a0 e0       	ldi	r26, 0x00	; 0
    55f2:	b0 e0       	ldi	r27, 0x00	; 0
    55f4:	80 93 02 2e 	sts	0x2E02, r24
    55f8:	90 93 03 2e 	sts	0x2E03, r25
    55fc:	a0 93 04 2e 	sts	0x2E04, r26
    5600:	b0 93 05 2e 	sts	0x2E05, r27
    5604:	19 c0       	rjmp	.+50     	; 0x5638 <PID_pravolinijski+0x14a>
	else if(pozicija_greska_sum < -200)
    5606:	80 91 02 2e 	lds	r24, 0x2E02
    560a:	90 91 03 2e 	lds	r25, 0x2E03
    560e:	a0 91 04 2e 	lds	r26, 0x2E04
    5612:	b0 91 05 2e 	lds	r27, 0x2E05
    5616:	88 33       	cpi	r24, 0x38	; 56
    5618:	9f 4f       	sbci	r25, 0xFF	; 255
    561a:	af 4f       	sbci	r26, 0xFF	; 255
    561c:	bf 4f       	sbci	r27, 0xFF	; 255
    561e:	64 f4       	brge	.+24     	; 0x5638 <PID_pravolinijski+0x14a>
		pozicija_greska_sum = -200;
    5620:	88 e3       	ldi	r24, 0x38	; 56
    5622:	9f ef       	ldi	r25, 0xFF	; 255
    5624:	af ef       	ldi	r26, 0xFF	; 255
    5626:	bf ef       	ldi	r27, 0xFF	; 255
    5628:	80 93 02 2e 	sts	0x2E02, r24
    562c:	90 93 03 2e 	sts	0x2E03, r25
    5630:	a0 93 04 2e 	sts	0x2E04, r26
    5634:	b0 93 05 2e 	sts	0x2E05, r27
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    5638:	60 91 4c 2e 	lds	r22, 0x2E4C
    563c:	70 91 4d 2e 	lds	r23, 0x2E4D
    5640:	80 91 4e 2e 	lds	r24, 0x2E4E
    5644:	90 91 4f 2e 	lds	r25, 0x2E4F
    5648:	80 90 6a 29 	lds	r8, 0x296A
    564c:	90 90 6b 29 	lds	r9, 0x296B
    5650:	a0 90 6c 29 	lds	r10, 0x296C
    5654:	b0 90 6d 29 	lds	r11, 0x296D
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
    5658:	20 91 f3 2d 	lds	r18, 0x2DF3
    565c:	30 91 f4 2d 	lds	r19, 0x2DF4
    5660:	40 91 f5 2d 	lds	r20, 0x2DF5
    5664:	50 91 f6 2d 	lds	r21, 0x2DF6
    5668:	29 83       	std	Y+1, r18	; 0x01
    566a:	3a 83       	std	Y+2, r19	; 0x02
    566c:	4b 83       	std	Y+3, r20	; 0x03
    566e:	5c 83       	std	Y+4, r21	; 0x04
    5670:	40 90 bf 28 	lds	r4, 0x28BF
    5674:	50 90 c0 28 	lds	r5, 0x28C0
    5678:	60 90 c1 28 	lds	r6, 0x28C1
    567c:	70 90 c2 28 	lds	r7, 0x28C2
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
    5680:	c0 90 02 2e 	lds	r12, 0x2E02
    5684:	d0 90 03 2e 	lds	r13, 0x2E03
    5688:	e0 90 04 2e 	lds	r14, 0x2E04
    568c:	f0 90 05 2e 	lds	r15, 0x2E05
    5690:	20 91 79 32 	lds	r18, 0x3279
    5694:	30 91 7a 32 	lds	r19, 0x327A
    5698:	40 91 7b 32 	lds	r20, 0x327B
    569c:	50 91 7c 32 	lds	r21, 0x327C
    56a0:	2d 83       	std	Y+5, r18	; 0x05
    56a2:	3e 83       	std	Y+6, r19	; 0x06
    56a4:	4f 83       	std	Y+7, r20	; 0x07
    56a6:	58 87       	std	Y+8, r21	; 0x08
					((float)((metar >> 1) / zeljena_pravolinijska_brzina));	
    56a8:	20 91 d3 24 	lds	r18, 0x24D3
    56ac:	30 91 d4 24 	lds	r19, 0x24D4
    56b0:	40 91 d5 24 	lds	r20, 0x24D5
    56b4:	50 91 d6 24 	lds	r21, 0x24D6
    56b8:	29 87       	std	Y+9, r18	; 0x09
    56ba:	3a 87       	std	Y+10, r19	; 0x0a
    56bc:	4b 87       	std	Y+11, r20	; 0x0b
    56be:	5c 87       	std	Y+12, r21	; 0x0c
    56c0:	00 91 7f 32 	lds	r16, 0x327F
    56c4:	10 91 80 32 	lds	r17, 0x3280
		pozicija_greska_sum = 200;
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    56c8:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    56cc:	a5 01       	movw	r20, r10
    56ce:	94 01       	movw	r18, r8
    56d0:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    56d4:	4b 01       	movw	r8, r22
    56d6:	5c 01       	movw	r10, r24
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
    56d8:	69 81       	ldd	r22, Y+1	; 0x01
    56da:	7a 81       	ldd	r23, Y+2	; 0x02
    56dc:	8b 81       	ldd	r24, Y+3	; 0x03
    56de:	9c 81       	ldd	r25, Y+4	; 0x04
    56e0:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    56e4:	a3 01       	movw	r20, r6
    56e6:	92 01       	movw	r18, r4
    56e8:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    56ec:	9b 01       	movw	r18, r22
    56ee:	ac 01       	movw	r20, r24
		pozicija_greska_sum = 200;
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    56f0:	c5 01       	movw	r24, r10
    56f2:	b4 01       	movw	r22, r8
    56f4:	0e 94 94 35 	call	0x6b28	; 0x6b28 <__addsf3>
    56f8:	4b 01       	movw	r8, r22
    56fa:	5c 01       	movw	r10, r24
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
    56fc:	c7 01       	movw	r24, r14
    56fe:	b6 01       	movw	r22, r12
    5700:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    5704:	2d 81       	ldd	r18, Y+5	; 0x05
    5706:	3e 81       	ldd	r19, Y+6	; 0x06
    5708:	4f 81       	ldd	r20, Y+7	; 0x07
    570a:	58 85       	ldd	r21, Y+8	; 0x08
    570c:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    5710:	9b 01       	movw	r18, r22
    5712:	ac 01       	movw	r20, r24
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
    5714:	c5 01       	movw	r24, r10
    5716:	b4 01       	movw	r22, r8
    5718:	0e 94 94 35 	call	0x6b28	; 0x6b28 <__addsf3>
    571c:	6b 01       	movw	r12, r22
    571e:	7c 01       	movw	r14, r24
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
					((float)((metar >> 1) / zeljena_pravolinijska_brzina));	
    5720:	69 85       	ldd	r22, Y+9	; 0x09
    5722:	7a 85       	ldd	r23, Y+10	; 0x0a
    5724:	8b 85       	ldd	r24, Y+11	; 0x0b
    5726:	9c 85       	ldd	r25, Y+12	; 0x0c
    5728:	95 95       	asr	r25
    572a:	87 95       	ror	r24
    572c:	77 95       	ror	r23
    572e:	67 95       	ror	r22
    5730:	98 01       	movw	r18, r16
    5732:	44 27       	eor	r20, r20
    5734:	37 fd       	sbrc	r19, 7
    5736:	40 95       	com	r20
    5738:	54 2f       	mov	r21, r20
    573a:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    573e:	ca 01       	movw	r24, r20
    5740:	b9 01       	movw	r22, r18
    5742:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    5746:	9b 01       	movw	r18, r22
    5748:	ac 01       	movw	r20, r24
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
					(float)(dif_error_pravolinijski*Kd_pravolinijski) + 
					(float)(pozicija_greska_sum*Ki_pravolinijski)) / 
    574a:	c7 01       	movw	r24, r14
    574c:	b6 01       	movw	r22, r12
    574e:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__divsf3>
		pozicija_greska_sum = 200;
	else if(pozicija_greska_sum < -200)
		pozicija_greska_sum = -200;
	
	//za 50cm greske se dobija zeljena_pravoliijska_brzina (kada je Kp_pravolinijski = 1)
	PID_pozicija =	((float)(pozicija_greska*Kp_pravolinijski) + 
    5752:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <__fixsfsi>
    5756:	60 93 fe 29 	sts	0x29FE, r22
    575a:	70 93 ff 29 	sts	0x29FF, r23
    575e:	80 93 00 2a 	sts	0x2A00, r24
    5762:	90 93 01 2a 	sts	0x2A01, r25
	//if(PID_pozicija < -modifikovana_zeljena_pravolinijska_brzina)
		//PID_pozicija = -modifikovana_zeljena_pravolinijska_brzina;
	//if(PID_pozicija > modifikovana_zeljena_pravolinijska_brzina)
		//PID_pozicija = modifikovana_zeljena_pravolinijska_brzina;
		
	if(PID_pozicija < -zeljena_pravolinijska_brzina)
    5766:	40 91 7f 32 	lds	r20, 0x327F
    576a:	50 91 80 32 	lds	r21, 0x3280
    576e:	80 91 fe 29 	lds	r24, 0x29FE
    5772:	90 91 ff 29 	lds	r25, 0x29FF
    5776:	a0 91 00 2a 	lds	r26, 0x2A00
    577a:	b0 91 01 2a 	lds	r27, 0x2A01
    577e:	51 95       	neg	r21
    5780:	41 95       	neg	r20
    5782:	51 09       	sbc	r21, r1
    5784:	66 27       	eor	r22, r22
    5786:	57 fd       	sbrc	r21, 7
    5788:	60 95       	com	r22
    578a:	76 2f       	mov	r23, r22
    578c:	84 17       	cp	r24, r20
    578e:	95 07       	cpc	r25, r21
    5790:	a6 07       	cpc	r26, r22
    5792:	b7 07       	cpc	r27, r23
    5794:	9c f4       	brge	.+38     	; 0x57bc <PID_pravolinijski+0x2ce>
		PID_pozicija = -zeljena_pravolinijska_brzina;
    5796:	80 91 7f 32 	lds	r24, 0x327F
    579a:	90 91 80 32 	lds	r25, 0x3280
    579e:	91 95       	neg	r25
    57a0:	81 95       	neg	r24
    57a2:	91 09       	sbc	r25, r1
    57a4:	aa 27       	eor	r26, r26
    57a6:	97 fd       	sbrc	r25, 7
    57a8:	a0 95       	com	r26
    57aa:	ba 2f       	mov	r27, r26
    57ac:	80 93 fe 29 	sts	0x29FE, r24
    57b0:	90 93 ff 29 	sts	0x29FF, r25
    57b4:	a0 93 00 2a 	sts	0x2A00, r26
    57b8:	b0 93 01 2a 	sts	0x2A01, r27
	if(PID_pozicija > zeljena_pravolinijska_brzina)
    57bc:	40 91 7f 32 	lds	r20, 0x327F
    57c0:	50 91 80 32 	lds	r21, 0x3280
    57c4:	80 91 fe 29 	lds	r24, 0x29FE
    57c8:	90 91 ff 29 	lds	r25, 0x29FF
    57cc:	a0 91 00 2a 	lds	r26, 0x2A00
    57d0:	b0 91 01 2a 	lds	r27, 0x2A01
    57d4:	66 27       	eor	r22, r22
    57d6:	57 fd       	sbrc	r21, 7
    57d8:	60 95       	com	r22
    57da:	76 2f       	mov	r23, r22
    57dc:	48 17       	cp	r20, r24
    57de:	59 07       	cpc	r21, r25
    57e0:	6a 07       	cpc	r22, r26
    57e2:	7b 07       	cpc	r23, r27
    57e4:	84 f4       	brge	.+32     	; 0x5806 <PID_pravolinijski+0x318>
		PID_pozicija = zeljena_pravolinijska_brzina;
    57e6:	80 91 7f 32 	lds	r24, 0x327F
    57ea:	90 91 80 32 	lds	r25, 0x3280
    57ee:	aa 27       	eor	r26, r26
    57f0:	97 fd       	sbrc	r25, 7
    57f2:	a0 95       	com	r26
    57f4:	ba 2f       	mov	r27, r26
    57f6:	80 93 fe 29 	sts	0x29FE, r24
    57fa:	90 93 ff 29 	sts	0x29FF, r25
    57fe:	a0 93 00 2a 	sts	0x2A00, r26
    5802:	b0 93 01 2a 	sts	0x2A01, r27
		
		
	//ubrzavanje po rampi
	if(PID_pozicija < 0)
    5806:	80 91 fe 29 	lds	r24, 0x29FE
    580a:	90 91 ff 29 	lds	r25, 0x29FF
    580e:	a0 91 00 2a 	lds	r26, 0x2A00
    5812:	b0 91 01 2a 	lds	r27, 0x2A01
    5816:	bb 23       	and	r27, r27
    5818:	0c f0       	brlt	.+2      	; 0x581c <PID_pravolinijski+0x32e>
    581a:	53 c0       	rjmp	.+166    	; 0x58c2 <PID_pravolinijski+0x3d4>
	{
		if(PID_pozicija_pret > PID_pozicija)	//UBRZANJE U MINUS
    581c:	40 91 cb 28 	lds	r20, 0x28CB
    5820:	50 91 cc 28 	lds	r21, 0x28CC
    5824:	60 91 cd 28 	lds	r22, 0x28CD
    5828:	70 91 ce 28 	lds	r23, 0x28CE
    582c:	80 91 fe 29 	lds	r24, 0x29FE
    5830:	90 91 ff 29 	lds	r25, 0x29FF
    5834:	a0 91 00 2a 	lds	r26, 0x2A00
    5838:	b0 91 01 2a 	lds	r27, 0x2A01
    583c:	84 17       	cp	r24, r20
    583e:	95 07       	cpc	r25, r21
    5840:	a6 07       	cpc	r26, r22
    5842:	b7 07       	cpc	r27, r23
    5844:	0c f0       	brlt	.+2      	; 0x5848 <PID_pravolinijski+0x35a>
    5846:	8d c0       	rjmp	.+282    	; 0x5962 <PID_pravolinijski+0x474>
		{
			if((abs(PID_pozicija) - abs(PID_pozicija_pret)) > Accel_PID_pos)
    5848:	40 91 fe 29 	lds	r20, 0x29FE
    584c:	50 91 ff 29 	lds	r21, 0x29FF
    5850:	60 91 00 2a 	lds	r22, 0x2A00
    5854:	70 91 01 2a 	lds	r23, 0x2A01
    5858:	80 91 cb 28 	lds	r24, 0x28CB
    585c:	90 91 cc 28 	lds	r25, 0x28CC
    5860:	a0 91 cd 28 	lds	r26, 0x28CD
    5864:	b0 91 ce 28 	lds	r27, 0x28CE
    5868:	20 91 d0 24 	lds	r18, 0x24D0
    586c:	30 91 d1 24 	lds	r19, 0x24D1
    5870:	55 23       	and	r21, r21
    5872:	1c f4       	brge	.+6      	; 0x587a <PID_pravolinijski+0x38c>
    5874:	51 95       	neg	r21
    5876:	41 95       	neg	r20
    5878:	51 09       	sbc	r21, r1
    587a:	99 23       	and	r25, r25
    587c:	1c f4       	brge	.+6      	; 0x5884 <PID_pravolinijski+0x396>
    587e:	91 95       	neg	r25
    5880:	81 95       	neg	r24
    5882:	91 09       	sbc	r25, r1
    5884:	48 1b       	sub	r20, r24
    5886:	59 0b       	sbc	r21, r25
    5888:	24 17       	cp	r18, r20
    588a:	35 07       	cpc	r19, r21
    588c:	08 f0       	brcs	.+2      	; 0x5890 <PID_pravolinijski+0x3a2>
    588e:	69 c0       	rjmp	.+210    	; 0x5962 <PID_pravolinijski+0x474>
				PID_pozicija = PID_pozicija_pret - Accel_PID_pos;
    5890:	80 91 cb 28 	lds	r24, 0x28CB
    5894:	90 91 cc 28 	lds	r25, 0x28CC
    5898:	a0 91 cd 28 	lds	r26, 0x28CD
    589c:	b0 91 ce 28 	lds	r27, 0x28CE
    58a0:	20 91 d0 24 	lds	r18, 0x24D0
    58a4:	30 91 d1 24 	lds	r19, 0x24D1
    58a8:	82 1b       	sub	r24, r18
    58aa:	93 0b       	sbc	r25, r19
    58ac:	a1 09       	sbc	r26, r1
    58ae:	b1 09       	sbc	r27, r1
    58b0:	80 93 fe 29 	sts	0x29FE, r24
    58b4:	90 93 ff 29 	sts	0x29FF, r25
    58b8:	a0 93 00 2a 	sts	0x2A00, r26
    58bc:	b0 93 01 2a 	sts	0x2A01, r27
    58c0:	50 c0       	rjmp	.+160    	; 0x5962 <PID_pravolinijski+0x474>
		}
	}
	else
	{
		if(PID_pozicija_pret < PID_pozicija)	//UBRZANJE U PLUS
    58c2:	40 91 cb 28 	lds	r20, 0x28CB
    58c6:	50 91 cc 28 	lds	r21, 0x28CC
    58ca:	60 91 cd 28 	lds	r22, 0x28CD
    58ce:	70 91 ce 28 	lds	r23, 0x28CE
    58d2:	80 91 fe 29 	lds	r24, 0x29FE
    58d6:	90 91 ff 29 	lds	r25, 0x29FF
    58da:	a0 91 00 2a 	lds	r26, 0x2A00
    58de:	b0 91 01 2a 	lds	r27, 0x2A01
    58e2:	48 17       	cp	r20, r24
    58e4:	59 07       	cpc	r21, r25
    58e6:	6a 07       	cpc	r22, r26
    58e8:	7b 07       	cpc	r23, r27
    58ea:	dc f5       	brge	.+118    	; 0x5962 <PID_pravolinijski+0x474>
		{
			if((abs(PID_pozicija) - abs(PID_pozicija_pret)) > Accel_PID_pos)
    58ec:	40 91 fe 29 	lds	r20, 0x29FE
    58f0:	50 91 ff 29 	lds	r21, 0x29FF
    58f4:	60 91 00 2a 	lds	r22, 0x2A00
    58f8:	70 91 01 2a 	lds	r23, 0x2A01
    58fc:	80 91 cb 28 	lds	r24, 0x28CB
    5900:	90 91 cc 28 	lds	r25, 0x28CC
    5904:	a0 91 cd 28 	lds	r26, 0x28CD
    5908:	b0 91 ce 28 	lds	r27, 0x28CE
    590c:	20 91 d0 24 	lds	r18, 0x24D0
    5910:	30 91 d1 24 	lds	r19, 0x24D1
    5914:	55 23       	and	r21, r21
    5916:	1c f4       	brge	.+6      	; 0x591e <PID_pravolinijski+0x430>
    5918:	51 95       	neg	r21
    591a:	41 95       	neg	r20
    591c:	51 09       	sbc	r21, r1
    591e:	99 23       	and	r25, r25
    5920:	1c f4       	brge	.+6      	; 0x5928 <PID_pravolinijski+0x43a>
    5922:	91 95       	neg	r25
    5924:	81 95       	neg	r24
    5926:	91 09       	sbc	r25, r1
    5928:	48 1b       	sub	r20, r24
    592a:	59 0b       	sbc	r21, r25
    592c:	24 17       	cp	r18, r20
    592e:	35 07       	cpc	r19, r21
    5930:	c0 f4       	brcc	.+48     	; 0x5962 <PID_pravolinijski+0x474>
				PID_pozicija = PID_pozicija_pret + Accel_PID_pos;
    5932:	20 91 d0 24 	lds	r18, 0x24D0
    5936:	30 91 d1 24 	lds	r19, 0x24D1
    593a:	80 91 cb 28 	lds	r24, 0x28CB
    593e:	90 91 cc 28 	lds	r25, 0x28CC
    5942:	a0 91 cd 28 	lds	r26, 0x28CD
    5946:	b0 91 ce 28 	lds	r27, 0x28CE
    594a:	82 0f       	add	r24, r18
    594c:	93 1f       	adc	r25, r19
    594e:	a1 1d       	adc	r26, r1
    5950:	b1 1d       	adc	r27, r1
    5952:	80 93 fe 29 	sts	0x29FE, r24
    5956:	90 93 ff 29 	sts	0x29FF, r25
    595a:	a0 93 00 2a 	sts	0x2A00, r26
    595e:	b0 93 01 2a 	sts	0x2A01, r27
		}
	}
	PID_pozicija_pret = PID_pozicija;
    5962:	80 91 fe 29 	lds	r24, 0x29FE
    5966:	90 91 ff 29 	lds	r25, 0x29FF
    596a:	a0 91 00 2a 	lds	r26, 0x2A00
    596e:	b0 91 01 2a 	lds	r27, 0x2A01
    5972:	80 93 cb 28 	sts	0x28CB, r24
    5976:	90 93 cc 28 	sts	0x28CC, r25
    597a:	a0 93 cd 28 	sts	0x28CD, r26
    597e:	b0 93 ce 28 	sts	0x28CE, r27
}
    5982:	2c 96       	adiw	r28, 0x0c	; 12
    5984:	cd bf       	out	0x3d, r28	; 61
    5986:	de bf       	out	0x3e, r29	; 62
    5988:	df 91       	pop	r29
    598a:	cf 91       	pop	r28
    598c:	1f 91       	pop	r17
    598e:	0f 91       	pop	r16
    5990:	ff 90       	pop	r15
    5992:	ef 90       	pop	r14
    5994:	df 90       	pop	r13
    5996:	cf 90       	pop	r12
    5998:	bf 90       	pop	r11
    599a:	af 90       	pop	r10
    599c:	9f 90       	pop	r9
    599e:	8f 90       	pop	r8
    59a0:	7f 90       	pop	r7
    59a2:	6f 90       	pop	r6
    59a4:	5f 90       	pop	r5
    59a6:	4f 90       	pop	r4
    59a8:	08 95       	ret

000059aa <PID_ugaoni>:

void PID_ugaoni(void)
{	
    59aa:	4f 92       	push	r4
    59ac:	5f 92       	push	r5
    59ae:	6f 92       	push	r6
    59b0:	7f 92       	push	r7
    59b2:	8f 92       	push	r8
    59b4:	9f 92       	push	r9
    59b6:	af 92       	push	r10
    59b8:	bf 92       	push	r11
    59ba:	cf 92       	push	r12
    59bc:	df 92       	push	r13
    59be:	ef 92       	push	r14
    59c0:	ff 92       	push	r15
    59c2:	0f 93       	push	r16
    59c4:	1f 93       	push	r17
    59c6:	cf 93       	push	r28
    59c8:	df 93       	push	r29
    59ca:	cd b7       	in	r28, 0x3d	; 61
    59cc:	de b7       	in	r29, 0x3e	; 62
    59ce:	2c 97       	sbiw	r28, 0x0c	; 12
    59d0:	cd bf       	out	0x3d, r28	; 61
    59d2:	de bf       	out	0x3e, r29	; 62
	teta_greska = teta_cilj - teta;
    59d4:	80 91 cc 24 	lds	r24, 0x24CC
    59d8:	90 91 cd 24 	lds	r25, 0x24CD
    59dc:	a0 91 ce 24 	lds	r26, 0x24CE
    59e0:	b0 91 cf 24 	lds	r27, 0x24CF
    59e4:	40 91 83 32 	lds	r20, 0x3283
    59e8:	50 91 84 32 	lds	r21, 0x3284
    59ec:	60 91 85 32 	lds	r22, 0x3285
    59f0:	70 91 86 32 	lds	r23, 0x3286
    59f4:	84 1b       	sub	r24, r20
    59f6:	95 0b       	sbc	r25, r21
    59f8:	a6 0b       	sbc	r26, r22
    59fa:	b7 0b       	sbc	r27, r23
    59fc:	80 93 74 2e 	sts	0x2E74, r24
    5a00:	90 93 75 2e 	sts	0x2E75, r25
    5a04:	a0 93 76 2e 	sts	0x2E76, r26
    5a08:	b0 93 77 2e 	sts	0x2E77, r27
	
	dif_error_ugao = teta_greska - teta_greska_prethodno; // D dejstvo
    5a0c:	80 91 74 2e 	lds	r24, 0x2E74
    5a10:	90 91 75 2e 	lds	r25, 0x2E75
    5a14:	a0 91 76 2e 	lds	r26, 0x2E76
    5a18:	b0 91 77 2e 	lds	r27, 0x2E77
    5a1c:	40 91 ee 2d 	lds	r20, 0x2DEE
    5a20:	50 91 ef 2d 	lds	r21, 0x2DEF
    5a24:	60 91 f0 2d 	lds	r22, 0x2DF0
    5a28:	70 91 f1 2d 	lds	r23, 0x2DF1
    5a2c:	84 1b       	sub	r24, r20
    5a2e:	95 0b       	sbc	r25, r21
    5a30:	a6 0b       	sbc	r26, r22
    5a32:	b7 0b       	sbc	r27, r23
    5a34:	80 93 3b 2e 	sts	0x2E3B, r24
    5a38:	90 93 3c 2e 	sts	0x2E3C, r25
    5a3c:	a0 93 3d 2e 	sts	0x2E3D, r26
    5a40:	b0 93 3e 2e 	sts	0x2E3E, r27
	teta_greska_prethodno = teta_greska; //D dejstvo
    5a44:	80 91 74 2e 	lds	r24, 0x2E74
    5a48:	90 91 75 2e 	lds	r25, 0x2E75
    5a4c:	a0 91 76 2e 	lds	r26, 0x2E76
    5a50:	b0 91 77 2e 	lds	r27, 0x2E77
    5a54:	80 93 ee 2d 	sts	0x2DEE, r24
    5a58:	90 93 ef 2d 	sts	0x2DEF, r25
    5a5c:	a0 93 f0 2d 	sts	0x2DF0, r26
    5a60:	b0 93 f1 2d 	sts	0x2DF1, r27
	
	//korigovanje greske, da bi se roobot uvek okretao u blizem smeru
	if(teta_greska < -krug180)
    5a64:	40 91 cf 28 	lds	r20, 0x28CF
    5a68:	50 91 d0 28 	lds	r21, 0x28D0
    5a6c:	60 91 d1 28 	lds	r22, 0x28D1
    5a70:	70 91 d2 28 	lds	r23, 0x28D2
    5a74:	80 91 74 2e 	lds	r24, 0x2E74
    5a78:	90 91 75 2e 	lds	r25, 0x2E75
    5a7c:	a0 91 76 2e 	lds	r26, 0x2E76
    5a80:	b0 91 77 2e 	lds	r27, 0x2E77
    5a84:	70 95       	com	r23
    5a86:	60 95       	com	r22
    5a88:	50 95       	com	r21
    5a8a:	41 95       	neg	r20
    5a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    5a8e:	6f 4f       	sbci	r22, 0xFF	; 255
    5a90:	7f 4f       	sbci	r23, 0xFF	; 255
    5a92:	84 17       	cp	r24, r20
    5a94:	95 07       	cpc	r25, r21
    5a96:	a6 07       	cpc	r26, r22
    5a98:	b7 07       	cpc	r27, r23
    5a9a:	ec f4       	brge	.+58     	; 0x5ad6 <PID_ugaoni+0x12c>
		teta_greska += krug360;
    5a9c:	40 91 74 2e 	lds	r20, 0x2E74
    5aa0:	50 91 75 2e 	lds	r21, 0x2E75
    5aa4:	60 91 76 2e 	lds	r22, 0x2E76
    5aa8:	70 91 77 2e 	lds	r23, 0x2E77
    5aac:	80 91 75 32 	lds	r24, 0x3275
    5ab0:	90 91 76 32 	lds	r25, 0x3276
    5ab4:	a0 91 77 32 	lds	r26, 0x3277
    5ab8:	b0 91 78 32 	lds	r27, 0x3278
    5abc:	84 0f       	add	r24, r20
    5abe:	95 1f       	adc	r25, r21
    5ac0:	a6 1f       	adc	r26, r22
    5ac2:	b7 1f       	adc	r27, r23
    5ac4:	80 93 74 2e 	sts	0x2E74, r24
    5ac8:	90 93 75 2e 	sts	0x2E75, r25
    5acc:	a0 93 76 2e 	sts	0x2E76, r26
    5ad0:	b0 93 77 2e 	sts	0x2E77, r27
    5ad4:	31 c0       	rjmp	.+98     	; 0x5b38 <PID_ugaoni+0x18e>
	else if(teta_greska > krug180)
    5ad6:	40 91 74 2e 	lds	r20, 0x2E74
    5ada:	50 91 75 2e 	lds	r21, 0x2E75
    5ade:	60 91 76 2e 	lds	r22, 0x2E76
    5ae2:	70 91 77 2e 	lds	r23, 0x2E77
    5ae6:	80 91 cf 28 	lds	r24, 0x28CF
    5aea:	90 91 d0 28 	lds	r25, 0x28D0
    5aee:	a0 91 d1 28 	lds	r26, 0x28D1
    5af2:	b0 91 d2 28 	lds	r27, 0x28D2
    5af6:	84 17       	cp	r24, r20
    5af8:	95 07       	cpc	r25, r21
    5afa:	a6 07       	cpc	r26, r22
    5afc:	b7 07       	cpc	r27, r23
    5afe:	e4 f4       	brge	.+56     	; 0x5b38 <PID_ugaoni+0x18e>
		teta_greska -= krug360;
    5b00:	80 91 74 2e 	lds	r24, 0x2E74
    5b04:	90 91 75 2e 	lds	r25, 0x2E75
    5b08:	a0 91 76 2e 	lds	r26, 0x2E76
    5b0c:	b0 91 77 2e 	lds	r27, 0x2E77
    5b10:	40 91 75 32 	lds	r20, 0x3275
    5b14:	50 91 76 32 	lds	r21, 0x3276
    5b18:	60 91 77 32 	lds	r22, 0x3277
    5b1c:	70 91 78 32 	lds	r23, 0x3278
    5b20:	84 1b       	sub	r24, r20
    5b22:	95 0b       	sbc	r25, r21
    5b24:	a6 0b       	sbc	r26, r22
    5b26:	b7 0b       	sbc	r27, r23
    5b28:	80 93 74 2e 	sts	0x2E74, r24
    5b2c:	90 93 75 2e 	sts	0x2E75, r25
    5b30:	a0 93 76 2e 	sts	0x2E76, r26
    5b34:	b0 93 77 2e 	sts	0x2E77, r27
		
	teta_greska_sum += teta_greska;
    5b38:	40 91 27 2e 	lds	r20, 0x2E27
    5b3c:	50 91 28 2e 	lds	r21, 0x2E28
    5b40:	60 91 29 2e 	lds	r22, 0x2E29
    5b44:	70 91 2a 2e 	lds	r23, 0x2E2A
    5b48:	80 91 74 2e 	lds	r24, 0x2E74
    5b4c:	90 91 75 2e 	lds	r25, 0x2E75
    5b50:	a0 91 76 2e 	lds	r26, 0x2E76
    5b54:	b0 91 77 2e 	lds	r27, 0x2E77
    5b58:	84 0f       	add	r24, r20
    5b5a:	95 1f       	adc	r25, r21
    5b5c:	a6 1f       	adc	r26, r22
    5b5e:	b7 1f       	adc	r27, r23
    5b60:	80 93 27 2e 	sts	0x2E27, r24
    5b64:	90 93 28 2e 	sts	0x2E28, r25
    5b68:	a0 93 29 2e 	sts	0x2E29, r26
    5b6c:	b0 93 2a 2e 	sts	0x2E2A, r27
	
	//anti wind-up
	if(teta_greska_sum > 200)
    5b70:	80 91 27 2e 	lds	r24, 0x2E27
    5b74:	90 91 28 2e 	lds	r25, 0x2E28
    5b78:	a0 91 29 2e 	lds	r26, 0x2E29
    5b7c:	b0 91 2a 2e 	lds	r27, 0x2E2A
    5b80:	89 3c       	cpi	r24, 0xC9	; 201
    5b82:	91 05       	cpc	r25, r1
    5b84:	a1 05       	cpc	r26, r1
    5b86:	b1 05       	cpc	r27, r1
    5b88:	6c f0       	brlt	.+26     	; 0x5ba4 <PID_ugaoni+0x1fa>
		teta_greska_sum = 200;
    5b8a:	88 ec       	ldi	r24, 0xC8	; 200
    5b8c:	90 e0       	ldi	r25, 0x00	; 0
    5b8e:	a0 e0       	ldi	r26, 0x00	; 0
    5b90:	b0 e0       	ldi	r27, 0x00	; 0
    5b92:	80 93 27 2e 	sts	0x2E27, r24
    5b96:	90 93 28 2e 	sts	0x2E28, r25
    5b9a:	a0 93 29 2e 	sts	0x2E29, r26
    5b9e:	b0 93 2a 2e 	sts	0x2E2A, r27
    5ba2:	19 c0       	rjmp	.+50     	; 0x5bd6 <PID_ugaoni+0x22c>
	else if(teta_greska_sum < -200)
    5ba4:	80 91 27 2e 	lds	r24, 0x2E27
    5ba8:	90 91 28 2e 	lds	r25, 0x2E28
    5bac:	a0 91 29 2e 	lds	r26, 0x2E29
    5bb0:	b0 91 2a 2e 	lds	r27, 0x2E2A
    5bb4:	88 33       	cpi	r24, 0x38	; 56
    5bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb8:	af 4f       	sbci	r26, 0xFF	; 255
    5bba:	bf 4f       	sbci	r27, 0xFF	; 255
    5bbc:	64 f4       	brge	.+24     	; 0x5bd6 <PID_ugaoni+0x22c>
		teta_greska_sum = -200;
    5bbe:	88 e3       	ldi	r24, 0x38	; 56
    5bc0:	9f ef       	ldi	r25, 0xFF	; 255
    5bc2:	af ef       	ldi	r26, 0xFF	; 255
    5bc4:	bf ef       	ldi	r27, 0xFF	; 255
    5bc6:	80 93 27 2e 	sts	0x2E27, r24
    5bca:	90 93 28 2e 	sts	0x2E28, r25
    5bce:	a0 93 29 2e 	sts	0x2E29, r26
    5bd2:	b0 93 2a 2e 	sts	0x2E2A, r27
	
	//podesavanje pravca robota dok ne stigne u blizinu cilja
	if(rastojanje_cilj_temp > metar/10)  /// bilo /10 ? 
    5bd6:	60 91 d3 24 	lds	r22, 0x24D3
    5bda:	70 91 d4 24 	lds	r23, 0x24D4
    5bde:	80 91 d5 24 	lds	r24, 0x24D5
    5be2:	90 91 d6 24 	lds	r25, 0x24D6
    5be6:	c0 90 12 2e 	lds	r12, 0x2E12
    5bea:	d0 90 13 2e 	lds	r13, 0x2E13
    5bee:	e0 90 14 2e 	lds	r14, 0x2E14
    5bf2:	f0 90 15 2e 	lds	r15, 0x2E15
    5bf6:	2a e0       	ldi	r18, 0x0A	; 10
    5bf8:	30 e0       	ldi	r19, 0x00	; 0
    5bfa:	40 e0       	ldi	r20, 0x00	; 0
    5bfc:	50 e0       	ldi	r21, 0x00	; 0
    5bfe:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
    5c02:	2c 15       	cp	r18, r12
    5c04:	3d 05       	cpc	r19, r13
    5c06:	4e 05       	cpc	r20, r14
    5c08:	5f 05       	cpc	r21, r15
    5c0a:	0c f0       	brlt	.+2      	; 0x5c0e <PID_ugaoni+0x264>
    5c0c:	59 c0       	rjmp	.+178    	; 0x5cc0 <PID_ugaoni+0x316>
	{
		if(labs(teta_greska) > rezervni_ugao)	//okrecemo se u mestu kad treba
    5c0e:	40 91 74 2e 	lds	r20, 0x2E74
    5c12:	50 91 75 2e 	lds	r21, 0x2E75
    5c16:	60 91 76 2e 	lds	r22, 0x2E76
    5c1a:	70 91 77 2e 	lds	r23, 0x2E77
    5c1e:	20 91 2f 2e 	lds	r18, 0x2E2F
    5c22:	30 91 30 2e 	lds	r19, 0x2E30
    5c26:	db 01       	movw	r26, r22
    5c28:	ca 01       	movw	r24, r20
    5c2a:	77 23       	and	r23, r23
    5c2c:	3c f4       	brge	.+14     	; 0x5c3c <PID_ugaoni+0x292>
    5c2e:	88 27       	eor	r24, r24
    5c30:	99 27       	eor	r25, r25
    5c32:	dc 01       	movw	r26, r24
    5c34:	84 1b       	sub	r24, r20
    5c36:	95 0b       	sbc	r25, r21
    5c38:	a6 0b       	sbc	r26, r22
    5c3a:	b7 0b       	sbc	r27, r23
    5c3c:	a9 01       	movw	r20, r18
    5c3e:	66 27       	eor	r22, r22
    5c40:	57 fd       	sbrc	r21, 7
    5c42:	60 95       	com	r22
    5c44:	76 2f       	mov	r23, r22
    5c46:	48 17       	cp	r20, r24
    5c48:	59 07       	cpc	r21, r25
    5c4a:	6a 07       	cpc	r22, r26
    5c4c:	7b 07       	cpc	r23, r27
    5c4e:	ac f4       	brge	.+42     	; 0x5c7a <PID_ugaoni+0x2d0>
		{
			modifikovana_zeljena_pravolinijska_brzina = 0;	//zaustavlja se robot za okretanje u mestu
    5c50:	10 92 b2 24 	sts	0x24B2, r1
    5c54:	10 92 b3 24 	sts	0x24B3, r1
			rezervni_ugao = krug45;
    5c58:	80 91 c8 24 	lds	r24, 0x24C8
    5c5c:	90 91 c9 24 	lds	r25, 0x24C9
    5c60:	a0 91 ca 24 	lds	r26, 0x24CA
    5c64:	b0 91 cb 24 	lds	r27, 0x24CB
    5c68:	80 93 2f 2e 	sts	0x2E2F, r24
    5c6c:	90 93 30 2e 	sts	0x2E30, r25
			vreme_cekanja_tete = 0;
    5c70:	10 92 64 29 	sts	0x2964, r1
    5c74:	10 92 65 29 	sts	0x2965, r1
    5c78:	23 c0       	rjmp	.+70     	; 0x5cc0 <PID_ugaoni+0x316>
		}
		else if(vreme_cekanja_tete >= 300)
    5c7a:	80 91 64 29 	lds	r24, 0x2964
    5c7e:	90 91 65 29 	lds	r25, 0x2965
    5c82:	8c 32       	cpi	r24, 0x2C	; 44
    5c84:	91 40       	sbci	r25, 0x01	; 1
    5c86:	e0 f0       	brcs	.+56     	; 0x5cc0 <PID_ugaoni+0x316>
		{
			vreme_cekanja_tete = 0;
    5c88:	10 92 64 29 	sts	0x2964, r1
    5c8c:	10 92 65 29 	sts	0x2965, r1
			modifikovana_zeljena_pravolinijska_brzina = zeljena_pravolinijska_brzina;
    5c90:	80 91 7f 32 	lds	r24, 0x327F
    5c94:	90 91 80 32 	lds	r25, 0x3280
    5c98:	80 93 b2 24 	sts	0x24B2, r24
    5c9c:	90 93 b3 24 	sts	0x24B3, r25
			Kp_teta=Kp_teta_pravolinijski;
    5ca0:	80 91 fc 2d 	lds	r24, 0x2DFC
    5ca4:	90 91 fd 2d 	lds	r25, 0x2DFD
    5ca8:	a0 91 fe 2d 	lds	r26, 0x2DFE
    5cac:	b0 91 ff 2d 	lds	r27, 0x2DFF
    5cb0:	80 93 89 32 	sts	0x3289, r24
    5cb4:	90 93 8a 32 	sts	0x328A, r25
    5cb8:	a0 93 8b 32 	sts	0x328B, r26
    5cbc:	b0 93 8c 32 	sts	0x328C, r27
				// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5cc0:	60 91 74 2e 	lds	r22, 0x2E74
    5cc4:	70 91 75 2e 	lds	r23, 0x2E75
    5cc8:	80 91 76 2e 	lds	r24, 0x2E76
    5ccc:	90 91 77 2e 	lds	r25, 0x2E77
    5cd0:	80 90 89 32 	lds	r8, 0x3289
    5cd4:	90 90 8a 32 	lds	r9, 0x328A
    5cd8:	a0 90 8b 32 	lds	r10, 0x328B
    5cdc:	b0 90 8c 32 	lds	r11, 0x328C
				(float)(dif_error_ugao * Kd_teta) +
    5ce0:	20 91 3b 2e 	lds	r18, 0x2E3B
    5ce4:	30 91 3c 2e 	lds	r19, 0x2E3C
    5ce8:	40 91 3d 2e 	lds	r20, 0x2E3D
    5cec:	50 91 3e 2e 	lds	r21, 0x2E3E
    5cf0:	29 83       	std	Y+1, r18	; 0x01
    5cf2:	3a 83       	std	Y+2, r19	; 0x02
    5cf4:	4b 83       	std	Y+3, r20	; 0x03
    5cf6:	5c 83       	std	Y+4, r21	; 0x04
    5cf8:	40 90 a2 24 	lds	r4, 0x24A2
    5cfc:	50 90 a3 24 	lds	r5, 0x24A3
    5d00:	60 90 a4 24 	lds	r6, 0x24A4
    5d04:	70 90 a5 24 	lds	r7, 0x24A5
				(float)(teta_greska_sum * Ki_teta)) / 
    5d08:	c0 90 27 2e 	lds	r12, 0x2E27
    5d0c:	d0 90 28 2e 	lds	r13, 0x2E28
    5d10:	e0 90 29 2e 	lds	r14, 0x2E29
    5d14:	f0 90 2a 2e 	lds	r15, 0x2E2A
    5d18:	20 91 a8 24 	lds	r18, 0x24A8
    5d1c:	30 91 a9 24 	lds	r19, 0x24A9
    5d20:	40 91 aa 24 	lds	r20, 0x24AA
    5d24:	50 91 ab 24 	lds	r21, 0x24AB
    5d28:	2d 83       	std	Y+5, r18	; 0x05
    5d2a:	3e 83       	std	Y+6, r19	; 0x06
    5d2c:	4f 83       	std	Y+7, r20	; 0x07
    5d2e:	58 87       	std	Y+8, r21	; 0x08
				(krug90 / zeljena_brzina_okretanja);
    5d30:	20 91 7e 2e 	lds	r18, 0x2E7E
    5d34:	30 91 7f 2e 	lds	r19, 0x2E7F
    5d38:	40 91 80 2e 	lds	r20, 0x2E80
    5d3c:	50 91 81 2e 	lds	r21, 0x2E81
    5d40:	29 87       	std	Y+9, r18	; 0x09
    5d42:	3a 87       	std	Y+10, r19	; 0x0a
    5d44:	4b 87       	std	Y+11, r20	; 0x0b
    5d46:	5c 87       	std	Y+12, r21	; 0x0c
    5d48:	00 91 61 2e 	lds	r16, 0x2E61
    5d4c:	10 91 62 2e 	lds	r17, 0x2E62
				// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5d50:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    5d54:	a5 01       	movw	r20, r10
    5d56:	94 01       	movw	r18, r8
    5d58:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    5d5c:	4b 01       	movw	r8, r22
    5d5e:	5c 01       	movw	r10, r24
				(float)(dif_error_ugao * Kd_teta) +
    5d60:	69 81       	ldd	r22, Y+1	; 0x01
    5d62:	7a 81       	ldd	r23, Y+2	; 0x02
    5d64:	8b 81       	ldd	r24, Y+3	; 0x03
    5d66:	9c 81       	ldd	r25, Y+4	; 0x04
    5d68:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    5d6c:	a3 01       	movw	r20, r6
    5d6e:	92 01       	movw	r18, r4
    5d70:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    5d74:	9b 01       	movw	r18, r22
    5d76:	ac 01       	movw	r20, r24
				// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5d78:	c5 01       	movw	r24, r10
    5d7a:	b4 01       	movw	r22, r8
    5d7c:	d5 d6       	rcall	.+3498   	; 0x6b28 <__addsf3>
    5d7e:	4b 01       	movw	r8, r22
    5d80:	5c 01       	movw	r10, r24
				(float)(dif_error_ugao * Kd_teta) +
				(float)(teta_greska_sum * Ki_teta)) / 
    5d82:	c7 01       	movw	r24, r14
    5d84:	b6 01       	movw	r22, r12
    5d86:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    5d8a:	2d 81       	ldd	r18, Y+5	; 0x05
    5d8c:	3e 81       	ldd	r19, Y+6	; 0x06
    5d8e:	4f 81       	ldd	r20, Y+7	; 0x07
    5d90:	58 85       	ldd	r21, Y+8	; 0x08
    5d92:	0e 94 15 38 	call	0x702a	; 0x702a <__mulsf3>
    5d96:	9b 01       	movw	r18, r22
    5d98:	ac 01       	movw	r20, r24
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
				(float)(dif_error_ugao * Kd_teta) +
    5d9a:	c5 01       	movw	r24, r10
    5d9c:	b4 01       	movw	r22, r8
    5d9e:	c4 d6       	rcall	.+3464   	; 0x6b28 <__addsf3>
    5da0:	6b 01       	movw	r12, r22
    5da2:	7c 01       	movw	r14, r24
				(float)(teta_greska_sum * Ki_teta)) / 
				(krug90 / zeljena_brzina_okretanja);
    5da4:	98 01       	movw	r18, r16
    5da6:	44 27       	eor	r20, r20
    5da8:	37 fd       	sbrc	r19, 7
    5daa:	40 95       	com	r20
    5dac:	54 2f       	mov	r21, r20
    5dae:	69 85       	ldd	r22, Y+9	; 0x09
    5db0:	7a 85       	ldd	r23, Y+10	; 0x0a
    5db2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5db4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5db6:	0e 94 2d 39 	call	0x725a	; 0x725a <__divmodsi4>
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
				(float)(dif_error_ugao * Kd_teta) +
				(float)(teta_greska_sum * Ki_teta)) / 
    5dba:	ca 01       	movw	r24, r20
    5dbc:	b9 01       	movw	r22, r18
    5dbe:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__floatsisf>
    5dc2:	9b 01       	movw	r18, r22
    5dc4:	ac 01       	movw	r20, r24
    5dc6:	c7 01       	movw	r24, r14
    5dc8:	b6 01       	movw	r22, r12
    5dca:	7b d7       	rcall	.+3830   	; 0x6cc2 <__divsf3>
				// robot se krece pravolinijski
		}
	}	
	
	//PID izlaz:
	PID_teta =	((float)(teta_greska * Kp_teta) + 
    5dcc:	e2 d7       	rcall	.+4036   	; 0x6d92 <__fixsfsi>
    5dce:	60 93 54 2e 	sts	0x2E54, r22
    5dd2:	70 93 55 2e 	sts	0x2E55, r23
    5dd6:	80 93 56 2e 	sts	0x2E56, r24
    5dda:	90 93 57 2e 	sts	0x2E57, r25
				(float)(dif_error_ugao * Kd_teta) +
				(float)(teta_greska_sum * Ki_teta)) / 
				(krug90 / zeljena_brzina_okretanja);
	
	if(PID_teta < -zeljena_brzina_okretanja)
    5dde:	40 91 61 2e 	lds	r20, 0x2E61
    5de2:	50 91 62 2e 	lds	r21, 0x2E62
    5de6:	80 91 54 2e 	lds	r24, 0x2E54
    5dea:	90 91 55 2e 	lds	r25, 0x2E55
    5dee:	a0 91 56 2e 	lds	r26, 0x2E56
    5df2:	b0 91 57 2e 	lds	r27, 0x2E57
    5df6:	51 95       	neg	r21
    5df8:	41 95       	neg	r20
    5dfa:	51 09       	sbc	r21, r1
    5dfc:	66 27       	eor	r22, r22
    5dfe:	57 fd       	sbrc	r21, 7
    5e00:	60 95       	com	r22
    5e02:	76 2f       	mov	r23, r22
    5e04:	84 17       	cp	r24, r20
    5e06:	95 07       	cpc	r25, r21
    5e08:	a6 07       	cpc	r26, r22
    5e0a:	b7 07       	cpc	r27, r23
    5e0c:	9c f4       	brge	.+38     	; 0x5e34 <PID_ugaoni+0x48a>
		PID_teta = -zeljena_brzina_okretanja;
    5e0e:	80 91 61 2e 	lds	r24, 0x2E61
    5e12:	90 91 62 2e 	lds	r25, 0x2E62
    5e16:	91 95       	neg	r25
    5e18:	81 95       	neg	r24
    5e1a:	91 09       	sbc	r25, r1
    5e1c:	aa 27       	eor	r26, r26
    5e1e:	97 fd       	sbrc	r25, 7
    5e20:	a0 95       	com	r26
    5e22:	ba 2f       	mov	r27, r26
    5e24:	80 93 54 2e 	sts	0x2E54, r24
    5e28:	90 93 55 2e 	sts	0x2E55, r25
    5e2c:	a0 93 56 2e 	sts	0x2E56, r26
    5e30:	b0 93 57 2e 	sts	0x2E57, r27
	if(PID_teta > zeljena_brzina_okretanja)
    5e34:	40 91 61 2e 	lds	r20, 0x2E61
    5e38:	50 91 62 2e 	lds	r21, 0x2E62
    5e3c:	80 91 54 2e 	lds	r24, 0x2E54
    5e40:	90 91 55 2e 	lds	r25, 0x2E55
    5e44:	a0 91 56 2e 	lds	r26, 0x2E56
    5e48:	b0 91 57 2e 	lds	r27, 0x2E57
    5e4c:	66 27       	eor	r22, r22
    5e4e:	57 fd       	sbrc	r21, 7
    5e50:	60 95       	com	r22
    5e52:	76 2f       	mov	r23, r22
    5e54:	48 17       	cp	r20, r24
    5e56:	59 07       	cpc	r21, r25
    5e58:	6a 07       	cpc	r22, r26
    5e5a:	7b 07       	cpc	r23, r27
    5e5c:	84 f4       	brge	.+32     	; 0x5e7e <PID_ugaoni+0x4d4>
		PID_teta = zeljena_brzina_okretanja;
    5e5e:	80 91 61 2e 	lds	r24, 0x2E61
    5e62:	90 91 62 2e 	lds	r25, 0x2E62
    5e66:	aa 27       	eor	r26, r26
    5e68:	97 fd       	sbrc	r25, 7
    5e6a:	a0 95       	com	r26
    5e6c:	ba 2f       	mov	r27, r26
    5e6e:	80 93 54 2e 	sts	0x2E54, r24
    5e72:	90 93 55 2e 	sts	0x2E55, r25
    5e76:	a0 93 56 2e 	sts	0x2E56, r26
    5e7a:	b0 93 57 2e 	sts	0x2E57, r27
}
    5e7e:	2c 96       	adiw	r28, 0x0c	; 12
    5e80:	cd bf       	out	0x3d, r28	; 61
    5e82:	de bf       	out	0x3e, r29	; 62
    5e84:	df 91       	pop	r29
    5e86:	cf 91       	pop	r28
    5e88:	1f 91       	pop	r17
    5e8a:	0f 91       	pop	r16
    5e8c:	ff 90       	pop	r15
    5e8e:	ef 90       	pop	r14
    5e90:	df 90       	pop	r13
    5e92:	cf 90       	pop	r12
    5e94:	bf 90       	pop	r11
    5e96:	af 90       	pop	r10
    5e98:	9f 90       	pop	r9
    5e9a:	8f 90       	pop	r8
    5e9c:	7f 90       	pop	r7
    5e9e:	6f 90       	pop	r6
    5ea0:	5f 90       	pop	r5
    5ea2:	4f 90       	pop	r4
    5ea4:	08 95       	ret

00005ea6 <PID_brzinski>:

void PID_brzinski(void)
{
    5ea6:	4f 92       	push	r4
    5ea8:	5f 92       	push	r5
    5eaa:	6f 92       	push	r6
    5eac:	7f 92       	push	r7
    5eae:	8f 92       	push	r8
    5eb0:	9f 92       	push	r9
    5eb2:	af 92       	push	r10
    5eb4:	bf 92       	push	r11
    5eb6:	cf 92       	push	r12
    5eb8:	df 92       	push	r13
    5eba:	ef 92       	push	r14
    5ebc:	ff 92       	push	r15
    5ebe:	0f 93       	push	r16
    5ec0:	1f 93       	push	r17
    5ec2:	cf 93       	push	r28
    5ec4:	df 93       	push	r29
	//////////////PID//////////////////
	//ako nema stop signala, postavlja se izlaz
	
	if((stop_PID_levi == 0) && (set_direct_out == 0))
    5ec6:	80 91 f2 2d 	lds	r24, 0x2DF2
    5eca:	81 11       	cpse	r24, r1
    5ecc:	1a c0       	rjmp	.+52     	; 0x5f02 <PID_brzinski+0x5c>
    5ece:	80 91 81 32 	lds	r24, 0x3281
    5ed2:	81 11       	cpse	r24, r1
    5ed4:	16 c0       	rjmp	.+44     	; 0x5f02 <PID_brzinski+0x5c>
		PID_brzina_L = (PID_pozicija - PID_teta);
    5ed6:	40 91 fe 29 	lds	r20, 0x29FE
    5eda:	50 91 ff 29 	lds	r21, 0x29FF
    5ede:	60 91 00 2a 	lds	r22, 0x2A00
    5ee2:	70 91 01 2a 	lds	r23, 0x2A01
    5ee6:	80 91 54 2e 	lds	r24, 0x2E54
    5eea:	90 91 55 2e 	lds	r25, 0x2E55
    5eee:	a0 91 56 2e 	lds	r26, 0x2E56
    5ef2:	b0 91 57 2e 	lds	r27, 0x2E57
    5ef6:	48 1b       	sub	r20, r24
    5ef8:	59 0b       	sbc	r21, r25
    5efa:	40 93 7b 2e 	sts	0x2E7B, r20
    5efe:	50 93 7c 2e 	sts	0x2E7C, r21
	if((stop_PID_desni == 0) && (set_direct_out == 0))
    5f02:	80 91 f4 29 	lds	r24, 0x29F4
    5f06:	81 11       	cpse	r24, r1
    5f08:	1a c0       	rjmp	.+52     	; 0x5f3e <PID_brzinski+0x98>
    5f0a:	80 91 81 32 	lds	r24, 0x3281
    5f0e:	81 11       	cpse	r24, r1
    5f10:	16 c0       	rjmp	.+44     	; 0x5f3e <PID_brzinski+0x98>
		PID_brzina_R = (PID_pozicija + PID_teta); //+
    5f12:	80 91 fe 29 	lds	r24, 0x29FE
    5f16:	90 91 ff 29 	lds	r25, 0x29FF
    5f1a:	a0 91 00 2a 	lds	r26, 0x2A00
    5f1e:	b0 91 01 2a 	lds	r27, 0x2A01
    5f22:	40 91 54 2e 	lds	r20, 0x2E54
    5f26:	50 91 55 2e 	lds	r21, 0x2E55
    5f2a:	60 91 56 2e 	lds	r22, 0x2E56
    5f2e:	70 91 57 2e 	lds	r23, 0x2E57
    5f32:	84 0f       	add	r24, r20
    5f34:	95 1f       	adc	r25, r21
    5f36:	80 93 79 2e 	sts	0x2E79, r24
    5f3a:	90 93 7a 2e 	sts	0x2E7A, r25
	
	//Ogranicenje brzinskog PID-a
	if(PID_brzina_L > max_brzina_motora)
    5f3e:	20 91 7b 2e 	lds	r18, 0x2E7B
    5f42:	30 91 7c 2e 	lds	r19, 0x2E7C
    5f46:	80 91 0f 2e 	lds	r24, 0x2E0F
    5f4a:	90 91 10 2e 	lds	r25, 0x2E10
    5f4e:	82 17       	cp	r24, r18
    5f50:	93 07       	cpc	r25, r19
    5f52:	44 f4       	brge	.+16     	; 0x5f64 <PID_brzinski+0xbe>
		PID_brzina_L = max_brzina_motora;
    5f54:	80 91 0f 2e 	lds	r24, 0x2E0F
    5f58:	90 91 10 2e 	lds	r25, 0x2E10
    5f5c:	80 93 7b 2e 	sts	0x2E7B, r24
    5f60:	90 93 7c 2e 	sts	0x2E7C, r25
	if(PID_brzina_L < -max_brzina_motora)
    5f64:	20 91 0f 2e 	lds	r18, 0x2E0F
    5f68:	30 91 10 2e 	lds	r19, 0x2E10
    5f6c:	80 91 7b 2e 	lds	r24, 0x2E7B
    5f70:	90 91 7c 2e 	lds	r25, 0x2E7C
    5f74:	31 95       	neg	r19
    5f76:	21 95       	neg	r18
    5f78:	31 09       	sbc	r19, r1
    5f7a:	82 17       	cp	r24, r18
    5f7c:	93 07       	cpc	r25, r19
    5f7e:	5c f4       	brge	.+22     	; 0x5f96 <PID_brzinski+0xf0>
		PID_brzina_L = -max_brzina_motora;
    5f80:	80 91 0f 2e 	lds	r24, 0x2E0F
    5f84:	90 91 10 2e 	lds	r25, 0x2E10
    5f88:	91 95       	neg	r25
    5f8a:	81 95       	neg	r24
    5f8c:	91 09       	sbc	r25, r1
    5f8e:	80 93 7b 2e 	sts	0x2E7B, r24
    5f92:	90 93 7c 2e 	sts	0x2E7C, r25
	if(PID_brzina_R > max_brzina_motora)
    5f96:	20 91 79 2e 	lds	r18, 0x2E79
    5f9a:	30 91 7a 2e 	lds	r19, 0x2E7A
    5f9e:	80 91 0f 2e 	lds	r24, 0x2E0F
    5fa2:	90 91 10 2e 	lds	r25, 0x2E10
    5fa6:	82 17       	cp	r24, r18
    5fa8:	93 07       	cpc	r25, r19
    5faa:	44 f4       	brge	.+16     	; 0x5fbc <PID_brzinski+0x116>
		PID_brzina_R = max_brzina_motora;
    5fac:	80 91 0f 2e 	lds	r24, 0x2E0F
    5fb0:	90 91 10 2e 	lds	r25, 0x2E10
    5fb4:	80 93 79 2e 	sts	0x2E79, r24
    5fb8:	90 93 7a 2e 	sts	0x2E7A, r25
	if(PID_brzina_R < -max_brzina_motora)
    5fbc:	20 91 0f 2e 	lds	r18, 0x2E0F
    5fc0:	30 91 10 2e 	lds	r19, 0x2E10
    5fc4:	80 91 79 2e 	lds	r24, 0x2E79
    5fc8:	90 91 7a 2e 	lds	r25, 0x2E7A
    5fcc:	31 95       	neg	r19
    5fce:	21 95       	neg	r18
    5fd0:	31 09       	sbc	r19, r1
    5fd2:	82 17       	cp	r24, r18
    5fd4:	93 07       	cpc	r25, r19
    5fd6:	5c f4       	brge	.+22     	; 0x5fee <PID_brzinski+0x148>
		PID_brzina_R = -max_brzina_motora;
    5fd8:	80 91 0f 2e 	lds	r24, 0x2E0F
    5fdc:	90 91 10 2e 	lds	r25, 0x2E10
    5fe0:	91 95       	neg	r25
    5fe2:	81 95       	neg	r24
    5fe4:	91 09       	sbc	r25, r1
    5fe6:	80 93 79 2e 	sts	0x2E79, r24
    5fea:	90 93 7a 2e 	sts	0x2E7A, r25
	
	Pe_brzina_L = PID_brzina_L;
    5fee:	80 91 7b 2e 	lds	r24, 0x2E7B
    5ff2:	90 91 7c 2e 	lds	r25, 0x2E7C
    5ff6:	80 93 82 2e 	sts	0x2E82, r24
    5ffa:	90 93 83 2e 	sts	0x2E83, r25
	Pe_brzina_R = PID_brzina_R;
    5ffe:	80 91 79 2e 	lds	r24, 0x2E79
    6002:	90 91 7a 2e 	lds	r25, 0x2E7A
    6006:	80 93 06 2e 	sts	0x2E06, r24
    600a:	90 93 07 2e 	sts	0x2E07, r25
	Ie_brzina_L += Pe_brzina_L;
    600e:	20 91 88 2e 	lds	r18, 0x2E88
    6012:	30 91 89 2e 	lds	r19, 0x2E89
    6016:	80 91 82 2e 	lds	r24, 0x2E82
    601a:	90 91 83 2e 	lds	r25, 0x2E83
    601e:	82 0f       	add	r24, r18
    6020:	93 1f       	adc	r25, r19
    6022:	80 93 88 2e 	sts	0x2E88, r24
    6026:	90 93 89 2e 	sts	0x2E89, r25
	Ie_brzina_R += Pe_brzina_R;
    602a:	20 91 c2 24 	lds	r18, 0x24C2
    602e:	30 91 c3 24 	lds	r19, 0x24C3
    6032:	80 91 06 2e 	lds	r24, 0x2E06
    6036:	90 91 07 2e 	lds	r25, 0x2E07
    603a:	82 0f       	add	r24, r18
    603c:	93 1f       	adc	r25, r19
    603e:	80 93 c2 24 	sts	0x24C2, r24
    6042:	90 93 c3 24 	sts	0x24C3, r25
	De_brzina_L = PID_brzina_pret_L - PID_brzina_L;
    6046:	80 91 a6 24 	lds	r24, 0x24A6
    604a:	90 91 a7 24 	lds	r25, 0x24A7
    604e:	20 91 7b 2e 	lds	r18, 0x2E7B
    6052:	30 91 7c 2e 	lds	r19, 0x2E7C
    6056:	82 1b       	sub	r24, r18
    6058:	93 0b       	sbc	r25, r19
    605a:	80 93 6e 2e 	sts	0x2E6E, r24
    605e:	90 93 6f 2e 	sts	0x2E6F, r25
	De_brzina_R = PID_brzina_pret_R - PID_brzina_R;
    6062:	80 91 2b 2e 	lds	r24, 0x2E2B
    6066:	90 91 2c 2e 	lds	r25, 0x2E2C
    606a:	20 91 79 2e 	lds	r18, 0x2E79
    606e:	30 91 7a 2e 	lds	r19, 0x2E7A
    6072:	82 1b       	sub	r24, r18
    6074:	93 0b       	sbc	r25, r19
    6076:	80 93 c9 28 	sts	0x28C9, r24
    607a:	90 93 ca 28 	sts	0x28CA, r25
	
	PID_brzina_pret_L = PID_brzina_L;
    607e:	80 91 7b 2e 	lds	r24, 0x2E7B
    6082:	90 91 7c 2e 	lds	r25, 0x2E7C
    6086:	80 93 a6 24 	sts	0x24A6, r24
    608a:	90 93 a7 24 	sts	0x24A7, r25
	PID_brzina_pret_R = PID_brzina_R;
    608e:	80 91 79 2e 	lds	r24, 0x2E79
    6092:	90 91 7a 2e 	lds	r25, 0x2E7A
    6096:	80 93 2b 2e 	sts	0x2E2B, r24
    609a:	90 93 2c 2e 	sts	0x2E2C, r25
	
	//anti wind-up
	if(Ie_brzina_L > 200) //300
    609e:	80 91 88 2e 	lds	r24, 0x2E88
    60a2:	90 91 89 2e 	lds	r25, 0x2E89
    60a6:	89 3c       	cpi	r24, 0xC9	; 201
    60a8:	91 05       	cpc	r25, r1
    60aa:	34 f0       	brlt	.+12     	; 0x60b8 <PID_brzinski+0x212>
		Ie_brzina_L = 200;
    60ac:	88 ec       	ldi	r24, 0xC8	; 200
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	80 93 88 2e 	sts	0x2E88, r24
    60b4:	90 93 89 2e 	sts	0x2E89, r25
	if(Ie_brzina_L < -200)
    60b8:	80 91 88 2e 	lds	r24, 0x2E88
    60bc:	90 91 89 2e 	lds	r25, 0x2E89
    60c0:	88 33       	cpi	r24, 0x38	; 56
    60c2:	9f 4f       	sbci	r25, 0xFF	; 255
    60c4:	34 f4       	brge	.+12     	; 0x60d2 <PID_brzinski+0x22c>
		Ie_brzina_L = -200;
    60c6:	88 e3       	ldi	r24, 0x38	; 56
    60c8:	9f ef       	ldi	r25, 0xFF	; 255
    60ca:	80 93 88 2e 	sts	0x2E88, r24
    60ce:	90 93 89 2e 	sts	0x2E89, r25
	if(Ie_brzina_R > 200)
    60d2:	80 91 c2 24 	lds	r24, 0x24C2
    60d6:	90 91 c3 24 	lds	r25, 0x24C3
    60da:	89 3c       	cpi	r24, 0xC9	; 201
    60dc:	91 05       	cpc	r25, r1
    60de:	34 f0       	brlt	.+12     	; 0x60ec <PID_brzinski+0x246>
		Ie_brzina_R = 200;
    60e0:	88 ec       	ldi	r24, 0xC8	; 200
    60e2:	90 e0       	ldi	r25, 0x00	; 0
    60e4:	80 93 c2 24 	sts	0x24C2, r24
    60e8:	90 93 c3 24 	sts	0x24C3, r25
	if(Ie_brzina_R < -200)
    60ec:	80 91 c2 24 	lds	r24, 0x24C2
    60f0:	90 91 c3 24 	lds	r25, 0x24C3
    60f4:	88 33       	cpi	r24, 0x38	; 56
    60f6:	9f 4f       	sbci	r25, 0xFF	; 255
    60f8:	34 f4       	brge	.+12     	; 0x6106 <PID_brzinski+0x260>
		Ie_brzina_R = -200;
    60fa:	88 e3       	ldi	r24, 0x38	; 56
    60fc:	9f ef       	ldi	r25, 0xFF	; 255
    60fe:	80 93 c2 24 	sts	0x24C2, r24
    6102:	90 93 c3 24 	sts	0x24C3, r25

	PID_ukupni_L = (float)(Pe_brzina_L) * Kp_brzina + (float)(Ie_brzina_L) * Ki_brzina + (float)(De_brzina_L) * Kd_brzina; // znak - je zbog smera kretanja
    6106:	60 91 82 2e 	lds	r22, 0x2E82
    610a:	70 91 83 2e 	lds	r23, 0x2E83
    610e:	c0 90 d3 28 	lds	r12, 0x28D3
    6112:	d0 90 d4 28 	lds	r13, 0x28D4
    6116:	e0 90 d5 28 	lds	r14, 0x28D5
    611a:	f0 90 d6 28 	lds	r15, 0x28D6
    611e:	00 91 88 2e 	lds	r16, 0x2E88
    6122:	10 91 89 2e 	lds	r17, 0x2E89
    6126:	40 90 b8 24 	lds	r4, 0x24B8
    612a:	50 90 b9 24 	lds	r5, 0x24B9
    612e:	60 90 ba 24 	lds	r6, 0x24BA
    6132:	70 90 bb 24 	lds	r7, 0x24BB
    6136:	c0 91 6e 2e 	lds	r28, 0x2E6E
    613a:	d0 91 6f 2e 	lds	r29, 0x2E6F
    613e:	80 90 50 2e 	lds	r8, 0x2E50
    6142:	90 90 51 2e 	lds	r9, 0x2E51
    6146:	a0 90 52 2e 	lds	r10, 0x2E52
    614a:	b0 90 53 2e 	lds	r11, 0x2E53
    614e:	88 27       	eor	r24, r24
    6150:	77 fd       	sbrc	r23, 7
    6152:	80 95       	com	r24
    6154:	98 2f       	mov	r25, r24
    6156:	50 d6       	rcall	.+3232   	; 0x6df8 <__floatsisf>
    6158:	a7 01       	movw	r20, r14
    615a:	96 01       	movw	r18, r12
    615c:	66 d7       	rcall	.+3788   	; 0x702a <__mulsf3>
    615e:	6b 01       	movw	r12, r22
    6160:	7c 01       	movw	r14, r24
    6162:	b8 01       	movw	r22, r16
    6164:	88 27       	eor	r24, r24
    6166:	77 fd       	sbrc	r23, 7
    6168:	80 95       	com	r24
    616a:	98 2f       	mov	r25, r24
    616c:	45 d6       	rcall	.+3210   	; 0x6df8 <__floatsisf>
    616e:	a3 01       	movw	r20, r6
    6170:	92 01       	movw	r18, r4
    6172:	5b d7       	rcall	.+3766   	; 0x702a <__mulsf3>
    6174:	9b 01       	movw	r18, r22
    6176:	ac 01       	movw	r20, r24
    6178:	c7 01       	movw	r24, r14
    617a:	b6 01       	movw	r22, r12
    617c:	d5 d4       	rcall	.+2474   	; 0x6b28 <__addsf3>
    617e:	6b 01       	movw	r12, r22
    6180:	7c 01       	movw	r14, r24
    6182:	be 01       	movw	r22, r28
    6184:	88 27       	eor	r24, r24
    6186:	77 fd       	sbrc	r23, 7
    6188:	80 95       	com	r24
    618a:	98 2f       	mov	r25, r24
    618c:	35 d6       	rcall	.+3178   	; 0x6df8 <__floatsisf>
    618e:	a5 01       	movw	r20, r10
    6190:	94 01       	movw	r18, r8
    6192:	4b d7       	rcall	.+3734   	; 0x702a <__mulsf3>
    6194:	9b 01       	movw	r18, r22
    6196:	ac 01       	movw	r20, r24
    6198:	c7 01       	movw	r24, r14
    619a:	b6 01       	movw	r22, r12
    619c:	c5 d4       	rcall	.+2442   	; 0x6b28 <__addsf3>
    619e:	f9 d5       	rcall	.+3058   	; 0x6d92 <__fixsfsi>
    61a0:	60 93 d9 28 	sts	0x28D9, r22
    61a4:	70 93 da 28 	sts	0x28DA, r23
    61a8:	80 93 db 28 	sts	0x28DB, r24
    61ac:	90 93 dc 28 	sts	0x28DC, r25
	PID_ukupni_R = (float)(Pe_brzina_R) * Kp_brzina + (float)(Ie_brzina_R) * Ki_brzina + (float)(De_brzina_R) * Kd_brzina;
    61b0:	60 91 06 2e 	lds	r22, 0x2E06
    61b4:	70 91 07 2e 	lds	r23, 0x2E07
    61b8:	c0 90 d3 28 	lds	r12, 0x28D3
    61bc:	d0 90 d4 28 	lds	r13, 0x28D4
    61c0:	e0 90 d5 28 	lds	r14, 0x28D5
    61c4:	f0 90 d6 28 	lds	r15, 0x28D6
    61c8:	00 91 c2 24 	lds	r16, 0x24C2
    61cc:	10 91 c3 24 	lds	r17, 0x24C3
    61d0:	40 90 b8 24 	lds	r4, 0x24B8
    61d4:	50 90 b9 24 	lds	r5, 0x24B9
    61d8:	60 90 ba 24 	lds	r6, 0x24BA
    61dc:	70 90 bb 24 	lds	r7, 0x24BB
    61e0:	c0 91 c9 28 	lds	r28, 0x28C9
    61e4:	d0 91 ca 28 	lds	r29, 0x28CA
    61e8:	80 90 50 2e 	lds	r8, 0x2E50
    61ec:	90 90 51 2e 	lds	r9, 0x2E51
    61f0:	a0 90 52 2e 	lds	r10, 0x2E52
    61f4:	b0 90 53 2e 	lds	r11, 0x2E53
    61f8:	88 27       	eor	r24, r24
    61fa:	77 fd       	sbrc	r23, 7
    61fc:	80 95       	com	r24
    61fe:	98 2f       	mov	r25, r24
    6200:	fb d5       	rcall	.+3062   	; 0x6df8 <__floatsisf>
    6202:	a7 01       	movw	r20, r14
    6204:	96 01       	movw	r18, r12
    6206:	11 d7       	rcall	.+3618   	; 0x702a <__mulsf3>
    6208:	6b 01       	movw	r12, r22
    620a:	7c 01       	movw	r14, r24
    620c:	b8 01       	movw	r22, r16
    620e:	88 27       	eor	r24, r24
    6210:	77 fd       	sbrc	r23, 7
    6212:	80 95       	com	r24
    6214:	98 2f       	mov	r25, r24
    6216:	f0 d5       	rcall	.+3040   	; 0x6df8 <__floatsisf>
    6218:	a3 01       	movw	r20, r6
    621a:	92 01       	movw	r18, r4
    621c:	06 d7       	rcall	.+3596   	; 0x702a <__mulsf3>
    621e:	9b 01       	movw	r18, r22
    6220:	ac 01       	movw	r20, r24
    6222:	c7 01       	movw	r24, r14
    6224:	b6 01       	movw	r22, r12
    6226:	80 d4       	rcall	.+2304   	; 0x6b28 <__addsf3>
    6228:	6b 01       	movw	r12, r22
    622a:	7c 01       	movw	r14, r24
    622c:	be 01       	movw	r22, r28
    622e:	88 27       	eor	r24, r24
    6230:	77 fd       	sbrc	r23, 7
    6232:	80 95       	com	r24
    6234:	98 2f       	mov	r25, r24
    6236:	e0 d5       	rcall	.+3008   	; 0x6df8 <__floatsisf>
    6238:	a5 01       	movw	r20, r10
    623a:	94 01       	movw	r18, r8
    623c:	f6 d6       	rcall	.+3564   	; 0x702a <__mulsf3>
    623e:	9b 01       	movw	r18, r22
    6240:	ac 01       	movw	r20, r24
    6242:	c7 01       	movw	r24, r14
    6244:	b6 01       	movw	r22, r12
    6246:	70 d4       	rcall	.+2272   	; 0x6b28 <__addsf3>
    6248:	a4 d5       	rcall	.+2888   	; 0x6d92 <__fixsfsi>
    624a:	60 93 84 2e 	sts	0x2E84, r22
    624e:	70 93 85 2e 	sts	0x2E85, r23
    6252:	80 93 86 2e 	sts	0x2E86, r24
    6256:	90 93 87 2e 	sts	0x2E87, r25
	
	//preskaliranje - ne mora da se radi posto su max_brzina_motora i PWM_perioda slicne velicine
	//PID_ukupni_L = (PID_ukupni_L * PWM_perioda) / max_brzina_motora; 
	
	//Ogranicenje PID izlaza
	if(PID_ukupni_L > PWM_perioda)
    625a:	40 91 5e 2e 	lds	r20, 0x2E5E
    625e:	50 91 5f 2e 	lds	r21, 0x2E5F
    6262:	80 91 d9 28 	lds	r24, 0x28D9
    6266:	90 91 da 28 	lds	r25, 0x28DA
    626a:	a0 91 db 28 	lds	r26, 0x28DB
    626e:	b0 91 dc 28 	lds	r27, 0x28DC
    6272:	66 27       	eor	r22, r22
    6274:	57 fd       	sbrc	r21, 7
    6276:	60 95       	com	r22
    6278:	76 2f       	mov	r23, r22
    627a:	48 17       	cp	r20, r24
    627c:	59 07       	cpc	r21, r25
    627e:	6a 07       	cpc	r22, r26
    6280:	7b 07       	cpc	r23, r27
    6282:	84 f4       	brge	.+32     	; 0x62a4 <PID_brzinski+0x3fe>
		PID_ukupni_L = PWM_perioda;
    6284:	80 91 5e 2e 	lds	r24, 0x2E5E
    6288:	90 91 5f 2e 	lds	r25, 0x2E5F
    628c:	aa 27       	eor	r26, r26
    628e:	97 fd       	sbrc	r25, 7
    6290:	a0 95       	com	r26
    6292:	ba 2f       	mov	r27, r26
    6294:	80 93 d9 28 	sts	0x28D9, r24
    6298:	90 93 da 28 	sts	0x28DA, r25
    629c:	a0 93 db 28 	sts	0x28DB, r26
    62a0:	b0 93 dc 28 	sts	0x28DC, r27
	if(PID_ukupni_L < -PWM_perioda)
    62a4:	40 91 5e 2e 	lds	r20, 0x2E5E
    62a8:	50 91 5f 2e 	lds	r21, 0x2E5F
    62ac:	80 91 d9 28 	lds	r24, 0x28D9
    62b0:	90 91 da 28 	lds	r25, 0x28DA
    62b4:	a0 91 db 28 	lds	r26, 0x28DB
    62b8:	b0 91 dc 28 	lds	r27, 0x28DC
    62bc:	51 95       	neg	r21
    62be:	41 95       	neg	r20
    62c0:	51 09       	sbc	r21, r1
    62c2:	66 27       	eor	r22, r22
    62c4:	57 fd       	sbrc	r21, 7
    62c6:	60 95       	com	r22
    62c8:	76 2f       	mov	r23, r22
    62ca:	84 17       	cp	r24, r20
    62cc:	95 07       	cpc	r25, r21
    62ce:	a6 07       	cpc	r26, r22
    62d0:	b7 07       	cpc	r27, r23
    62d2:	9c f4       	brge	.+38     	; 0x62fa <PID_brzinski+0x454>
		PID_ukupni_L = -PWM_perioda;
    62d4:	80 91 5e 2e 	lds	r24, 0x2E5E
    62d8:	90 91 5f 2e 	lds	r25, 0x2E5F
    62dc:	91 95       	neg	r25
    62de:	81 95       	neg	r24
    62e0:	91 09       	sbc	r25, r1
    62e2:	aa 27       	eor	r26, r26
    62e4:	97 fd       	sbrc	r25, 7
    62e6:	a0 95       	com	r26
    62e8:	ba 2f       	mov	r27, r26
    62ea:	80 93 d9 28 	sts	0x28D9, r24
    62ee:	90 93 da 28 	sts	0x28DA, r25
    62f2:	a0 93 db 28 	sts	0x28DB, r26
    62f6:	b0 93 dc 28 	sts	0x28DC, r27
		
	if(PID_ukupni_R > PWM_perioda)
    62fa:	40 91 5e 2e 	lds	r20, 0x2E5E
    62fe:	50 91 5f 2e 	lds	r21, 0x2E5F
    6302:	80 91 84 2e 	lds	r24, 0x2E84
    6306:	90 91 85 2e 	lds	r25, 0x2E85
    630a:	a0 91 86 2e 	lds	r26, 0x2E86
    630e:	b0 91 87 2e 	lds	r27, 0x2E87
    6312:	66 27       	eor	r22, r22
    6314:	57 fd       	sbrc	r21, 7
    6316:	60 95       	com	r22
    6318:	76 2f       	mov	r23, r22
    631a:	48 17       	cp	r20, r24
    631c:	59 07       	cpc	r21, r25
    631e:	6a 07       	cpc	r22, r26
    6320:	7b 07       	cpc	r23, r27
    6322:	84 f4       	brge	.+32     	; 0x6344 <PID_brzinski+0x49e>
		PID_ukupni_R = PWM_perioda;
    6324:	80 91 5e 2e 	lds	r24, 0x2E5E
    6328:	90 91 5f 2e 	lds	r25, 0x2E5F
    632c:	aa 27       	eor	r26, r26
    632e:	97 fd       	sbrc	r25, 7
    6330:	a0 95       	com	r26
    6332:	ba 2f       	mov	r27, r26
    6334:	80 93 84 2e 	sts	0x2E84, r24
    6338:	90 93 85 2e 	sts	0x2E85, r25
    633c:	a0 93 86 2e 	sts	0x2E86, r26
    6340:	b0 93 87 2e 	sts	0x2E87, r27
	if(PID_ukupni_R < -PWM_perioda)
    6344:	40 91 5e 2e 	lds	r20, 0x2E5E
    6348:	50 91 5f 2e 	lds	r21, 0x2E5F
    634c:	80 91 84 2e 	lds	r24, 0x2E84
    6350:	90 91 85 2e 	lds	r25, 0x2E85
    6354:	a0 91 86 2e 	lds	r26, 0x2E86
    6358:	b0 91 87 2e 	lds	r27, 0x2E87
    635c:	51 95       	neg	r21
    635e:	41 95       	neg	r20
    6360:	51 09       	sbc	r21, r1
    6362:	66 27       	eor	r22, r22
    6364:	57 fd       	sbrc	r21, 7
    6366:	60 95       	com	r22
    6368:	76 2f       	mov	r23, r22
    636a:	84 17       	cp	r24, r20
    636c:	95 07       	cpc	r25, r21
    636e:	a6 07       	cpc	r26, r22
    6370:	b7 07       	cpc	r27, r23
    6372:	9c f4       	brge	.+38     	; 0x639a <PID_brzinski+0x4f4>
		PID_ukupni_R = -PWM_perioda;
    6374:	80 91 5e 2e 	lds	r24, 0x2E5E
    6378:	90 91 5f 2e 	lds	r25, 0x2E5F
    637c:	91 95       	neg	r25
    637e:	81 95       	neg	r24
    6380:	91 09       	sbc	r25, r1
    6382:	aa 27       	eor	r26, r26
    6384:	97 fd       	sbrc	r25, 7
    6386:	a0 95       	com	r26
    6388:	ba 2f       	mov	r27, r26
    638a:	80 93 84 2e 	sts	0x2E84, r24
    638e:	90 93 85 2e 	sts	0x2E85, r25
    6392:	a0 93 86 2e 	sts	0x2E86, r26
    6396:	b0 93 87 2e 	sts	0x2E87, r27
		
	//levi motor
	if (PID_ukupni_L > 3)/*if (PID_ukupni_L > 5)*/	//smer 1
    639a:	80 91 d9 28 	lds	r24, 0x28D9
    639e:	90 91 da 28 	lds	r25, 0x28DA
    63a2:	a0 91 db 28 	lds	r26, 0x28DB
    63a6:	b0 91 dc 28 	lds	r27, 0x28DC
    63aa:	04 97       	sbiw	r24, 0x04	; 4
    63ac:	a1 05       	cpc	r26, r1
    63ae:	b1 05       	cpc	r27, r1
    63b0:	9c f0       	brlt	.+38     	; 0x63d8 <PID_brzinski+0x532>
	{
		PORT_ClearPins(&PORTH, 0b00010000);	//IN_A2=0
    63b2:	e0 ee       	ldi	r30, 0xE0	; 224
    63b4:	f6 e0       	ldi	r31, 0x06	; 6
    63b6:	80 e1       	ldi	r24, 0x10	; 16
    63b8:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b10000000);	//IN_B2=1
    63ba:	80 e8       	ldi	r24, 0x80	; 128
    63bc:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCBBUF = PID_ukupni_L;
    63be:	80 91 d9 28 	lds	r24, 0x28D9
    63c2:	90 91 da 28 	lds	r25, 0x28DA
    63c6:	a0 91 db 28 	lds	r26, 0x28DB
    63ca:	b0 91 dc 28 	lds	r27, 0x28DC
    63ce:	e0 e4       	ldi	r30, 0x40	; 64
    63d0:	fb e0       	ldi	r31, 0x0B	; 11
    63d2:	82 af       	std	Z+58, r24	; 0x3a
    63d4:	93 af       	std	Z+59, r25	; 0x3b
    63d6:	27 c0       	rjmp	.+78     	; 0x6426 <PID_brzinski+0x580>
	}
	else if (PID_ukupni_L < -3)	//smer 2
    63d8:	80 91 d9 28 	lds	r24, 0x28D9
    63dc:	90 91 da 28 	lds	r25, 0x28DA
    63e0:	a0 91 db 28 	lds	r26, 0x28DB
    63e4:	b0 91 dc 28 	lds	r27, 0x28DC
    63e8:	8d 3f       	cpi	r24, 0xFD	; 253
    63ea:	9f 4f       	sbci	r25, 0xFF	; 255
    63ec:	af 4f       	sbci	r26, 0xFF	; 255
    63ee:	bf 4f       	sbci	r27, 0xFF	; 255
    63f0:	b4 f4       	brge	.+44     	; 0x641e <PID_brzinski+0x578>
	{
		PORT_ClearPins(&PORTH, 0b10000000);	//IN_B2=0
    63f2:	e0 ee       	ldi	r30, 0xE0	; 224
    63f4:	f6 e0       	ldi	r31, 0x06	; 6
    63f6:	80 e8       	ldi	r24, 0x80	; 128
    63f8:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00010000);	//IN_A2=1,
    63fa:	80 e1       	ldi	r24, 0x10	; 16
    63fc:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCBBUF = -PID_ukupni_L;
    63fe:	80 91 d9 28 	lds	r24, 0x28D9
    6402:	90 91 da 28 	lds	r25, 0x28DA
    6406:	a0 91 db 28 	lds	r26, 0x28DB
    640a:	b0 91 dc 28 	lds	r27, 0x28DC
    640e:	91 95       	neg	r25
    6410:	81 95       	neg	r24
    6412:	91 09       	sbc	r25, r1
    6414:	e0 e4       	ldi	r30, 0x40	; 64
    6416:	fb e0       	ldi	r31, 0x0B	; 11
    6418:	82 af       	std	Z+58, r24	; 0x3a
    641a:	93 af       	std	Z+59, r25	; 0x3b
    641c:	04 c0       	rjmp	.+8      	; 0x6426 <PID_brzinski+0x580>
	}
	else	//kocenje
		PORT_ClearPins(&PORTH, 0b10010000);	//IN_A2=0, IN_B2=0	
    641e:	80 e9       	ldi	r24, 0x90	; 144
    6420:	e0 ee       	ldi	r30, 0xE0	; 224
    6422:	f6 e0       	ldi	r31, 0x06	; 6
    6424:	86 83       	std	Z+6, r24	; 0x06
	//desni motor
	if (PID_ukupni_R > 3) //smer 1
    6426:	80 91 84 2e 	lds	r24, 0x2E84
    642a:	90 91 85 2e 	lds	r25, 0x2E85
    642e:	a0 91 86 2e 	lds	r26, 0x2E86
    6432:	b0 91 87 2e 	lds	r27, 0x2E87
    6436:	04 97       	sbiw	r24, 0x04	; 4
    6438:	a1 05       	cpc	r26, r1
    643a:	b1 05       	cpc	r27, r1
    643c:	9c f0       	brlt	.+38     	; 0x6464 <PID_brzinski+0x5be>
	{
		PORT_ClearPins(&PORTH, 0b00001000);	//IN_B1=0
    643e:	e0 ee       	ldi	r30, 0xE0	; 224
    6440:	f6 e0       	ldi	r31, 0x06	; 6
    6442:	88 e0       	ldi	r24, 0x08	; 8
    6444:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00000001);	//IN_A1=1
    6446:	81 e0       	ldi	r24, 0x01	; 1
    6448:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCABUF = PID_ukupni_R;
    644a:	80 91 84 2e 	lds	r24, 0x2E84
    644e:	90 91 85 2e 	lds	r25, 0x2E85
    6452:	a0 91 86 2e 	lds	r26, 0x2E86
    6456:	b0 91 87 2e 	lds	r27, 0x2E87
    645a:	e0 e4       	ldi	r30, 0x40	; 64
    645c:	fb e0       	ldi	r31, 0x0B	; 11
    645e:	80 af       	std	Z+56, r24	; 0x38
    6460:	91 af       	std	Z+57, r25	; 0x39
    6462:	27 c0       	rjmp	.+78     	; 0x64b2 <PID_brzinski+0x60c>
	}
	else if (PID_ukupni_R < -3)	//smer 2
    6464:	80 91 84 2e 	lds	r24, 0x2E84
    6468:	90 91 85 2e 	lds	r25, 0x2E85
    646c:	a0 91 86 2e 	lds	r26, 0x2E86
    6470:	b0 91 87 2e 	lds	r27, 0x2E87
    6474:	8d 3f       	cpi	r24, 0xFD	; 253
    6476:	9f 4f       	sbci	r25, 0xFF	; 255
    6478:	af 4f       	sbci	r26, 0xFF	; 255
    647a:	bf 4f       	sbci	r27, 0xFF	; 255
    647c:	b4 f4       	brge	.+44     	; 0x64aa <PID_brzinski+0x604>
	{
		PORT_ClearPins(&PORTH, 0b00000001);	//IN_A1=0
    647e:	e0 ee       	ldi	r30, 0xE0	; 224
    6480:	f6 e0       	ldi	r31, 0x06	; 6
    6482:	81 e0       	ldi	r24, 0x01	; 1
    6484:	86 83       	std	Z+6, r24	; 0x06
		PORT_SetPins(&PORTH, 0b00001000);	//IN_B1=1
    6486:	88 e0       	ldi	r24, 0x08	; 8
    6488:	85 83       	std	Z+5, r24	; 0x05
		TCF1.CCABUF = -PID_ukupni_R;
    648a:	80 91 84 2e 	lds	r24, 0x2E84
    648e:	90 91 85 2e 	lds	r25, 0x2E85
    6492:	a0 91 86 2e 	lds	r26, 0x2E86
    6496:	b0 91 87 2e 	lds	r27, 0x2E87
    649a:	91 95       	neg	r25
    649c:	81 95       	neg	r24
    649e:	91 09       	sbc	r25, r1
    64a0:	e0 e4       	ldi	r30, 0x40	; 64
    64a2:	fb e0       	ldi	r31, 0x0B	; 11
    64a4:	80 af       	std	Z+56, r24	; 0x38
    64a6:	91 af       	std	Z+57, r25	; 0x39
    64a8:	04 c0       	rjmp	.+8      	; 0x64b2 <PID_brzinski+0x60c>
	}
	else //kocenje
		PORT_ClearPins(&PORTH, 0b00001001);	//IN_A1=0, IN_B1=0
    64aa:	89 e0       	ldi	r24, 0x09	; 9
    64ac:	e0 ee       	ldi	r30, 0xE0	; 224
    64ae:	f6 e0       	ldi	r31, 0x06	; 6
    64b0:	86 83       	std	Z+6, r24	; 0x06
		
}
    64b2:	df 91       	pop	r29
    64b4:	cf 91       	pop	r28
    64b6:	1f 91       	pop	r17
    64b8:	0f 91       	pop	r16
    64ba:	ff 90       	pop	r15
    64bc:	ef 90       	pop	r14
    64be:	df 90       	pop	r13
    64c0:	cf 90       	pop	r12
    64c2:	bf 90       	pop	r11
    64c4:	af 90       	pop	r10
    64c6:	9f 90       	pop	r9
    64c8:	8f 90       	pop	r8
    64ca:	7f 90       	pop	r7
    64cc:	6f 90       	pop	r6
    64ce:	5f 90       	pop	r5
    64d0:	4f 90       	pop	r4
    64d2:	08 95       	ret

000064d4 <PORT_ConfigureInterrupt0>:
void PORT_ConfigureInterrupt1( PORT_t * port,
                               PORT_INT1LVL_t intLevel,
                               uint8_t pinMask )
{
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT1LVL_gm ) | intLevel;
	port->INT1MASK = pinMask;
    64d4:	fc 01       	movw	r30, r24
    64d6:	81 85       	ldd	r24, Z+9	; 0x09
    64d8:	8c 7f       	andi	r24, 0xFC	; 252
    64da:	68 2b       	or	r22, r24
    64dc:	61 87       	std	Z+9, r22	; 0x09
    64de:	42 87       	std	Z+10, r20	; 0x0a
    64e0:	08 95       	ret

000064e2 <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
    64e2:	ef 92       	push	r14
    64e4:	0f 93       	push	r16
	// Build pin control register value
	// N.B. Look in iox126a1.h for description of bit and group masks
	uint8_t temp = (uint8_t) opc |
    64e6:	0e 29       	or	r16, r14
    64e8:	44 23       	and	r20, r20
    64ea:	11 f0       	breq	.+4      	; 0x64f0 <PORT_ConfigurePins+0xe>
    64ec:	30 e8       	ldi	r19, 0x80	; 128
    64ee:	01 c0       	rjmp	.+2      	; 0x64f2 <PORT_ConfigurePins+0x10>
    64f0:	30 e0       	ldi	r19, 0x00	; 0
    64f2:	03 2b       	or	r16, r19
    64f4:	22 23       	and	r18, r18
    64f6:	11 f0       	breq	.+4      	; 0x64fc <PORT_ConfigurePins+0x1a>
    64f8:	20 e4       	ldi	r18, 0x40	; 64
    64fa:	01 c0       	rjmp	.+2      	; 0x64fe <PORT_ConfigurePins+0x1c>
    64fc:	20 e0       	ldi	r18, 0x00	; 0
    64fe:	02 2b       	or	r16, r18
	               (invertEnable ? PORT_INVEN_bm : 0);

	// Configure the pins in one atomic operation. 

	// Save status register. 
	uint8_t sreg = SREG;
    6500:	2f b7       	in	r18, 0x3f	; 63

	// Disable the global interrupt flag
	cli();	
    6502:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
    6504:	60 93 b0 00 	sts	0x00B0, r22
	port->PIN0CTRL = temp;
    6508:	fc 01       	movw	r30, r24
    650a:	00 8b       	std	Z+16, r16	; 0x10

	// Restore status register. 
	SREG = sreg;
    650c:	2f bf       	out	0x3f, r18	; 63
}
    650e:	0f 91       	pop	r16
    6510:	ef 90       	pop	r14
    6512:	08 95       	ret

00006514 <TC1_ConfigClockSource>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    6514:	fc 01       	movw	r30, r24
    6516:	20 81       	ld	r18, Z
    6518:	20 7f       	andi	r18, 0xF0	; 240
    651a:	62 2b       	or	r22, r18
    651c:	60 83       	st	Z, r22
    651e:	08 95       	ret

00006520 <TC1_SetOverflowIntLevel>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
    6520:	fc 01       	movw	r30, r24
    6522:	26 81       	ldd	r18, Z+6	; 0x06
    6524:	2c 7f       	andi	r18, 0xFC	; 252
    6526:	62 2b       	or	r22, r18
    6528:	66 83       	std	Z+6, r22	; 0x06
    652a:	08 95       	ret

0000652c <nuliraj_poziciju_robota>:
 			default:
 			break;
 		}

 		
 }
    652c:	10 92 ae 24 	sts	0x24AE, r1
    6530:	10 92 af 24 	sts	0x24AF, r1
    6534:	10 92 b0 24 	sts	0x24B0, r1
    6538:	10 92 b1 24 	sts	0x24B1, r1
    653c:	10 92 23 2e 	sts	0x2E23, r1
    6540:	10 92 24 2e 	sts	0x2E24, r1
    6544:	10 92 25 2e 	sts	0x2E25, r1
    6548:	10 92 26 2e 	sts	0x2E26, r1
    654c:	10 92 0b 2e 	sts	0x2E0B, r1
    6550:	10 92 0c 2e 	sts	0x2E0C, r1
    6554:	10 92 0d 2e 	sts	0x2E0D, r1
    6558:	10 92 0e 2e 	sts	0x2E0E, r1
    655c:	10 92 02 2a 	sts	0x2A02, r1
    6560:	10 92 03 2a 	sts	0x2A03, r1
    6564:	10 92 04 2a 	sts	0x2A04, r1
    6568:	10 92 05 2a 	sts	0x2A05, r1
    656c:	10 92 00 20 	sts	0x2000, r1
    6570:	10 92 01 20 	sts	0x2001, r1
    6574:	10 92 02 20 	sts	0x2002, r1
    6578:	10 92 03 20 	sts	0x2003, r1
    657c:	10 92 cc 24 	sts	0x24CC, r1
    6580:	10 92 cd 24 	sts	0x24CD, r1
    6584:	10 92 ce 24 	sts	0x24CE, r1
    6588:	10 92 cf 24 	sts	0x24CF, r1
    658c:	10 92 83 32 	sts	0x3283, r1
    6590:	10 92 84 32 	sts	0x3284, r1
    6594:	10 92 85 32 	sts	0x3285, r1
    6598:	10 92 86 32 	sts	0x3286, r1
    659c:	82 e0       	ldi	r24, 0x02	; 2
    659e:	80 93 78 2e 	sts	0x2E78, r24
    65a2:	80 93 5e 29 	sts	0x295E, r24
    65a6:	e0 e0       	ldi	r30, 0x00	; 0
    65a8:	f9 e0       	ldi	r31, 0x09	; 9
    65aa:	10 a2       	std	Z+32, r1	; 0x20
    65ac:	11 a2       	std	Z+33, r1	; 0x21
    65ae:	e0 e4       	ldi	r30, 0x40	; 64
    65b0:	f9 e0       	ldi	r31, 0x09	; 9
    65b2:	10 a2       	std	Z+32, r1	; 0x20
    65b4:	11 a2       	std	Z+33, r1	; 0x21
    65b6:	10 92 7d 32 	sts	0x327D, r1
    65ba:	10 92 7e 32 	sts	0x327E, r1
    65be:	10 92 1e 2e 	sts	0x2E1E, r1
    65c2:	10 92 1f 2e 	sts	0x2E1F, r1
    65c6:	10 92 20 2e 	sts	0x2E20, r1
    65ca:	10 92 21 2e 	sts	0x2E21, r1
    65ce:	10 92 ee 29 	sts	0x29EE, r1
    65d2:	10 92 ef 29 	sts	0x29EF, r1
    65d6:	10 92 f0 29 	sts	0x29F0, r1
    65da:	10 92 f1 29 	sts	0x29F1, r1
    65de:	10 92 2d 2e 	sts	0x2E2D, r1
    65e2:	10 92 2e 2e 	sts	0x2E2E, r1
    65e6:	08 95       	ret

000065e8 <idi_pravo>:
    65e8:	8f 92       	push	r8
    65ea:	9f 92       	push	r9
    65ec:	af 92       	push	r10
    65ee:	bf 92       	push	r11
    65f0:	ef 92       	push	r14
    65f2:	ff 92       	push	r15
    65f4:	0f 93       	push	r16
    65f6:	1f 93       	push	r17
    65f8:	49 01       	movw	r8, r18
    65fa:	5a 01       	movw	r10, r20
    65fc:	a0 91 00 2e 	lds	r26, 0x2E00
    6600:	b0 91 01 2e 	lds	r27, 0x2E01
    6604:	22 27       	eor	r18, r18
    6606:	33 27       	eor	r19, r19
    6608:	a9 01       	movw	r20, r18
    660a:	26 1b       	sub	r18, r22
    660c:	37 0b       	sbc	r19, r23
    660e:	48 0b       	sbc	r20, r24
    6610:	59 0b       	sbc	r21, r25
    6612:	3e d6       	rcall	.+3196   	; 0x7290 <__muluhisi3>
    6614:	60 93 ae 24 	sts	0x24AE, r22
    6618:	70 93 af 24 	sts	0x24AF, r23
    661c:	80 93 b0 24 	sts	0x24B0, r24
    6620:	90 93 b1 24 	sts	0x24B1, r25
    6624:	a0 91 00 2e 	lds	r26, 0x2E00
    6628:	b0 91 01 2e 	lds	r27, 0x2E01
    662c:	22 27       	eor	r18, r18
    662e:	33 27       	eor	r19, r19
    6630:	a9 01       	movw	r20, r18
    6632:	28 19       	sub	r18, r8
    6634:	39 09       	sbc	r19, r9
    6636:	4a 09       	sbc	r20, r10
    6638:	5b 09       	sbc	r21, r11
    663a:	2a d6       	rcall	.+3156   	; 0x7290 <__muluhisi3>
    663c:	60 93 0b 2e 	sts	0x2E0B, r22
    6640:	70 93 0c 2e 	sts	0x2E0C, r23
    6644:	80 93 0d 2e 	sts	0x2E0D, r24
    6648:	90 93 0e 2e 	sts	0x2E0E, r25
    664c:	60 91 75 32 	lds	r22, 0x3275
    6650:	70 91 76 32 	lds	r23, 0x3276
    6654:	80 91 77 32 	lds	r24, 0x3277
    6658:	90 91 78 32 	lds	r25, 0x3278
    665c:	a8 01       	movw	r20, r16
    665e:	97 01       	movw	r18, r14
    6660:	b8 d5       	rcall	.+2928   	; 0x71d2 <__mulsi3>
    6662:	28 e6       	ldi	r18, 0x68	; 104
    6664:	31 e0       	ldi	r19, 0x01	; 1
    6666:	40 e0       	ldi	r20, 0x00	; 0
    6668:	50 e0       	ldi	r21, 0x00	; 0
    666a:	d5 d5       	rcall	.+2986   	; 0x7216 <__udivmodsi4>
    666c:	20 93 00 20 	sts	0x2000, r18
    6670:	30 93 01 20 	sts	0x2001, r19
    6674:	40 93 02 20 	sts	0x2002, r20
    6678:	50 93 03 20 	sts	0x2003, r21
    667c:	82 e0       	ldi	r24, 0x02	; 2
    667e:	80 93 5e 29 	sts	0x295E, r24
    6682:	1f 91       	pop	r17
    6684:	0f 91       	pop	r16
    6686:	ff 90       	pop	r15
    6688:	ef 90       	pop	r14
    668a:	bf 90       	pop	r11
    668c:	af 90       	pop	r10
    668e:	9f 90       	pop	r9
    6690:	8f 90       	pop	r8
    6692:	08 95       	ret

00006694 <idi_unazad>:
    6694:	8f 92       	push	r8
    6696:	9f 92       	push	r9
    6698:	af 92       	push	r10
    669a:	bf 92       	push	r11
    669c:	ef 92       	push	r14
    669e:	ff 92       	push	r15
    66a0:	0f 93       	push	r16
    66a2:	1f 93       	push	r17
    66a4:	49 01       	movw	r8, r18
    66a6:	5a 01       	movw	r10, r20
    66a8:	a0 91 00 2e 	lds	r26, 0x2E00
    66ac:	b0 91 01 2e 	lds	r27, 0x2E01
    66b0:	22 27       	eor	r18, r18
    66b2:	33 27       	eor	r19, r19
    66b4:	a9 01       	movw	r20, r18
    66b6:	26 1b       	sub	r18, r22
    66b8:	37 0b       	sbc	r19, r23
    66ba:	48 0b       	sbc	r20, r24
    66bc:	59 0b       	sbc	r21, r25
    66be:	e8 d5       	rcall	.+3024   	; 0x7290 <__muluhisi3>
    66c0:	60 93 ae 24 	sts	0x24AE, r22
    66c4:	70 93 af 24 	sts	0x24AF, r23
    66c8:	80 93 b0 24 	sts	0x24B0, r24
    66cc:	90 93 b1 24 	sts	0x24B1, r25
    66d0:	a0 91 00 2e 	lds	r26, 0x2E00
    66d4:	b0 91 01 2e 	lds	r27, 0x2E01
    66d8:	22 27       	eor	r18, r18
    66da:	33 27       	eor	r19, r19
    66dc:	a9 01       	movw	r20, r18
    66de:	28 19       	sub	r18, r8
    66e0:	39 09       	sbc	r19, r9
    66e2:	4a 09       	sbc	r20, r10
    66e4:	5b 09       	sbc	r21, r11
    66e6:	d4 d5       	rcall	.+2984   	; 0x7290 <__muluhisi3>
    66e8:	60 93 0b 2e 	sts	0x2E0B, r22
    66ec:	70 93 0c 2e 	sts	0x2E0C, r23
    66f0:	80 93 0d 2e 	sts	0x2E0D, r24
    66f4:	90 93 0e 2e 	sts	0x2E0E, r25
    66f8:	60 91 75 32 	lds	r22, 0x3275
    66fc:	70 91 76 32 	lds	r23, 0x3276
    6700:	80 91 77 32 	lds	r24, 0x3277
    6704:	90 91 78 32 	lds	r25, 0x3278
    6708:	a8 01       	movw	r20, r16
    670a:	97 01       	movw	r18, r14
    670c:	62 d5       	rcall	.+2756   	; 0x71d2 <__mulsi3>
    670e:	28 e6       	ldi	r18, 0x68	; 104
    6710:	31 e0       	ldi	r19, 0x01	; 1
    6712:	40 e0       	ldi	r20, 0x00	; 0
    6714:	50 e0       	ldi	r21, 0x00	; 0
    6716:	7f d5       	rcall	.+2814   	; 0x7216 <__udivmodsi4>
    6718:	20 93 00 20 	sts	0x2000, r18
    671c:	30 93 01 20 	sts	0x2001, r19
    6720:	40 93 02 20 	sts	0x2002, r20
    6724:	50 93 03 20 	sts	0x2003, r21
    6728:	81 e0       	ldi	r24, 0x01	; 1
    672a:	80 93 5e 29 	sts	0x295E, r24
    672e:	1f 91       	pop	r17
    6730:	0f 91       	pop	r16
    6732:	ff 90       	pop	r15
    6734:	ef 90       	pop	r14
    6736:	bf 90       	pop	r11
    6738:	af 90       	pop	r10
    673a:	9f 90       	pop	r9
    673c:	8f 90       	pop	r8
    673e:	08 95       	ret

00006740 <inicijalizuj_bluetooth>:
    6740:	e0 e8       	ldi	r30, 0x80	; 128
    6742:	f6 e0       	ldi	r31, 0x06	; 6
    6744:	80 81       	ld	r24, Z
    6746:	80 68       	ori	r24, 0x80	; 128
    6748:	80 83       	st	Z, r24
    674a:	80 81       	ld	r24, Z
    674c:	8f 7b       	andi	r24, 0xBF	; 191
    674e:	80 83       	st	Z, r24
    6750:	e0 eb       	ldi	r30, 0xB0	; 176
    6752:	fa e0       	ldi	r31, 0x0A	; 10
    6754:	83 81       	ldd	r24, Z+3	; 0x03
    6756:	84 61       	ori	r24, 0x14	; 20
    6758:	83 83       	std	Z+3, r24	; 0x03
    675a:	84 81       	ldd	r24, Z+4	; 0x04
    675c:	88 61       	ori	r24, 0x18	; 24
    675e:	84 83       	std	Z+4, r24	; 0x04
    6760:	85 81       	ldd	r24, Z+5	; 0x05
    6762:	83 60       	ori	r24, 0x03	; 3
    6764:	85 83       	std	Z+5, r24	; 0x05
    6766:	8c e0       	ldi	r24, 0x0C	; 12
    6768:	86 83       	std	Z+6, r24	; 0x06
    676a:	87 81       	ldd	r24, Z+7	; 0x07
    676c:	80 62       	ori	r24, 0x20	; 32
    676e:	87 83       	std	Z+7, r24	; 0x07
    6770:	e0 ea       	ldi	r30, 0xA0	; 160
    6772:	f0 e0       	ldi	r31, 0x00	; 0
    6774:	82 81       	ldd	r24, Z+2	; 0x02
    6776:	81 60       	ori	r24, 0x01	; 1
    6778:	82 83       	std	Z+2, r24	; 0x02
    677a:	78 94       	sei
    677c:	08 95       	ret

0000677e <sendChar>:
    677e:	80 93 a0 0a 	sts	0x0AA0, r24
    6782:	e0 ea       	ldi	r30, 0xA0	; 160
    6784:	fa e0       	ldi	r31, 0x0A	; 10
    6786:	81 81       	ldd	r24, Z+1	; 0x01
    6788:	85 ff       	sbrs	r24, 5
    678a:	fd cf       	rjmp	.-6      	; 0x6786 <sendChar+0x8>
    678c:	08 95       	ret

0000678e <__vector_110>:
    678e:	1f 92       	push	r1
    6790:	0f 92       	push	r0
    6792:	0f b6       	in	r0, 0x3f	; 63
    6794:	0f 92       	push	r0
    6796:	11 24       	eor	r1, r1
    6798:	08 b6       	in	r0, 0x38	; 56
    679a:	0f 92       	push	r0
    679c:	18 be       	out	0x38, r1	; 56
    679e:	0b b6       	in	r0, 0x3b	; 59
    67a0:	0f 92       	push	r0
    67a2:	1b be       	out	0x3b, r1	; 59
    67a4:	8f 93       	push	r24
    67a6:	ef 93       	push	r30
    67a8:	ff 93       	push	r31
    67aa:	e0 ea       	ldi	r30, 0xA0	; 160
    67ac:	f6 e0       	ldi	r31, 0x06	; 6
    67ae:	84 81       	ldd	r24, Z+4	; 0x04
    67b0:	81 60       	ori	r24, 0x01	; 1
    67b2:	84 83       	std	Z+4, r24	; 0x04
    67b4:	ff 91       	pop	r31
    67b6:	ef 91       	pop	r30
    67b8:	8f 91       	pop	r24
    67ba:	0f 90       	pop	r0
    67bc:	0b be       	out	0x3b, r0	; 59
    67be:	0f 90       	pop	r0
    67c0:	08 be       	out	0x38, r0	; 56
    67c2:	0f 90       	pop	r0
    67c4:	0f be       	out	0x3f, r0	; 63
    67c6:	0f 90       	pop	r0
    67c8:	1f 90       	pop	r1
    67ca:	18 95       	reti

000067cc <__vector_108>:
    67cc:	1f 92       	push	r1
    67ce:	0f 92       	push	r0
    67d0:	0f b6       	in	r0, 0x3f	; 63
    67d2:	0f 92       	push	r0
    67d4:	11 24       	eor	r1, r1
    67d6:	08 b6       	in	r0, 0x38	; 56
    67d8:	0f 92       	push	r0
    67da:	18 be       	out	0x38, r1	; 56
    67dc:	0b b6       	in	r0, 0x3b	; 59
    67de:	0f 92       	push	r0
    67e0:	1b be       	out	0x3b, r1	; 59
    67e2:	8f 93       	push	r24
    67e4:	ef 93       	push	r30
    67e6:	ff 93       	push	r31
    67e8:	e0 ea       	ldi	r30, 0xA0	; 160
    67ea:	f6 e0       	ldi	r31, 0x06	; 6
    67ec:	84 81       	ldd	r24, Z+4	; 0x04
    67ee:	8e 7f       	andi	r24, 0xFE	; 254
    67f0:	84 83       	std	Z+4, r24	; 0x04
    67f2:	ff 91       	pop	r31
    67f4:	ef 91       	pop	r30
    67f6:	8f 91       	pop	r24
    67f8:	0f 90       	pop	r0
    67fa:	0b be       	out	0x3b, r0	; 59
    67fc:	0f 90       	pop	r0
    67fe:	08 be       	out	0x38, r0	; 56
    6800:	0f 90       	pop	r0
    6802:	0f be       	out	0x3f, r0	; 63
    6804:	0f 90       	pop	r0
    6806:	1f 90       	pop	r1
    6808:	18 95       	reti

0000680a <demo_3>:
 
 
  void demo_3(void)
  {
    680a:	ef 92       	push	r14
    680c:	ff 92       	push	r15
    680e:	0f 93       	push	r16
    6810:	1f 93       	push	r17
	  
	  switch(step1)
    6812:	80 91 09 20 	lds	r24, 0x2009
    6816:	81 30       	cpi	r24, 0x01	; 1
    6818:	a9 f1       	breq	.+106    	; 0x6884 <demo_3+0x7a>
    681a:	38 f0       	brcs	.+14     	; 0x682a <demo_3+0x20>
    681c:	82 30       	cpi	r24, 0x02	; 2
    681e:	09 f4       	brne	.+2      	; 0x6822 <demo_3+0x18>
    6820:	60 c0       	rjmp	.+192    	; 0x68e2 <demo_3+0xd8>
    6822:	83 30       	cpi	r24, 0x03	; 3
    6824:	09 f0       	breq	.+2      	; 0x6828 <demo_3+0x1e>
    6826:	b4 c0       	rjmp	.+360    	; 0x6990 <demo_3+0x186>
    6828:	89 c0       	rjmp	.+274    	; 0x693c <demo_3+0x132>
	  {
		  case 0:
		  if (sys_time>333)
    682a:	80 91 c4 24 	lds	r24, 0x24C4
    682e:	90 91 c5 24 	lds	r25, 0x24C5
    6832:	8e 34       	cpi	r24, 0x4E	; 78
    6834:	91 40       	sbci	r25, 0x01	; 1
    6836:	08 f4       	brcc	.+2      	; 0x683a <demo_3+0x30>
    6838:	ab c0       	rjmp	.+342    	; 0x6990 <demo_3+0x186>
		  {
			  if(flag1 == 0){
    683a:	80 91 0a 20 	lds	r24, 0x200A
    683e:	81 11       	cpse	r24, r1
    6840:	13 c0       	rjmp	.+38     	; 0x6868 <demo_3+0x5e>
				  stigao_flag = 0;
    6842:	10 92 06 20 	sts	0x2006, r1
				  flag1 = 1;
    6846:	81 e0       	ldi	r24, 0x01	; 1
    6848:	80 93 0a 20 	sts	0x200A, r24
				  idi_pravo(500,0,0);
    684c:	e1 2c       	mov	r14, r1
    684e:	f1 2c       	mov	r15, r1
    6850:	87 01       	movw	r16, r14
    6852:	20 e0       	ldi	r18, 0x00	; 0
    6854:	30 e0       	ldi	r19, 0x00	; 0
    6856:	a9 01       	movw	r20, r18
    6858:	64 ef       	ldi	r22, 0xF4	; 244
    685a:	71 e0       	ldi	r23, 0x01	; 1
    685c:	80 e0       	ldi	r24, 0x00	; 0
    685e:	90 e0       	ldi	r25, 0x00	; 0
    6860:	c3 de       	rcall	.-634    	; 0x65e8 <idi_pravo>
				  // zadaj_X_Y(-500,0,2);
				  sendChar('0');
    6862:	80 e3       	ldi	r24, 0x30	; 48
    6864:	8c df       	rcall	.-232    	; 0x677e <sendChar>
    6866:	94 c0       	rjmp	.+296    	; 0x6990 <demo_3+0x186>
			  }
			  else if(stigao_flag == 1){
    6868:	80 91 06 20 	lds	r24, 0x2006
    686c:	81 30       	cpi	r24, 0x01	; 1
    686e:	09 f0       	breq	.+2      	; 0x6872 <demo_3+0x68>
    6870:	8f c0       	rjmp	.+286    	; 0x6990 <demo_3+0x186>
				  step1++;
    6872:	80 93 09 20 	sts	0x2009, r24
				  flag1 = 0;
    6876:	10 92 0a 20 	sts	0x200A, r1
				  sys_time=0;
    687a:	10 92 c4 24 	sts	0x24C4, r1
    687e:	10 92 c5 24 	sts	0x24C5, r1
    6882:	86 c0       	rjmp	.+268    	; 0x6990 <demo_3+0x186>
			  }
		  }
		  break;
		  
		  case 1:
		  if (sys_time>666)
    6884:	80 91 c4 24 	lds	r24, 0x24C4
    6888:	90 91 c5 24 	lds	r25, 0x24C5
    688c:	8b 39       	cpi	r24, 0x9B	; 155
    688e:	92 40       	sbci	r25, 0x02	; 2
    6890:	08 f4       	brcc	.+2      	; 0x6894 <demo_3+0x8a>
    6892:	7e c0       	rjmp	.+252    	; 0x6990 <demo_3+0x186>
		  {
			  if(flag1 == 0){
    6894:	80 91 0a 20 	lds	r24, 0x200A
    6898:	81 11       	cpse	r24, r1
    689a:	14 c0       	rjmp	.+40     	; 0x68c4 <demo_3+0xba>
				  stigao_flag = 0;
    689c:	10 92 06 20 	sts	0x2006, r1
				  flag1 = 1;
    68a0:	81 e0       	ldi	r24, 0x01	; 1
    68a2:	80 93 0a 20 	sts	0x200A, r24
				  idi_unazad(500,500,0);
    68a6:	e1 2c       	mov	r14, r1
    68a8:	f1 2c       	mov	r15, r1
    68aa:	87 01       	movw	r16, r14
    68ac:	24 ef       	ldi	r18, 0xF4	; 244
    68ae:	31 e0       	ldi	r19, 0x01	; 1
    68b0:	40 e0       	ldi	r20, 0x00	; 0
    68b2:	50 e0       	ldi	r21, 0x00	; 0
    68b4:	64 ef       	ldi	r22, 0xF4	; 244
    68b6:	71 e0       	ldi	r23, 0x01	; 1
    68b8:	80 e0       	ldi	r24, 0x00	; 0
    68ba:	90 e0       	ldi	r25, 0x00	; 0
    68bc:	eb de       	rcall	.-554    	; 0x6694 <idi_unazad>
				  // zadaj_X_Y(-500,0,2);
				  sendChar('1');
    68be:	81 e3       	ldi	r24, 0x31	; 49
    68c0:	5e df       	rcall	.-324    	; 0x677e <sendChar>
    68c2:	66 c0       	rjmp	.+204    	; 0x6990 <demo_3+0x186>
			  }
			  else if(stigao_flag == 1){
    68c4:	80 91 06 20 	lds	r24, 0x2006
    68c8:	81 30       	cpi	r24, 0x01	; 1
    68ca:	09 f0       	breq	.+2      	; 0x68ce <demo_3+0xc4>
    68cc:	61 c0       	rjmp	.+194    	; 0x6990 <demo_3+0x186>
				  step1++;
    68ce:	82 e0       	ldi	r24, 0x02	; 2
    68d0:	80 93 09 20 	sts	0x2009, r24
				  flag1 = 0;
    68d4:	10 92 0a 20 	sts	0x200A, r1
				  sys_time=0;
    68d8:	10 92 c4 24 	sts	0x24C4, r1
    68dc:	10 92 c5 24 	sts	0x24C5, r1
    68e0:	57 c0       	rjmp	.+174    	; 0x6990 <demo_3+0x186>
			  }
		  }
		  break;
		  
		   case 2:
		   if (sys_time>666)
    68e2:	80 91 c4 24 	lds	r24, 0x24C4
    68e6:	90 91 c5 24 	lds	r25, 0x24C5
    68ea:	8b 39       	cpi	r24, 0x9B	; 155
    68ec:	92 40       	sbci	r25, 0x02	; 2
    68ee:	08 f4       	brcc	.+2      	; 0x68f2 <demo_3+0xe8>
    68f0:	4f c0       	rjmp	.+158    	; 0x6990 <demo_3+0x186>
		   {
			   if(flag1 == 0){
    68f2:	80 91 0a 20 	lds	r24, 0x200A
    68f6:	81 11       	cpse	r24, r1
    68f8:	13 c0       	rjmp	.+38     	; 0x6920 <demo_3+0x116>
				   stigao_flag = 0;
    68fa:	10 92 06 20 	sts	0x2006, r1
				   flag1 = 1;
    68fe:	81 e0       	ldi	r24, 0x01	; 1
    6900:	80 93 0a 20 	sts	0x200A, r24
				   idi_unazad(0,500,0);
    6904:	e1 2c       	mov	r14, r1
    6906:	f1 2c       	mov	r15, r1
    6908:	87 01       	movw	r16, r14
    690a:	24 ef       	ldi	r18, 0xF4	; 244
    690c:	31 e0       	ldi	r19, 0x01	; 1
    690e:	40 e0       	ldi	r20, 0x00	; 0
    6910:	50 e0       	ldi	r21, 0x00	; 0
    6912:	60 e0       	ldi	r22, 0x00	; 0
    6914:	70 e0       	ldi	r23, 0x00	; 0
    6916:	cb 01       	movw	r24, r22
    6918:	bd de       	rcall	.-646    	; 0x6694 <idi_unazad>
				   // zadaj_X_Y(-500,0,2);
				   sendChar('2');
    691a:	82 e3       	ldi	r24, 0x32	; 50
    691c:	30 df       	rcall	.-416    	; 0x677e <sendChar>
    691e:	38 c0       	rjmp	.+112    	; 0x6990 <demo_3+0x186>
			   }
			   else if(stigao_flag == 1){
    6920:	80 91 06 20 	lds	r24, 0x2006
    6924:	81 30       	cpi	r24, 0x01	; 1
    6926:	a1 f5       	brne	.+104    	; 0x6990 <demo_3+0x186>
				   step1++;
    6928:	83 e0       	ldi	r24, 0x03	; 3
    692a:	80 93 09 20 	sts	0x2009, r24
				   flag1 = 0;
    692e:	10 92 0a 20 	sts	0x200A, r1
				   sys_time=0;
    6932:	10 92 c4 24 	sts	0x24C4, r1
    6936:	10 92 c5 24 	sts	0x24C5, r1
    693a:	2a c0       	rjmp	.+84     	; 0x6990 <demo_3+0x186>
			   }
		   }
		   break;
		   
		    case 3:
		    if (sys_time>666)
    693c:	80 91 c4 24 	lds	r24, 0x24C4
    6940:	90 91 c5 24 	lds	r25, 0x24C5
    6944:	8b 39       	cpi	r24, 0x9B	; 155
    6946:	92 40       	sbci	r25, 0x02	; 2
    6948:	18 f1       	brcs	.+70     	; 0x6990 <demo_3+0x186>
		    {
			    if(flag1 == 0){
    694a:	80 91 0a 20 	lds	r24, 0x200A
    694e:	81 11       	cpse	r24, r1
    6950:	12 c0       	rjmp	.+36     	; 0x6976 <demo_3+0x16c>
				    stigao_flag = 0;
    6952:	10 92 06 20 	sts	0x2006, r1
				    flag1 = 1;
    6956:	81 e0       	ldi	r24, 0x01	; 1
    6958:	80 93 0a 20 	sts	0x200A, r24
				    idi_unazad(0,0,0);
    695c:	e1 2c       	mov	r14, r1
    695e:	f1 2c       	mov	r15, r1
    6960:	87 01       	movw	r16, r14
    6962:	20 e0       	ldi	r18, 0x00	; 0
    6964:	30 e0       	ldi	r19, 0x00	; 0
    6966:	a9 01       	movw	r20, r18
    6968:	60 e0       	ldi	r22, 0x00	; 0
    696a:	70 e0       	ldi	r23, 0x00	; 0
    696c:	cb 01       	movw	r24, r22
    696e:	92 de       	rcall	.-732    	; 0x6694 <idi_unazad>
				    // zadaj_X_Y(-500,0,2);
				    sendChar('3');
    6970:	83 e3       	ldi	r24, 0x33	; 51
    6972:	05 df       	rcall	.-502    	; 0x677e <sendChar>
    6974:	0d c0       	rjmp	.+26     	; 0x6990 <demo_3+0x186>
			    }
			    else if(stigao_flag == 1){
    6976:	80 91 06 20 	lds	r24, 0x2006
    697a:	81 30       	cpi	r24, 0x01	; 1
    697c:	49 f4       	brne	.+18     	; 0x6990 <demo_3+0x186>
				    step1++;
    697e:	84 e0       	ldi	r24, 0x04	; 4
    6980:	80 93 09 20 	sts	0x2009, r24
				    flag1 = 0;
    6984:	10 92 0a 20 	sts	0x200A, r1
				    sys_time=0;
    6988:	10 92 c4 24 	sts	0x24C4, r1
    698c:	10 92 c5 24 	sts	0x24C5, r1
		  default:
		  break;
	  }

	  
  }
    6990:	1f 91       	pop	r17
    6992:	0f 91       	pop	r16
    6994:	ff 90       	pop	r15
    6996:	ef 90       	pop	r14
    6998:	08 95       	ret

0000699a <USART_InterruptDriver_Initialize>:
	uint8_t tempHead = usart_data->buffer.RX_Head;
	uint8_t tempTail = usart_data->buffer.RX_Tail;

	// There are data left in the buffer unless Head and Tail are equal.  
	return (tempHead != tempTail);
}
    699a:	fc 01       	movw	r30, r24
    699c:	60 83       	st	Z, r22
    699e:	71 83       	std	Z+1, r23	; 0x01
    69a0:	42 83       	std	Z+2, r20	; 0x02
    69a2:	ec 57       	subi	r30, 0x7C	; 124
    69a4:	fe 4f       	sbci	r31, 0xFE	; 254
    69a6:	10 82       	st	Z, r1
    69a8:	fc 01       	movw	r30, r24
    69aa:	ed 57       	subi	r30, 0x7D	; 125
    69ac:	fe 4f       	sbci	r31, 0xFE	; 254
    69ae:	10 82       	st	Z, r1
    69b0:	fc 01       	movw	r30, r24
    69b2:	ea 57       	subi	r30, 0x7A	; 122
    69b4:	fe 4f       	sbci	r31, 0xFE	; 254
    69b6:	10 82       	st	Z, r1
    69b8:	fc 01       	movw	r30, r24
    69ba:	eb 57       	subi	r30, 0x7B	; 123
    69bc:	fe 4f       	sbci	r31, 0xFE	; 254
    69be:	10 82       	st	Z, r1
    69c0:	08 95       	ret

000069c2 <USART_TXBuffer_FreeSpace>:
    69c2:	fc 01       	movw	r30, r24
    69c4:	eb 57       	subi	r30, 0x7B	; 123
    69c6:	fe 4f       	sbci	r31, 0xFE	; 254
    69c8:	20 81       	ld	r18, Z
    69ca:	fc 01       	movw	r30, r24
    69cc:	ea 57       	subi	r30, 0x7A	; 122
    69ce:	fe 4f       	sbci	r31, 0xFE	; 254
    69d0:	90 81       	ld	r25, Z
    69d2:	2f 5f       	subi	r18, 0xFF	; 255
    69d4:	81 e0       	ldi	r24, 0x01	; 1
    69d6:	29 13       	cpse	r18, r25
    69d8:	01 c0       	rjmp	.+2      	; 0x69dc <USART_TXBuffer_FreeSpace+0x1a>
    69da:	80 e0       	ldi	r24, 0x00	; 0
    69dc:	08 95       	ret

000069de <USART_TXBuffer_PutByte>:
    69de:	1f 93       	push	r17
    69e0:	cf 93       	push	r28
    69e2:	df 93       	push	r29
    69e4:	ec 01       	movw	r28, r24
    69e6:	16 2f       	mov	r17, r22
    69e8:	ec df       	rcall	.-40     	; 0x69c2 <USART_TXBuffer_FreeSpace>
    69ea:	88 23       	and	r24, r24
    69ec:	99 f0       	breq	.+38     	; 0x6a14 <USART_TXBuffer_PutByte+0x36>
    69ee:	fe 01       	movw	r30, r28
    69f0:	eb 57       	subi	r30, 0x7B	; 123
    69f2:	fe 4f       	sbci	r31, 0xFE	; 254
    69f4:	90 81       	ld	r25, Z
    69f6:	de 01       	movw	r26, r28
    69f8:	a9 0f       	add	r26, r25
    69fa:	b1 1d       	adc	r27, r1
    69fc:	ad 57       	subi	r26, 0x7D	; 125
    69fe:	bf 4f       	sbci	r27, 0xFF	; 255
    6a00:	1c 93       	st	X, r17
    6a02:	9f 5f       	subi	r25, 0xFF	; 255
    6a04:	90 83       	st	Z, r25
    6a06:	e8 81       	ld	r30, Y
    6a08:	f9 81       	ldd	r31, Y+1	; 0x01
    6a0a:	93 81       	ldd	r25, Z+3	; 0x03
    6a0c:	9c 7f       	andi	r25, 0xFC	; 252
    6a0e:	2a 81       	ldd	r18, Y+2	; 0x02
    6a10:	92 2b       	or	r25, r18
    6a12:	93 83       	std	Z+3, r25	; 0x03
    6a14:	df 91       	pop	r29
    6a16:	cf 91       	pop	r28
    6a18:	1f 91       	pop	r17
    6a1a:	08 95       	ret

00006a1c <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    6a1c:	fc 01       	movw	r30, r24
    6a1e:	ec 57       	subi	r30, 0x7C	; 124
    6a20:	fe 4f       	sbci	r31, 0xFE	; 254
    6a22:	20 81       	ld	r18, Z
    6a24:	dc 01       	movw	r26, r24
    6a26:	a2 0f       	add	r26, r18
    6a28:	b1 1d       	adc	r27, r1
    6a2a:	13 96       	adiw	r26, 0x03	; 3
    6a2c:	8c 91       	ld	r24, X

	// Advance buffer tail.  
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    6a2e:	90 81       	ld	r25, Z
    6a30:	9f 5f       	subi	r25, 0xFF	; 255
    6a32:	9f 77       	andi	r25, 0x7F	; 127
    6a34:	90 83       	st	Z, r25

	return ans;
}
    6a36:	08 95       	ret

00006a38 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	// Advance buffer head.  
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    6a38:	fc 01       	movw	r30, r24
    6a3a:	ed 57       	subi	r30, 0x7D	; 125
    6a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    6a3e:	20 81       	ld	r18, Z
    6a40:	2f 5f       	subi	r18, 0xFF	; 255
    6a42:	2f 77       	andi	r18, 0x7F	; 127

	// Check for overflow.  
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    6a44:	fc 01       	movw	r30, r24
    6a46:	ec 57       	subi	r30, 0x7C	; 124
    6a48:	fe 4f       	sbci	r31, 0xFE	; 254
    6a4a:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    6a4c:	dc 01       	movw	r26, r24
    6a4e:	ed 91       	ld	r30, X+
    6a50:	fc 91       	ld	r31, X
    6a52:	11 97       	sbiw	r26, 0x01	; 1
    6a54:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    6a56:	23 17       	cp	r18, r19
    6a58:	59 f0       	breq	.+22     	; 0x6a70 <USART_RXComplete+0x38>
	  	ans = false;		//stigli su svi podaci
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    6a5a:	fc 01       	movw	r30, r24
    6a5c:	ed 57       	subi	r30, 0x7D	; 125
    6a5e:	fe 4f       	sbci	r31, 0xFE	; 254
    6a60:	30 81       	ld	r19, Z
    6a62:	a3 0f       	add	r26, r19
    6a64:	b1 1d       	adc	r27, r1
    6a66:	13 96       	adiw	r26, 0x03	; 3
    6a68:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    6a6a:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;		//stigli su svi podaci
	}else{
		ans = true;
    6a6c:	81 e0       	ldi	r24, 0x01	; 1
    6a6e:	08 95       	ret
	// Check for overflow.  
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;		//stigli su svi podaci
    6a70:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    6a72:	08 95       	ret

00006a74 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    6a74:	cf 93       	push	r28
    6a76:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	// Check if all data is transmitted. 
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    6a78:	fc 01       	movw	r30, r24
    6a7a:	ea 57       	subi	r30, 0x7A	; 122
    6a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    6a7e:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    6a80:	fc 01       	movw	r30, r24
    6a82:	eb 57       	subi	r30, 0x7B	; 123
    6a84:	fe 4f       	sbci	r31, 0xFE	; 254
    6a86:	30 81       	ld	r19, Z
    6a88:	32 13       	cpse	r19, r18
    6a8a:	07 c0       	rjmp	.+14     	; 0x6a9a <USART_DataRegEmpty+0x26>
	    // Disable DRE interrupts.
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    6a8c:	dc 01       	movw	r26, r24
    6a8e:	ed 91       	ld	r30, X+
    6a90:	fc 91       	ld	r31, X
    6a92:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    6a94:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    6a96:	83 83       	std	Z+3, r24	; 0x03
    6a98:	11 c0       	rjmp	.+34     	; 0x6abc <USART_DataRegEmpty+0x48>

	}else{
		// Start transmitting. 
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    6a9a:	fc 01       	movw	r30, r24
    6a9c:	ea 57       	subi	r30, 0x7A	; 122
    6a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    6aa0:	20 81       	ld	r18, Z
    6aa2:	dc 01       	movw	r26, r24
    6aa4:	a2 0f       	add	r26, r18
    6aa6:	b1 1d       	adc	r27, r1
    6aa8:	ad 57       	subi	r26, 0x7D	; 125
    6aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    6aac:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    6aae:	ec 01       	movw	r28, r24
    6ab0:	a8 81       	ld	r26, Y
    6ab2:	b9 81       	ldd	r27, Y+1	; 0x01
    6ab4:	2c 93       	st	X, r18

		// Advance buffer tail. 
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    6ab6:	80 81       	ld	r24, Z
    6ab8:	8f 5f       	subi	r24, 0xFF	; 255
    6aba:	80 83       	st	Z, r24
	}
}
    6abc:	df 91       	pop	r29
    6abe:	cf 91       	pop	r28
    6ac0:	08 95       	ret

00006ac2 <main>:
int main(void)
{
	int msg_counter = 0;
	int servo_counter = 0;
	//char servo_flag = 0;
	Podesi_Oscilator();					//podesavanje oscilatora
    6ac2:	0e 94 49 03 	call	0x692	; 0x692 <Podesi_Oscilator>
	Podesi_Parametre_Robota();			//podesavanje broja impulsa u krugu
    6ac6:	0e 94 b0 01 	call	0x360	; 0x360 <Podesi_Parametre_Robota>
	Podesi_PID_Pojacanja();				//podesavanje pojacanja PID regulatora
    6aca:	0e 94 4c 02 	call	0x498	; 0x498 <Podesi_PID_Pojacanja>
	PodesiADC();						//podesavanje AD konvertora
    6ace:	0e 94 03 03 	call	0x606	; 0x606 <PodesiADC>
	Podesi_Tajmere();					//podesavanje tajmera
    6ad2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Podesi_Tajmere>
	Podesi_QDEC();						//podesavanje kvadraturnih dekodera
    6ad6:	0e 94 cb 02 	call	0x596	; 0x596 <Podesi_QDEC>
	Podesi_PWM();						//podesavanje PWM signala za motore i servoe
    6ada:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <Podesi_PWM>
	Podesi_Interapt();					//podesavanje interapt prioriteta
    6ade:	0e 94 39 03 	call	0x672	; 0x672 <Podesi_Interapt>
	Podesi_Pinove();					//podesavanje I/O pinova
    6ae2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Podesi_Pinove>
	Podesi_USART_Komunikaciju();		//podesavanje komunikacije
    6ae6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <Podesi_USART_Komunikaciju>
	inicijalizuj_bluetooth();
    6aea:	2a de       	rcall	.-940    	; 0x6740 <inicijalizuj_bluetooth>
	//inicijalizuj_servo_tajmer_20ms();
	//pomeri_servo_1(0);
	//sendChar('k');
	//_delay_ms(1000);					//cekanje da se stabilizuje sistem
	nuliraj_poziciju_robota();
    6aec:	1f dd       	rcall	.-1474   	; 0x652c <nuliraj_poziciju_robota>
		  //if (sys_time>1400)
		  //{
			  //sendChar('W');
			  //sys_time=0;
		  //}
		demo_3();
    6aee:	8d de       	rcall	.-742    	; 0x680a <demo_3>
		//Racunanje trenutne pozicije
		if (Rac_tren_poz_sample_counter >= 3){		//9ms   3
    6af0:	80 91 08 20 	lds	r24, 0x2008
    6af4:	83 30       	cpi	r24, 0x03	; 3
    6af6:	20 f0       	brcs	.+8      	; 0x6b00 <main+0x3e>
			Rac_tren_poz_sample_counter = 0;
    6af8:	10 92 08 20 	sts	0x2008, r1
			Racunanje_trenutne_pozicije();
    6afc:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <Racunanje_trenutne_pozicije>
		}
		
		//Korekcija pravca i distance prema cilju
		if(Pracenje_Pravca_sample_counter >= 30){	//90ms   30
    6b00:	80 91 04 20 	lds	r24, 0x2004
    6b04:	8e 31       	cpi	r24, 0x1E	; 30
    6b06:	20 f0       	brcs	.+8      	; 0x6b10 <main+0x4e>
			msg_counter++;
			servo_counter++;
			Pracenje_Pravca_sample_counter = 0;
    6b08:	10 92 04 20 	sts	0x2004, r1
			Pracenje_pravca();
    6b0c:	0e 94 09 28 	call	0x5012	; 0x5012 <Pracenje_pravca>
		}
		
		//PID regulacija
		if(PID_pozicioni_sample_counter >= 3){		//9ms    3
    6b10:	80 91 05 20 	lds	r24, 0x2005
    6b14:	83 30       	cpi	r24, 0x03	; 3
    6b16:	58 f3       	brcs	.-42     	; 0x6aee <main+0x2c>
			PID_pozicioni_sample_counter = 0;
    6b18:	10 92 05 20 	sts	0x2005, r1
			PID_ugaoni();
    6b1c:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <PID_ugaoni>
			PID_pravolinijski();
    6b20:	0e 94 77 2a 	call	0x54ee	; 0x54ee <PID_pravolinijski>
    6b24:	e4 cf       	rjmp	.-56     	; 0x6aee <main+0x2c>

00006b26 <__subsf3>:
    6b26:	50 58       	subi	r21, 0x80	; 128

00006b28 <__addsf3>:
    6b28:	bb 27       	eor	r27, r27
    6b2a:	aa 27       	eor	r26, r26
    6b2c:	0e d0       	rcall	.+28     	; 0x6b4a <__addsf3x>
    6b2e:	27 c2       	rjmp	.+1102   	; 0x6f7e <__fp_round>
    6b30:	f0 d1       	rcall	.+992    	; 0x6f12 <__fp_pscA>
    6b32:	30 f0       	brcs	.+12     	; 0x6b40 <__addsf3+0x18>
    6b34:	f5 d1       	rcall	.+1002   	; 0x6f20 <__fp_pscB>
    6b36:	20 f0       	brcs	.+8      	; 0x6b40 <__addsf3+0x18>
    6b38:	31 f4       	brne	.+12     	; 0x6b46 <__addsf3+0x1e>
    6b3a:	9f 3f       	cpi	r25, 0xFF	; 255
    6b3c:	11 f4       	brne	.+4      	; 0x6b42 <__addsf3+0x1a>
    6b3e:	1e f4       	brtc	.+6      	; 0x6b46 <__addsf3+0x1e>
    6b40:	c0 c1       	rjmp	.+896    	; 0x6ec2 <__fp_nan>
    6b42:	0e f4       	brtc	.+2      	; 0x6b46 <__addsf3+0x1e>
    6b44:	e0 95       	com	r30
    6b46:	e7 fb       	bst	r30, 7
    6b48:	b6 c1       	rjmp	.+876    	; 0x6eb6 <__fp_inf>

00006b4a <__addsf3x>:
    6b4a:	e9 2f       	mov	r30, r25
    6b4c:	3a d2       	rcall	.+1140   	; 0x6fc2 <__fp_split3>
    6b4e:	80 f3       	brcs	.-32     	; 0x6b30 <__addsf3+0x8>
    6b50:	ba 17       	cp	r27, r26
    6b52:	62 07       	cpc	r22, r18
    6b54:	73 07       	cpc	r23, r19
    6b56:	84 07       	cpc	r24, r20
    6b58:	95 07       	cpc	r25, r21
    6b5a:	18 f0       	brcs	.+6      	; 0x6b62 <__addsf3x+0x18>
    6b5c:	71 f4       	brne	.+28     	; 0x6b7a <__addsf3x+0x30>
    6b5e:	9e f5       	brtc	.+102    	; 0x6bc6 <__addsf3x+0x7c>
    6b60:	52 c2       	rjmp	.+1188   	; 0x7006 <__fp_zero>
    6b62:	0e f4       	brtc	.+2      	; 0x6b66 <__addsf3x+0x1c>
    6b64:	e0 95       	com	r30
    6b66:	0b 2e       	mov	r0, r27
    6b68:	ba 2f       	mov	r27, r26
    6b6a:	a0 2d       	mov	r26, r0
    6b6c:	0b 01       	movw	r0, r22
    6b6e:	b9 01       	movw	r22, r18
    6b70:	90 01       	movw	r18, r0
    6b72:	0c 01       	movw	r0, r24
    6b74:	ca 01       	movw	r24, r20
    6b76:	a0 01       	movw	r20, r0
    6b78:	11 24       	eor	r1, r1
    6b7a:	ff 27       	eor	r31, r31
    6b7c:	59 1b       	sub	r21, r25
    6b7e:	99 f0       	breq	.+38     	; 0x6ba6 <__addsf3x+0x5c>
    6b80:	59 3f       	cpi	r21, 0xF9	; 249
    6b82:	50 f4       	brcc	.+20     	; 0x6b98 <__addsf3x+0x4e>
    6b84:	50 3e       	cpi	r21, 0xE0	; 224
    6b86:	68 f1       	brcs	.+90     	; 0x6be2 <__addsf3x+0x98>
    6b88:	1a 16       	cp	r1, r26
    6b8a:	f0 40       	sbci	r31, 0x00	; 0
    6b8c:	a2 2f       	mov	r26, r18
    6b8e:	23 2f       	mov	r18, r19
    6b90:	34 2f       	mov	r19, r20
    6b92:	44 27       	eor	r20, r20
    6b94:	58 5f       	subi	r21, 0xF8	; 248
    6b96:	f3 cf       	rjmp	.-26     	; 0x6b7e <__addsf3x+0x34>
    6b98:	46 95       	lsr	r20
    6b9a:	37 95       	ror	r19
    6b9c:	27 95       	ror	r18
    6b9e:	a7 95       	ror	r26
    6ba0:	f0 40       	sbci	r31, 0x00	; 0
    6ba2:	53 95       	inc	r21
    6ba4:	c9 f7       	brne	.-14     	; 0x6b98 <__addsf3x+0x4e>
    6ba6:	7e f4       	brtc	.+30     	; 0x6bc6 <__addsf3x+0x7c>
    6ba8:	1f 16       	cp	r1, r31
    6baa:	ba 0b       	sbc	r27, r26
    6bac:	62 0b       	sbc	r22, r18
    6bae:	73 0b       	sbc	r23, r19
    6bb0:	84 0b       	sbc	r24, r20
    6bb2:	ba f0       	brmi	.+46     	; 0x6be2 <__addsf3x+0x98>
    6bb4:	91 50       	subi	r25, 0x01	; 1
    6bb6:	a1 f0       	breq	.+40     	; 0x6be0 <__addsf3x+0x96>
    6bb8:	ff 0f       	add	r31, r31
    6bba:	bb 1f       	adc	r27, r27
    6bbc:	66 1f       	adc	r22, r22
    6bbe:	77 1f       	adc	r23, r23
    6bc0:	88 1f       	adc	r24, r24
    6bc2:	c2 f7       	brpl	.-16     	; 0x6bb4 <__addsf3x+0x6a>
    6bc4:	0e c0       	rjmp	.+28     	; 0x6be2 <__addsf3x+0x98>
    6bc6:	ba 0f       	add	r27, r26
    6bc8:	62 1f       	adc	r22, r18
    6bca:	73 1f       	adc	r23, r19
    6bcc:	84 1f       	adc	r24, r20
    6bce:	48 f4       	brcc	.+18     	; 0x6be2 <__addsf3x+0x98>
    6bd0:	87 95       	ror	r24
    6bd2:	77 95       	ror	r23
    6bd4:	67 95       	ror	r22
    6bd6:	b7 95       	ror	r27
    6bd8:	f7 95       	ror	r31
    6bda:	9e 3f       	cpi	r25, 0xFE	; 254
    6bdc:	08 f0       	brcs	.+2      	; 0x6be0 <__addsf3x+0x96>
    6bde:	b3 cf       	rjmp	.-154    	; 0x6b46 <__addsf3+0x1e>
    6be0:	93 95       	inc	r25
    6be2:	88 0f       	add	r24, r24
    6be4:	08 f0       	brcs	.+2      	; 0x6be8 <__addsf3x+0x9e>
    6be6:	99 27       	eor	r25, r25
    6be8:	ee 0f       	add	r30, r30
    6bea:	97 95       	ror	r25
    6bec:	87 95       	ror	r24
    6bee:	08 95       	ret
    6bf0:	90 d1       	rcall	.+800    	; 0x6f12 <__fp_pscA>
    6bf2:	58 f0       	brcs	.+22     	; 0x6c0a <__addsf3x+0xc0>
    6bf4:	80 e8       	ldi	r24, 0x80	; 128
    6bf6:	91 e0       	ldi	r25, 0x01	; 1
    6bf8:	09 f4       	brne	.+2      	; 0x6bfc <__addsf3x+0xb2>
    6bfa:	9e ef       	ldi	r25, 0xFE	; 254
    6bfc:	91 d1       	rcall	.+802    	; 0x6f20 <__fp_pscB>
    6bfe:	28 f0       	brcs	.+10     	; 0x6c0a <__addsf3x+0xc0>
    6c00:	40 e8       	ldi	r20, 0x80	; 128
    6c02:	51 e0       	ldi	r21, 0x01	; 1
    6c04:	59 f4       	brne	.+22     	; 0x6c1c <atan2+0xe>
    6c06:	5e ef       	ldi	r21, 0xFE	; 254
    6c08:	09 c0       	rjmp	.+18     	; 0x6c1c <atan2+0xe>
    6c0a:	5b c1       	rjmp	.+694    	; 0x6ec2 <__fp_nan>
    6c0c:	fc c1       	rjmp	.+1016   	; 0x7006 <__fp_zero>

00006c0e <atan2>:
    6c0e:	e9 2f       	mov	r30, r25
    6c10:	e0 78       	andi	r30, 0x80	; 128
    6c12:	d7 d1       	rcall	.+942    	; 0x6fc2 <__fp_split3>
    6c14:	68 f3       	brcs	.-38     	; 0x6bf0 <__addsf3x+0xa6>
    6c16:	09 2e       	mov	r0, r25
    6c18:	05 2a       	or	r0, r21
    6c1a:	c1 f3       	breq	.-16     	; 0x6c0c <__addsf3x+0xc2>
    6c1c:	26 17       	cp	r18, r22
    6c1e:	37 07       	cpc	r19, r23
    6c20:	48 07       	cpc	r20, r24
    6c22:	59 07       	cpc	r21, r25
    6c24:	38 f0       	brcs	.+14     	; 0x6c34 <atan2+0x26>
    6c26:	0e 2e       	mov	r0, r30
    6c28:	07 f8       	bld	r0, 7
    6c2a:	e0 25       	eor	r30, r0
    6c2c:	69 f0       	breq	.+26     	; 0x6c48 <atan2+0x3a>
    6c2e:	e0 25       	eor	r30, r0
    6c30:	e0 64       	ori	r30, 0x40	; 64
    6c32:	0a c0       	rjmp	.+20     	; 0x6c48 <atan2+0x3a>
    6c34:	ef 63       	ori	r30, 0x3F	; 63
    6c36:	07 f8       	bld	r0, 7
    6c38:	00 94       	com	r0
    6c3a:	07 fa       	bst	r0, 7
    6c3c:	db 01       	movw	r26, r22
    6c3e:	b9 01       	movw	r22, r18
    6c40:	9d 01       	movw	r18, r26
    6c42:	dc 01       	movw	r26, r24
    6c44:	ca 01       	movw	r24, r20
    6c46:	ad 01       	movw	r20, r26
    6c48:	ef 93       	push	r30
    6c4a:	4a d0       	rcall	.+148    	; 0x6ce0 <__divsf3_pse>
    6c4c:	98 d1       	rcall	.+816    	; 0x6f7e <__fp_round>
    6c4e:	0a d0       	rcall	.+20     	; 0x6c64 <atan>
    6c50:	5f 91       	pop	r21
    6c52:	55 23       	and	r21, r21
    6c54:	31 f0       	breq	.+12     	; 0x6c62 <atan2+0x54>
    6c56:	2b ed       	ldi	r18, 0xDB	; 219
    6c58:	3f e0       	ldi	r19, 0x0F	; 15
    6c5a:	49 e4       	ldi	r20, 0x49	; 73
    6c5c:	50 fd       	sbrc	r21, 0
    6c5e:	49 ec       	ldi	r20, 0xC9	; 201
    6c60:	63 cf       	rjmp	.-314    	; 0x6b28 <__addsf3>
    6c62:	08 95       	ret

00006c64 <atan>:
    6c64:	df 93       	push	r29
    6c66:	dd 27       	eor	r29, r29
    6c68:	b9 2f       	mov	r27, r25
    6c6a:	bf 77       	andi	r27, 0x7F	; 127
    6c6c:	40 e8       	ldi	r20, 0x80	; 128
    6c6e:	5f e3       	ldi	r21, 0x3F	; 63
    6c70:	16 16       	cp	r1, r22
    6c72:	17 06       	cpc	r1, r23
    6c74:	48 07       	cpc	r20, r24
    6c76:	5b 07       	cpc	r21, r27
    6c78:	10 f4       	brcc	.+4      	; 0x6c7e <atan+0x1a>
    6c7a:	d9 2f       	mov	r29, r25
    6c7c:	cf d1       	rcall	.+926    	; 0x701c <inverse>
    6c7e:	9f 93       	push	r25
    6c80:	8f 93       	push	r24
    6c82:	7f 93       	push	r23
    6c84:	6f 93       	push	r22
    6c86:	7c d2       	rcall	.+1272   	; 0x7180 <square>
    6c88:	e4 ef       	ldi	r30, 0xF4	; 244
    6c8a:	f1 e0       	ldi	r31, 0x01	; 1
    6c8c:	1d d1       	rcall	.+570    	; 0x6ec8 <__fp_powser>
    6c8e:	77 d1       	rcall	.+750    	; 0x6f7e <__fp_round>
    6c90:	2f 91       	pop	r18
    6c92:	3f 91       	pop	r19
    6c94:	4f 91       	pop	r20
    6c96:	5f 91       	pop	r21
    6c98:	d4 d1       	rcall	.+936    	; 0x7042 <__mulsf3x>
    6c9a:	dd 23       	and	r29, r29
    6c9c:	49 f0       	breq	.+18     	; 0x6cb0 <atan+0x4c>
    6c9e:	90 58       	subi	r25, 0x80	; 128
    6ca0:	a2 ea       	ldi	r26, 0xA2	; 162
    6ca2:	2a ed       	ldi	r18, 0xDA	; 218
    6ca4:	3f e0       	ldi	r19, 0x0F	; 15
    6ca6:	49 ec       	ldi	r20, 0xC9	; 201
    6ca8:	5f e3       	ldi	r21, 0x3F	; 63
    6caa:	d0 78       	andi	r29, 0x80	; 128
    6cac:	5d 27       	eor	r21, r29
    6cae:	4d df       	rcall	.-358    	; 0x6b4a <__addsf3x>
    6cb0:	df 91       	pop	r29
    6cb2:	65 c1       	rjmp	.+714    	; 0x6f7e <__fp_round>

00006cb4 <__cmpsf2>:
    6cb4:	dc d0       	rcall	.+440    	; 0x6e6e <__fp_cmp>
    6cb6:	08 f4       	brcc	.+2      	; 0x6cba <__cmpsf2+0x6>
    6cb8:	81 e0       	ldi	r24, 0x01	; 1
    6cba:	08 95       	ret

00006cbc <cos>:
    6cbc:	39 d1       	rcall	.+626    	; 0x6f30 <__fp_rempio2>
    6cbe:	e3 95       	inc	r30
    6cc0:	6f c1       	rjmp	.+734    	; 0x6fa0 <__fp_sinus>

00006cc2 <__divsf3>:
    6cc2:	0c d0       	rcall	.+24     	; 0x6cdc <__divsf3x>
    6cc4:	5c c1       	rjmp	.+696    	; 0x6f7e <__fp_round>
    6cc6:	2c d1       	rcall	.+600    	; 0x6f20 <__fp_pscB>
    6cc8:	40 f0       	brcs	.+16     	; 0x6cda <__divsf3+0x18>
    6cca:	23 d1       	rcall	.+582    	; 0x6f12 <__fp_pscA>
    6ccc:	30 f0       	brcs	.+12     	; 0x6cda <__divsf3+0x18>
    6cce:	21 f4       	brne	.+8      	; 0x6cd8 <__divsf3+0x16>
    6cd0:	5f 3f       	cpi	r21, 0xFF	; 255
    6cd2:	19 f0       	breq	.+6      	; 0x6cda <__divsf3+0x18>
    6cd4:	f0 c0       	rjmp	.+480    	; 0x6eb6 <__fp_inf>
    6cd6:	51 11       	cpse	r21, r1
    6cd8:	97 c1       	rjmp	.+814    	; 0x7008 <__fp_szero>
    6cda:	f3 c0       	rjmp	.+486    	; 0x6ec2 <__fp_nan>

00006cdc <__divsf3x>:
    6cdc:	72 d1       	rcall	.+740    	; 0x6fc2 <__fp_split3>
    6cde:	98 f3       	brcs	.-26     	; 0x6cc6 <__divsf3+0x4>

00006ce0 <__divsf3_pse>:
    6ce0:	99 23       	and	r25, r25
    6ce2:	c9 f3       	breq	.-14     	; 0x6cd6 <__divsf3+0x14>
    6ce4:	55 23       	and	r21, r21
    6ce6:	b1 f3       	breq	.-20     	; 0x6cd4 <__divsf3+0x12>
    6ce8:	95 1b       	sub	r25, r21
    6cea:	55 0b       	sbc	r21, r21
    6cec:	bb 27       	eor	r27, r27
    6cee:	aa 27       	eor	r26, r26
    6cf0:	62 17       	cp	r22, r18
    6cf2:	73 07       	cpc	r23, r19
    6cf4:	84 07       	cpc	r24, r20
    6cf6:	38 f0       	brcs	.+14     	; 0x6d06 <__divsf3_pse+0x26>
    6cf8:	9f 5f       	subi	r25, 0xFF	; 255
    6cfa:	5f 4f       	sbci	r21, 0xFF	; 255
    6cfc:	22 0f       	add	r18, r18
    6cfe:	33 1f       	adc	r19, r19
    6d00:	44 1f       	adc	r20, r20
    6d02:	aa 1f       	adc	r26, r26
    6d04:	a9 f3       	breq	.-22     	; 0x6cf0 <__divsf3_pse+0x10>
    6d06:	33 d0       	rcall	.+102    	; 0x6d6e <__divsf3_pse+0x8e>
    6d08:	0e 2e       	mov	r0, r30
    6d0a:	3a f0       	brmi	.+14     	; 0x6d1a <__divsf3_pse+0x3a>
    6d0c:	e0 e8       	ldi	r30, 0x80	; 128
    6d0e:	30 d0       	rcall	.+96     	; 0x6d70 <__divsf3_pse+0x90>
    6d10:	91 50       	subi	r25, 0x01	; 1
    6d12:	50 40       	sbci	r21, 0x00	; 0
    6d14:	e6 95       	lsr	r30
    6d16:	00 1c       	adc	r0, r0
    6d18:	ca f7       	brpl	.-14     	; 0x6d0c <__divsf3_pse+0x2c>
    6d1a:	29 d0       	rcall	.+82     	; 0x6d6e <__divsf3_pse+0x8e>
    6d1c:	fe 2f       	mov	r31, r30
    6d1e:	27 d0       	rcall	.+78     	; 0x6d6e <__divsf3_pse+0x8e>
    6d20:	66 0f       	add	r22, r22
    6d22:	77 1f       	adc	r23, r23
    6d24:	88 1f       	adc	r24, r24
    6d26:	bb 1f       	adc	r27, r27
    6d28:	26 17       	cp	r18, r22
    6d2a:	37 07       	cpc	r19, r23
    6d2c:	48 07       	cpc	r20, r24
    6d2e:	ab 07       	cpc	r26, r27
    6d30:	b0 e8       	ldi	r27, 0x80	; 128
    6d32:	09 f0       	breq	.+2      	; 0x6d36 <__divsf3_pse+0x56>
    6d34:	bb 0b       	sbc	r27, r27
    6d36:	80 2d       	mov	r24, r0
    6d38:	bf 01       	movw	r22, r30
    6d3a:	ff 27       	eor	r31, r31
    6d3c:	93 58       	subi	r25, 0x83	; 131
    6d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    6d40:	2a f0       	brmi	.+10     	; 0x6d4c <__divsf3_pse+0x6c>
    6d42:	9e 3f       	cpi	r25, 0xFE	; 254
    6d44:	51 05       	cpc	r21, r1
    6d46:	68 f0       	brcs	.+26     	; 0x6d62 <__divsf3_pse+0x82>
    6d48:	b6 c0       	rjmp	.+364    	; 0x6eb6 <__fp_inf>
    6d4a:	5e c1       	rjmp	.+700    	; 0x7008 <__fp_szero>
    6d4c:	5f 3f       	cpi	r21, 0xFF	; 255
    6d4e:	ec f3       	brlt	.-6      	; 0x6d4a <__divsf3_pse+0x6a>
    6d50:	98 3e       	cpi	r25, 0xE8	; 232
    6d52:	dc f3       	brlt	.-10     	; 0x6d4a <__divsf3_pse+0x6a>
    6d54:	86 95       	lsr	r24
    6d56:	77 95       	ror	r23
    6d58:	67 95       	ror	r22
    6d5a:	b7 95       	ror	r27
    6d5c:	f7 95       	ror	r31
    6d5e:	9f 5f       	subi	r25, 0xFF	; 255
    6d60:	c9 f7       	brne	.-14     	; 0x6d54 <__divsf3_pse+0x74>
    6d62:	88 0f       	add	r24, r24
    6d64:	91 1d       	adc	r25, r1
    6d66:	96 95       	lsr	r25
    6d68:	87 95       	ror	r24
    6d6a:	97 f9       	bld	r25, 7
    6d6c:	08 95       	ret
    6d6e:	e1 e0       	ldi	r30, 0x01	; 1
    6d70:	66 0f       	add	r22, r22
    6d72:	77 1f       	adc	r23, r23
    6d74:	88 1f       	adc	r24, r24
    6d76:	bb 1f       	adc	r27, r27
    6d78:	62 17       	cp	r22, r18
    6d7a:	73 07       	cpc	r23, r19
    6d7c:	84 07       	cpc	r24, r20
    6d7e:	ba 07       	cpc	r27, r26
    6d80:	20 f0       	brcs	.+8      	; 0x6d8a <__divsf3_pse+0xaa>
    6d82:	62 1b       	sub	r22, r18
    6d84:	73 0b       	sbc	r23, r19
    6d86:	84 0b       	sbc	r24, r20
    6d88:	ba 0b       	sbc	r27, r26
    6d8a:	ee 1f       	adc	r30, r30
    6d8c:	88 f7       	brcc	.-30     	; 0x6d70 <__divsf3_pse+0x90>
    6d8e:	e0 95       	com	r30
    6d90:	08 95       	ret

00006d92 <__fixsfsi>:
    6d92:	04 d0       	rcall	.+8      	; 0x6d9c <__fixunssfsi>
    6d94:	68 94       	set
    6d96:	b1 11       	cpse	r27, r1
    6d98:	37 c1       	rjmp	.+622    	; 0x7008 <__fp_szero>
    6d9a:	08 95       	ret

00006d9c <__fixunssfsi>:
    6d9c:	1a d1       	rcall	.+564    	; 0x6fd2 <__fp_splitA>
    6d9e:	88 f0       	brcs	.+34     	; 0x6dc2 <__fixunssfsi+0x26>
    6da0:	9f 57       	subi	r25, 0x7F	; 127
    6da2:	90 f0       	brcs	.+36     	; 0x6dc8 <__fixunssfsi+0x2c>
    6da4:	b9 2f       	mov	r27, r25
    6da6:	99 27       	eor	r25, r25
    6da8:	b7 51       	subi	r27, 0x17	; 23
    6daa:	a0 f0       	brcs	.+40     	; 0x6dd4 <__fixunssfsi+0x38>
    6dac:	d1 f0       	breq	.+52     	; 0x6de2 <__fixunssfsi+0x46>
    6dae:	66 0f       	add	r22, r22
    6db0:	77 1f       	adc	r23, r23
    6db2:	88 1f       	adc	r24, r24
    6db4:	99 1f       	adc	r25, r25
    6db6:	1a f0       	brmi	.+6      	; 0x6dbe <__fixunssfsi+0x22>
    6db8:	ba 95       	dec	r27
    6dba:	c9 f7       	brne	.-14     	; 0x6dae <__fixunssfsi+0x12>
    6dbc:	12 c0       	rjmp	.+36     	; 0x6de2 <__fixunssfsi+0x46>
    6dbe:	b1 30       	cpi	r27, 0x01	; 1
    6dc0:	81 f0       	breq	.+32     	; 0x6de2 <__fixunssfsi+0x46>
    6dc2:	21 d1       	rcall	.+578    	; 0x7006 <__fp_zero>
    6dc4:	b1 e0       	ldi	r27, 0x01	; 1
    6dc6:	08 95       	ret
    6dc8:	1e c1       	rjmp	.+572    	; 0x7006 <__fp_zero>
    6dca:	67 2f       	mov	r22, r23
    6dcc:	78 2f       	mov	r23, r24
    6dce:	88 27       	eor	r24, r24
    6dd0:	b8 5f       	subi	r27, 0xF8	; 248
    6dd2:	39 f0       	breq	.+14     	; 0x6de2 <__fixunssfsi+0x46>
    6dd4:	b9 3f       	cpi	r27, 0xF9	; 249
    6dd6:	cc f3       	brlt	.-14     	; 0x6dca <__fixunssfsi+0x2e>
    6dd8:	86 95       	lsr	r24
    6dda:	77 95       	ror	r23
    6ddc:	67 95       	ror	r22
    6dde:	b3 95       	inc	r27
    6de0:	d9 f7       	brne	.-10     	; 0x6dd8 <__fixunssfsi+0x3c>
    6de2:	3e f4       	brtc	.+14     	; 0x6df2 <__fixunssfsi+0x56>
    6de4:	90 95       	com	r25
    6de6:	80 95       	com	r24
    6de8:	70 95       	com	r23
    6dea:	61 95       	neg	r22
    6dec:	7f 4f       	sbci	r23, 0xFF	; 255
    6dee:	8f 4f       	sbci	r24, 0xFF	; 255
    6df0:	9f 4f       	sbci	r25, 0xFF	; 255
    6df2:	08 95       	ret

00006df4 <__floatunsisf>:
    6df4:	e8 94       	clt
    6df6:	09 c0       	rjmp	.+18     	; 0x6e0a <__floatsisf+0x12>

00006df8 <__floatsisf>:
    6df8:	97 fb       	bst	r25, 7
    6dfa:	3e f4       	brtc	.+14     	; 0x6e0a <__floatsisf+0x12>
    6dfc:	90 95       	com	r25
    6dfe:	80 95       	com	r24
    6e00:	70 95       	com	r23
    6e02:	61 95       	neg	r22
    6e04:	7f 4f       	sbci	r23, 0xFF	; 255
    6e06:	8f 4f       	sbci	r24, 0xFF	; 255
    6e08:	9f 4f       	sbci	r25, 0xFF	; 255
    6e0a:	99 23       	and	r25, r25
    6e0c:	a9 f0       	breq	.+42     	; 0x6e38 <__floatsisf+0x40>
    6e0e:	f9 2f       	mov	r31, r25
    6e10:	96 e9       	ldi	r25, 0x96	; 150
    6e12:	bb 27       	eor	r27, r27
    6e14:	93 95       	inc	r25
    6e16:	f6 95       	lsr	r31
    6e18:	87 95       	ror	r24
    6e1a:	77 95       	ror	r23
    6e1c:	67 95       	ror	r22
    6e1e:	b7 95       	ror	r27
    6e20:	f1 11       	cpse	r31, r1
    6e22:	f8 cf       	rjmp	.-16     	; 0x6e14 <__floatsisf+0x1c>
    6e24:	fa f4       	brpl	.+62     	; 0x6e64 <__floatsisf+0x6c>
    6e26:	bb 0f       	add	r27, r27
    6e28:	11 f4       	brne	.+4      	; 0x6e2e <__floatsisf+0x36>
    6e2a:	60 ff       	sbrs	r22, 0
    6e2c:	1b c0       	rjmp	.+54     	; 0x6e64 <__floatsisf+0x6c>
    6e2e:	6f 5f       	subi	r22, 0xFF	; 255
    6e30:	7f 4f       	sbci	r23, 0xFF	; 255
    6e32:	8f 4f       	sbci	r24, 0xFF	; 255
    6e34:	9f 4f       	sbci	r25, 0xFF	; 255
    6e36:	16 c0       	rjmp	.+44     	; 0x6e64 <__floatsisf+0x6c>
    6e38:	88 23       	and	r24, r24
    6e3a:	11 f0       	breq	.+4      	; 0x6e40 <__floatsisf+0x48>
    6e3c:	96 e9       	ldi	r25, 0x96	; 150
    6e3e:	11 c0       	rjmp	.+34     	; 0x6e62 <__floatsisf+0x6a>
    6e40:	77 23       	and	r23, r23
    6e42:	21 f0       	breq	.+8      	; 0x6e4c <__floatsisf+0x54>
    6e44:	9e e8       	ldi	r25, 0x8E	; 142
    6e46:	87 2f       	mov	r24, r23
    6e48:	76 2f       	mov	r23, r22
    6e4a:	05 c0       	rjmp	.+10     	; 0x6e56 <__floatsisf+0x5e>
    6e4c:	66 23       	and	r22, r22
    6e4e:	71 f0       	breq	.+28     	; 0x6e6c <__floatsisf+0x74>
    6e50:	96 e8       	ldi	r25, 0x86	; 134
    6e52:	86 2f       	mov	r24, r22
    6e54:	70 e0       	ldi	r23, 0x00	; 0
    6e56:	60 e0       	ldi	r22, 0x00	; 0
    6e58:	2a f0       	brmi	.+10     	; 0x6e64 <__floatsisf+0x6c>
    6e5a:	9a 95       	dec	r25
    6e5c:	66 0f       	add	r22, r22
    6e5e:	77 1f       	adc	r23, r23
    6e60:	88 1f       	adc	r24, r24
    6e62:	da f7       	brpl	.-10     	; 0x6e5a <__floatsisf+0x62>
    6e64:	88 0f       	add	r24, r24
    6e66:	96 95       	lsr	r25
    6e68:	87 95       	ror	r24
    6e6a:	97 f9       	bld	r25, 7
    6e6c:	08 95       	ret

00006e6e <__fp_cmp>:
    6e6e:	99 0f       	add	r25, r25
    6e70:	00 08       	sbc	r0, r0
    6e72:	55 0f       	add	r21, r21
    6e74:	aa 0b       	sbc	r26, r26
    6e76:	e0 e8       	ldi	r30, 0x80	; 128
    6e78:	fe ef       	ldi	r31, 0xFE	; 254
    6e7a:	16 16       	cp	r1, r22
    6e7c:	17 06       	cpc	r1, r23
    6e7e:	e8 07       	cpc	r30, r24
    6e80:	f9 07       	cpc	r31, r25
    6e82:	c0 f0       	brcs	.+48     	; 0x6eb4 <__fp_cmp+0x46>
    6e84:	12 16       	cp	r1, r18
    6e86:	13 06       	cpc	r1, r19
    6e88:	e4 07       	cpc	r30, r20
    6e8a:	f5 07       	cpc	r31, r21
    6e8c:	98 f0       	brcs	.+38     	; 0x6eb4 <__fp_cmp+0x46>
    6e8e:	62 1b       	sub	r22, r18
    6e90:	73 0b       	sbc	r23, r19
    6e92:	84 0b       	sbc	r24, r20
    6e94:	95 0b       	sbc	r25, r21
    6e96:	39 f4       	brne	.+14     	; 0x6ea6 <__fp_cmp+0x38>
    6e98:	0a 26       	eor	r0, r26
    6e9a:	61 f0       	breq	.+24     	; 0x6eb4 <__fp_cmp+0x46>
    6e9c:	23 2b       	or	r18, r19
    6e9e:	24 2b       	or	r18, r20
    6ea0:	25 2b       	or	r18, r21
    6ea2:	21 f4       	brne	.+8      	; 0x6eac <__fp_cmp+0x3e>
    6ea4:	08 95       	ret
    6ea6:	0a 26       	eor	r0, r26
    6ea8:	09 f4       	brne	.+2      	; 0x6eac <__fp_cmp+0x3e>
    6eaa:	a1 40       	sbci	r26, 0x01	; 1
    6eac:	a6 95       	lsr	r26
    6eae:	8f ef       	ldi	r24, 0xFF	; 255
    6eb0:	81 1d       	adc	r24, r1
    6eb2:	81 1d       	adc	r24, r1
    6eb4:	08 95       	ret

00006eb6 <__fp_inf>:
    6eb6:	97 f9       	bld	r25, 7
    6eb8:	9f 67       	ori	r25, 0x7F	; 127
    6eba:	80 e8       	ldi	r24, 0x80	; 128
    6ebc:	70 e0       	ldi	r23, 0x00	; 0
    6ebe:	60 e0       	ldi	r22, 0x00	; 0
    6ec0:	08 95       	ret

00006ec2 <__fp_nan>:
    6ec2:	9f ef       	ldi	r25, 0xFF	; 255
    6ec4:	80 ec       	ldi	r24, 0xC0	; 192
    6ec6:	08 95       	ret

00006ec8 <__fp_powser>:
    6ec8:	df 93       	push	r29
    6eca:	cf 93       	push	r28
    6ecc:	1f 93       	push	r17
    6ece:	0f 93       	push	r16
    6ed0:	ff 92       	push	r15
    6ed2:	ef 92       	push	r14
    6ed4:	df 92       	push	r13
    6ed6:	7b 01       	movw	r14, r22
    6ed8:	8c 01       	movw	r16, r24
    6eda:	68 94       	set
    6edc:	05 c0       	rjmp	.+10     	; 0x6ee8 <__fp_powser+0x20>
    6ede:	da 2e       	mov	r13, r26
    6ee0:	ef 01       	movw	r28, r30
    6ee2:	af d0       	rcall	.+350    	; 0x7042 <__mulsf3x>
    6ee4:	fe 01       	movw	r30, r28
    6ee6:	e8 94       	clt
    6ee8:	a5 91       	lpm	r26, Z+
    6eea:	25 91       	lpm	r18, Z+
    6eec:	35 91       	lpm	r19, Z+
    6eee:	45 91       	lpm	r20, Z+
    6ef0:	55 91       	lpm	r21, Z+
    6ef2:	ae f3       	brts	.-22     	; 0x6ede <__fp_powser+0x16>
    6ef4:	ef 01       	movw	r28, r30
    6ef6:	29 de       	rcall	.-942    	; 0x6b4a <__addsf3x>
    6ef8:	fe 01       	movw	r30, r28
    6efa:	97 01       	movw	r18, r14
    6efc:	a8 01       	movw	r20, r16
    6efe:	da 94       	dec	r13
    6f00:	79 f7       	brne	.-34     	; 0x6ee0 <__fp_powser+0x18>
    6f02:	df 90       	pop	r13
    6f04:	ef 90       	pop	r14
    6f06:	ff 90       	pop	r15
    6f08:	0f 91       	pop	r16
    6f0a:	1f 91       	pop	r17
    6f0c:	cf 91       	pop	r28
    6f0e:	df 91       	pop	r29
    6f10:	08 95       	ret

00006f12 <__fp_pscA>:
    6f12:	00 24       	eor	r0, r0
    6f14:	0a 94       	dec	r0
    6f16:	16 16       	cp	r1, r22
    6f18:	17 06       	cpc	r1, r23
    6f1a:	18 06       	cpc	r1, r24
    6f1c:	09 06       	cpc	r0, r25
    6f1e:	08 95       	ret

00006f20 <__fp_pscB>:
    6f20:	00 24       	eor	r0, r0
    6f22:	0a 94       	dec	r0
    6f24:	12 16       	cp	r1, r18
    6f26:	13 06       	cpc	r1, r19
    6f28:	14 06       	cpc	r1, r20
    6f2a:	05 06       	cpc	r0, r21
    6f2c:	08 95       	ret
    6f2e:	c9 cf       	rjmp	.-110    	; 0x6ec2 <__fp_nan>

00006f30 <__fp_rempio2>:
    6f30:	50 d0       	rcall	.+160    	; 0x6fd2 <__fp_splitA>
    6f32:	e8 f3       	brcs	.-6      	; 0x6f2e <__fp_pscB+0xe>
    6f34:	e8 94       	clt
    6f36:	e0 e0       	ldi	r30, 0x00	; 0
    6f38:	bb 27       	eor	r27, r27
    6f3a:	9f 57       	subi	r25, 0x7F	; 127
    6f3c:	f0 f0       	brcs	.+60     	; 0x6f7a <__fp_rempio2+0x4a>
    6f3e:	2a ed       	ldi	r18, 0xDA	; 218
    6f40:	3f e0       	ldi	r19, 0x0F	; 15
    6f42:	49 ec       	ldi	r20, 0xC9	; 201
    6f44:	06 c0       	rjmp	.+12     	; 0x6f52 <__fp_rempio2+0x22>
    6f46:	ee 0f       	add	r30, r30
    6f48:	bb 0f       	add	r27, r27
    6f4a:	66 1f       	adc	r22, r22
    6f4c:	77 1f       	adc	r23, r23
    6f4e:	88 1f       	adc	r24, r24
    6f50:	28 f0       	brcs	.+10     	; 0x6f5c <__fp_rempio2+0x2c>
    6f52:	b2 3a       	cpi	r27, 0xA2	; 162
    6f54:	62 07       	cpc	r22, r18
    6f56:	73 07       	cpc	r23, r19
    6f58:	84 07       	cpc	r24, r20
    6f5a:	28 f0       	brcs	.+10     	; 0x6f66 <__fp_rempio2+0x36>
    6f5c:	b2 5a       	subi	r27, 0xA2	; 162
    6f5e:	62 0b       	sbc	r22, r18
    6f60:	73 0b       	sbc	r23, r19
    6f62:	84 0b       	sbc	r24, r20
    6f64:	e3 95       	inc	r30
    6f66:	9a 95       	dec	r25
    6f68:	72 f7       	brpl	.-36     	; 0x6f46 <__fp_rempio2+0x16>
    6f6a:	80 38       	cpi	r24, 0x80	; 128
    6f6c:	30 f4       	brcc	.+12     	; 0x6f7a <__fp_rempio2+0x4a>
    6f6e:	9a 95       	dec	r25
    6f70:	bb 0f       	add	r27, r27
    6f72:	66 1f       	adc	r22, r22
    6f74:	77 1f       	adc	r23, r23
    6f76:	88 1f       	adc	r24, r24
    6f78:	d2 f7       	brpl	.-12     	; 0x6f6e <__fp_rempio2+0x3e>
    6f7a:	90 48       	sbci	r25, 0x80	; 128
    6f7c:	06 c1       	rjmp	.+524    	; 0x718a <__fp_mpack_finite>

00006f7e <__fp_round>:
    6f7e:	09 2e       	mov	r0, r25
    6f80:	03 94       	inc	r0
    6f82:	00 0c       	add	r0, r0
    6f84:	11 f4       	brne	.+4      	; 0x6f8a <__fp_round+0xc>
    6f86:	88 23       	and	r24, r24
    6f88:	52 f0       	brmi	.+20     	; 0x6f9e <__fp_round+0x20>
    6f8a:	bb 0f       	add	r27, r27
    6f8c:	40 f4       	brcc	.+16     	; 0x6f9e <__fp_round+0x20>
    6f8e:	bf 2b       	or	r27, r31
    6f90:	11 f4       	brne	.+4      	; 0x6f96 <__fp_round+0x18>
    6f92:	60 ff       	sbrs	r22, 0
    6f94:	04 c0       	rjmp	.+8      	; 0x6f9e <__fp_round+0x20>
    6f96:	6f 5f       	subi	r22, 0xFF	; 255
    6f98:	7f 4f       	sbci	r23, 0xFF	; 255
    6f9a:	8f 4f       	sbci	r24, 0xFF	; 255
    6f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    6f9e:	08 95       	ret

00006fa0 <__fp_sinus>:
    6fa0:	ef 93       	push	r30
    6fa2:	e0 ff       	sbrs	r30, 0
    6fa4:	06 c0       	rjmp	.+12     	; 0x6fb2 <__fp_sinus+0x12>
    6fa6:	a2 ea       	ldi	r26, 0xA2	; 162
    6fa8:	2a ed       	ldi	r18, 0xDA	; 218
    6faa:	3f e0       	ldi	r19, 0x0F	; 15
    6fac:	49 ec       	ldi	r20, 0xC9	; 201
    6fae:	5f eb       	ldi	r21, 0xBF	; 191
    6fb0:	cc dd       	rcall	.-1128   	; 0x6b4a <__addsf3x>
    6fb2:	e5 df       	rcall	.-54     	; 0x6f7e <__fp_round>
    6fb4:	0f 90       	pop	r0
    6fb6:	03 94       	inc	r0
    6fb8:	01 fc       	sbrc	r0, 1
    6fba:	90 58       	subi	r25, 0x80	; 128
    6fbc:	e1 e2       	ldi	r30, 0x21	; 33
    6fbe:	f2 e0       	ldi	r31, 0x02	; 2
    6fc0:	f7 c0       	rjmp	.+494    	; 0x71b0 <__fp_powsodd>

00006fc2 <__fp_split3>:
    6fc2:	57 fd       	sbrc	r21, 7
    6fc4:	90 58       	subi	r25, 0x80	; 128
    6fc6:	44 0f       	add	r20, r20
    6fc8:	55 1f       	adc	r21, r21
    6fca:	59 f0       	breq	.+22     	; 0x6fe2 <__fp_splitA+0x10>
    6fcc:	5f 3f       	cpi	r21, 0xFF	; 255
    6fce:	71 f0       	breq	.+28     	; 0x6fec <__fp_splitA+0x1a>
    6fd0:	47 95       	ror	r20

00006fd2 <__fp_splitA>:
    6fd2:	88 0f       	add	r24, r24
    6fd4:	97 fb       	bst	r25, 7
    6fd6:	99 1f       	adc	r25, r25
    6fd8:	61 f0       	breq	.+24     	; 0x6ff2 <__fp_splitA+0x20>
    6fda:	9f 3f       	cpi	r25, 0xFF	; 255
    6fdc:	79 f0       	breq	.+30     	; 0x6ffc <__fp_splitA+0x2a>
    6fde:	87 95       	ror	r24
    6fe0:	08 95       	ret
    6fe2:	12 16       	cp	r1, r18
    6fe4:	13 06       	cpc	r1, r19
    6fe6:	14 06       	cpc	r1, r20
    6fe8:	55 1f       	adc	r21, r21
    6fea:	f2 cf       	rjmp	.-28     	; 0x6fd0 <__fp_split3+0xe>
    6fec:	46 95       	lsr	r20
    6fee:	f1 df       	rcall	.-30     	; 0x6fd2 <__fp_splitA>
    6ff0:	08 c0       	rjmp	.+16     	; 0x7002 <__fp_splitA+0x30>
    6ff2:	16 16       	cp	r1, r22
    6ff4:	17 06       	cpc	r1, r23
    6ff6:	18 06       	cpc	r1, r24
    6ff8:	99 1f       	adc	r25, r25
    6ffa:	f1 cf       	rjmp	.-30     	; 0x6fde <__fp_splitA+0xc>
    6ffc:	86 95       	lsr	r24
    6ffe:	71 05       	cpc	r23, r1
    7000:	61 05       	cpc	r22, r1
    7002:	08 94       	sec
    7004:	08 95       	ret

00007006 <__fp_zero>:
    7006:	e8 94       	clt

00007008 <__fp_szero>:
    7008:	bb 27       	eor	r27, r27
    700a:	66 27       	eor	r22, r22
    700c:	77 27       	eor	r23, r23
    700e:	cb 01       	movw	r24, r22
    7010:	97 f9       	bld	r25, 7
    7012:	08 95       	ret

00007014 <__gesf2>:
    7014:	2c df       	rcall	.-424    	; 0x6e6e <__fp_cmp>
    7016:	08 f4       	brcc	.+2      	; 0x701a <__gesf2+0x6>
    7018:	8f ef       	ldi	r24, 0xFF	; 255
    701a:	08 95       	ret

0000701c <inverse>:
    701c:	9b 01       	movw	r18, r22
    701e:	ac 01       	movw	r20, r24
    7020:	60 e0       	ldi	r22, 0x00	; 0
    7022:	70 e0       	ldi	r23, 0x00	; 0
    7024:	80 e8       	ldi	r24, 0x80	; 128
    7026:	9f e3       	ldi	r25, 0x3F	; 63
    7028:	4c ce       	rjmp	.-872    	; 0x6cc2 <__divsf3>

0000702a <__mulsf3>:
    702a:	0b d0       	rcall	.+22     	; 0x7042 <__mulsf3x>
    702c:	a8 cf       	rjmp	.-176    	; 0x6f7e <__fp_round>
    702e:	71 df       	rcall	.-286    	; 0x6f12 <__fp_pscA>
    7030:	28 f0       	brcs	.+10     	; 0x703c <__mulsf3+0x12>
    7032:	76 df       	rcall	.-276    	; 0x6f20 <__fp_pscB>
    7034:	18 f0       	brcs	.+6      	; 0x703c <__mulsf3+0x12>
    7036:	95 23       	and	r25, r21
    7038:	09 f0       	breq	.+2      	; 0x703c <__mulsf3+0x12>
    703a:	3d cf       	rjmp	.-390    	; 0x6eb6 <__fp_inf>
    703c:	42 cf       	rjmp	.-380    	; 0x6ec2 <__fp_nan>
    703e:	11 24       	eor	r1, r1
    7040:	e3 cf       	rjmp	.-58     	; 0x7008 <__fp_szero>

00007042 <__mulsf3x>:
    7042:	bf df       	rcall	.-130    	; 0x6fc2 <__fp_split3>
    7044:	a0 f3       	brcs	.-24     	; 0x702e <__mulsf3+0x4>

00007046 <__mulsf3_pse>:
    7046:	95 9f       	mul	r25, r21
    7048:	d1 f3       	breq	.-12     	; 0x703e <__mulsf3+0x14>
    704a:	95 0f       	add	r25, r21
    704c:	50 e0       	ldi	r21, 0x00	; 0
    704e:	55 1f       	adc	r21, r21
    7050:	62 9f       	mul	r22, r18
    7052:	f0 01       	movw	r30, r0
    7054:	72 9f       	mul	r23, r18
    7056:	bb 27       	eor	r27, r27
    7058:	f0 0d       	add	r31, r0
    705a:	b1 1d       	adc	r27, r1
    705c:	63 9f       	mul	r22, r19
    705e:	aa 27       	eor	r26, r26
    7060:	f0 0d       	add	r31, r0
    7062:	b1 1d       	adc	r27, r1
    7064:	aa 1f       	adc	r26, r26
    7066:	64 9f       	mul	r22, r20
    7068:	66 27       	eor	r22, r22
    706a:	b0 0d       	add	r27, r0
    706c:	a1 1d       	adc	r26, r1
    706e:	66 1f       	adc	r22, r22
    7070:	82 9f       	mul	r24, r18
    7072:	22 27       	eor	r18, r18
    7074:	b0 0d       	add	r27, r0
    7076:	a1 1d       	adc	r26, r1
    7078:	62 1f       	adc	r22, r18
    707a:	73 9f       	mul	r23, r19
    707c:	b0 0d       	add	r27, r0
    707e:	a1 1d       	adc	r26, r1
    7080:	62 1f       	adc	r22, r18
    7082:	83 9f       	mul	r24, r19
    7084:	a0 0d       	add	r26, r0
    7086:	61 1d       	adc	r22, r1
    7088:	22 1f       	adc	r18, r18
    708a:	74 9f       	mul	r23, r20
    708c:	33 27       	eor	r19, r19
    708e:	a0 0d       	add	r26, r0
    7090:	61 1d       	adc	r22, r1
    7092:	23 1f       	adc	r18, r19
    7094:	84 9f       	mul	r24, r20
    7096:	60 0d       	add	r22, r0
    7098:	21 1d       	adc	r18, r1
    709a:	82 2f       	mov	r24, r18
    709c:	76 2f       	mov	r23, r22
    709e:	6a 2f       	mov	r22, r26
    70a0:	11 24       	eor	r1, r1
    70a2:	9f 57       	subi	r25, 0x7F	; 127
    70a4:	50 40       	sbci	r21, 0x00	; 0
    70a6:	8a f0       	brmi	.+34     	; 0x70ca <__mulsf3_pse+0x84>
    70a8:	e1 f0       	breq	.+56     	; 0x70e2 <__mulsf3_pse+0x9c>
    70aa:	88 23       	and	r24, r24
    70ac:	4a f0       	brmi	.+18     	; 0x70c0 <__mulsf3_pse+0x7a>
    70ae:	ee 0f       	add	r30, r30
    70b0:	ff 1f       	adc	r31, r31
    70b2:	bb 1f       	adc	r27, r27
    70b4:	66 1f       	adc	r22, r22
    70b6:	77 1f       	adc	r23, r23
    70b8:	88 1f       	adc	r24, r24
    70ba:	91 50       	subi	r25, 0x01	; 1
    70bc:	50 40       	sbci	r21, 0x00	; 0
    70be:	a9 f7       	brne	.-22     	; 0x70aa <__mulsf3_pse+0x64>
    70c0:	9e 3f       	cpi	r25, 0xFE	; 254
    70c2:	51 05       	cpc	r21, r1
    70c4:	70 f0       	brcs	.+28     	; 0x70e2 <__mulsf3_pse+0x9c>
    70c6:	f7 ce       	rjmp	.-530    	; 0x6eb6 <__fp_inf>
    70c8:	9f cf       	rjmp	.-194    	; 0x7008 <__fp_szero>
    70ca:	5f 3f       	cpi	r21, 0xFF	; 255
    70cc:	ec f3       	brlt	.-6      	; 0x70c8 <__mulsf3_pse+0x82>
    70ce:	98 3e       	cpi	r25, 0xE8	; 232
    70d0:	dc f3       	brlt	.-10     	; 0x70c8 <__mulsf3_pse+0x82>
    70d2:	86 95       	lsr	r24
    70d4:	77 95       	ror	r23
    70d6:	67 95       	ror	r22
    70d8:	b7 95       	ror	r27
    70da:	f7 95       	ror	r31
    70dc:	e7 95       	ror	r30
    70de:	9f 5f       	subi	r25, 0xFF	; 255
    70e0:	c1 f7       	brne	.-16     	; 0x70d2 <__mulsf3_pse+0x8c>
    70e2:	fe 2b       	or	r31, r30
    70e4:	88 0f       	add	r24, r24
    70e6:	91 1d       	adc	r25, r1
    70e8:	96 95       	lsr	r25
    70ea:	87 95       	ror	r24
    70ec:	97 f9       	bld	r25, 7
    70ee:	08 95       	ret

000070f0 <sin>:
    70f0:	9f 93       	push	r25
    70f2:	1e df       	rcall	.-452    	; 0x6f30 <__fp_rempio2>
    70f4:	0f 90       	pop	r0
    70f6:	07 fc       	sbrc	r0, 7
    70f8:	ee 5f       	subi	r30, 0xFE	; 254
    70fa:	52 cf       	rjmp	.-348    	; 0x6fa0 <__fp_sinus>
    70fc:	11 f4       	brne	.+4      	; 0x7102 <sin+0x12>
    70fe:	0e f4       	brtc	.+2      	; 0x7102 <sin+0x12>
    7100:	e0 ce       	rjmp	.-576    	; 0x6ec2 <__fp_nan>
    7102:	41 c0       	rjmp	.+130    	; 0x7186 <__fp_mpack>

00007104 <sqrt>:
    7104:	66 df       	rcall	.-308    	; 0x6fd2 <__fp_splitA>
    7106:	d0 f3       	brcs	.-12     	; 0x70fc <sin+0xc>
    7108:	99 23       	and	r25, r25
    710a:	d9 f3       	breq	.-10     	; 0x7102 <sin+0x12>
    710c:	ce f3       	brts	.-14     	; 0x7100 <sin+0x10>
    710e:	9f 57       	subi	r25, 0x7F	; 127
    7110:	55 0b       	sbc	r21, r21
    7112:	87 ff       	sbrs	r24, 7
    7114:	46 d0       	rcall	.+140    	; 0x71a2 <__fp_norm2>
    7116:	00 24       	eor	r0, r0
    7118:	a0 e6       	ldi	r26, 0x60	; 96
    711a:	40 ea       	ldi	r20, 0xA0	; 160
    711c:	90 01       	movw	r18, r0
    711e:	80 58       	subi	r24, 0x80	; 128
    7120:	56 95       	lsr	r21
    7122:	97 95       	ror	r25
    7124:	28 f4       	brcc	.+10     	; 0x7130 <sqrt+0x2c>
    7126:	80 5c       	subi	r24, 0xC0	; 192
    7128:	66 0f       	add	r22, r22
    712a:	77 1f       	adc	r23, r23
    712c:	88 1f       	adc	r24, r24
    712e:	20 f0       	brcs	.+8      	; 0x7138 <sqrt+0x34>
    7130:	26 17       	cp	r18, r22
    7132:	37 07       	cpc	r19, r23
    7134:	48 07       	cpc	r20, r24
    7136:	30 f4       	brcc	.+12     	; 0x7144 <sqrt+0x40>
    7138:	62 1b       	sub	r22, r18
    713a:	73 0b       	sbc	r23, r19
    713c:	84 0b       	sbc	r24, r20
    713e:	20 29       	or	r18, r0
    7140:	31 29       	or	r19, r1
    7142:	4a 2b       	or	r20, r26
    7144:	a6 95       	lsr	r26
    7146:	17 94       	ror	r1
    7148:	07 94       	ror	r0
    714a:	20 25       	eor	r18, r0
    714c:	31 25       	eor	r19, r1
    714e:	4a 27       	eor	r20, r26
    7150:	58 f7       	brcc	.-42     	; 0x7128 <sqrt+0x24>
    7152:	66 0f       	add	r22, r22
    7154:	77 1f       	adc	r23, r23
    7156:	88 1f       	adc	r24, r24
    7158:	20 f0       	brcs	.+8      	; 0x7162 <sqrt+0x5e>
    715a:	26 17       	cp	r18, r22
    715c:	37 07       	cpc	r19, r23
    715e:	48 07       	cpc	r20, r24
    7160:	30 f4       	brcc	.+12     	; 0x716e <sqrt+0x6a>
    7162:	62 0b       	sbc	r22, r18
    7164:	73 0b       	sbc	r23, r19
    7166:	84 0b       	sbc	r24, r20
    7168:	20 0d       	add	r18, r0
    716a:	31 1d       	adc	r19, r1
    716c:	41 1d       	adc	r20, r1
    716e:	a0 95       	com	r26
    7170:	81 f7       	brne	.-32     	; 0x7152 <sqrt+0x4e>
    7172:	b9 01       	movw	r22, r18
    7174:	84 2f       	mov	r24, r20
    7176:	91 58       	subi	r25, 0x81	; 129
    7178:	88 0f       	add	r24, r24
    717a:	96 95       	lsr	r25
    717c:	87 95       	ror	r24
    717e:	08 95       	ret

00007180 <square>:
    7180:	9b 01       	movw	r18, r22
    7182:	ac 01       	movw	r20, r24
    7184:	52 cf       	rjmp	.-348    	; 0x702a <__mulsf3>

00007186 <__fp_mpack>:
    7186:	9f 3f       	cpi	r25, 0xFF	; 255
    7188:	31 f0       	breq	.+12     	; 0x7196 <__fp_mpack_finite+0xc>

0000718a <__fp_mpack_finite>:
    718a:	91 50       	subi	r25, 0x01	; 1
    718c:	20 f4       	brcc	.+8      	; 0x7196 <__fp_mpack_finite+0xc>
    718e:	87 95       	ror	r24
    7190:	77 95       	ror	r23
    7192:	67 95       	ror	r22
    7194:	b7 95       	ror	r27
    7196:	88 0f       	add	r24, r24
    7198:	91 1d       	adc	r25, r1
    719a:	96 95       	lsr	r25
    719c:	87 95       	ror	r24
    719e:	97 f9       	bld	r25, 7
    71a0:	08 95       	ret

000071a2 <__fp_norm2>:
    71a2:	91 50       	subi	r25, 0x01	; 1
    71a4:	50 40       	sbci	r21, 0x00	; 0
    71a6:	66 0f       	add	r22, r22
    71a8:	77 1f       	adc	r23, r23
    71aa:	88 1f       	adc	r24, r24
    71ac:	d2 f7       	brpl	.-12     	; 0x71a2 <__fp_norm2>
    71ae:	08 95       	ret

000071b0 <__fp_powsodd>:
    71b0:	9f 93       	push	r25
    71b2:	8f 93       	push	r24
    71b4:	7f 93       	push	r23
    71b6:	6f 93       	push	r22
    71b8:	ff 93       	push	r31
    71ba:	ef 93       	push	r30
    71bc:	9b 01       	movw	r18, r22
    71be:	ac 01       	movw	r20, r24
    71c0:	34 df       	rcall	.-408    	; 0x702a <__mulsf3>
    71c2:	ef 91       	pop	r30
    71c4:	ff 91       	pop	r31
    71c6:	80 de       	rcall	.-768    	; 0x6ec8 <__fp_powser>
    71c8:	2f 91       	pop	r18
    71ca:	3f 91       	pop	r19
    71cc:	4f 91       	pop	r20
    71ce:	5f 91       	pop	r21
    71d0:	2c cf       	rjmp	.-424    	; 0x702a <__mulsf3>

000071d2 <__mulsi3>:
    71d2:	db 01       	movw	r26, r22
    71d4:	8f 93       	push	r24
    71d6:	9f 93       	push	r25
    71d8:	5b d0       	rcall	.+182    	; 0x7290 <__muluhisi3>
    71da:	bf 91       	pop	r27
    71dc:	af 91       	pop	r26
    71de:	a2 9f       	mul	r26, r18
    71e0:	80 0d       	add	r24, r0
    71e2:	91 1d       	adc	r25, r1
    71e4:	a3 9f       	mul	r26, r19
    71e6:	90 0d       	add	r25, r0
    71e8:	b2 9f       	mul	r27, r18
    71ea:	90 0d       	add	r25, r0
    71ec:	11 24       	eor	r1, r1
    71ee:	08 95       	ret

000071f0 <__divmodhi4>:
    71f0:	97 fb       	bst	r25, 7
    71f2:	07 2e       	mov	r0, r23
    71f4:	16 f4       	brtc	.+4      	; 0x71fa <__divmodhi4+0xa>
    71f6:	00 94       	com	r0
    71f8:	06 d0       	rcall	.+12     	; 0x7206 <__divmodhi4_neg1>
    71fa:	77 fd       	sbrc	r23, 7
    71fc:	08 d0       	rcall	.+16     	; 0x720e <__divmodhi4_neg2>
    71fe:	58 d0       	rcall	.+176    	; 0x72b0 <__udivmodhi4>
    7200:	07 fc       	sbrc	r0, 7
    7202:	05 d0       	rcall	.+10     	; 0x720e <__divmodhi4_neg2>
    7204:	3e f4       	brtc	.+14     	; 0x7214 <__divmodhi4_exit>

00007206 <__divmodhi4_neg1>:
    7206:	90 95       	com	r25
    7208:	81 95       	neg	r24
    720a:	9f 4f       	sbci	r25, 0xFF	; 255
    720c:	08 95       	ret

0000720e <__divmodhi4_neg2>:
    720e:	70 95       	com	r23
    7210:	61 95       	neg	r22
    7212:	7f 4f       	sbci	r23, 0xFF	; 255

00007214 <__divmodhi4_exit>:
    7214:	08 95       	ret

00007216 <__udivmodsi4>:
    7216:	a1 e2       	ldi	r26, 0x21	; 33
    7218:	1a 2e       	mov	r1, r26
    721a:	aa 1b       	sub	r26, r26
    721c:	bb 1b       	sub	r27, r27
    721e:	fd 01       	movw	r30, r26
    7220:	0d c0       	rjmp	.+26     	; 0x723c <__udivmodsi4_ep>

00007222 <__udivmodsi4_loop>:
    7222:	aa 1f       	adc	r26, r26
    7224:	bb 1f       	adc	r27, r27
    7226:	ee 1f       	adc	r30, r30
    7228:	ff 1f       	adc	r31, r31
    722a:	a2 17       	cp	r26, r18
    722c:	b3 07       	cpc	r27, r19
    722e:	e4 07       	cpc	r30, r20
    7230:	f5 07       	cpc	r31, r21
    7232:	20 f0       	brcs	.+8      	; 0x723c <__udivmodsi4_ep>
    7234:	a2 1b       	sub	r26, r18
    7236:	b3 0b       	sbc	r27, r19
    7238:	e4 0b       	sbc	r30, r20
    723a:	f5 0b       	sbc	r31, r21

0000723c <__udivmodsi4_ep>:
    723c:	66 1f       	adc	r22, r22
    723e:	77 1f       	adc	r23, r23
    7240:	88 1f       	adc	r24, r24
    7242:	99 1f       	adc	r25, r25
    7244:	1a 94       	dec	r1
    7246:	69 f7       	brne	.-38     	; 0x7222 <__udivmodsi4_loop>
    7248:	60 95       	com	r22
    724a:	70 95       	com	r23
    724c:	80 95       	com	r24
    724e:	90 95       	com	r25
    7250:	9b 01       	movw	r18, r22
    7252:	ac 01       	movw	r20, r24
    7254:	bd 01       	movw	r22, r26
    7256:	cf 01       	movw	r24, r30
    7258:	08 95       	ret

0000725a <__divmodsi4>:
    725a:	05 2e       	mov	r0, r21
    725c:	97 fb       	bst	r25, 7
    725e:	16 f4       	brtc	.+4      	; 0x7264 <__divmodsi4+0xa>
    7260:	00 94       	com	r0
    7262:	06 d0       	rcall	.+12     	; 0x7270 <__divmodsi4_neg1>
    7264:	57 fd       	sbrc	r21, 7
    7266:	0c d0       	rcall	.+24     	; 0x7280 <__divmodsi4_neg2>
    7268:	d6 df       	rcall	.-84     	; 0x7216 <__udivmodsi4>
    726a:	07 fc       	sbrc	r0, 7
    726c:	09 d0       	rcall	.+18     	; 0x7280 <__divmodsi4_neg2>
    726e:	7e f4       	brtc	.+30     	; 0x728e <__divmodsi4_exit>

00007270 <__divmodsi4_neg1>:
    7270:	90 95       	com	r25
    7272:	80 95       	com	r24
    7274:	70 95       	com	r23
    7276:	61 95       	neg	r22
    7278:	7f 4f       	sbci	r23, 0xFF	; 255
    727a:	8f 4f       	sbci	r24, 0xFF	; 255
    727c:	9f 4f       	sbci	r25, 0xFF	; 255
    727e:	08 95       	ret

00007280 <__divmodsi4_neg2>:
    7280:	50 95       	com	r21
    7282:	40 95       	com	r20
    7284:	30 95       	com	r19
    7286:	21 95       	neg	r18
    7288:	3f 4f       	sbci	r19, 0xFF	; 255
    728a:	4f 4f       	sbci	r20, 0xFF	; 255
    728c:	5f 4f       	sbci	r21, 0xFF	; 255

0000728e <__divmodsi4_exit>:
    728e:	08 95       	ret

00007290 <__muluhisi3>:
    7290:	23 d0       	rcall	.+70     	; 0x72d8 <__umulhisi3>
    7292:	a5 9f       	mul	r26, r21
    7294:	90 0d       	add	r25, r0
    7296:	b4 9f       	mul	r27, r20
    7298:	90 0d       	add	r25, r0
    729a:	a4 9f       	mul	r26, r20
    729c:	80 0d       	add	r24, r0
    729e:	91 1d       	adc	r25, r1
    72a0:	11 24       	eor	r1, r1
    72a2:	08 95       	ret

000072a4 <__mulshisi3>:
    72a4:	b7 ff       	sbrs	r27, 7
    72a6:	f4 cf       	rjmp	.-24     	; 0x7290 <__muluhisi3>

000072a8 <__mulohisi3>:
    72a8:	f3 df       	rcall	.-26     	; 0x7290 <__muluhisi3>
    72aa:	82 1b       	sub	r24, r18
    72ac:	93 0b       	sbc	r25, r19
    72ae:	08 95       	ret

000072b0 <__udivmodhi4>:
    72b0:	aa 1b       	sub	r26, r26
    72b2:	bb 1b       	sub	r27, r27
    72b4:	51 e1       	ldi	r21, 0x11	; 17
    72b6:	07 c0       	rjmp	.+14     	; 0x72c6 <__udivmodhi4_ep>

000072b8 <__udivmodhi4_loop>:
    72b8:	aa 1f       	adc	r26, r26
    72ba:	bb 1f       	adc	r27, r27
    72bc:	a6 17       	cp	r26, r22
    72be:	b7 07       	cpc	r27, r23
    72c0:	10 f0       	brcs	.+4      	; 0x72c6 <__udivmodhi4_ep>
    72c2:	a6 1b       	sub	r26, r22
    72c4:	b7 0b       	sbc	r27, r23

000072c6 <__udivmodhi4_ep>:
    72c6:	88 1f       	adc	r24, r24
    72c8:	99 1f       	adc	r25, r25
    72ca:	5a 95       	dec	r21
    72cc:	a9 f7       	brne	.-22     	; 0x72b8 <__udivmodhi4_loop>
    72ce:	80 95       	com	r24
    72d0:	90 95       	com	r25
    72d2:	bc 01       	movw	r22, r24
    72d4:	cd 01       	movw	r24, r26
    72d6:	08 95       	ret

000072d8 <__umulhisi3>:
    72d8:	a2 9f       	mul	r26, r18
    72da:	b0 01       	movw	r22, r0
    72dc:	b3 9f       	mul	r27, r19
    72de:	c0 01       	movw	r24, r0
    72e0:	a3 9f       	mul	r26, r19
    72e2:	01 d0       	rcall	.+2      	; 0x72e6 <__umulhisi3+0xe>
    72e4:	b2 9f       	mul	r27, r18
    72e6:	70 0d       	add	r23, r0
    72e8:	81 1d       	adc	r24, r1
    72ea:	11 24       	eor	r1, r1
    72ec:	91 1d       	adc	r25, r1
    72ee:	08 95       	ret

000072f0 <_exit>:
    72f0:	f8 94       	cli

000072f2 <__stop_program>:
    72f2:	ff cf       	rjmp	.-2      	; 0x72f2 <__stop_program>
